<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="image__gtest_8cpp" kind="file" language="C++">
    <compoundname>image_gtest.cpp</compoundname>
    <includes refid="test__utils_8h" local="yes">test_utils.h</includes>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">opencv2/core/mat.hpp</includes>
    <includes refid="image_8h" local="no">rgbd/image.h</includes>
    <includes local="no">sensor_msgs/CameraInfo.h</includes>
    <incdepgraph>
      <node id="9">
        <label>sensor_msgs/CameraInfo.h</label>
      </node>
      <node id="11">
        <label>random</label>
        <link refid="cpp/header/random" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="10">
        <label>sensor_msgs/distortion_models.h</label>
      </node>
      <node id="6">
        <label>memory</label>
        <link refid="cpp/header/memory" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="2">
        <label>test_utils.h</label>
        <link refid="test__utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>image_geometry/pinhole_camera_model.h</label>
      </node>
      <node id="5">
        <label>rgbd/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>opencv2/core/mat.hpp</label>
      </node>
      <node id="3">
        <label>opencv2/core.hpp</label>
      </node>
      <node id="4">
        <label>rgbd/image.h</label>
        <link refid="image_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>gtest/gtest.h</label>
      </node>
      <node id="1">
        <label>image_gtest.cpp</label>
        <link refid="image__gtest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>rgbd_msgs/RGBD.h</label>
      </node>
      <node id="12">
        <label>string</label>
        <link refid="cpp/header/string" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="image__gtest_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/image_gtest.cpp" line="77" column="5" bodyfile="test/image_gtest.cpp" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="image__gtest_8cpp_1a2a10b13ad5fa293006ce2b6ce7fda962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Image, EmptyClone)</argsstring>
        <name>TEST</name>
        <param>
          <type>Image</type>
        </param>
        <param>
          <type>EmptyClone</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/image_gtest.cpp" line="12" column="1" bodyfile="test/image_gtest.cpp" bodystart="12" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="image__gtest_8cpp_1ab84b220044fac268b4f311dd54d48d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Image, NotEqual)</argsstring>
        <name>TEST</name>
        <param>
          <type>Image</type>
        </param>
        <param>
          <type>NotEqual</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/image_gtest.cpp" line="30" column="1" bodyfile="test/image_gtest.cpp" bodystart="30" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="image__gtest_8cpp_1ad1baeaf2248f382e872869e111117fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Image, RandomClone)</argsstring>
        <name>TEST</name>
        <param>
          <type>Image</type>
        </param>
        <param>
          <type>RandomClone</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/image_gtest.cpp" line="21" column="1" bodyfile="test/image_gtest.cpp" bodystart="21" bodyend="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="test__utils_8h" kindref="compound">test_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;opencv2/core/mat.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="image_8h" kindref="compound">rgbd/image.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sensor_msgs/CameraInfo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="image__gtest_8cpp_1a2a10b13ad5fa293006ce2b6ce7fda962" refkind="member"><highlight class="normal"><ref refid="image__gtest_8cpp_1a2a10b13ad5fa293006ce2b6ce7fda962" kindref="member">TEST</ref>(Image,<sp/>EmptyClone)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref><sp/>image1;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref><sp/>image2<sp/>=<sp/>image1.<ref refid="classrgbd_1_1Image_1aeb5301960497e0148d5a2c225e799021" kindref="member">clone</ref>();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(image1,<sp/>image2);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(image1<sp/>!=<sp/>image2);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="image__gtest_8cpp_1ad1baeaf2248f382e872869e111117fac" refkind="member"><highlight class="normal"><ref refid="image__gtest_8cpp_1a2a10b13ad5fa293006ce2b6ce7fda962" kindref="member">TEST</ref>(Image,<sp/>RandomClone)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref><sp/>image1<sp/>=<sp/><ref refid="namespacergbd_1a4d11f15ef65f8d50a191b00022843d6f" kindref="member">rgbd::generateRandomImage</ref>();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref><sp/>image2<sp/>=<sp/>image1.<ref refid="classrgbd_1_1Image_1aeb5301960497e0148d5a2c225e799021" kindref="member">clone</ref>();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(image1,<sp/>image2);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(image1<sp/>!=<sp/>image2);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="image__gtest_8cpp_1ab84b220044fac268b4f311dd54d48d8b" refkind="member"><highlight class="normal"><ref refid="image__gtest_8cpp_1a2a10b13ad5fa293006ce2b6ce7fda962" kindref="member">TEST</ref>(Image,<sp/>NotEqual)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref><sp/>image1<sp/>=<sp/><ref refid="namespacergbd_1a4d11f15ef65f8d50a191b00022843d6f" kindref="member">rgbd::generateRandomImage</ref>();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref><sp/>image2<sp/>=<sp/><ref refid="namespacergbd_1a4d11f15ef65f8d50a191b00022843d6f" kindref="member">rgbd::generateRandomImage</ref>();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Two<sp/>random<sp/>images</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(image1<sp/>==<sp/>image2);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(image1,<sp/>image2);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Different<sp/>frame_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>image2<sp/>=<sp/>image1.<ref refid="classrgbd_1_1Image_1aeb5301960497e0148d5a2c225e799021" kindref="member">clone</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>image2.<ref refid="classrgbd_1_1Image_1a2a533e05c3eb97fa796d3bec28b73740" kindref="member">setFrameId</ref>(</highlight><highlight class="stringliteral">&quot;bla&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(image1<sp/>==<sp/>image2);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(image1,<sp/>image2);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Different<sp/>timestamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>image2<sp/>=<sp/>image1.<ref refid="classrgbd_1_1Image_1aeb5301960497e0148d5a2c225e799021" kindref="member">clone</ref>();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>image2.<ref refid="classrgbd_1_1Image_1a22877f3a4f1bffa15f99ed5f82eb77d2" kindref="member">setTimestamp</ref>(image1.<ref refid="classrgbd_1_1Image_1af95fbf4484c856534f2f89130880b102" kindref="member">getTimestamp</ref>()+10.);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(image1<sp/>==<sp/>image2);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(image1,<sp/>image2);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Different<sp/>camera<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>image2<sp/>=<sp/>image1.<ref refid="classrgbd_1_1Image_1aeb5301960497e0148d5a2c225e799021" kindref="member">clone</ref>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>sensor_msgs::CameraInfo<sp/>cam_info<sp/>=<sp/>image2.<ref refid="classrgbd_1_1Image_1afdf1d1f95772540886ab6b908381d23a" kindref="member">getCameraModel</ref>().cameraInfo();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>cam_info.width<sp/>+=<sp/>10;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>image2.<ref refid="classrgbd_1_1Image_1acff317e768d012dea9a7d19a270d4345" kindref="member">setCameraInfo</ref>(cam_info);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(image1<sp/>==<sp/>image2);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(image1,<sp/>image2);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Different<sp/>depth<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>image2<sp/>=<sp/>image1.<ref refid="classrgbd_1_1Image_1aeb5301960497e0148d5a2c225e799021" kindref="member">clone</ref>();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>depth<sp/>=<sp/>image2.<ref refid="classrgbd_1_1Image_1a719f0390cfcc1c2b14023ee65ea24cb7" kindref="member">getDepthImage</ref>();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>depth.at&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;(0,<sp/>0)<sp/>+=<sp/>0.1;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>image2.<ref refid="classrgbd_1_1Image_1a076df0655b8634b09693faecb5e87934" kindref="member">setDepthImage</ref>(depth);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(image1<sp/>==<sp/>image2);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(image1,<sp/>image2);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Different<sp/>RGB<sp/>color<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>image2<sp/>=<sp/>image1.<ref refid="classrgbd_1_1Image_1aeb5301960497e0148d5a2c225e799021" kindref="member">clone</ref>();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>color<sp/>=<sp/>image2.<ref refid="classrgbd_1_1Image_1a6114b559a730737c88c239827d4b9f21" kindref="member">getRGBImage</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>color.at&lt;cv::Vec3b&gt;(0,<sp/>0)<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>image2.<ref refid="classrgbd_1_1Image_1add0a90ba9aca9403d5a9f311db9025af" kindref="member">setRGBImage</ref>(color);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(image1<sp/>==<sp/>image2);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_NE(image1,<sp/>image2);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Run<sp/>all<sp/>the<sp/>tests<sp/>that<sp/>were<sp/>declared<sp/>with<sp/>TEST()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="image__gtest_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="image__gtest_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="test/image_gtest.cpp"/>
  </compounddef>
</doxygen>
