<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacergbd" kind="namespace" language="C++">
    <compoundname>rgbd</compoundname>
    <innerclass refid="structrgbd_1_1BufferHeader" prot="public">rgbd::BufferHeader</innerclass>
    <innerclass refid="classrgbd_1_1Client" prot="public">rgbd::Client</innerclass>
    <innerclass refid="classrgbd_1_1ClientRGBD" prot="public">rgbd::ClientRGBD</innerclass>
    <innerclass refid="classrgbd_1_1ClientROS" prot="public">rgbd::ClientROS</innerclass>
    <innerclass refid="classrgbd_1_1ClientROSBase" prot="public">rgbd::ClientROSBase</innerclass>
    <innerclass refid="classrgbd_1_1ClientRosNodelet" prot="public">rgbd::ClientRosNodelet</innerclass>
    <innerclass refid="classrgbd_1_1ClientSHM" prot="public">rgbd::ClientSHM</innerclass>
    <innerclass refid="classrgbd_1_1Image" prot="public">rgbd::Image</innerclass>
    <innerclass refid="classrgbd_1_1ROSToRGBDNodelet" prot="public">rgbd::ROSToRGBDNodelet</innerclass>
    <innerclass refid="classrgbd_1_1Server" prot="public">rgbd::Server</innerclass>
    <innerclass refid="classrgbd_1_1ServerRGBD" prot="public">rgbd::ServerRGBD</innerclass>
    <innerclass refid="classrgbd_1_1ServerROS" prot="public">rgbd::ServerROS</innerclass>
    <innerclass refid="classrgbd_1_1ServerSHM" prot="public">rgbd::ServerSHM</innerclass>
    <innerclass refid="classrgbd_1_1View" prot="public">rgbd::View</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacergbd_1a536cce2803100aad52da0b0823c97aeb" prot="public" static="no" strong="no">
        <type></type>
        <name>CameraModelType</name>
        <enumvalue id="namespacergbd_1a536cce2803100aad52da0b0823c97aeba4488d74a38da38286fd189650a496fee" prot="public">
          <name>CAMERA_MODEL_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacergbd_1a536cce2803100aad52da0b0823c97aeba582047eb46b18c8ac301f2d665bed206" prot="public">
          <name>CAMERA_MODEL_PINHOLE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="24" column="1" bodyfile="include/rgbd/image.h" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="enum" id="namespacergbd_1a1aa4c6e03c75007b29c04307d4ddb89b" prot="public" static="no" strong="no">
        <type></type>
        <name>DepthStorageType</name>
        <enumvalue id="namespacergbd_1a1aa4c6e03c75007b29c04307d4ddb89ba2d7f007fbe749f21fe25d9fb4dbecef9" prot="public">
          <name>DEPTH_STORAGE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacergbd_1a1aa4c6e03c75007b29c04307d4ddb89ba4bb10bdec05a06c1bcdd2915ad016b69" prot="public">
          <name>DEPTH_STORAGE_LOSSLESS</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacergbd_1a1aa4c6e03c75007b29c04307d4ddb89ba492e18cd63683d4cca2f5402e54bc0f2" prot="public">
          <name>DEPTH_STORAGE_PNG</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="37" column="1" bodyfile="include/rgbd/image.h" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="namespacergbd_1ad7baf6301bf2af159dbf2e15d800ae10" prot="public" static="no" strong="no">
        <type></type>
        <name>RGBStorageType</name>
        <enumvalue id="namespacergbd_1ad7baf6301bf2af159dbf2e15d800ae10a667b1842f418dd41fa4ff6a874886c52" prot="public">
          <name>RGB_STORAGE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacergbd_1ad7baf6301bf2af159dbf2e15d800ae10a3ea098736136689906afc944da02d5bd" prot="public">
          <name>RGB_STORAGE_LOSSLESS</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacergbd_1ad7baf6301bf2af159dbf2e15d800ae10a314b0c4fe8c34805b980577d0b097f39" prot="public">
          <name>RGB_STORAGE_JPG</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="30" column="1" bodyfile="include/rgbd/image.h" bodystart="29" bodyend="34"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacergbd_1a11f6d8b65b491dba632371e8355a99df" prot="public" static="no">
        <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; const <ref refid="classrgbd_1_1Image" kindref="compound">Image</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;const Image&gt; rgbd::ImageConstPtr</definition>
        <argsstring></argsstring>
        <name>ImageConstPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/types.h" line="10" column="25" bodyfile="include/rgbd/types.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacergbd_1a902658707a2f3b946ec8bd47e381bb1d" prot="public" static="no">
        <type><ref refid="cpp/memory/shared_ptr" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::shared_ptr</ref>&lt; <ref refid="classrgbd_1_1Image" kindref="compound">Image</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;Image&gt; rgbd::ImagePtr</definition>
        <argsstring></argsstring>
        <name>ImagePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/types.h" line="9" column="25" bodyfile="include/rgbd/types.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacergbd_1ae4d370fb1810905487f4c2ba2aca446d" prot="public" static="no">
        <type>message_filters::sync_policies::ApproximateTime&lt; sensor_msgs::Image, sensor_msgs::Image &gt;</type>
        <definition>typedef message_filters::sync_policies::ApproximateTime&lt;sensor_msgs::Image, sensor_msgs::Image&gt; rgbd::RGBDApproxPolicy</definition>
        <argsstring></argsstring>
        <name>RGBDApproxPolicy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/client_ros_base.h" line="27" column="57" bodyfile="include/rgbd/client_ros_base.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacergbd_1abd23a813d17712a6098845c353838dd3" prot="public" static="yes" mutable="no">
        <type>const static int</type>
        <definition>const static int rgbd::SERIALIZATION_VERSION</definition>
        <argsstring></argsstring>
        <name>SERIALIZATION_VERSION</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serialization.cpp" line="15" column="18" bodyfile="src/serialization.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacergbd_1a4a2c2b1a757ba3a3ab5a16e5759539b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rgbd::convert</definition>
        <argsstring>(const cv::Mat &amp;image, const geo::DepthCamera &amp;cam_model, sensor_msgs::Image &amp;image_msg, sensor_msgs::CameraInfo &amp;cam_model_msg)</argsstring>
        <name>convert</name>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="classgeo_1_1DepthCamera" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::DepthCamera</ref> &amp;</type>
          <declname>cam_model</declname>
        </param>
        <param>
          <type>sensor_msgs::Image &amp;</type>
          <declname>image_msg</declname>
        </param>
        <param>
          <type>sensor_msgs::CameraInfo &amp;</type>
          <declname>cam_model_msg</declname>
        </param>
        <briefdescription>
<para>Convert either a rgb or depth image to image and CameraInfo message. Also rectifies the image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>rgb or depth image </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cam_model</parametername>
</parameternamelist>
<parameterdescription>
<para>Camera model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_msg</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classrgbd_1_1Image" kindref="compound">Image</ref> message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cam_model_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>CameraInfo message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ros/conversions.cpp" line="51" column="6" bodyfile="src/ros/conversions.cpp" bodystart="51" bodyend="84" declfile="include/rgbd/ros/conversions.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacergbd_1ad5d4205a8ad1f22d6d7c8aff77d5e798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rgbd::convert</definition>
        <argsstring>(const cv::Mat &amp;image, sensor_msgs::Image &amp;image_msg)</argsstring>
        <name>convert</name>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>sensor_msgs::Image &amp;</type>
          <declname>image_msg</declname>
        </param>
        <briefdescription>
<para>Convert either a rgb or depth image, cv::Mat, to an image message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>image matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>image message to fill </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ros/conversions.cpp" line="32" column="6" bodyfile="src/ros/conversions.cpp" bodystart="32" bodyend="47" declfile="include/rgbd/ros/conversions.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacergbd_1ae27c3cf929e24d5272c2b86d566c7d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rgbd::convert</definition>
        <argsstring>(const rgbd_msgs::RGBDConstPtr &amp;msg, rgbd::Image *&amp;image)</argsstring>
        <name>convert</name>
        <param>
          <type>const rgbd_msgs::RGBDConstPtr &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref> *&amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
<para>Convert rgbd message to an <ref refid="classrgbd_1_1Image" kindref="compound">Image</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to const rgbd message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>raw pointer to an <ref refid="classrgbd_1_1Image" kindref="compound">Image</ref>. In case it is a nullptr, a new instance will be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/ros/conversions.cpp" line="88" column="6" bodyfile="src/ros/conversions.cpp" bodystart="88" bodyend="195" declfile="include/rgbd/ros/conversions.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacergbd_1a05b2902108f1a624bc9cd350f9f1e5fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rgbd::deserialize</definition>
        <argsstring>(tue::serialization::InputArchive &amp;a, Image &amp;image)</argsstring>
        <name>deserialize</name>
        <param>
          <type><ref refid="classtue_1_1serialization_1_1InputArchive" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/tue_serialization/tags">tue::serialization::InputArchive</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classrgbd_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serialization.cpp" line="174" column="6" bodyfile="src/serialization.cpp" bodystart="174" bodyend="332" declfile="include/rgbd/serialization.h" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacergbd_1a4d11f15ef65f8d50a191b00022843d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref></type>
        <definition>rgbd::Image rgbd::generateRandomImage</definition>
        <argsstring>()</argsstring>
        <name>generateRandomImage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_utils.h" line="36" column="13" bodyfile="test/test_utils.h" bodystart="36" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacergbd_1a598bf883a8b7efcfb30725dd14f90485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string rgbd::get_hostname</definition>
        <argsstring>()</argsstring>
        <name>get_hostname</name>
        <briefdescription>
<para>Get the hostname of the current machine. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>hostname or an empty string in case of any error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utility.cpp" line="13" column="13" bodyfile="src/utility.cpp" bodystart="13" bodyend="23" declfile="include/rgbd/utility.h" declline="12" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacergbd_1abff59c3080d55e12f6cde50c3b58f814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; rgbd::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const rgbd::Image &amp;image)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/image.cpp" line="106" column="1" bodyfile="src/image.cpp" bodystart="106" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespacergbd_1a0b882f4fbf32bd9cfe482126b65879fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rgbd::pubHostnameThreadFunc</definition>
        <argsstring>(ros::NodeHandle &amp;nh, const std::string server_name, const std::string hostname, const float frequency)</argsstring>
        <name>pubHostnameThreadFunc</name>
        <param>
          <type>ros::NodeHandle &amp;</type>
          <declname>nh</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
          <declname>server_name</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
          <declname>hostname</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/server_shm.cpp" line="154" column="6" bodyfile="src/server_shm.cpp" bodystart="154" bodyend="165" declfile="include/rgbd/server_shm.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacergbd_1a6297db0960ac65bc727bb285c7814c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double rgbd::randomDouble</definition>
        <argsstring>(double min=0, double max=1000000)</argsstring>
        <name>randomDouble</name>
        <param>
          <type>double</type>
          <declname>min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
          <defval>1000000</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_utils.h" line="29" column="8" bodyfile="test/test_utils.h" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacergbd_1a34dc4a8fbec590c12646cc1398d48829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string rgbd::randomString</definition>
        <argsstring>(size_t length=10)</argsstring>
        <name>randomString</name>
        <param>
          <type>size_t</type>
          <declname>length</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_utils.h" line="17" column="13" bodyfile="test/test_utils.h" bodystart="17" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespacergbd_1a6ca677f400260dbf2e14ceb33aa32b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rgbd::serialize</definition>
        <argsstring>(const Image &amp;image, tue::serialization::OutputArchive &amp;a, RGBStorageType rgb_type=RGB_STORAGE_JPG, DepthStorageType depth_type=DEPTH_STORAGE_PNG)</argsstring>
        <name>serialize</name>
        <param>
          <type>const <ref refid="classrgbd_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="classtue_1_1serialization_1_1OutputArchive" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/tue_serialization/tags">tue::serialization::OutputArchive</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacergbd_1ad7baf6301bf2af159dbf2e15d800ae10" kindref="member">RGBStorageType</ref></type>
          <declname>rgb_type</declname>
          <defval><ref refid="namespacergbd_1ad7baf6301bf2af159dbf2e15d800ae10a314b0c4fe8c34805b980577d0b097f39" kindref="member">RGB_STORAGE_JPG</ref></defval>
        </param>
        <param>
          <type><ref refid="namespacergbd_1a1aa4c6e03c75007b29c04307d4ddb89b" kindref="member">DepthStorageType</ref></type>
          <declname>depth_type</declname>
          <defval><ref refid="namespacergbd_1a1aa4c6e03c75007b29c04307d4ddb89ba492e18cd63683d4cca2f5402e54bc0f2" kindref="member">DEPTH_STORAGE_PNG</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/serialization.cpp" line="23" column="6" bodyfile="src/serialization.cpp" bodystart="23" bodyend="166" declfile="include/rgbd/serialization.h" declline="16" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This client listens to <ref refid="classRGBD" kindref="compound">RGBD</ref> messages on a single topic or via shared memory, provides <ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref>.</para>
<para>This client listens to <ref refid="classRGBD" kindref="compound">RGBD</ref> messages on a single topic directing <ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref>.</para>
<para>This client converts rgb/depth/camera_info into RGBD::Image </para>
    </detaileddescription>
    <location file="include/rgbd/client.h" line="24" column="14"/>
  </compounddef>
</doxygen>
