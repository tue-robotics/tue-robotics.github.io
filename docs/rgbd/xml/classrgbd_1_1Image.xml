<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrgbd_1_1Image" kind="class" language="C++" prot="public">
    <compoundname>rgbd::Image</compoundname>
    <includes refid="image_8h" local="no">image.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classrgbd_1_1Image_1af58945d2b1c3dba7e977ac6059034db9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ClientSHM</definition>
        <argsstring></argsstring>
        <name>ClientSHM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="45" column="5" bodyfile="include/rgbd/image.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classrgbd_1_1Image_1a8f2693b203f0d0ebc4fea6be94eea649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool convert</definition>
        <argsstring>(const rgbd_msgs::RGBDConstPtr &amp;msg, rgbd::Image *&amp;image)</argsstring>
        <name>convert</name>
        <param>
          <type>const rgbd_msgs::RGBDConstPtr &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type><ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref> *&amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
<para>Convert rgbd message to an <ref refid="classrgbd_1_1Image" kindref="compound">Image</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to const rgbd message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>raw pointer to an <ref refid="classrgbd_1_1Image" kindref="compound">Image</ref>. In case it is a nullptr, a new instance will be created. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="168" column="17" bodyfile="src/ros/conversions.cpp" bodystart="88" bodyend="195"/>
      </memberdef>
      <memberdef kind="friend" id="classrgbd_1_1Image_1a19e30967ea7d4fa9eb8f5acb887b8904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool deserialize</definition>
        <argsstring>(tue::serialization::InputArchive &amp;a, Image &amp;image)</argsstring>
        <name>deserialize</name>
        <param>
          <type><ref refid="classtue_1_1serialization_1_1InputArchive" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/tue_serialization/tags">tue::serialization::InputArchive</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classrgbd_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="166" column="17" bodyfile="src/serialization.cpp" bodystart="174" bodyend="332"/>
      </memberdef>
      <memberdef kind="friend" id="classrgbd_1_1Image_1ae3ae65c17b9b4595813816aacd2679a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const rgbd::Image &amp;image)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="160" column="12" bodyfile="src/image.cpp" bodystart="106" bodyend="115"/>
      </memberdef>
      <memberdef kind="friend" id="classrgbd_1_1Image_1a36c5a94bce89430e61ca152ffccc7728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool serialize</definition>
        <argsstring>(const Image &amp;image, tue::serialization::OutputArchive &amp;a, RGBStorageType rgb_type, DepthStorageType depth_type)</argsstring>
        <name>serialize</name>
        <param>
          <type>const <ref refid="classrgbd_1_1Image" kindref="compound">Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="classtue_1_1serialization_1_1OutputArchive" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/tue_serialization/tags">tue::serialization::OutputArchive</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespacergbd_1ad7baf6301bf2af159dbf2e15d800ae10" kindref="member">RGBStorageType</ref></type>
          <declname>rgb_type</declname>
        </param>
        <param>
          <type><ref refid="namespacergbd_1a1aa4c6e03c75007b29c04307d4ddb89b" kindref="member">DepthStorageType</ref></type>
          <declname>depth_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="162" column="17" bodyfile="src/serialization.cpp" bodystart="23" bodyend="166"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classrgbd_1_1Image_1aac49fa078392cc7c454a22eb4e3664fb" prot="protected" static="no" mutable="no">
        <type>image_geometry::PinholeCameraModel</type>
        <definition>image_geometry::PinholeCameraModel rgbd::Image::cam_model_</definition>
        <argsstring></argsstring>
        <name>cam_model_</name>
        <briefdescription>
<para>Camera model Header in camera info should always be empty to prevent inconsistent behaviour of equality operators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="179" column="40" bodyfile="include/rgbd/image.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1Image_1a1dc04b2c727166a3abbcf5d8ee375727" prot="protected" static="no" mutable="no">
        <type>cv::Mat</type>
        <definition>cv::Mat rgbd::Image::depth_image_</definition>
        <argsstring></argsstring>
        <name>depth_image_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="173" column="13" bodyfile="include/rgbd/image.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1Image_1ab79844ffdf4d7d37f1f7157b0753ba92" prot="protected" static="no" mutable="no">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string rgbd::Image::frame_id_</definition>
        <argsstring></argsstring>
        <name>frame_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="181" column="17" bodyfile="include/rgbd/image.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1Image_1abe97b240cf7fec26b3dad36b0a8a8164" prot="protected" static="no" mutable="no">
        <type>cv::Mat</type>
        <definition>cv::Mat rgbd::Image::rgb_image_</definition>
        <argsstring></argsstring>
        <name>rgb_image_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="172" column="13" bodyfile="include/rgbd/image.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1Image_1a185cdc042e688e14b699c5835915bac0" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double rgbd::Image::timestamp_</definition>
        <argsstring></argsstring>
        <name>timestamp_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="182" column="12" bodyfile="include/rgbd/image.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrgbd_1_1Image_1aeb5301960497e0148d5a2c225e799021" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrgbd_1_1Image" kindref="compound">Image</ref></type>
        <definition>Image rgbd::Image::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <briefdescription>
<para>Create a clone of this image. The depth and RGB images will be cloned, so the new image will not share data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>New image. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="144" column="11" bodyfile="src/image.cpp" bodystart="56" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1afdf1d1f95772540886ab6b908381d23a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const image_geometry::PinholeCameraModel &amp;</type>
        <definition>const image_geometry::PinholeCameraModel&amp; rgbd::Image::getCameraModel</definition>
        <argsstring>() const</argsstring>
        <name>getCameraModel</name>
        <briefdescription>
<para>Get the camera model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Const reference to the camera model. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="96" column="53" bodyfile="include/rgbd/image.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1a719f0390cfcc1c2b14023ee65ea24cb7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const cv::Mat &amp;</type>
        <definition>const cv::Mat&amp; rgbd::Image::getDepthImage</definition>
        <argsstring>() const</argsstring>
        <name>getDepthImage</name>
        <briefdescription>
<para>Get the depth image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Const reference to the depth image. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="72" column="26" bodyfile="include/rgbd/image.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1a12c65a45b66bc800630ccf016dd2341f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
        <definition>const std::string&amp; rgbd::Image::getFrameId</definition>
        <argsstring>() const</argsstring>
        <name>getFrameId</name>
        <briefdescription>
<para>Get the frame_id. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Const reference to the frame_id. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="84" column="30" bodyfile="include/rgbd/image.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1a6114b559a730737c88c239827d4b9f21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const cv::Mat &amp;</type>
        <definition>const cv::Mat&amp; rgbd::Image::getRGBImage</definition>
        <argsstring>() const</argsstring>
        <name>getRGBImage</name>
        <briefdescription>
<para>Get the RGB color image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Const reference to the RGB color image. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="78" column="26" bodyfile="include/rgbd/image.h" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1af95fbf4484c856534f2f89130880b102" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double rgbd::Image::getTimestamp</definition>
        <argsstring>() const</argsstring>
        <name>getTimestamp</name>
        <briefdescription>
<para>Get the timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Copy of the timestamp. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="90" column="19" bodyfile="include/rgbd/image.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1a4d98b02994be508422a1634f71874d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rgbd::Image::Image</definition>
        <argsstring>()</argsstring>
        <name>Image</name>
        <briefdescription>
<para>Empty constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="52" column="5" bodyfile="src/image.cpp" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1a84d482191c532334ce6267221fb5bd2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rgbd::Image::Image</definition>
        <argsstring>(const cv::Mat &amp;rgb_image, const cv::Mat &amp;depth_image, const image_geometry::PinholeCameraModel &amp;cam_model, const std::string &amp;frame_id, double timestamp)</argsstring>
        <name>Image</name>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>rgb_image</declname>
        </param>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>depth_image</declname>
        </param>
        <param>
          <type>const image_geometry::PinholeCameraModel &amp;</type>
          <declname>cam_model</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>frame_id</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Full constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rgb_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Resulting RGB color image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>depth_image</parametername>
</parameternamelist>
<parameterdescription>
<para>Resulting depth image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cam_model</parametername>
</parameternamelist>
<parameterdescription>
<para>Camera model used to take the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame_id in which the image is taken. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>timestamp of the image. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="62" column="5" bodyfile="src/image.cpp" bodystart="19" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1aaf8ab4e7aa53c7bdc61cafa5206da96b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rgbd::Image::operator!=</definition>
        <argsstring>(const rgbd::Image &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Non-equality operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other image to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>non-equality </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="158" column="17" bodyfile="include/rgbd/image.h" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1a4ff8967fa5dd8db6b06f260b314f481e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rgbd::Image::operator==</definition>
        <argsstring>(const rgbd::Image &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classrgbd_1_1Image" kindref="compound">rgbd::Image</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equality operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other image to compare with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>equality </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="151" column="10" bodyfile="src/image.cpp" bodystart="71" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1acff317e768d012dea9a7d19a270d4345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rgbd::Image::setCameraInfo</definition>
        <argsstring>(sensor_msgs::CameraInfo cam_info)</argsstring>
        <name>setCameraInfo</name>
        <param>
          <type>sensor_msgs::CameraInfo</type>
          <declname>cam_info</declname>
        </param>
        <briefdescription>
<para>Set the camera model by using a camera info message. The frame_id and timestamp of the message will be emptied. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cam_info</parametername>
</parameternamelist>
<parameterdescription>
<para>The camera info message to construct the camera model. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="130" column="10" bodyfile="src/image.cpp" bodystart="34" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1a836e03f6c1d22be10cecb1490ca23c36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rgbd::Image::setCameraModel</definition>
        <argsstring>(const image_geometry::PinholeCameraModel &amp;cam_model)</argsstring>
        <name>setCameraModel</name>
        <param>
          <type>const image_geometry::PinholeCameraModel &amp;</type>
          <declname>cam_model</declname>
        </param>
        <briefdescription>
<para>Set the camera model. The frame_id and timestamp in the camera info inside the camera model will be emptied. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cam_model</parametername>
</parameternamelist>
<parameterdescription>
<para>The camera model to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="137" column="10" bodyfile="src/image.cpp" bodystart="45" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1a076df0655b8634b09693faecb5e87934" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rgbd::Image::setDepthImage</definition>
        <argsstring>(const cv::Mat &amp;depth_image)</argsstring>
        <name>setDepthImage</name>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>depth_image</declname>
        </param>
        <briefdescription>
<para>Set the depth image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>depth_image</parametername>
</parameternamelist>
<parameterdescription>
<para>The depth image to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="105" column="17" bodyfile="include/rgbd/image.h" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1a2a533e05c3eb97fa796d3bec28b73740" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rgbd::Image::setFrameId</definition>
        <argsstring>(const std::string &amp;frame_id)</argsstring>
        <name>setFrameId</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>frame_id</declname>
        </param>
        <briefdescription>
<para>Set the frame_id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frame_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame_id to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="117" column="17" bodyfile="include/rgbd/image.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1add0a90ba9aca9403d5a9f311db9025af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rgbd::Image::setRGBImage</definition>
        <argsstring>(const cv::Mat &amp;rgb_image)</argsstring>
        <name>setRGBImage</name>
        <param>
          <type>const cv::Mat &amp;</type>
          <declname>rgb_image</declname>
        </param>
        <briefdescription>
<para>Set the BGR color image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>depth_image</parametername>
</parameternamelist>
<parameterdescription>
<para>The BGR color image to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="111" column="17" bodyfile="include/rgbd/image.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1Image_1a22877f3a4f1bffa15f99ed5f82eb77d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rgbd::Image::setTimestamp</definition>
        <argsstring>(double timestamp)</argsstring>
        <name>setTimestamp</name>
        <param>
          <type>double</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Set the timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>The timestamp to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image.h" line="123" column="17" bodyfile="include/rgbd/image.h" bodystart="123" bodyend="123"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>rgbd::Image</label>
        <link refid="classrgbd_1_1Image"/>
        <childnode refid="2" relation="usage">
          <edgelabel>frame_id_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::string</label>
        <link refid="cpp/string/basic_string" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="include/rgbd/image.h" line="43" column="12" bodyfile="include/rgbd/image.h" bodystart="43" bodyend="184"/>
    <listofallmembers>
      <member refid="classrgbd_1_1Image_1aac49fa078392cc7c454a22eb4e3664fb" prot="protected" virt="non-virtual"><scope>rgbd::Image</scope><name>cam_model_</name></member>
      <member refid="classrgbd_1_1Image_1af58945d2b1c3dba7e977ac6059034db9" prot="private" virt="non-virtual"><scope>rgbd::Image</scope><name>ClientSHM</name></member>
      <member refid="classrgbd_1_1Image_1aeb5301960497e0148d5a2c225e799021" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>clone</name></member>
      <member refid="classrgbd_1_1Image_1a8f2693b203f0d0ebc4fea6be94eea649" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>convert</name></member>
      <member refid="classrgbd_1_1Image_1a1dc04b2c727166a3abbcf5d8ee375727" prot="protected" virt="non-virtual"><scope>rgbd::Image</scope><name>depth_image_</name></member>
      <member refid="classrgbd_1_1Image_1a19e30967ea7d4fa9eb8f5acb887b8904" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>deserialize</name></member>
      <member refid="classrgbd_1_1Image_1ab79844ffdf4d7d37f1f7157b0753ba92" prot="protected" virt="non-virtual"><scope>rgbd::Image</scope><name>frame_id_</name></member>
      <member refid="classrgbd_1_1Image_1afdf1d1f95772540886ab6b908381d23a" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>getCameraModel</name></member>
      <member refid="classrgbd_1_1Image_1a719f0390cfcc1c2b14023ee65ea24cb7" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>getDepthImage</name></member>
      <member refid="classrgbd_1_1Image_1a12c65a45b66bc800630ccf016dd2341f" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>getFrameId</name></member>
      <member refid="classrgbd_1_1Image_1a6114b559a730737c88c239827d4b9f21" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>getRGBImage</name></member>
      <member refid="classrgbd_1_1Image_1af95fbf4484c856534f2f89130880b102" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>getTimestamp</name></member>
      <member refid="classrgbd_1_1Image_1a4d98b02994be508422a1634f71874d12" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>Image</name></member>
      <member refid="classrgbd_1_1Image_1a84d482191c532334ce6267221fb5bd2d" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>Image</name></member>
      <member refid="classrgbd_1_1Image_1aaf8ab4e7aa53c7bdc61cafa5206da96b" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>operator!=</name></member>
      <member refid="classrgbd_1_1Image_1ae3ae65c17b9b4595813816aacd2679a5" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>operator&lt;&lt;</name></member>
      <member refid="classrgbd_1_1Image_1a4ff8967fa5dd8db6b06f260b314f481e" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>operator==</name></member>
      <member refid="classrgbd_1_1Image_1abe97b240cf7fec26b3dad36b0a8a8164" prot="protected" virt="non-virtual"><scope>rgbd::Image</scope><name>rgb_image_</name></member>
      <member refid="classrgbd_1_1Image_1a36c5a94bce89430e61ca152ffccc7728" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>serialize</name></member>
      <member refid="classrgbd_1_1Image_1acff317e768d012dea9a7d19a270d4345" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>setCameraInfo</name></member>
      <member refid="classrgbd_1_1Image_1a836e03f6c1d22be10cecb1490ca23c36" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>setCameraModel</name></member>
      <member refid="classrgbd_1_1Image_1a076df0655b8634b09693faecb5e87934" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>setDepthImage</name></member>
      <member refid="classrgbd_1_1Image_1a2a533e05c3eb97fa796d3bec28b73740" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>setFrameId</name></member>
      <member refid="classrgbd_1_1Image_1add0a90ba9aca9403d5a9f311db9025af" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>setRGBImage</name></member>
      <member refid="classrgbd_1_1Image_1a22877f3a4f1bffa15f99ed5f82eb77d2" prot="public" virt="non-virtual"><scope>rgbd::Image</scope><name>setTimestamp</name></member>
      <member refid="classrgbd_1_1Image_1a185cdc042e688e14b699c5835915bac0" prot="protected" virt="non-virtual"><scope>rgbd::Image</scope><name>timestamp_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
