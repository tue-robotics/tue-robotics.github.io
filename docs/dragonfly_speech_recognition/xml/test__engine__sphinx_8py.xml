<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__engine__sphinx_8py" kind="file" language="Python">
    <compoundname>test_engine_sphinx.py</compoundname>
    <innerclass refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests" prot="public">dragonfly::test::test_engine_sphinx::EngineTests</innerclass>
    <innerclass refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1MockLoggingHandler" prot="public">dragonfly::test::test_engine_sphinx::MockLoggingHandler</innerclass>
    <innerclass refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester" prot="public">dragonfly::test::test_engine_sphinx::RecognitionObserverTester</innerclass>
    <innerclass refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase" prot="public">dragonfly::test::test_engine_sphinx::SphinxEngineCase</innerclass>
    <innernamespace refid="namespacedragonfly_1_1test_1_1test__engine__sphinx">dragonfly::test::test_engine_sphinx</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacedragonfly_1_1test_1_1test__engine__sphinx" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">Tests<sp/>for<sp/>the<sp/>CMU<sp/>Pocket<sp/>Sphinx<sp/>engine</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral">Most<sp/>engine<sp/>functionality<sp/>is<sp/>tested<sp/>here,<sp/>although<sp/>the<sp/>tests<sp/>are<sp/>done</highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">entirely<sp/>via<sp/>`mimic`,<sp/>so<sp/>there<sp/>are<sp/>some<sp/>things<sp/>which<sp/>have<sp/>to<sp/>be<sp/>tested</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">manually.</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral">These<sp/>tests<sp/>assume<sp/>the<sp/>US<sp/>English<sp/>pronunciation<sp/>dictionary,<sp/>acoustic<sp/>and</highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral">language<sp/>models<sp/>distributed<sp/>with<sp/>the<sp/>`pocketsphinx`<sp/>Python<sp/>package<sp/>are<sp/>used.</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unittest</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logging</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines" kindref="compound">dragonfly.engines</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>(EngineBase,<sp/>EngineError,<sp/>MimicFailure,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_engine)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements" kindref="compound">dragonfly.grammar.elements</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Literal,<sp/>Sequence,<sp/>ListRef</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1list" kindref="compound">dragonfly.grammar.list</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>List</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1grammar__base" kindref="compound">dragonfly.grammar.grammar_base</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Grammar</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1rule__base" kindref="compound">dragonfly.grammar.rule_base</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Rule</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1recobs" kindref="compound">dragonfly.grammar.recobs</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>RecognitionObserver</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1rule__compound" kindref="compound">dragonfly.grammar.rule_compound</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>CompoundRule</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1test" kindref="compound">dragonfly.test</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>(ElementTester,<sp/>RuleTestGrammar)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1MockLoggingHandler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1MockLoggingHandler" kindref="compound">MockLoggingHandler</ref>(logging.Handler):</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Mock<sp/>logging<sp/>handler<sp/>to<sp/>check<sp/>for<sp/>expected<sp/>logs.</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Adapted<sp/>this<sp/>from<sp/>a<sp/>Stack<sp/>Overflow<sp/>answer:<sp/>https://stackoverflow.com/a/1049375</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1MockLoggingHandler_1aa15470ef219f8219d372b71ba398f50a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1MockLoggingHandler_1aa15470ef219f8219d372b71ba398f50a" kindref="member">__init__</ref>(self,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="34" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1MockLoggingHandler_1ae34752e647c4eeab3c4ecba8429bb4b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1MockLoggingHandler_1ae34752e647c4eeab3c4ecba8429bb4b8" kindref="member">messages</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;debug&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;info&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;warning&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;error&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;critical&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging.Handler.__init__(self,<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1MockLoggingHandler_1aaf71f41f81f43017220dd8172c6898da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1MockLoggingHandler_1aaf71f41f81f43017220dd8172c6898da" kindref="member">emit</ref>(self,<sp/>record):</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1MockLoggingHandler_1ae34752e647c4eeab3c4ecba8429bb4b8" kindref="member">messages</ref>[record.levelname.lower()].append(record.getMessage())</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester" kindref="compound">RecognitionObserverTester</ref>(<ref refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver" kindref="compound">RecognitionObserver</ref>):</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>RecognitionObserver<sp/>class<sp/>from<sp/>the<sp/>recobs<sp/>doctests.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1ad994621e56ea920cdaa1213f87b5f75a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1ad994621e56ea920cdaa1213f87b5f75a" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecognitionObserver.__init__(self)</highlight></codeline>
<codeline lineno="52" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1a724f47f6487c86ff9fda56fb2b48e0d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1a724f47f6487c86ff9fda56fb2b48e0d1" kindref="member">waiting</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1afac172667613930081967eb3fa53a6e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1afac172667613930081967eb3fa53a6e7" kindref="member">words</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1af3d909c38bc8b7b21fdad75f0a057589" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1af3d909c38bc8b7b21fdad75f0a057589" kindref="member">on_begin</ref>(self):</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1a724f47f6487c86ff9fda56fb2b48e0d1" kindref="member">waiting</ref><sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1afac172667613930081967eb3fa53a6e7" kindref="member">words</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1a9ae730de2b97985f70244acf51a766ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1a9ae730de2b97985f70244acf51a766ae" kindref="member">on_recognition</ref>(self,<sp/>words):</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1a724f47f6487c86ff9fda56fb2b48e0d1" kindref="member">waiting</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1afac172667613930081967eb3fa53a6e7" kindref="member">words</ref><sp/>=<sp/>words</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1a3b4400160ddf51035c4899569d9dc1cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1a3b4400160ddf51035c4899569d9dc1cf" kindref="member">on_failure</ref>(self):</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1a724f47f6487c86ff9fda56fb2b48e0d1" kindref="member">waiting</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1afac172667613930081967eb3fa53a6e7" kindref="member">words</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase" kindref="compound">SphinxEngineCase</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Base<sp/>TestCase<sp/>class<sp/>for<sp/>Sphinx<sp/>engine<sp/>tests</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a109b4079a7de7c75d63367e074ad9ad4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>log<sp/>=<sp/>logging.getLogger(</highlight><highlight class="stringliteral">&quot;engine&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="74" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac9f79da30ec7de020f3615fe46a97d91" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>compile_log<sp/>=<sp/>logging.getLogger(</highlight><highlight class="stringliteral">&quot;engine.compiler&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a6a6a19199f656880b4f693d4c2ca76f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a6a6a19199f656880b4f693d4c2ca76f2" kindref="member">setUp</ref>(self):</highlight></codeline>
<codeline lineno="77" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref><sp/>=<sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>(</highlight><highlight class="stringliteral">&quot;sphinx&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ensure<sp/>the<sp/>relevant<sp/>configuration<sp/>values<sp/>are<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.TRAINING_DATA_DIR<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.START_ASLEEP<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.WAKE_PHRASE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;wake<sp/>up&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.SLEEP_PHRASE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;go<sp/>to<sp/>sleep&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.START_TRAINING_PHRASE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;start<sp/>training<sp/>session&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.END_TRAINING_PHRASE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;end<sp/>training<sp/>session&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.LANGUAGE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;en&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Map<sp/>for<sp/>test<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1adb8a26d9a09d84ccadcbd68a4d826b00" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1adb8a26d9a09d84ccadcbd68a4d826b00" kindref="member">test_map</ref><sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Connect<sp/>the<sp/>engine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.connect()</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Register<sp/>a<sp/>recognition<sp/>observer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac3a88aece1f6bd60001439c027cde098" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac3a88aece1f6bd60001439c027cde098" kindref="member">test_recobs</ref><sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester" kindref="compound">RecognitionObserverTester</ref>()</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac3a88aece1f6bd60001439c027cde098" kindref="member">test_recobs</ref>.register()</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a36943518646ef9c239bdfcdc4e6e6753" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a36943518646ef9c239bdfcdc4e6e6753" kindref="member">tearDown</ref>(self):</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1adb8a26d9a09d84ccadcbd68a4d826b00" kindref="member">test_map</ref>.clear()</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.resume_recognition()</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac3a88aece1f6bd60001439c027cde098" kindref="member">test_recobs</ref>.unregister()</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.<ref refid="namespace__engine__control__example_1af236a72b0790f06635ad575d33dd9950" kindref="member">disconnect</ref>()</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>---------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>control-flow<sp/>assertion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a50448ef0a4fa61143981c5ff22012ca2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a50448ef0a4fa61143981c5ff22012ca2" kindref="member">get_test_function</ref>(self):</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Create<sp/>and<sp/>return<sp/>a<sp/>test<sp/>function<sp/>used<sp/>for<sp/>testing<sp/>whether</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>phrases<sp/>or<sp/>rules<sp/>are<sp/>processed<sp/>correctly,<sp/>insofar<sp/>as<sp/>they<sp/>reach</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>correct<sp/>processing<sp/>method/function.</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>returned<sp/>test<sp/>functions<sp/>accept<sp/>variable<sp/>arguments.</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:<sp/>callable</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">func(*_):</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Function<sp/>was<sp/>reached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1adb8a26d9a09d84ccadcbd68a4d826b00" kindref="member">test_map</ref>[id(func)]<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>KeyError:</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ignore<sp/>any<sp/>key<sp/>errors;<sp/>if<sp/>this<sp/>function&apos;s<sp/>id<sp/>is<sp/>not<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>test_map,<sp/>then<sp/>it&apos;s<sp/>not<sp/>relevant<sp/>to<sp/>the<sp/>currently<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>test<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1adb8a26d9a09d84ccadcbd68a4d826b00" kindref="member">test_map</ref>[id(func)]<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc6f5c405d95aecef13ebf34758371d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc6f5c405d95aecef13ebf34758371d9" kindref="member">assert_test_function_called</ref>(self,<sp/>func,<sp/>n):</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert<sp/>that<sp/>a<sp/>test<sp/>function<sp/>was<sp/>called<sp/>n<sp/>times.</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>func:<sp/>callable</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>n:<sp/>number<sp/>of<sp/>times<sp/>the<sp/>test<sp/>function<sp/>should<sp/>have<sp/>been<sp/>called</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1adb8a26d9a09d84ccadcbd68a4d826b00" kindref="member">test_map</ref>[id(func)]</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(x,<sp/>n,<sp/></highlight><highlight class="stringliteral">&quot;wrapped<sp/>test<sp/>function<sp/>was<sp/>called<sp/>%d<sp/>time(s)<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;instead<sp/>of<sp/>%d<sp/>time(s)&quot;</highlight><highlight class="normal"><sp/>%<sp/>(x,<sp/>n))</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1aad121a8a08b5af7504961514b3c8fb36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1aad121a8a08b5af7504961514b3c8fb36" kindref="member">reset_test_functions</ref>(self):</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reset<sp/>the<sp/>test_map<sp/>values<sp/>for<sp/>all<sp/>test<sp/>functions.</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1adb8a26d9a09d84ccadcbd68a4d826b00" kindref="member">test_map</ref>.keys():</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1adb8a26d9a09d84ccadcbd68a4d826b00" kindref="member">test_map</ref>[key]<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>---------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>asserting<sp/>recognition<sp/>success<sp/>or<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" kindref="member">assert_mimic_success</ref>(self,<sp/>*phrases):</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert<sp/>that<sp/>the<sp/>engine<sp/>can<sp/>successfully<sp/>mimic<sp/>a<sp/>number<sp/>of<sp/>speech</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strings.</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.mimic_phrases(*phrases)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>MimicFailure:</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.fail(</highlight><highlight class="stringliteral">&quot;MimicFailure<sp/>caught&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ab626a72cfbd85f361f117cf88a08b041" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ab626a72cfbd85f361f117cf88a08b041" kindref="member">assert_mimic_failure</ref>(self,<sp/>*phrases):</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(MimicFailure,<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.mimic_phrases,<sp/>*phrases)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7926500801079ddd01b114e0195ea8ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7926500801079ddd01b114e0195ea8ba" kindref="member">assert_recobs_result</ref>(self,<sp/>waiting,<sp/>words):</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac3a88aece1f6bd60001439c027cde098" kindref="member">test_recobs</ref>.waiting,<sp/>waiting)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac3a88aece1f6bd60001439c027cde098" kindref="member">test_recobs</ref>.words,<sp/>words)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests" kindref="compound">EngineTests</ref>(<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase" kindref="compound">SphinxEngineCase</ref>):</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Tests<sp/>for<sp/>most<sp/>of<sp/>the<sp/>engine&apos;s<sp/>functionality.</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1abcf097cfc05c76a97f316520d08a639a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1abcf097cfc05c76a97f316520d08a639a" kindref="member">test_get_engine_sphinx_is_usable</ref>(self):</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Verify<sp/>that<sp/>the<sp/>sphinx<sp/>engine<sp/>is<sp/>usable<sp/>by<sp/>testing<sp/>that<sp/>a<sp/>simple</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>is<sp/>loaded<sp/>correctly<sp/>and<sp/>works<sp/>correctly.</highlight></codeline>
<codeline lineno="175"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine<sp/>=<sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>()</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>engine.name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;sphinx&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>isinstance(self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>,<sp/>EngineBase)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.speak(</highlight><highlight class="stringliteral">&quot;testing<sp/>sphinx&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>that<sp/>a<sp/>basic<sp/>rule<sp/>can<sp/>be<sp/>loaded<sp/>and<sp/>recognized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq<sp/>=<sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1afd0c0c3012ffdebee3500092a27713e7" kindref="member">Sequence</ref>([<ref refid="namespacedragonfly_1_1grammar_1_1elements_1a012cfe2ca8a31508c1262048051c398c" kindref="member">Literal</ref>(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1a012cfe2ca8a31508c1262048051c398c" kindref="member">Literal</ref>(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">)])</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester<sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1element__tester_1_1ElementTester" kindref="compound">ElementTester</ref>(seq,<sp/>engine=engine)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>tester.recognize(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(results,<sp/>[</highlight><highlight class="stringliteral">u&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">u&quot;world&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1aff4254448fec1dc2651493f395a6c2bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1aff4254448fec1dc2651493f395a6c2bd" kindref="member">test_engine_config</ref>(self):</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>engine<sp/>configuration<sp/>is<sp/>validated<sp/>correctly.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Use<sp/>START_ASLEEP=True<sp/>for<sp/>this<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.START_ASLEEP<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DECODER_CONFIG&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;LANGUAGE&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;START_ASLEEP&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WAKE_PHRASE&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WAKE_PHRASE_THRESHOLD&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SLEEP_PHRASE&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SLEEP_PHRASE_THRESHOLD&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TRAINING_DATA_DIR&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TRANSCRIPT_NAME&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;START_TRAINING_PHRASE&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;START_TRAINING_PHRASE_THRESHOLD&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;END_TRAINING_PHRASE&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;END_TRAINING_PHRASE_THRESHOLD&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;CHANNELS&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RATE&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SAMPLE_WIDTH&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FRAMES_PER_BUFFER&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestConfig(object):</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>TestConfig<sp/>values<sp/>using<sp/>the<sp/>engine<sp/>config.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original_config<sp/>=<sp/>self.engine.config</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>options:</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setattr(TestConfig,<sp/>name,<sp/>getattr(original_config,<sp/>name))</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">set_config(value):</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.engine.config<sp/>=<sp/>value</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>that<sp/>options<sp/>are<sp/>set<sp/>to<sp/>default<sp/>values<sp/>if<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Don&apos;t<sp/>compare<sp/>decoder<sp/>config<sp/>objects<sp/>with<sp/>assertEqual<sp/>because<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>aren&apos;t<sp/>comparable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>options:</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delattr(TestConfig,<sp/>name)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_config(TestConfig)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(hasattr(TestConfig,<sp/>name),</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>was<sp/>not<sp/>reset&quot;</highlight><highlight class="normal"><sp/>%<sp/>name)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>name<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;DECODER_CONFIG&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(getattr(TestConfig,<sp/>name),</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getattr(original_config,<sp/>name),</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>did<sp/>not<sp/>match&quot;</highlight><highlight class="normal"><sp/>%<sp/>name)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a8a1d2fcd073a12a219624583794c60a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a8a1d2fcd073a12a219624583794c60a0" kindref="member">test_pause_resume_recognition</ref>(self):</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>pause/resume<sp/>recognition<sp/>functionality<sp/>works.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar<sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1rule__test__grammar_1_1RuleTestGrammar" kindref="compound">RuleTestGrammar</ref>(</highlight><highlight class="stringliteral">&quot;test1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.add_rule(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(name=</highlight><highlight class="stringliteral">&quot;r1&quot;</highlight><highlight class="normal">,<sp/>spec=</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">assert_recognize_succeeds():</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>grammar.recognize_node(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">).words()</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results<sp/>==<sp/>[</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Enter<sp/>sleep<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.pause_recognition()</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.recognition_paused)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Mimicking<sp/>hello<sp/>world<sp/>should<sp/>succeed<sp/>when<sp/>recognition<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>paused,<sp/>but<sp/>it<sp/>will<sp/>not<sp/>succeed<sp/>when<sp/>actually<sp/>speaking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert_recognize_succeeds()</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>recognition<sp/>still<sp/>succeeds<sp/>when<sp/>recognition<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>resumed<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.resume_recognition()</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertFalse(self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.recognition_paused)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert_recognize_succeeds()</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>that<sp/>mimicking<sp/>wake<sp/>and<sp/>sleep<sp/>phrases<sp/>also<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" kindref="member">assert_mimic_success</ref>(</highlight><highlight class="stringliteral">&quot;go<sp/>to<sp/>sleep&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.recognition_paused)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" kindref="member">assert_mimic_success</ref>(</highlight><highlight class="stringliteral">&quot;wake<sp/>up&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertFalse(self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.recognition_paused)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1af9b244645f44ce918e7c57483c4298ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1af9b244645f44ce918e7c57483c4298ef" kindref="member">test_start_asleep</ref>(self):</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>the<sp/>START_ASLEEP<sp/>config<sp/>option<sp/>works.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>config.START_ASLEEP<sp/>is<sp/>False<sp/>for<sp/>the<sp/>tests<sp/>by<sp/>default,<sp/>so<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>that<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertFalse(self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.recognition_paused)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" kindref="member">assert_mimic_success</ref>(</highlight><highlight class="stringliteral">&quot;go<sp/>to<sp/>sleep&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Now<sp/>set<sp/>it<sp/>to<sp/>True,<sp/>restart<sp/>the<sp/>engine<sp/>and<sp/>test<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.START_ASLEEP<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.<ref refid="namespace__engine__control__example_1af236a72b0790f06635ad575d33dd9950" kindref="member">disconnect</ref>()</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.connect()</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.recognition_paused)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" kindref="member">assert_mimic_success</ref>(</highlight><highlight class="stringliteral">&quot;wake<sp/>up&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a51ba8fe96320ea372526aa8213db3398" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a51ba8fe96320ea372526aa8213db3398" kindref="member">test_keyphrases_and_recobs</ref>(self):</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>observers<sp/>are<sp/>notified<sp/>of<sp/>keyphrase<sp/>events.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test1<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a50448ef0a4fa61143981c5ff22012ca2" kindref="member">get_test_function</ref>()</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test2<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a50448ef0a4fa61143981c5ff22012ca2" kindref="member">get_test_function</ref>()</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Register<sp/>two<sp/>key<sp/>phrases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.set_keyphrase(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">,<sp/>1e-20,<sp/>test1)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.set_keyphrase(</highlight><highlight class="stringliteral">&quot;testing<sp/>testing&quot;</highlight><highlight class="normal">,<sp/>1e-30,<sp/>test2)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">assert_success():</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" kindref="member">assert_mimic_success</ref>(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7926500801079ddd01b114e0195ea8ba" kindref="member">assert_recobs_result</ref>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">u&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">u&quot;world&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc6f5c405d95aecef13ebf34758371d9" kindref="member">assert_test_function_called</ref>(test1,<sp/>1)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" kindref="member">assert_mimic_success</ref>(</highlight><highlight class="stringliteral">&quot;testing<sp/>testing&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7926500801079ddd01b114e0195ea8ba" kindref="member">assert_recobs_result</ref>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">u&quot;testing&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">u&quot;testing&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc6f5c405d95aecef13ebf34758371d9" kindref="member">assert_test_function_called</ref>(test2,<sp/>1)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1aad121a8a08b5af7504961514b3c8fb36" kindref="member">reset_test_functions</ref>()</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>that<sp/>both<sp/>key<sp/>phrases<sp/>can<sp/>be<sp/>mimicked<sp/>and<sp/>that<sp/>the<sp/>observer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>was<sp/>notified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert_success()</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>that<sp/>both<sp/>key<sp/>phrases<sp/>can<sp/>be<sp/>mimicked<sp/>in<sp/>sleep<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.pause_recognition()</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert_success()</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.resume_recognition()</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>that<sp/>removed<sp/>key<sp/>phrases<sp/>no<sp/>longer<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.unset_keyphrase(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ab626a72cfbd85f361f117cf88a08b041" kindref="member">assert_mimic_failure</ref>(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7926500801079ddd01b114e0195ea8ba" kindref="member">assert_recobs_result</ref>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc6f5c405d95aecef13ebf34758371d9" kindref="member">assert_test_function_called</ref>(test1,<sp/>0)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.unset_keyphrase(</highlight><highlight class="stringliteral">&quot;testing<sp/>testing&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ab626a72cfbd85f361f117cf88a08b041" kindref="member">assert_mimic_failure</ref>(</highlight><highlight class="stringliteral">&quot;testing<sp/>testing&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7926500801079ddd01b114e0195ea8ba" kindref="member">assert_recobs_result</ref>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc6f5c405d95aecef13ebf34758371d9" kindref="member">assert_test_function_called</ref>(test1,<sp/>0)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a13c6962254f761b1c87b2b10b9cdd15e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a13c6962254f761b1c87b2b10b9cdd15e" kindref="member">test_set_keyphrase_unknown_words</ref>(self):</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>setting<sp/>a<sp/>keyphrase<sp/>with<sp/>an<sp/>unknown<sp/>word<sp/>raises<sp/>an<sp/>error.</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines_1_1backend__sphinx_1_1engine" kindref="compound">dragonfly.engines.backend_sphinx.engine</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>UnknownWordError</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(UnknownWordError,<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.set_keyphrase,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;notaword&quot;</highlight><highlight class="normal">,<sp/>1e-20,<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1aa9e4c7cdfb9ac26336aeb8259bf7d302" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1aa9e4c7cdfb9ac26336aeb8259bf7d302" kindref="member">test_built_in_keyphrase_unknown_words</ref>(self):</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>errors<sp/>are<sp/>logged<sp/>for<sp/>built-in<sp/>keyphrases<sp/>with<sp/>unknown<sp/>words.</highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>invalid<sp/>built-in<sp/>keyphrases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.WAKE_PHRASE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;wake<sp/>up<sp/>unknownword&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.SLEEP_PHRASE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;aninvalid<sp/>sleepphrase&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.START_TRAINING_PHRASE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;another<sp/>invalidphrase&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.config.END_TRAINING_PHRASE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;end<sp/>trainingsession&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Restart<sp/>the<sp/>engine<sp/>manually<sp/>to<sp/>verify<sp/>that<sp/>errors<sp/>are<sp/>logged<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>keyphrases<sp/>on<sp/>connect().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler<sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1MockLoggingHandler" kindref="compound">MockLoggingHandler</ref>()</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a109b4079a7de7c75d63367e074ad9ad4" kindref="member">log</ref>.addHandler(handler)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.<ref refid="namespace__engine__control__example_1af236a72b0790f06635ad575d33dd9950" kindref="member">disconnect</ref>()</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.connect()</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a109b4079a7de7c75d63367e074ad9ad4" kindref="member">log</ref>.removeHandler(handler)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>the<sp/>logged<sp/>messages.<sp/>Each<sp/>of<sp/>the<sp/>unknown<sp/>words<sp/>in<sp/>all<sp/>four</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>built-in<sp/>keyphrases<sp/>should<sp/>be<sp/>listed<sp/>in<sp/>separate<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errors<sp/>=<sp/>handler.messages[</highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(len(errors),<sp/>4)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;unknownword&quot;</highlight><highlight class="normal">,<sp/>errors[0])</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;aninvalid&quot;</highlight><highlight class="normal">,<sp/>errors[1])</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;sleepphrase&quot;</highlight><highlight class="normal">,<sp/>errors[1])</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;invalidphrase&quot;</highlight><highlight class="normal">,<sp/>errors[2])</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;trainingsession&quot;</highlight><highlight class="normal">,<sp/>errors[3])</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1aeaeda14a3ab67bbcce15d6aa704d7743" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1aeaeda14a3ab67bbcce15d6aa704d7743" kindref="member">test_unknown_grammar_words</ref>(self):</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>warnings<sp/>are<sp/>logged<sp/>for<sp/>grammars<sp/>with<sp/>unknown<sp/>words.</highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1grammar__base_1_1Grammar" kindref="compound">Grammar</ref>(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.add_rule(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(name=</highlight><highlight class="stringliteral">&quot;r1&quot;</highlight><highlight class="normal">,<sp/>spec=</highlight><highlight class="stringliteral">&quot;testing<sp/>unknownword&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.add_rule(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(name=</highlight><highlight class="stringliteral">&quot;r2&quot;</highlight><highlight class="normal">,<sp/>spec=</highlight><highlight class="stringliteral">&quot;wordz|natlink&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>with<sp/>a<sp/>list<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lst<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1list_1_1List" kindref="compound">List</ref>(</highlight><highlight class="stringliteral">&quot;lst&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;anotherunknownword&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;testing<sp/>multiplewords&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.add_rule(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(name=</highlight><highlight class="stringliteral">&quot;r3&quot;</highlight><highlight class="normal">,<sp/>spec=</highlight><highlight class="stringliteral">&quot;&lt;lst&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extras=[<ref refid="namespacedragonfly_1_1grammar_1_1elements_1ab5ca6dc762d1358eee80c0cb7f18544d" kindref="member">ListRef</ref>(</highlight><highlight class="stringliteral">&quot;lst&quot;</highlight><highlight class="normal">,<sp/>lst)]))</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Catch<sp/>log<sp/>messages<sp/>and<sp/>make<sp/>some<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler<sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1MockLoggingHandler" kindref="compound">MockLoggingHandler</ref>()</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac9f79da30ec7de020f3615fe46a97d91" kindref="member">compile_log</ref>.addHandler(handler)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.load()</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(grammar.loaded)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>the<sp/>logged<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warnings<sp/>=<sp/>handler.messages[</highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(len(warnings),<sp/>1)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertNotIn(</highlight><highlight class="stringliteral">&quot;testing&quot;</highlight><highlight class="normal">,<sp/>warnings[0])</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unknown_words<sp/>=<sp/>[</highlight><highlight class="stringliteral">&quot;natlink&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;unknownword&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;anotherunknownword&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wordz&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;multiplewords&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>word<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>unknown_words:</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(word,<sp/>warnings[0])</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>that<sp/>list<sp/>updates<sp/>also<sp/>produce<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lst.extend((</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;onemoreunknownword&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(len(warnings),<sp/>2)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertNotIn(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/>warnings[1])</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;onemoreunknownword&quot;</highlight><highlight class="normal">,<sp/>warnings[1])</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac9f79da30ec7de020f3615fe46a97d91" kindref="member">compile_log</ref>.removeHandler(handler)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.unload()</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a0d73d24793f8a31f5b9c2a9ae473a4cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a0d73d24793f8a31f5b9c2a9ae473a4cd" kindref="member">test_reference_names_with_spaces</ref>(self):</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>reference<sp/>names<sp/>with<sp/>spaces<sp/>are<sp/>accepted.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lst<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1list_1_1List" kindref="compound">List</ref>(</highlight><highlight class="stringliteral">&quot;my<sp/>list&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;test<sp/>list&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1grammar__base_1_1Grammar" kindref="compound">Grammar</ref>(</highlight><highlight class="stringliteral">&quot;My<sp/>dragonfly<sp/>grammar&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.add_rule(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(name=</highlight><highlight class="stringliteral">&quot;my<sp/>rule&quot;</highlight><highlight class="normal">,<sp/>spec=</highlight><highlight class="stringliteral">&quot;test<sp/>rule&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.add_rule(<ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule" kindref="compound">Rule</ref>(element=<ref refid="namespacedragonfly_1_1grammar_1_1elements_1ab5ca6dc762d1358eee80c0cb7f18544d" kindref="member">ListRef</ref>(</highlight><highlight class="stringliteral">&quot;my<sp/>list&quot;</highlight><highlight class="normal">,<sp/>lst),</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exported=</highlight><highlight class="keyword">True</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.load()</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" kindref="member">assert_mimic_success</ref>(</highlight><highlight class="stringliteral">&quot;test<sp/>rule&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" kindref="member">assert_mimic_success</ref>(</highlight><highlight class="stringliteral">&quot;test<sp/>list&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.unload()</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a01582902aebe44302b02daf505b606df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a01582902aebe44302b02daf505b606df" kindref="member">test_training_session</ref>(self):</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>no<sp/>recognition<sp/>processing<sp/>occurs<sp/>when<sp/>training.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>up<sp/>a<sp/>rule<sp/>to<sp/>&quot;train&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a50448ef0a4fa61143981c5ff22012ca2" kindref="member">get_test_function</ref>()</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestRule(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>):</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>training&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_process_recognition<sp/>=<sp/>test</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>and<sp/>load<sp/>a<sp/>grammar<sp/>with<sp/>the<sp/>rule.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1grammar__base_1_1Grammar" kindref="compound">Grammar</ref>(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.add_rule(TestRule())</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.load()</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Start<sp/>a<sp/>training<sp/>session.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.start_training_session()</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>that<sp/>mimic<sp/>succeeds,<sp/>no<sp/>processing<sp/>occurs,<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>observer<sp/>is<sp/>still<sp/>notified<sp/>of<sp/>events.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" kindref="member">assert_mimic_success</ref>(</highlight><highlight class="stringliteral">&quot;test<sp/>training&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc6f5c405d95aecef13ebf34758371d9" kindref="member">assert_test_function_called</ref>(test,<sp/>0)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7926500801079ddd01b114e0195ea8ba" kindref="member">assert_recobs_result</ref>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">u&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">u&quot;training&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>End<sp/>the<sp/>session<sp/>and<sp/>test<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" kindref="member">engine</ref>.end_training_session()</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" kindref="member">assert_mimic_success</ref>(</highlight><highlight class="stringliteral">&quot;test<sp/>training&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc6f5c405d95aecef13ebf34758371d9" kindref="member">assert_test_function_called</ref>(test,<sp/>1)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7926500801079ddd01b114e0195ea8ba" kindref="member">assert_recobs_result</ref>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">u&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">u&quot;training&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.unload()</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">#<sp/>---------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>unittest.main()</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py"/>
  </compounddef>
</doxygen>
