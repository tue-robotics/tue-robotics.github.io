<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacedragonfly_1_1engines" kind="namespace" language="Python">
    <compoundname>dragonfly::engines</compoundname>
    <innernamespace refid="namespacedragonfly_1_1engines_1_1backend__kaldi">dragonfly::engines::backend_kaldi</innernamespace>
    <innernamespace refid="namespacedragonfly_1_1engines_1_1backend__natlink">dragonfly::engines::backend_natlink</innernamespace>
    <innernamespace refid="namespacedragonfly_1_1engines_1_1backend__sapi5">dragonfly::engines::backend_sapi5</innernamespace>
    <innernamespace refid="namespacedragonfly_1_1engines_1_1backend__sphinx">dragonfly::engines::backend_sphinx</innernamespace>
    <innernamespace refid="namespacedragonfly_1_1engines_1_1backend__text">dragonfly::engines::backend_text</innernamespace>
    <innernamespace refid="namespacedragonfly_1_1engines_1_1base">dragonfly::engines::base</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacedragonfly_1_1engines_1a7761de46ba7b41f1bccd542e1a378878" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly::engines._default_engine</definition>
        <argsstring></argsstring>
        <name>_default_engine</name>
        <initializer>=  None</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="30" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedragonfly_1_1engines_1ab64c79402531fe70e8babd91962063e9" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly::engines._default_speaker</definition>
        <argsstring></argsstring>
        <name>_default_speaker</name>
        <initializer>=  None</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="33" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedragonfly_1_1engines_1ab651649f903d0eecba745e8f2e65b0d8" prot="private" static="no" mutable="no">
        <type>dictionary</type>
        <definition>dictionary dragonfly::engines._engines_by_name</definition>
        <argsstring></argsstring>
        <name>_engines_by_name</name>
        <initializer>=  {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="31" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedragonfly_1_1engines_1a83e53758d61456561a36f7551795f0d4" prot="private" static="no" mutable="no">
        <type>tuple</type>
        <definition>tuple dragonfly::engines._sapi5_names</definition>
        <argsstring></argsstring>
        <name>_sapi5_names</name>
        <initializer>=  (&quot;sapi5shared&quot;, &quot;sapi5inproc&quot;, &quot;sapi5&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="36" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedragonfly_1_1engines_1aca17bf5398d91ec87c79b0da76d7030c" prot="private" static="no" mutable="no">
        <type>dictionary</type>
        <definition>dictionary dragonfly::engines._speakers_by_name</definition>
        <argsstring></argsstring>
        <name>_speakers_by_name</name>
        <initializer>=  {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="34" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedragonfly_1_1engines_1aba8b881e4b8416acaf8fb70c5b3244ec" prot="private" static="no" mutable="no">
        <type>tuple</type>
        <definition>tuple dragonfly::engines._valid_engine_names</definition>
        <argsstring></argsstring>
        <name>_valid_engine_names</name>
        <initializer>=  (&quot;natlink&quot;, &quot;kaldi&quot;, &quot;sphinx&quot;, &quot;text&quot;) + _sapi5_names</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="37" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedragonfly_1_1engines_1af28b6632349637578adde42f061142e6" prot="private" static="no" mutable="no">
        <type>tuple</type>
        <definition>tuple dragonfly::engines._valid_speaker_names</definition>
        <argsstring></argsstring>
        <name>_valid_speaker_names</name>
        <initializer>=  (&quot;natlink&quot;, &quot;text&quot;, &quot;espeak&quot;, &quot;flite&quot;) + _sapi5_names</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="38" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedragonfly_1_1engines_1a8bc60040a8fc3d40002f8963934c312c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.get_current_engine</definition>
        <argsstring>()</argsstring>
        <name>get_current_engine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Get the currently initialized SR engine object.

    If an SR engine has not been initialized yet, ``None`` will be
    returned instead.

    :rtype: EngineBase | None
    :returns: engine object or None

    Usage example:

    .. code-block:: python

       # Print the name of the current engine if one has been
       # initialized.
       from dragonfly import get_current_engine
       engine = get_current_engine()
       if engine:
           print(&quot;Engine name: %r&quot; % engine.name)
       else:
           print(&quot;No engine has been initialized.&quot;)</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="201" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" bodystart="201" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.get_engine</definition>
        <argsstring>(name=None, **kwargs)</argsstring>
        <name>get_engine</name>
        <param>
          <type>name</type>
          <defname>name</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>**</type>
          <declname>kwargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Get the engine implementation.

    This function will initialize an engine instance using the
    ``get_engine`` and ``is_engine_available`` functions in the engine
    packages and return an instance of the first available engine.  If
    one has already been initialized, it will be returned instead.

    If no specific engine is requested and no engine has already been
    initialized, this function will initialize and return an instance of
    the first available engine in the following order:

     =======================   =========================================
     SR engine back-end        Engine name string(s)
     =======================   =========================================
     1. Dragon/Natlink         ``&quot;natlink&quot;``
     2. Kaldi                  ``&quot;kaldi&quot;``
     3. WSR/SAPI 5             ``&quot;sapi5&quot;, &quot;sapi5inproc&quot;, &quot;sapi5shared&quot;``
     4. CMU Pocket Sphinx      ``&quot;sphinx&quot;``
     =======================   =========================================

    The :ref:`Text-input engine &lt;RefTextEngine&gt;` can be initialized by
    specifying ``&quot;text&quot;`` as the engine name.  This back-end will
    **not** be initialized if no specific engine is requested because
    the back-end is not a real SR engine and is used mostly for testing.

    **Arguments**:

    :param name: optional human-readable name of the engine to return.
    :type name: str
    :param \\**kwargs: optional keyword arguments passed through to the
        engine for engine-specific configuration.
    :rtype: EngineBase
    :returns: engine instance
    :raises: EngineError
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="42" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" bodystart="42" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1engines_1a30fbf776a9f55f14c92fa376233b4560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.get_speaker</definition>
        <argsstring>(name=None)</argsstring>
        <name>get_speaker</name>
        <param>
          <type>name</type>
          <defname>name</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Get the text-to-speech (speaker) implementation.

    This function will initialize and return a speaker instance instance
    of the available speaker back-end.  If one has already been
    initialized, it will be returned instead.

    If no specific speaker back-end is requested and no speaker has
    already been initialized, this function will initialize and return
    an instance of the first available back-end in the following order:

     =======================   =========================================
     TTS speaker back-end      Speaker name string(s)
     =======================   =========================================
     1. SAPI 5                 ``&quot;sapi5&quot;``
     2. Dragon/Natlink         ``&quot;natlink&quot;``
     3. eSpeak                 ``&quot;espeak&quot;``
     4. CMU Flite              ``&quot;flite&quot;``
     5. Text (stdout)          ``&quot;text&quot;``
     =======================   =========================================

    The first two speaker back-ends are only available on Microsoft
    Windows.  The second requires that Dragon NaturallySpeaking and
    Natlink are installed on the system.

    The third and fourth back-ends, eSpeak and CMU Flite, may be used on
    most platforms.  These require that the appropriate command-line
    programs are installed on the system.

    The last back-end (text) is used as a fallback when no real speaker
    implementation is available.  This back-end writes input text to
    stdout, i.e., prints text to the console.

    **Arguments**:

    :param name: optional human-readable name of the speaker to return.
    :type name: str
    :rtype: SpeakerBase
    :returns: speaker instance
    :raises: EngineError
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="249" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" bodystart="249" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1engines_1a9d35c475fc61eb6483816ae5dcc89387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.register_engine_init</definition>
        <argsstring>(engine)</argsstring>
        <name>register_engine_init</name>
        <param>
          <type>engine</type>
          <defname>engine</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Register initialization of an engine.

    This function sets the default engine to the first engine
    initialized.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="231" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" bodystart="231" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1engines_1a7d159254363db7767120092d5dfb75bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.register_speaker_init</definition>
        <argsstring>(speaker)</argsstring>
        <name>register_speaker_init</name>
        <param>
          <type>speaker</type>
          <defname>speaker</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Register initialization of a speaker.

    This function sets the default speaker to the first speaker
    initialized.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="391" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" bodystart="391" bodyend="405"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/__init__.py" line="1" column="1"/>
  </compounddef>
</doxygen>
