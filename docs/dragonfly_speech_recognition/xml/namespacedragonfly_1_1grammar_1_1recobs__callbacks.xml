<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacedragonfly_1_1grammar_1_1recobs__callbacks" kind="namespace" language="Python">
    <compoundname>dragonfly::grammar::recobs_callbacks</compoundname>
    <innerclass refid="classdragonfly_1_1grammar_1_1recobs__callbacks_1_1CallbackRecognitionObserver" prot="public">dragonfly::grammar::recobs_callbacks::CallbackRecognitionObserver</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedragonfly_1_1grammar_1_1recobs__callbacks_1a236b540cbed1e00390d6bddad3a19b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs_callbacks.register_beginning_callback</definition>
        <argsstring>(function)</argsstring>
        <name>register_beginning_callback</name>
        <param>
          <type>function</type>
          <defname>function</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Register a callback function to be called when speech starts.

The :class:`CallbackRecognitionObserver` object returned from this
function can be used to unregister the callback function.

:param function: callback function
:type function: callable
:returns: recognition observer
:rtype: CallbackRecognitionObserver
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs_callbacks.py" line="104" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs_callbacks.py" bodystart="104" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1grammar_1_1recobs__callbacks_1ad8b59ee287219786b05506bfc17dbf92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs_callbacks.register_ending_callback</definition>
        <argsstring>(function)</argsstring>
        <name>register_ending_callback</name>
        <param>
          <type>function</type>
          <defname>function</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Register a callback function to be called when speech ends, either
successfully (after calling the recognition callback) or in failure
(after calling the failure callback).

The :class:`CallbackRecognitionObserver` object returned from this
function can be used to unregister the callback function.

:param function: callback function
:type function: callable
:returns: recognition observer
:rtype: CallbackRecognitionObserver
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs_callbacks.py" line="149" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs_callbacks.py" bodystart="149" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1grammar_1_1recobs__callbacks_1a0aadc85b5599544f3d2e3346e451c780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs_callbacks.register_failure_callback</definition>
        <argsstring>(function)</argsstring>
        <name>register_failure_callback</name>
        <param>
          <type>function</type>
          <defname>function</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Register a callback function to be called on recognition failures.

The :class:`CallbackRecognitionObserver` object returned from this
function can be used to unregister the callback function.

:param function: callback function
:type function: callable
:returns: recognition observer
:rtype: CallbackRecognitionObserver
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs_callbacks.py" line="134" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs_callbacks.py" bodystart="134" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1grammar_1_1recobs__callbacks_1a80c156432dd6c567c750189ed458a79a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs_callbacks.register_post_recognition_callback</definition>
        <argsstring>(function)</argsstring>
        <name>register_post_recognition_callback</name>
        <param>
          <type>function</type>
          <defname>function</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Register a callback function to be called after all rule processing
has completed after recognition success.

The :class:`CallbackRecognitionObserver` object returned from this
function can be used to unregister the callback function.

:param function: callback function
:type function: callable
:returns: recognition observer
:rtype: CallbackRecognitionObserver
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs_callbacks.py" line="166" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs_callbacks.py" bodystart="166" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1grammar_1_1recobs__callbacks_1a37954238bdaee2b124e298b8aad31522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs_callbacks.register_recognition_callback</definition>
        <argsstring>(function)</argsstring>
        <name>register_recognition_callback</name>
        <param>
          <type>function</type>
          <defname>function</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Register a callback function to be called on recognition success.

The :class:`CallbackRecognitionObserver` object returned from this
function can be used to unregister the callback function.

:param function: callback function
:type function: callable
:returns: recognition observer
:rtype: CallbackRecognitionObserver
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs_callbacks.py" line="119" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs_callbacks.py" bodystart="119" bodyend="133"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs_callbacks.py" line="1" column="1"/>
  </compounddef>
</doxygen>
