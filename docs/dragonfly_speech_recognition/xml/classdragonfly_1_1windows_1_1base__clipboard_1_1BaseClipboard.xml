<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::windows::base_clipboard::BaseClipboard</compoundname>
    <basecompoundref prot="public" virt="non-virtual">object</basecompoundref>
    <derivedcompoundref refid="classdragonfly_1_1windows_1_1pyperclip__clipboard_1_1PyperclipClipboard" prot="public" virt="non-virtual">dragonfly.windows.pyperclip_clipboard.PyperclipClipboard</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard" prot="public" virt="non-virtual">dragonfly.windows.win32_clipboard.Win32Clipboard</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1windows_1_1x11__clipboard_1_1BaseX11Clipboard" prot="public" virt="non-virtual">dragonfly.windows.x11_clipboard.BaseX11Clipboard</derivedcompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a199fe68b100f319cea29cf22a95095e5" prot="private" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.windows.base_clipboard.BaseClipboard::_log</definition>
        <argsstring></argsstring>
        <name>_log</name>
        <initializer>=  logging.getLogger(&quot;clipboard&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="48" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1ab55ba4dc9870fd28f9e77a20918a599f" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int dragonfly.windows.base_clipboard.BaseClipboard::format_hdrop</definition>
        <argsstring></argsstring>
        <name>format_hdrop</name>
        <initializer>=  15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="52" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a0540fe3657e7ef20b11653c2f3a75025" prot="public" static="yes" mutable="no">
        <type>dictionary</type>
        <definition>dictionary dragonfly.windows.base_clipboard.BaseClipboard::format_names</definition>
        <argsstring></argsstring>
        <name>format_names</name>
        <initializer>=  {
        format_text:     &quot;text&quot;,
        format_unicode:  &quot;unicode&quot;,
        format_hdrop:    &quot;hdrop&quot;,
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="53" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a631fe3e953bfd75114fd0482d739faed" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int dragonfly.windows.base_clipboard.BaseClipboard::format_text</definition>
        <argsstring></argsstring>
        <name>format_text</name>
        <initializer>=  1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="50" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a39ef1ac01fd40954c1204567196af872" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int dragonfly.windows.base_clipboard.BaseClipboard::format_unicode</definition>
        <argsstring></argsstring>
        <name>format_unicode</name>
        <initializer>=  13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="51" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a813f3b8689ca73ad55c1cfd249c2c3ab" prot="public" static="yes" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type></type>
        <definition>dragonfly.windows.base_clipboard.BaseClipboard::text</definition>
        <argsstring></argsstring>
        <name>text</name>
        <initializer>=  property(<ref refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1ad36b4ea62e12b8eb4e26bb33f451998b" kindref="member">get_text</ref>, <ref refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a98dd8df4a48d5ff22d1e81329e0dc8f4" kindref="member">set_text</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="543" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="543" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1af39dbd9ac31f15ba2707f978b3b05d91" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.windows.base_clipboard.BaseClipboard::_contents</definition>
        <argsstring></argsstring>
        <name>_contents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="343" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="343" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a598c4eed65f7687bb8e262899da2dd06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.__eq__</definition>
        <argsstring>(self, other)</argsstring>
        <name>__eq__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>other</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="367" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="367" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a1caf3f9afe6d0e3a8a7ed7fea80cc7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.__init__</definition>
        <argsstring>(self, contents=None, text=None, from_system=False)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>contents</type>
          <defname>contents</defname>
          <defval>None</defval>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a813f3b8689ca73ad55c1cfd249c2c3ab" kindref="member">text</ref></type>
          <defname>text</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>from_system</type>
          <defname>from_system</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="342" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="342" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a2db43fb9a198633fdd137287573c573d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.__lt__</definition>
        <argsstring>(self, other)</argsstring>
        <name>__lt__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>other</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="379" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="379" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1aa00beba334d8609af5cd7af09fd6e77a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.__ne__</definition>
        <argsstring>(self, other)</argsstring>
        <name>__ne__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>other</type>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="376" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="376" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1aec4171d54222fe4ab6b7c83482657581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.__repr__</definition>
        <argsstring>(self)</argsstring>
        <name>__repr__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="382" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="382" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a0a2bd0e2c4912503fcb8417966a772be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.clear_clipboard</definition>
        <argsstring>(cls)</argsstring>
        <name>clear_clipboard</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1pyperclip__clipboard_1_1PyperclipClipboard_1aace3d07dc8e28be9e8e7fc8926bf8658">clear_clipboard</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__clipboard_1_1BaseX11Clipboard_1a01c693d2a59af702f449bb53baf399af">clear_clipboard</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1afa1046802c130a7167edb782e8296392">clear_clipboard</reimplementedby>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Clear the system clipboard.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="83" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="83" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a49e12deba0b20d3587f8fd21236224a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.convert_format_content</definition>
        <argsstring>(cls, format, content)</argsstring>
        <name>convert_format_content</name>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>format</type>
          <defname>format</defname>
        </param>
        <param>
          <type>content</type>
          <defname>content</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Convert content for the given *format*, if necessary, and return
    it.

    This method operates on the following formats:
     - *text* -- encodes content to a binary string, if necessary
       and if possible.
     - *unicode* -- decodes content to a text string, if necessary
       and if possible.
     - *hdrop* -- converts content into a tuple of file paths, if
       necessary and if possible.

       String content must be a list of existing, absolute file
       paths separated by new lines and/or null characters.  All
       specified file paths must be absolute paths referring to
       existing files on the system.

    If the content cannot be converted for the given *format*, an
    error is raised.

    Arguments:
     - *format* (int) -- the clipboard format to convert.
     - *content* (string) -- the clipboard contents to convert.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="303" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="303" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1ac516f0c2bb2bd381ae17aab97bb63009" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.copy_from_system</definition>
        <argsstring>(self, formats=None, clear=False)</argsstring>
        <name>copy_from_system</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1pyperclip__clipboard_1_1PyperclipClipboard_1a6bc21eb38794f584aa9152e47508c46d">copy_from_system</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__clipboard_1_1BaseX11Clipboard_1a1838100517eb88760d7c5eccc834d129">copy_from_system</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a8555fba962590e63f8ec5478c170cdd8">copy_from_system</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>formats</type>
          <defname>formats</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>clear</type>
          <defname>clear</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Copy the system clipboard contents into this instance.

    Arguments:
     - *formats* (iterable, default: None) -- if not None, only the
       given content formats will be retrieved.  If None, all
       available formats will be retrieved.
     - *clear* (boolean, default: False) -- if true, the system
       clipboard will be cleared after its contents have been
       retrieved.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="402" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="402" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a3997ec766f4074c17002e8b60a002add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.copy_to_system</definition>
        <argsstring>(self, clear=True)</argsstring>
        <name>copy_to_system</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1pyperclip__clipboard_1_1PyperclipClipboard_1abbf6099bc6b7cf64e3a466af16f1247c">copy_to_system</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__clipboard_1_1BaseX11Clipboard_1afebd583e68f3f9fb6ff9cd3ba153a321">copy_to_system</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1adfd1bc26f757fd848dc869ec07abc3af">copy_to_system</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>clear</type>
          <defname>clear</defname>
          <defval>True</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Copy the contents of this instance into the system clipboard.

    Arguments:
     - *clear* (boolean, default: True) -- if true, the system
       clipboard will be cleared before this instance&apos;s contents are
       transferred.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="417" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="417" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1ad0d003bcc7b43da4d97bb7cb7c4a4580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.get_available_formats</definition>
        <argsstring>(self)</argsstring>
        <name>get_available_formats</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Retrieve a list of this instance&apos;s available formats.

    The preferred text format, if available, will always be the
    first on the list followed by any remaining formats in
    numerical order.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="429" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="429" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a9199d017cc8b606824a9ab1e38ccf0f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.get_format</definition>
        <argsstring>(self, format)</argsstring>
        <name>get_format</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>format</type>
          <defname>format</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Retrieved this instance&apos;s content for the given *format*.

    Arguments:
     - *format* (int) -- the clipboard format to retrieve.

    If the given *format* is not available, a *ValueError*
    is raised.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="463" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="463" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a796603f97fdd64124c9a95f6c4a64463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.get_system_text</definition>
        <argsstring>(cls)</argsstring>
        <name>get_system_text</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1pyperclip__clipboard_1_1PyperclipClipboard_1adbcac20eb2dd122853e9a4db5267d7cc">get_system_text</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__clipboard_1_1BaseX11Clipboard_1a9a4a8f82dfb17abfe65dd20cdceec14e">get_system_text</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1aab4d4cd37b6110eba29e52ff4c6b69d8">get_system_text</reimplementedby>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Retrieve the system clipboard text.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="62" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1ad36b4ea62e12b8eb4e26bb33f451998b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.get_text</definition>
        <argsstring>(self)</argsstring>
        <name>get_text</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Retrieve this instance&apos;s text content.  If no text content
    is available, this method returns *None*.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="505" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="505" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a915dc706e2779f028d2d20ea8eabb20d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.has_format</definition>
        <argsstring>(self, format)</argsstring>
        <name>has_format</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>format</type>
          <defname>format</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Determine whether this instance has content for the given
    *format*.

    Arguments:
     - *format* (int) -- the clipboard format to look for.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="452" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="452" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a12b10cd6a9f325683d28bd519fcbf331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.has_text</definition>
        <argsstring>(self)</argsstring>
        <name>has_text</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Determine whether this instance has text content. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="500" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="500" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a2c6241f533f81c67b803426646632e16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.set_format</definition>
        <argsstring>(self, format, content)</argsstring>
        <name>set_format</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>format</type>
          <defname>format</defname>
        </param>
        <param>
          <type>content</type>
          <defname>content</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Set this instance&apos;s content for the given *format*.

    Arguments:
     - *format* (int) -- the clipboard format to set.
     - *content* (string) -- the clipboard contents to set.

    If the given *format* is not available, a *ValueError*
    is raised.

    If *None* is given as the *content*, any content stored
    for the given *format* will be cleared.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="480" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="480" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1abbf6ac05d4a76d8cec1d647745a2c3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.set_system_text</definition>
        <argsstring>(cls, content)</argsstring>
        <name>set_system_text</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1pyperclip__clipboard_1_1PyperclipClipboard_1a43c9358976ebdea9ad6264e842e8313d">set_system_text</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__clipboard_1_1BaseX11Clipboard_1ae861d9330aa33cf55ba357ab63179d3b">set_system_text</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a74c04b202577085e95476186cf584fdb">set_system_text</reimplementedby>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>content</type>
          <defname>content</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Set the system clipboard text.

    Arguments:
     - *content* (string) -- the clipboard contents to set.

    If *None* is given as the *content*, text on the system
    clipboard will be cleared.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="69" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="69" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a98dd8df4a48d5ff22d1e81329e0dc8f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.set_text</definition>
        <argsstring>(self, content)</argsstring>
        <name>set_text</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>content</type>
          <defname>content</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Set the text content for this instance.

    Arguments:
     - *content* (string) -- the text content to set.

    If *None* is given as the *content*, any text content
    stored in this instance will be cleared.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="518" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="518" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a50ea58fe86ea83fcd51eb4cff36d3536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.synchronized_changes</definition>
        <argsstring>(cls, timeout, step=0.001, formats=None, initial_clipboard=None)</argsstring>
        <name>synchronized_changes</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a798aab7e8996bd0604af4174d71270cf">synchronized_changes</reimplementedby>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>timeout</type>
          <defname>timeout</defname>
        </param>
        <param>
          <type>step</type>
          <defname>step</defname>
          <defval>0.001</defval>
        </param>
        <param>
          <type>formats</type>
          <defname>formats</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>initial_clipboard</type>
          <defname>initial_clipboard</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Context manager for synchronizing local and system clipboard
    changes.  This takes the same arguments as the
    :meth:`wait_for_change` method.

    Arguments:
     - *timeout* (float) -- timeout in seconds.
     - *step* (float, default: 0.001) -- number of seconds between
       each check.
     - *formats* (iterable, default: None) -- if not None, only
       changes to the given content formats will register.  If None,
       all formats will be observed.
     - *initial_clipboard* (Clipboard, default: None) -- if a
       clipboard is given, the method will wait until the system
       clipboard differs from the instance&apos;s contents.

    Use with a Python &apos;with&apos; block::

       from dragonfly import Clipboard, Key

       # Copy the selected text with Ctrl+C and wait until a system
       #  clipboard change is detected.
       timeout = 3
       with Clipboard.synchronized_changes(timeout):
   Key(&quot;c-c&quot;, use_hardware=True).execute()

       # Retrieve the system text.
       text = Clipboard.get_system_text()</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="161" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="161" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1aa1e9cf841915023c8c4389d26825aa92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard.wait_for_change</definition>
        <argsstring>(cls, timeout, step=0.001, formats=None, initial_clipboard=None)</argsstring>
        <name>wait_for_change</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a0d8e91ca772fdbbc13351a2839092a42">wait_for_change</reimplementedby>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>timeout</type>
          <defname>timeout</defname>
        </param>
        <param>
          <type>step</type>
          <defname>step</defname>
          <defval>0.001</defval>
        </param>
        <param>
          <type>formats</type>
          <defname>formats</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>initial_clipboard</type>
          <defname>initial_clipboard</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Wait (poll) for the system clipboard to change.

    This is a blocking method which returns whether or not the
    system clipboard changed within a specified timeout period.

    Arguments:
     - *timeout* (float) -- timeout in seconds.
     - *step* (float, default: 0.001) -- number of seconds between
       each check.
     - *formats* (iterable, default: None) -- if not None, only
       changes to the given content formats will register.  If None,
       all formats will be observed.
     - *initial_clipboard* (Clipboard, default: None) -- if a
       clipboard is given, the method will wait until the system
       clipboard differs from the instance&apos;s contents.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="107" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="107" bodyend="158"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1af993c64b7d9dae2411f08bf8aff4564e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard._clipboard_formats_changed</definition>
        <argsstring>(cls, formats, clipboard1, clipboard2)</argsstring>
        <name>_clipboard_formats_changed</name>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>formats</type>
          <defname>formats</defname>
        </param>
        <param>
          <type>clipboard1</type>
          <defname>clipboard1</defname>
        </param>
        <param>
          <type>clipboard2</type>
          <defname>clipboard2</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="90" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="90" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a4d7791f11aef7a86ccebee4f3cdf0257" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard._convert_format_hdrop</definition>
        <argsstring>(cls, content)</argsstring>
        <name>_convert_format_hdrop</name>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>content</type>
          <defname>content</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="234" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="234" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a30896a65cd8ef592678a9b31d22efb43" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard._convert_format_text</definition>
        <argsstring>(cls, content)</argsstring>
        <name>_convert_format_text</name>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>content</type>
          <defname>content</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="206" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="206" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1acd0b4355dfa6593a49e7cd3d298b05db" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_clipboard.BaseClipboard._convert_format_unicode</definition>
        <argsstring>(cls, content)</argsstring>
        <name>_convert_format_unicode</name>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>content</type>
          <defname>content</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="220" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="220" bodyend="232"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Base clipboard class.
</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>dragonfly.windows.win32_clipboard.Win32Clipboard</label>
        <link refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dragonfly.windows.pyperclip_clipboard.PyperclipClipboard</label>
        <link refid="classdragonfly_1_1windows_1_1pyperclip__clipboard_1_1PyperclipClipboard"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>dragonfly.windows.x11_clipboard.BaseX11Clipboard</label>
        <link refid="classdragonfly_1_1windows_1_1x11__clipboard_1_1BaseX11Clipboard"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>object</label>
      </node>
      <node id="6">
        <label>dragonfly.windows.x11_clipboard.XselClipboard</label>
        <link refid="classdragonfly_1_1windows_1_1x11__clipboard_1_1XselClipboard"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dragonfly.windows.base_clipboard.BaseClipboard</label>
        <link refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>object</label>
      </node>
      <node id="1">
        <label>dragonfly.windows.base_clipboard.BaseClipboard</label>
        <link refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" line="43" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_clipboard.py" bodystart="43" bodyend="544"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a598c4eed65f7687bb8e262899da2dd06" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>__eq__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a1caf3f9afe6d0e3a8a7ed7fea80cc7af" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a2db43fb9a198633fdd137287573c573d" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>__lt__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1aa00beba334d8609af5cd7af09fd6e77a" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>__ne__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1aec4171d54222fe4ab6b7c83482657581" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>__repr__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1af993c64b7d9dae2411f08bf8aff4564e" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>_clipboard_formats_changed</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1af39dbd9ac31f15ba2707f978b3b05d91" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>_contents</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a4d7791f11aef7a86ccebee4f3cdf0257" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>_convert_format_hdrop</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a30896a65cd8ef592678a9b31d22efb43" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>_convert_format_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1acd0b4355dfa6593a49e7cd3d298b05db" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>_convert_format_unicode</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a199fe68b100f319cea29cf22a95095e5" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>_log</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a0a2bd0e2c4912503fcb8417966a772be" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>clear_clipboard</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a49e12deba0b20d3587f8fd21236224a9" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>convert_format_content</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1ac516f0c2bb2bd381ae17aab97bb63009" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>copy_from_system</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a3997ec766f4074c17002e8b60a002add" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>copy_to_system</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1ab55ba4dc9870fd28f9e77a20918a599f" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>format_hdrop</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a0540fe3657e7ef20b11653c2f3a75025" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>format_names</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a631fe3e953bfd75114fd0482d739faed" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>format_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a39ef1ac01fd40954c1204567196af872" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>format_unicode</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1ad0d003bcc7b43da4d97bb7cb7c4a4580" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>get_available_formats</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a9199d017cc8b606824a9ab1e38ccf0f7" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>get_format</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a796603f97fdd64124c9a95f6c4a64463" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>get_system_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1ad36b4ea62e12b8eb4e26bb33f451998b" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>get_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a915dc706e2779f028d2d20ea8eabb20d" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>has_format</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a12b10cd6a9f325683d28bd519fcbf331" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>has_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a2c6241f533f81c67b803426646632e16" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>set_format</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1abbf6ac05d4a76d8cec1d647745a2c3fd" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>set_system_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a98dd8df4a48d5ff22d1e81329e0dc8f4" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>set_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a50ea58fe86ea83fcd51eb4cff36d3536" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>synchronized_changes</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a813f3b8689ca73ad55c1cfd249c2c3ab" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1aa1e9cf841915023c8c4389d26825aa92" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_clipboard::BaseClipboard</scope><name>wait_for_change</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
