<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="methods_8py" kind="file" language="Python">
    <compoundname>methods.py</compoundname>
    <innerclass refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory" prot="public">dragonfly::rpc::methods::RPCRecognitionHistory</innerclass>
    <innernamespace refid="namespacedragonfly_1_1rpc_1_1methods">dragonfly::rpc::methods</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacedragonfly_1_1rpc_1_1methods" refkind="compound"><highlight class="comment">#<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Dragonfly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(c)<sp/>Copyright<sp/>2007,<sp/>2008<sp/>by<sp/>Christo<sp/>Butcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>LGPL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>Dragonfly.<sp/><sp/>If<sp/>not,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral">RPC<sp/>methods</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral">----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral">For<sp/>RPC<sp/>methods<sp/>to<sp/>work<sp/>they<sp/>must<sp/>be<sp/>added<sp/>to<sp/>the<sp/>server<sp/>with</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">:meth:`add_method`.<sp/>For<sp/>example::</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>from<sp/>dragonfly.engines<sp/>import<sp/>get_engine</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>from<sp/>dragonfly.rpc<sp/>import<sp/>RPCServer</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#<sp/>Initialise<sp/>and<sp/>start<sp/>the<sp/>server.</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>server<sp/>=<sp/>RPCServer()</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>server.start()</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#<sp/>Add<sp/>the<sp/>RPC<sp/>method<sp/>via<sp/>decoration.</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>@server.add_method</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>def<sp/>get_engine_language():</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>get_engine().language</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#<sp/>add_method()<sp/>can<sp/>also<sp/>be<sp/>used<sp/>normally.</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>server.add_method(get_engine_language)</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral">Sending<sp/>requests</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">============================================================================</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">Requests<sp/>can<sp/>be<sp/>sent<sp/>to<sp/>the<sp/>server<sp/>using,<sp/>the<sp/>:meth:`send_rpc_request`</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral">function<sp/>from<sp/>Python::</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>send_rpc_request(</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>server.url,<sp/>method=&quot;get_engine_language&quot;,</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params=[server.security_token],<sp/>id=0</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral">Other<sp/>tools<sp/>such<sp/>as<sp/>`curl<sp/>&lt;https://curl.haxx.se/&gt;`_<sp/>can<sp/>also<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral">..<sp/><sp/>code::<sp/>shell</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Using<sp/>positional<sp/>arguments:</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>$<sp/>curl<sp/>--data-binary<sp/>&apos;{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:<sp/>&quot;0&quot;,&quot;method&quot;:<sp/>&quot;speak&quot;,&quot;params&quot;:<sp/>[&quot;hello<sp/>world&quot;,<sp/>&quot;&lt;security-token&gt;&quot;]}&apos;<sp/>-H<sp/>&apos;content-type:text/json;&apos;<sp/>http://127.0.0.1:50051</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Using<sp/>key<sp/>word<sp/>arguments:</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>$<sp/>curl<sp/>--data-binary<sp/>&apos;{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:<sp/>&quot;0&quot;,&quot;method&quot;:<sp/>&quot;speak&quot;,&quot;params&quot;:<sp/>{&quot;text&quot;:<sp/>&quot;hello<sp/>world&quot;,<sp/>&quot;security_token&quot;:<sp/>&quot;&lt;security-token&gt;&quot;}}&apos;<sp/>-H<sp/>&apos;content-type:text/json;&apos;<sp/>http://127.0.0.1:50051</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral">Built-in<sp/>RPC<sp/>methods</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral">============================================================================</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>six<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>string_types</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines" kindref="compound">dragonfly.engines</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>get_engine</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines_1_1base" kindref="compound">dragonfly.engines.base</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>MimicFailure</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1recobs" kindref="compound">dragonfly.grammar.recobs</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>RecognitionHistory</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1rule__compound" kindref="compound">dragonfly.grammar.rule_compound</ref><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>CompoundRule</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1rule__mapping" kindref="compound">dragonfly.grammar.rule_mapping</ref><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>MappingRule</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="namespacedragonfly_1_1rpc_1_1methods_1ab5fb514a9fc69e848fa74c778ef979df" refkind="member"><highlight class="normal">methods<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="namespacedragonfly_1_1rpc_1_1methods_1ac632eec8b10ab16399d2150e0a38fe8f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacedragonfly_1_1rpc_1_1methods_1ac632eec8b10ab16399d2150e0a38fe8f" kindref="member">_add_method</ref>(m):</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>methods.append(m)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">@_add_method</highlight></codeline>
<codeline lineno="87" refid="namespacedragonfly_1_1rpc_1_1methods_1a51f96bf8e60e2f326c4e374fb5bb5180" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacedragonfly_1_1rpc_1_1methods_1a51f96bf8e60e2f326c4e374fb5bb5180" kindref="member">list_grammars</ref>():</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Get<sp/>a<sp/>list<sp/>of<sp/>grammars<sp/>loaded<sp/>into<sp/>the<sp/>current<sp/>engine.</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>includes<sp/>grammar<sp/>rules<sp/>and<sp/>attributes.</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Send<sp/>rule<sp/>and<sp/>grammar<sp/>data<sp/>back<sp/>to<sp/>the<sp/>client.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>grammars<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>engine<sp/>=<sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>()</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>grammar<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>engine.grammars:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rules<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>rule<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>grammar.rules:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(rule,<sp/>CompoundRule):</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs<sp/>=<sp/>[rule.spec]</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>isinstance(rule,<sp/>MappingRule):</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs<sp/>=<sp/>sorted(rule.specs)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs<sp/>=<sp/>[rule.element.gstring()]</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rules.append({</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">:<sp/>rule.name,<sp/></highlight><highlight class="stringliteral">&quot;specs&quot;</highlight><highlight class="normal">:<sp/>specs,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exported&quot;</highlight><highlight class="normal">:<sp/>rule.exported,<sp/></highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">:<sp/>rule.active</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>grammar<sp/>attributes<sp/>to<sp/>the<sp/>grammars<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_active<sp/>=<sp/>any([r.active<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>r<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>grammar.rules])</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammars.append({</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">:<sp/>grammar.name,<sp/></highlight><highlight class="stringliteral">&quot;rules&quot;</highlight><highlight class="normal">:<sp/>rules,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;enabled&quot;</highlight><highlight class="normal">:<sp/>grammar.enabled,<sp/></highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">:<sp/>is_active})</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grammars</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">@_add_method</highlight></codeline>
<codeline lineno="119" refid="namespacedragonfly_1_1rpc_1_1methods_1a58a3d09336f9390cedca681ea655d06a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacedragonfly_1_1rpc_1_1methods_1a58a3d09336f9390cedca681ea655d06a" kindref="member">mimic</ref>(words):</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Mimic<sp/>the<sp/>given<sp/>*words*.</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>words:<sp/>string<sp/>or<sp/>list<sp/>of<sp/>words<sp/>to<sp/>mimic</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:returns:<sp/>whether<sp/>the<sp/>mimic<sp/>was<sp/>a<sp/>success</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:rtype:<sp/>bool</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(words,<sp/>string_types):</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>words.split()</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>().<ref refid="namespacedragonfly_1_1rpc_1_1methods_1a58a3d09336f9390cedca681ea655d06a" kindref="member">mimic</ref>(words)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>MimicFailure:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">@_add_method</highlight></codeline>
<codeline lineno="137" refid="namespacedragonfly_1_1rpc_1_1methods_1a4641822b496cadaba27dcac12e81af9d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacedragonfly_1_1rpc_1_1methods_1a4641822b496cadaba27dcac12e81af9d" kindref="member">speak</ref>(text):</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Speak<sp/>the<sp/>given<sp/>*text*<sp/>using<sp/>text-to-speech<sp/>using<sp/>:meth:`engine.speak`.</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>text:<sp/>text<sp/>to<sp/>speak<sp/>using<sp/>text-to-speech</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>text:<sp/>str</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(text,<sp/>string_types):</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;text<sp/>must<sp/>be<sp/>a<sp/>string&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>().<ref refid="namespacedragonfly_1_1rpc_1_1methods_1a4641822b496cadaba27dcac12e81af9d" kindref="member">speak</ref>(text)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">@_add_method</highlight></codeline>
<codeline lineno="151" refid="namespacedragonfly_1_1rpc_1_1methods_1a4507d2d7e0d3d94cd565f6b5dbf84d1b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacedragonfly_1_1rpc_1_1methods_1a4507d2d7e0d3d94cd565f6b5dbf84d1b" kindref="member">get_engine_language</ref>():</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Get<sp/>the<sp/>current<sp/>engine&apos;s<sp/>language.</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:returns:<sp/>language<sp/>code</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:rtype:<sp/>str</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>().language</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="namespacedragonfly_1_1rpc_1_1methods_1a0bda637d310bd19df1f3f3acb49e9b1e" refkind="member"><highlight class="normal">_history_closure<sp/>=<sp/>[</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory" kindref="compound">RPCRecognitionHistory</ref>(<ref refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionHistory" kindref="compound">RecognitionHistory</ref>):</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory_1aa316a020f4758cef254d2d7ae1d336d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory_1aa316a020f4758cef254d2d7ae1d336d6" kindref="member">__init__</ref>(self,<sp/>length=10,<sp/>record_failures=False):</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecognitionHistory.__init__(self,<sp/>length)</highlight></codeline>
<codeline lineno="168" refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory_1a772da9bdf0905c2cdf109df74b33c3ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory_1a772da9bdf0905c2cdf109df74b33c3ae" kindref="member">_record_failures</ref><sp/>=<sp/>record_failures</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory_1a998e63a550b9aa4d74e900340af70d38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory_1a998e63a550b9aa4d74e900340af70d38" kindref="member">on_failure</ref>(self):</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Include<sp/>recognition<sp/>failures<sp/>if<sp/>requested.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory_1a772da9bdf0905c2cdf109df74b33c3ae" kindref="member">_record_failures</ref>:</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.append(</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionHistory_1a9e0b300efceb96a2a2bda8d5b3fdc257" kindref="member">_length</ref>:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>len(self)<sp/>&gt;<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionHistory_1a9e0b300efceb96a2a2bda8d5b3fdc257" kindref="member">_length</ref>:</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.pop(0)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">@_add_method</highlight></codeline>
<codeline lineno="180" refid="namespacedragonfly_1_1rpc_1_1methods_1af13813b4cc8ca2ee49211106ee142b46" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacedragonfly_1_1rpc_1_1methods_1af13813b4cc8ca2ee49211106ee142b46" kindref="member">register_history</ref>(length=10,<sp/>record_failures=False):</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Register<sp/>an<sp/>internal<sp/>recognition<sp/>observer.</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>length:<sp/>length<sp/>to<sp/>initialize<sp/>the<sp/>``RecognitionHistory``<sp/>instance</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>(default<sp/>``10``).</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>record_failures:<sp/>whether<sp/>to<sp/>record<sp/>recognition<sp/>failures</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(default<sp/>``False``).</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>record_failures:<sp/>bool</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/>length:<sp/>int</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_history_closure[0]<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;history<sp/>has<sp/>already<sp/>been<sp/>registered&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>obs<sp/>=<sp/><ref refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory" kindref="compound">RPCRecognitionHistory</ref>(length,<sp/>record_failures)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>obs.register()</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>_history_closure[0]<sp/>=<sp/>obs</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">@_add_method</highlight></codeline>
<codeline lineno="200" refid="namespacedragonfly_1_1rpc_1_1methods_1a2e1882f21eb81ba53d31e06e6f3fde6a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacedragonfly_1_1rpc_1_1methods_1a2e1882f21eb81ba53d31e06e6f3fde6a" kindref="member">get_recognition_history</ref>():</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Get<sp/>the<sp/>recognition<sp/>history<sp/>if<sp/>an<sp/>observer<sp/>is<sp/>registered.</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>:meth:`register_history`<sp/>method<sp/>**must**<sp/>be<sp/>called<sp/>to<sp/>register<sp/>the</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>observer<sp/>first.</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:returns:<sp/>history</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:rtype:<sp/>list</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>obs<sp/>=<sp/>_history_closure[0]</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>obs<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;the<sp/>recognition<sp/>observer<sp/>is<sp/>not<sp/>registered&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list(obs)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">@_add_method</highlight></codeline>
<codeline lineno="218" refid="namespacedragonfly_1_1rpc_1_1methods_1ad9392275715129a324e79eb74f2a7cd1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacedragonfly_1_1rpc_1_1methods_1ad9392275715129a324e79eb74f2a7cd1" kindref="member">is_in_speech</ref>():</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Whether<sp/>the<sp/>user<sp/>is<sp/>currently<sp/>speaking.</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>:meth:`register_history`<sp/>method<sp/>**must**<sp/>be<sp/>called<sp/>to<sp/>register<sp/>the</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>observer<sp/>first.</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:rtype:<sp/>bool</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>obs<sp/>=<sp/>_history_closure[0]</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>obs<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;the<sp/>recognition<sp/>observer<sp/>is<sp/>not<sp/>registered&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>obs.complete</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">@_add_method</highlight></codeline>
<codeline lineno="235" refid="namespacedragonfly_1_1rpc_1_1methods_1af0fe53cb0b15923dba79ee1ced283251" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacedragonfly_1_1rpc_1_1methods_1af0fe53cb0b15923dba79ee1ced283251" kindref="member">unregister_history</ref>():</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Unregister<sp/>the<sp/>internal<sp/>recognition<sp/>observer.</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>_history_closure[0]<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;the<sp/>recognition<sp/>observer<sp/>is<sp/>not<sp/>registered&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>_history_closure[0].unregister()</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>_history_closure[0]<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py"/>
  </compounddef>
</doxygen>
