<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::grammar::rule_base::Rule</compoundname>
    <basecompoundref prot="public" virt="non-virtual">object</basecompoundref>
    <derivedcompoundref refid="classdragonfly_1_1grammar_1_1rule__base_1_1ImportedRule" prot="public" virt="non-virtual">dragonfly.grammar.rule_base.ImportedRule</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1grammar_1_1rule__basic_1_1BasicRule" prot="public" virt="non-virtual">dragonfly.grammar.rule_basic.BasicRule</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" prot="public" virt="non-virtual">dragonfly.grammar.rule_compound.CompoundRule</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1grammar_1_1rule__mapping_1_1MappingRule" prot="public" virt="non-virtual">dragonfly.grammar.rule_mapping.MappingRule</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1test_1_1element__tester_1_1ElementTester_1_1__ElementTestRule" prot="public" virt="non-virtual">dragonfly.test.element_tester.ElementTester._ElementTestRule</derivedcompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a75fdcef87114b992f3ba76c3ec19c12e" prot="private" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_log</definition>
        <argsstring></argsstring>
        <name>_log</name>
        <initializer>=  logging.getLogger(&quot;rule&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="67" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a63708f8b55821fc912d3c9613659c30c" prot="private" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_log_begin</definition>
        <argsstring></argsstring>
        <name>_log_begin</name>
        <initializer>=  logging.getLogger(&quot;rule&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="68" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ab2392a9b9a401b2734055021cd361627" prot="private" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_log_eval</definition>
        <argsstring></argsstring>
        <name>_log_eval</name>
        <initializer>=  logging.getLogger(&quot;grammar.eval&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="65" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a3bbefb0e38e96771de43401ff853e16b" prot="private" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_log_load</definition>
        <argsstring></argsstring>
        <name>_log_load</name>
        <initializer>=  logging.getLogger(&quot;grammar.load&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="64" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ab2d4c33c6947d06f136d722a60a6ad69" prot="private" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_log_proc</definition>
        <argsstring></argsstring>
        <name>_log_proc</name>
        <initializer>=  logging.getLogger(&quot;grammar.process&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="66" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aac3106f975f474720ae8e2108a559176" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int dragonfly.grammar.rule_base.Rule::_next_anonymous_id</definition>
        <argsstring></argsstring>
        <name>_next_anonymous_id</name>
        <initializer>=  0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="71" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aa4683441cd4d4ab5b779a47968523e57" prot="public" static="yes" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::active</definition>
        <argsstring></argsstring>
        <name>active</name>
        <initializer>=  property(lambda self: self._active,
                        doc=&quot;This rule&apos;s active state.  (Read-only)&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="115" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ad62260e38a81f9c556a10e843ab003ad" prot="public" static="yes" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::context</definition>
        <argsstring></argsstring>
        <name>context</name>
        <initializer>=  property(lambda self: self._context,
                       doc=&quot;This rule&apos;s context, under which it will be &quot;
                           &quot;<ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aa4683441cd4d4ab5b779a47968523e57" kindref="member">active</ref> and receive recognitions if it is also &quot;
                           &quot;<ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a242823b84443b08f3d27d79ec5d1bb98" kindref="member">enabled</ref> and its <ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a32ba29c3a4623ac9bce6009b7efc70ce" kindref="member">grammar</ref> is active.&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="180" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ae6c1b3c23c33d24fb8439d4ab86b83aa" prot="public" static="yes" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::element</definition>
        <argsstring></argsstring>
        <name>element</name>
        <initializer>=  property(lambda self: self._element,
                        doc=&quot;This rule&apos;s root element.  (Read-only)&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="105" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a242823b84443b08f3d27d79ec5d1bb98" prot="public" static="yes" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::enabled</definition>
        <argsstring></argsstring>
        <name>enabled</name>
        <initializer>=  property(lambda self: self._enabled,
                        doc=&quot;This rule&apos;s enabled state. An enabled rule&quot;
                            &quot; is <ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aa4683441cd4d4ab5b779a47968523e57" kindref="member">active</ref> when its <ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ad62260e38a81f9c556a10e843ab003ad" kindref="member">context</ref> matches, a&quot;
                            &quot; disabled rule is never <ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aa4683441cd4d4ab5b779a47968523e57" kindref="member">active</ref> regardless&quot;
                            &quot; of context.  (Read-only)&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="117" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a7af29ec6e071aaa4e25205ca312fdd72" prot="public" static="yes" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::exported</definition>
        <argsstring></argsstring>
        <name>exported</name>
        <initializer>=  property(lambda self: self._exported,
                        doc=&quot;This rule&apos;s exported status. See&quot;
                            &quot; :ref:`RefObjectModelRulesExported` for&quot;
                            &quot; more info.  (Read-only)&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="107" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a32ba29c3a4623ac9bce6009b7efc70ce" prot="public" static="yes" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::grammar</definition>
        <argsstring></argsstring>
        <name>grammar</name>
        <initializer>=  property(<ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a478b03a236aba8b50f2cf9ffe6119c69" kindref="member">_get_grammar</ref>, <ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1afa435043469a44e51138758804b2f598" kindref="member">_set_grammar</ref>,
                       doc=&quot;This rule&apos;s grammar object.  (Set once)&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="157" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ae10a43239703a5932f08e712dd2416a7" prot="public" static="yes" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::imported</definition>
        <argsstring></argsstring>
        <name>imported</name>
        <initializer>=  property(lambda self: self._imported,
                        doc=&quot;This rule&apos;s imported status. See&quot;
                            &quot; :ref:`RefObjectModelRulesImported` for&quot;
                            &quot; more info.  (Read-only)&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="111" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ab5401b17fbd0336bc78a3c066c5dd994" prot="public" static="yes" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <initializer>=  property(lambda self: self._name,
                        doc=&quot;This rule&apos;s name.  (Read-only)&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="103" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a5fa26e7246b883fc7e2fef8a32a931be" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_active</definition>
        <argsstring></argsstring>
        <name>_active</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="88" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a72e22c4830016ae96b9079f1329fb02b" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_context</definition>
        <argsstring></argsstring>
        <name>_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Set the context for this rule, under which it will be active and
    receive recognitions if it is also enabled and its grammar is
    active.

    Use of this method overwrites any previous context.

    Contexts can be modified at any time, but will only be checked
    when :meth:`process_begin` is called.

    :param context: context within which to be active.  If *None*,
the rule will be active when its grammar is.
    :type context: Context|None
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="93" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a5f244a7ccce70fbf7f2fa0fc26ebf5c5" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_element</definition>
        <argsstring></argsstring>
        <name>_element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="77" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1accac7d6feda0165d863fdfcdee7674fd" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_enabled</definition>
        <argsstring></argsstring>
        <name>_enabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Enable this rule so that it is active to receive
    recognitions when its context matches.</verbatim></para>
<para><verbatim>    Disable this rule so that it is never active to
    receive recognitions, regardless of whether its context
    matches or not.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="89" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a9e1a66ec204cfc3e4ff43cfd26700c94" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_exported</definition>
        <argsstring></argsstring>
        <name>_exported</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="79" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a232f71f2b67ac6d567d349a5ae249461" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_grammar</definition>
        <argsstring></argsstring>
        <name>_grammar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="94" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1acc246f5f8cd4333fe5dfac1e24d8b131" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_imported</definition>
        <argsstring></argsstring>
        <name>_imported</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="78" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aa10ab7422e75da56283a4cc1c7da6985" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.rule_base.Rule::_name</definition>
        <argsstring></argsstring>
        <name>_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="86" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a576f085cc4f4ecdf154584ec8ceb3e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.__init__</definition>
        <argsstring>(self, name=None, element=None, context=None, imported=False, exported=True)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ab5401b17fbd0336bc78a3c066c5dd994" kindref="member">name</ref></type>
          <defname>name</defname>
          <defval>None</defval>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ae6c1b3c23c33d24fb8439d4ab86b83aa" kindref="member">element</ref></type>
          <defname>element</defname>
          <defval>None</defval>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ad62260e38a81f9c556a10e843ab003ad" kindref="member">context</ref></type>
          <defname>context</defname>
          <defval>None</defval>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ae10a43239703a5932f08e712dd2416a7" kindref="member">imported</ref></type>
          <defname>imported</defname>
          <defval>False</defval>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a7af29ec6e071aaa4e25205ca312fdd72" kindref="member">exported</ref></type>
          <defname>exported</defname>
          <defval>True</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="73" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="73" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a650f73cead2a52ea698531a69a242d1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.__repr__</definition>
        <argsstring>(self)</argsstring>
        <name>__repr__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="97" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a5436cd9a899ed82891f758df721ec6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.activate</definition>
        <argsstring>(self, force=False)</argsstring>
        <name>activate</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>force</type>
          <defname>force</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="228" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="228" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a4182eda5b94f8094902ad609450ee11f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.deactivate</definition>
        <argsstring>(self)</argsstring>
        <name>deactivate</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="240" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="240" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ac0b4fbdf1d22cd5e22f76cd73d9e6d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.decode</definition>
        <argsstring>(self, state)</argsstring>
        <name>decode</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>state</type>
          <defname>state</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="274" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="274" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a9c1ad9ae6e3df632c27026df085975bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.dependencies</definition>
        <argsstring>(self, memo)</argsstring>
        <name>dependencies</name>
        <reimplementedby refid="classdragonfly_1_1grammar_1_1rule__base_1_1ImportedRule_1a743e7790abe69456bb7c5756d474fe6a">dependencies</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>memo</type>
          <defname>memo</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="262" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="262" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a6b035ec7557e6fb3e7323d56e9f156b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.disable</definition>
        <argsstring>(self)</argsstring>
        <name>disable</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Disable this rule so that it is never active to
    receive recognitions, regardless of whether its context
    matches or not.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="132" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="132" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a9ec8b499154a709d7ddadb33f11c31b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.enable</definition>
        <argsstring>(self)</argsstring>
        <name>enable</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Enable this rule so that it is active to receive
    recognitions when its context matches.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="123" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="123" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aeac96c1300b6a1ba64ef5faf23a859a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.gstring</definition>
        <argsstring>(self)</argsstring>
        <name>gstring</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="255" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="255" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a670d76c19e2f0f59349bc01f983adf24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.process_begin</definition>
        <argsstring>(self, executable, title, handle)</argsstring>
        <name>process_begin</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>executable</type>
          <defname>executable</defname>
        </param>
        <param>
          <type>title</type>
          <defname>title</defname>
        </param>
        <param>
          <type>handle</type>
          <defname>handle</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Start of phrase callback.

    This method is called when the speech recognition
    engine detects that the user has begun to speak a
    phrase.  It is called by the rule&apos;s containing grammar
    if the grammar and this rule are active.

    The default implementation of this method checks
    whether this rule&apos;s context matches, and if it does
    this method calls
    :meth:`._process_begin`.

    Arguments:
     - *executable* -- the full path to the module whose
       window is currently in the foreground
     - *title* -- window title of the foreground window
     - *handle* -- window handle to the foreground window</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="187" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="187" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aa5b6bf0ae12ca48d6ad901c1d8e68b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.process_recognition</definition>
        <argsstring>(self, node)</argsstring>
        <name>process_recognition</name>
        <reimplementedby refid="classdragonfly_1_1test_1_1element__tester_1_1ElementTester_1_1__ElementTestRule_1a2caf2a169500994c014b6b9f5d9a9685">process_recognition</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule_1ad684e0a13e66e0372017007daea9580e">process_recognition</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1grammar_1_1rule__basic_1_1BasicRule_1a83f87b9c10b08f42627d1f8c85952b4b">process_recognition</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1grammar_1_1rule__mapping_1_1MappingRule_1a77090703fbc13fae33e278a11938caa0">process_recognition</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Rule recognition callback.

    This method is called when the user has spoken words matching
    this rule&apos;s contents.  This method is called only once for
    each recognition, and only for the matching top-level rule.

    The default implementation of this method does nothing.

    .. note::

       This is generally the method which developers should
       override in derived rule classes to give them custom
       functionality when a top-level rule is recognized.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="334" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="334" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1af25b9727d10e38f7db3f42f433f59320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.process_results</definition>
        <argsstring>(self, data)</argsstring>
        <name>process_results</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>data</type>
          <defname>data</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="331" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="331" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a7a6bda63736ee144f0e22f63185dbb1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.set_context</definition>
        <argsstring>(self, context)</argsstring>
        <name>set_context</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ad62260e38a81f9c556a10e843ab003ad" kindref="member">context</ref></type>
          <defname>context</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Set the context for this rule, under which it will be active and
    receive recognitions if it is also enabled and its grammar is
    active.

    Use of this method overwrites any previous context.

    Contexts can be modified at any time, but will only be checked
    when :meth:`process_begin` is called.

    :param context: context within which to be active.  If *None*,
the rule will be active when its grammar is.
    :type context: Context|None
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="160" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="160" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ae7687e1ba3425cdd449733f726595961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule.value</definition>
        <argsstring>(self, node)</argsstring>
        <name>value</name>
        <reimplementedby refid="classtest__dgn__import_1_1RecognitionAnalysisRule_1a679f3e9b8d5cfa5882d37939bf3da216">value</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1dictation_1_1__UserDictationSequenceRule_1a658fa6d7aa5548bf2d20d7341fb29c82">value</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1grammar_1_1rule__basic_1_1BasicRule_1addfa4042320e653c75f86267b02db414">value</reimplementedby>
        <reimplementedby refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule_1acf2847fefd4e2eaba493e0a323dcad2f">value</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1grammar_1_1rule__mapping_1_1MappingRule_1ac3e8517ea595895ea1a2518dcefad4f5">value</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Start of phrase callback.

    This method is called to obtain the semantic value associated
    with a particular recognition.  It could be called from
    another rule&apos;s :meth:`.value` if
    that rule references this rule.  If also be called from this
    rule&apos;s :meth:`.process_recognition`
    if that method has been overridden to do so in a derived
    class.

    The default implementation of this method returns the value of
    this rule&apos;s root element.

    .. note::

       This is generally the method which developers should
       override in derived rule classes to change the default
       semantic value of a recognized rule.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="284" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="284" bodyend="307"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a478b03a236aba8b50f2cf9ffe6119c69" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule._get_grammar</definition>
        <argsstring>(self)</argsstring>
        <name>_get_grammar</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="143" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="143" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aee4c3167defe093caa2f816d0bac44c4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule._process_begin</definition>
        <argsstring>(self)</argsstring>
        <name>_process_begin</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Start of phrase detection callback.

    This method is called when the speech recognition
    engine detects that the user has begun to speak a
    phrase.  It is called by this rule&apos;s
    :meth:`.process_begin`
    after some context checks.

    The default implementation of this method does nothing.

    .. note::

       This is generally the method which developers should
       override in derived rule classes to give them custom
       functionality when the start of a phrase is detected.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="311" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="311" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1afa435043469a44e51138758804b2f598" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.rule_base.Rule._set_grammar</definition>
        <argsstring>(self, grammar)</argsstring>
        <name>_set_grammar</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a32ba29c3a4623ac9bce6009b7efc70ce" kindref="member">grammar</ref></type>
          <defname>grammar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="145" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="145" bodyend="156"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>    Rule class for implementing complete or partial voice-commands.

    This rule class represents a voice-command or part of a voice-
    command.  It contains a root element, which defines the language
    construct of this rule.

    Constructor arguments:
     - *name* (*str*) -- name of this rule.  If *None*, a unique
       name will automatically be generated.
     - *element* (*Element*) --
       root element for this rule
     - *context* (*Context*, default: *None*) --
       context within which to be active.  If *None*, the rule will
       always be active when its grammar is active.
     - *imported* (boolean, default: *False*) --
       if true, this rule is imported from outside its grammar
     - *exported* (boolean, default: *True*) --
       if true, this rule is a complete top-level rule which can be
       spoken by the user.  This should be *True* for voice-commands
       that the user can speak.

    The *self._log* logger objects should be used in methods of
    derived classes for logging purposes.  It is a standard logger
    object from the *logger* module in the Python standard library.</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="20">
        <label>test_multiple_dictation.MixedDictationRule</label>
        <link refid="classtest__multiple__dictation_1_1MixedDictationRule"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dragonfly.grammar.rule_basic.BasicRule</label>
        <link refid="classdragonfly_1_1grammar_1_1rule__basic_1_1BasicRule"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>test_dgn_import.DgnDictationRule</label>
        <link refid="classtest__dgn__import_1_1DgnDictationRule"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>dragonfly.test.element_tester.ElementTester._ElementTestRule</label>
        <link refid="classdragonfly_1_1test_1_1element__tester_1_1ElementTester_1_1__ElementTestRule"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>kaldi_demo.ExampleDictationRule</label>
        <link refid="classkaldi__demo_1_1ExampleDictationRule"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>_fruit_toggle.BananaRule</label>
        <link refid="class__fruit__toggle_1_1BananaRule"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>test_multiple_dictation.RepeatedDictationRule</label>
        <link refid="classtest__multiple__dictation_1_1RepeatedDictationRule"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>_fruit_toggle.AppleRule</label>
        <link refid="class__fruit__toggle_1_1AppleRule"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>dragonfly.engines.backend_kaldi.dictation._UserDictationSequenceRule</label>
        <link refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1dictation_1_1__UserDictationSequenceRule"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>test_multiple_dictation.RecognitionAnalysisRule</label>
        <link refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dragonfly.grammar.rule_base.Rule</label>
        <link refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>dragonfly.grammar.rule_mapping.MappingRule</label>
        <link refid="classdragonfly_1_1grammar_1_1rule__mapping_1_1MappingRule"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>test_dgn_import.DgnLettersRule</label>
        <link refid="classtest__dgn__import_1_1DgnLettersRule"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>_functions_example.FunctionExamplesRule</label>
        <link refid="class__functions__example_1_1FunctionExamplesRule"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>object</label>
      </node>
      <node id="19">
        <label>test_multiple_dictation.ConsecutiveDictationRule</label>
        <link refid="classtest__multiple__dictation_1_1ConsecutiveDictationRule"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>test_dgn_import.DgnWordsRule</label>
        <link refid="classtest__dgn__import_1_1DgnWordsRule"/>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>_sphinx_engine_example.ExampleRule</label>
        <link refid="class__sphinx__engine__example_1_1ExampleRule"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>_notepad_foodgroups.FoodGroupRule</label>
        <link refid="class__notepad__foodgroups_1_1FoodGroupRule"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>_window_movement_example.MoveNotepadWindowRule</label>
        <link refid="class__window__movement__example_1_1MoveNotepadWindowRule"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>_window_movement_example.MoveForegroundWindowRule</label>
        <link refid="class__window__movement__example_1_1MoveForegroundWindowRule"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>_window_movement_example.MoveWindowRule</label>
        <link refid="class__window__movement__example_1_1MoveWindowRule"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>test_dgn_import.RecognitionAnalysisRule</label>
        <link refid="classtest__dgn__import_1_1RecognitionAnalysisRule"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>dragonfly.grammar.rule_compound.CompoundRule</label>
        <link refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dragonfly.grammar.rule_base.ImportedRule</label>
        <link refid="classdragonfly_1_1grammar_1_1rule__base_1_1ImportedRule"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>kaldi_demo.ExampleCustomRule</label>
        <link refid="classkaldi__demo_1_1ExampleCustomRule"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dragonfly.grammar.rule_base.Rule</label>
        <link refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>object</label>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" line="35" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/rule_base.py" bodystart="35" bodyend="353"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a576f085cc4f4ecdf154584ec8ceb3e2c" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a650f73cead2a52ea698531a69a242d1e" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>__repr__</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a5fa26e7246b883fc7e2fef8a32a931be" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_active</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a72e22c4830016ae96b9079f1329fb02b" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_context</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a5f244a7ccce70fbf7f2fa0fc26ebf5c5" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_element</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1accac7d6feda0165d863fdfcdee7674fd" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_enabled</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a9e1a66ec204cfc3e4ff43cfd26700c94" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_exported</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a478b03a236aba8b50f2cf9ffe6119c69" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_get_grammar</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a232f71f2b67ac6d567d349a5ae249461" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_grammar</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1acc246f5f8cd4333fe5dfac1e24d8b131" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_imported</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a75fdcef87114b992f3ba76c3ec19c12e" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_log</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a63708f8b55821fc912d3c9613659c30c" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_log_begin</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ab2392a9b9a401b2734055021cd361627" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_log_eval</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a3bbefb0e38e96771de43401ff853e16b" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_log_load</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ab2d4c33c6947d06f136d722a60a6ad69" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_log_proc</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aa10ab7422e75da56283a4cc1c7da6985" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_name</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aac3106f975f474720ae8e2108a559176" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_next_anonymous_id</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aee4c3167defe093caa2f816d0bac44c4" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_process_begin</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1afa435043469a44e51138758804b2f598" prot="private" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>_set_grammar</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a5436cd9a899ed82891f758df721ec6a6" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>activate</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aa4683441cd4d4ab5b779a47968523e57" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>active</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ad62260e38a81f9c556a10e843ab003ad" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>context</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a4182eda5b94f8094902ad609450ee11f" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>deactivate</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ac0b4fbdf1d22cd5e22f76cd73d9e6d3a" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>decode</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a9c1ad9ae6e3df632c27026df085975bf" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>dependencies</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a6b035ec7557e6fb3e7323d56e9f156b4" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>disable</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ae6c1b3c23c33d24fb8439d4ab86b83aa" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>element</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a9ec8b499154a709d7ddadb33f11c31b0" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>enable</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a242823b84443b08f3d27d79ec5d1bb98" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>enabled</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a7af29ec6e071aaa4e25205ca312fdd72" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>exported</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a32ba29c3a4623ac9bce6009b7efc70ce" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>grammar</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aeac96c1300b6a1ba64ef5faf23a859a2" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>gstring</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ae10a43239703a5932f08e712dd2416a7" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>imported</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ab5401b17fbd0336bc78a3c066c5dd994" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>name</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a670d76c19e2f0f59349bc01f983adf24" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>process_begin</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1aa5b6bf0ae12ca48d6ad901c1d8e68b8a" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>process_recognition</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1af25b9727d10e38f7db3f42f433f59320" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>process_results</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1a7a6bda63736ee144f0e22f63185dbb1d" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>set_context</name></member>
      <member refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule_1ae7687e1ba3425cdd449733f726595961" prot="public" virt="non-virtual"><scope>dragonfly::grammar::rule_base::Rule</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
