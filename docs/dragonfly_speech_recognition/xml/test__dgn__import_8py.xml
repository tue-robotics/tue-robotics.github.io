<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__dgn__import_8py" kind="file" language="Python">
    <compoundname>test_dgn_import.py</compoundname>
    <innerclass refid="classtest__dgn__import_1_1DgnDictationRule" prot="public">test_dgn_import::DgnDictationRule</innerclass>
    <innerclass refid="classtest__dgn__import_1_1DgnImported" prot="public">test_dgn_import::DgnImported</innerclass>
    <innerclass refid="classtest__dgn__import_1_1DgnLettersRule" prot="public">test_dgn_import::DgnLettersRule</innerclass>
    <innerclass refid="classtest__dgn__import_1_1DgnWordsRule" prot="public">test_dgn_import::DgnWordsRule</innerclass>
    <innerclass refid="classtest__dgn__import_1_1RecognitionAnalysisRule" prot="public">test_dgn_import::RecognitionAnalysisRule</innerclass>
    <innernamespace refid="namespacetest__dgn__import">test_dgn_import</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacetest__dgn__import" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">NatLink<sp/>importable<sp/>rules<sp/>dgndictation,<sp/>dgnletters<sp/>and<sp/>dgnwords</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">===============================================================================</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">This<sp/>file<sp/>is<sp/>a<sp/>showcase<sp/>of<sp/>the<sp/>three<sp/>importable<sp/>rules<sp/>provided<sp/>by<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">NatLink:<sp/>&quot;dgndictation&quot;,<sp/>&quot;dgnletters&quot;<sp/>and<sp/>&quot;dgnwords&quot;.<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral">The<sp/>test<sp/>code<sp/>below<sp/>makes<sp/>use<sp/>of<sp/>Dragonfly&apos;s<sp/>built-in<sp/>element<sp/>testing<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral">tool.<sp/>When<sp/>run,<sp/>it<sp/>will<sp/>connect<sp/>to<sp/>the<sp/>speech<sp/>recognition<sp/>engine,<sp/>load<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral">the<sp/>element<sp/>being<sp/>tested,<sp/>mimic<sp/>recognitions,<sp/>and<sp/>process<sp/>the<sp/>recognized<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral">value.<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>doctest</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dragonfly<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1test_1_1infrastructure" kindref="compound">dragonfly.test.infrastructure</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1test_1_1element__testcase" kindref="compound">dragonfly.test.element_testcase</ref><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ElementTestCase</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1test_1_1element__tester" kindref="compound">dragonfly.test.element_tester</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ElementTester</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classtest__dgn__import_1_1RecognitionAnalysisRule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__dgn__import_1_1RecognitionAnalysisRule" kindref="compound">RecognitionAnalysisRule</ref>(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>):</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base<sp/>class<sp/>that<sp/>implements<sp/>reporting<sp/>in<sp/>human-readable<sp/>format</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>about<sp/>the<sp/>recognized<sp/>phrase.<sp/>It<sp/>is<sp/>used<sp/>by<sp/>the<sp/>actual</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing<sp/>rules<sp/>below,<sp/>and<sp/>allows<sp/>the<sp/>doctests<sp/>above<sp/>to<sp/>be<sp/>easily</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readable<sp/>and<sp/>informative.</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classtest__dgn__import_1_1RecognitionAnalysisRule_1a5ae8b8c4932c9e8b0d48bacfd9d220b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__dgn__import_1_1RecognitionAnalysisRule_1a5ae8b8c4932c9e8b0d48bacfd9d220b6" kindref="member">_process_recognition</ref>(self,<sp/>node,<sp/>extras):</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Paste(text).execute()</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classtest__dgn__import_1_1RecognitionAnalysisRule_1a679f3e9b8d5cfa5882d37939bf3da216" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__dgn__import_1_1RecognitionAnalysisRule_1a679f3e9b8d5cfa5882d37939bf3da216" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classtest__dgn__import_1_1RecognitionAnalysisRule_1adca0511139b577841d52bf21f1dc2507" kindref="member">get_recognition_info</ref>(node)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classtest__dgn__import_1_1RecognitionAnalysisRule_1adca0511139b577841d52bf21f1dc2507" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__dgn__import_1_1RecognitionAnalysisRule_1adca0511139b577841d52bf21f1dc2507" kindref="member">get_recognition_info</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(</highlight><highlight class="stringliteral">&apos;Recognition:<sp/>&quot;{0}&quot;&apos;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">.join(node.words())))</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(</highlight><highlight class="stringliteral">&quot;Word<sp/>and<sp/>rule<sp/>pairs:&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>word,<sp/>rule<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>node.full_results():</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(</highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>{0}<sp/>({1})&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(word,<sp/>rule))</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(</highlight><highlight class="stringliteral">&quot;Extras:&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sorted(extra.name<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>extra<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule_1a838562ca8c0f3553d1071d3e4091566f" kindref="member">extras</ref>):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_node<sp/>=<sp/>node.get_child_by_name(key)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>extra_node:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(</highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>{0}:<sp/>{1}&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(key,<sp/>extra_node.value()))</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">.join(output)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classtest__dgn__import_1_1DgnImported" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__dgn__import_1_1DgnImported" kindref="compound">DgnImported</ref>(<ref refid="namespacedragonfly_1_1grammar_1_1elements_1a5d4d45a901b5d0af7417f2f6f695678e" kindref="member">RuleRef</ref>):</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base<sp/>class<sp/>that<sp/>implements<sp/>an<sp/>imported<sp/>rule<sp/>and<sp/>takes<sp/>care<sp/>of</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decoding<sp/>recognitions<sp/>accordingly.</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classtest__dgn__import_1_1DgnImported_1ae328dc46011a828713472cfbca6b6251" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__dgn__import_1_1DgnImported_1ae328dc46011a828713472cfbca6b6251" kindref="member">__init__</ref>(self,<sp/>name=None,<sp/>imported_name=None,<sp/>default=None):</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>imported_name:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imported_name<sp/>=<sp/>name</highlight></codeline>
<codeline lineno="68" refid="classtest__dgn__import_1_1DgnImported_1aeef39d27ba2ef62a4968947d744361fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__dgn__import_1_1DgnImported_1aeef39d27ba2ef62a4968947d744361fe" kindref="member">imported_name</ref><sp/>=<sp/>imported_name</highlight></codeline>
<codeline lineno="69" refid="classtest__dgn__import_1_1DgnImported_1a14b8cca1aff1fd6482a798a58d0f8b05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__dgn__import_1_1DgnImported_1a14b8cca1aff1fd6482a798a58d0f8b05" kindref="member">imported_rule</ref><sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule" kindref="compound">Rule</ref>(self.<ref refid="classtest__dgn__import_1_1DgnImported_1aeef39d27ba2ef62a4968947d744361fe" kindref="member">imported_name</ref>,<sp/>imported=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RuleRef.__init__(self,<sp/>self.<ref refid="classtest__dgn__import_1_1DgnImported_1a14b8cca1aff1fd6482a798a58d0f8b05" kindref="member">imported_rule</ref>,<sp/>name,<sp/>default=default)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classtest__dgn__import_1_1DgnImported_1a6142c9ab042b67a22c8fce921f7c2a9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__dgn__import_1_1DgnImported_1a6142c9ab042b67a22c8fce921f7c2a9b" kindref="member">decode</ref>(self,<sp/>state):</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_attempt(self)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>at<sp/>least<sp/>one<sp/>word<sp/>has<sp/>been<sp/>dictated,<sp/>otherwise<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>state.rule()<sp/>!=<sp/>self.<ref refid="classtest__dgn__import_1_1DgnImported_1aeef39d27ba2ef62a4968947d744361fe" kindref="member">imported_name</ref>:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>how<sp/>many<sp/>words<sp/>have<sp/>been<sp/>dictated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>state.rule(count)<sp/>==<sp/>self.<ref refid="classtest__dgn__import_1_1DgnImported_1aeef39d27ba2ef62a4968947d744361fe" kindref="member">imported_name</ref>:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Yield<sp/>possible<sp/>states<sp/>where<sp/>the<sp/>number<sp/>of<sp/>dictated<sp/>words</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>gobbled<sp/>is<sp/>decreased<sp/>by<sp/>1<sp/>between<sp/>yields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(count,<sp/>0,<sp/>-1):</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.next(i)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_rollback(self)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>None<sp/>of<sp/>the<sp/>possible<sp/>states<sp/>were<sp/>accepted,<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classtest__dgn__import_1_1DgnImported_1ade473737c142b40fb25cfe453834cd06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__dgn__import_1_1DgnImported_1ade473737c142b40fb25cfe453834cd06" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.words()</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="classtest__dgn__import_1_1DgnDictationRule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__dgn__import_1_1DgnDictationRule" kindref="compound">DgnDictationRule</ref>(<ref refid="classtest__dgn__import_1_1RecognitionAnalysisRule" kindref="compound">RecognitionAnalysisRule</ref>):</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>tester<sp/>=<sp/>ElementTester(RuleRef(DgnDictationRule()))</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;dictation<sp/>hello<sp/>world&quot;))</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Recognition:<sp/>&quot;dictation<sp/>hello<sp/>world&quot;</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Word<sp/>and<sp/>rule<sp/>pairs:</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>dictation<sp/>(1)</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>hello<sp/>(1000000)</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>world<sp/>(1000000)</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Extras:</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>dgndictation:<sp/>[u&apos;hello&apos;,<sp/>u&apos;world&apos;]</highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;dictation&quot;))</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classtest__dgn__import_1_1DgnDictationRule_1a829b81a5860df18684935fc46600fb2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>spec<sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dictation<sp/>&lt;dgndictation&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="classtest__dgn__import_1_1DgnDictationRule_1acc1c15e53fe6a75663c20c007054dfcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>extras<sp/>=<sp/>[<ref refid="classtest__dgn__import_1_1DgnImported" kindref="compound">DgnImported</ref>(</highlight><highlight class="stringliteral">&quot;dgndictation&quot;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="classtest__dgn__import_1_1DgnLettersRule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__dgn__import_1_1DgnLettersRule" kindref="compound">DgnLettersRule</ref>(<ref refid="classtest__dgn__import_1_1RecognitionAnalysisRule" kindref="compound">RecognitionAnalysisRule</ref>):</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>tester<sp/>=<sp/>ElementTester(RuleRef(DgnLettersRule()))</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;letters<sp/>a<sp/>b<sp/>c&quot;))</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Recognition:<sp/>&quot;letters<sp/>a\\\\l<sp/>b\\\\l<sp/>c\\letter-c\\l&quot;</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Word<sp/>and<sp/>rule<sp/>pairs:</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>letters<sp/>(1)</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>a\\\\l<sp/>(1000001)</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>b\\\\l<sp/>(1000001)</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>c\\letter-c\\l<sp/>(1000001)</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Extras:</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>dgnletters:<sp/>[u&apos;a\\\\\\\\l&apos;,<sp/>u&apos;b\\\\\\\\l&apos;,<sp/>u&apos;c\\\\letter-c\\\\l&apos;]</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;letters<sp/>hello<sp/>world&quot;))</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;letters&quot;))</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classtest__dgn__import_1_1DgnLettersRule_1a18960de666d4adb151b412a0a2ee7a4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>spec<sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;letters<sp/>&lt;dgnletters&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="classtest__dgn__import_1_1DgnLettersRule_1a20761d6b92001f9c9f3d927901247dac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>extras<sp/>=<sp/>[<ref refid="classtest__dgn__import_1_1DgnImported" kindref="compound">DgnImported</ref>(</highlight><highlight class="stringliteral">&quot;dgnletters&quot;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="classtest__dgn__import_1_1DgnWordsRule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__dgn__import_1_1DgnWordsRule" kindref="compound">DgnWordsRule</ref>(<ref refid="classtest__dgn__import_1_1RecognitionAnalysisRule" kindref="compound">RecognitionAnalysisRule</ref>):</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>tester<sp/>=<sp/>ElementTester(RuleRef(DgnWordsRule()))</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;words<sp/>hello&quot;))</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Recognition:<sp/>&quot;words<sp/>hello&quot;</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Word<sp/>and<sp/>rule<sp/>pairs:</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>words<sp/>(1)</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>hello<sp/>(3)</highlight></codeline>
<codeline lineno="162"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Extras:</highlight></codeline>
<codeline lineno="163"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>dgnwords:<sp/>[u&apos;hello&apos;]</highlight></codeline>
<codeline lineno="164"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;words<sp/>hello<sp/>world&quot;))</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;words&quot;))</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="classtest__dgn__import_1_1DgnWordsRule_1acfc4ed9a9a2677b637f6dd298c3400e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>spec<sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;words<sp/>&lt;dgnwords&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="classtest__dgn__import_1_1DgnWordsRule_1a4b2da76ded1cf4b6462203f9134aaf91" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>extras<sp/>=<sp/>[<ref refid="classtest__dgn__import_1_1DgnImported" kindref="compound">DgnImported</ref>(</highlight><highlight class="stringliteral">&quot;dgnwords&quot;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="namespacetest__dgn__import_1a3bd99922917205c9f9b728cd859484d9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacetest__dgn__import_1a3bd99922917205c9f9b728cd859484d9" kindref="member">main</ref>():</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>engine<sp/>=<sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>()</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>engine.connect()</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest.testmod(verbose=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.disconnect()</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetest__dgn__import_1a3bd99922917205c9f9b728cd859484d9" kindref="member">main</ref>()</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/examples/test_dgn_import.py"/>
  </compounddef>
</doxygen>
