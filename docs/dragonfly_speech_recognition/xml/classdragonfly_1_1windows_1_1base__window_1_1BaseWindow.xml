<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::windows::base_window::BaseWindow</compoundname>
    <basecompoundref prot="public" virt="non-virtual">object</basecompoundref>
    <derivedcompoundref refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow" prot="public" virt="non-virtual">dragonfly.windows.darwin_window.DarwinWindow</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow" prot="public" virt="non-virtual">dragonfly.windows.fake_window.FakeWindow</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window" prot="public" virt="non-virtual">dragonfly.windows.win32_window.Win32Window</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window" prot="public" virt="non-virtual">dragonfly.windows.x11_window.X11Window</derivedcompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1af5cb30f0e630414e8de4f9dd02f26d39" prot="private" static="yes" mutable="no">
        <type>dictionary</type>
        <definition>dictionary dragonfly.windows.base_window.BaseWindow::_windows_by_id</definition>
        <argsstring></argsstring>
        <name>_windows_by_id</name>
        <initializer>=  {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="53" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a0ad233d03d4e560d508b0736383db477" prot="private" static="yes" mutable="no">
        <type>dictionary</type>
        <definition>dictionary dragonfly.windows.base_window.BaseWindow::_windows_by_name</definition>
        <argsstring></argsstring>
        <name>_windows_by_name</name>
        <initializer>=  {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="52" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="property">
      <memberdef kind="property" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6598c4f857f23d3069a634de4a0149ee" prot="private" static="yes" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type></type>
        <definition>dragonfly.windows.base_window.BaseWindow::_handle</definition>
        <argsstring></argsstring>
        <name>_handle</name>
        <initializer>=  property(fget=lambda self: self._id)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="155" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a41b1b75df4528228d6a1efb88baf3b82" prot="public" static="yes" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type></type>
        <definition>dragonfly.windows.base_window.BaseWindow::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <initializer>=  property(fget=lambda self: self._id,
                      fset=<ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1adc865e2370736d8530a35d6f5685621c" kindref="member">_set_id</ref>,
                      doc=&quot;Protected access to handle attribute.&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="152" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="property" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1af8151df04e705f0d77e580dee54b0d7e" prot="public" static="yes" readable="no" writable="no" gettable="no" privategettable="no" protectedgettable="no" settable="no" privatesettable="no" protectedsettable="no">
        <type></type>
        <definition>dragonfly.windows.base_window.BaseWindow::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <initializer>=  property(fget=<ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6593032dc95a7b4e27d04892631139b6" kindref="member">_get_name</ref>,
                    fset=<ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1acb76f95c3524e7ab4af217fe3503c8a5" kindref="member">_set_name</ref>,
                    doc=&quot;Protected access to name attribute.&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="168" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="168" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a84fb1bafed13d3b11bfc81bed9ff322a" prot="public" static="yes" mutable="no">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow::cls_name</definition>
        <argsstring></argsstring>
        <name>cls_name</name>
        <initializer>=  <ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ac94cb76eacb9388cd7be1c9ea68d2c5a" kindref="member">classname</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="207" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="207" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a10fc38af0c7bbe6f9280bfe80cab2d8d" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.windows.base_window.BaseWindow::_id</definition>
        <argsstring></argsstring>
        <name>_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="122" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a15d67b10b96f9aeb2216c50497d62b2c" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.windows.base_window.BaseWindow::_names</definition>
        <argsstring></argsstring>
        <name>_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="124" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="124" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aafd3621964165a581372cf27740f88d4" prot="public" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.windows.base_window.BaseWindow::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="123" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aabd0a8a77bd6de9e4da12e2a5c7fdbe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.__init__</definition>
        <argsstring>(self, id)</argsstring>
        <name>__init__</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window_1a3a5e555fe04eb1f21c0359d15d6d39a2">__init__</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a9f18f39da88b0e9a5086c2b191d79e6e">__init__</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a0dc41b8e3d1b928588e8199ed4caef70">__init__</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1afd6d2fdfa880884d99cf971ad6f62de2">__init__</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aafd3621964165a581372cf27740f88d4" kindref="member">id</ref></type>
          <defname>id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="121" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a3d7dfc6c1540135d3488931af373dd5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.__repr__</definition>
        <argsstring>(self)</argsstring>
        <name>__repr__</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window_1aca4a660ecf71ec9f70a872d3b2ecdec1">__repr__</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a4feaf3fbb8ce40b8019bc3b5fe507760">__repr__</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="126" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ac94cb76eacb9388cd7be1c9ea68d2c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.classname</definition>
        <argsstring>(self)</argsstring>
        <name>classname</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read-only access to the window&apos;s class name. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="202" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a12652977c2e2439eb4018607b11d72ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.close</definition>
        <argsstring>(self)</argsstring>
        <name>close</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a97cba506a038085d2eab20b5072fa214">close</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a678bbcb280c451cc9550e4195ebf5911">close</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a96c902ed22cdc0f187f5f8fd92108739">close</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Close the window (if possible). </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="332" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a5e8da6c3a06d69a730966eebc18ae309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.executable</definition>
        <argsstring>(self)</argsstring>
        <name>executable</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read-only access to the window&apos;s executable. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="210" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1adbfb949d694a91d2b324fbeb01ed0917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.get_all_windows</definition>
        <argsstring>(cls)</argsstring>
        <name>get_all_windows</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a3bba23eacf9ea2f68f05584f9c08698f">get_all_windows</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window_1a49e9668f1a10c9a1b5d9560342a8a5c9">get_all_windows</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a7aa6d86b646da04f75b30a967a54767e">get_all_windows</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1aacff9565e324b399ff2f720721b3711d">get_all_windows</reimplementedby>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Get a list of all windows. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="114" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ad8de679f418d9412a06874c1630b6534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.get_containing_monitor</definition>
        <argsstring>(self)</argsstring>
        <name>get_containing_monitor</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method to get the :class:`Monitor` containing the window.

This checks which monitor contains the center of the window.

:returns: containing monitor
:rtype: Monitor
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="274" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="274" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a84081bfe7e50f0d97e95c0b9c0f4956f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.get_foreground</definition>
        <argsstring>(cls)</argsstring>
        <name>get_foreground</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1ab0697bd23ffe0f6ae63f19f516f4d517">get_foreground</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1aa52cba709470f502f6d43a9fb827d697">get_foreground</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window_1a957b00f8df6c06d1b2ffc6d6563dd026">get_foreground</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a646506b29524989a6930e7fe7cebf934">get_foreground</reimplementedby>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Get the foreground window. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="73" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae63505f0d06f4f15608559fa3cdacac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.get_matching_windows</definition>
        <argsstring>(cls, executable=None, title=None)</argsstring>
        <name>get_matching_windows</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a46f4f347836deab21efb82e59d8c1f53">get_matching_windows</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window_1a7d39deeabdf0a4036afad473a354d7ae">get_matching_windows</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1abae7f1a8267730ec567387564ab4d84e">get_matching_windows</reimplementedby>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a5e8da6c3a06d69a730966eebc18ae309" kindref="member">executable</ref></type>
          <defname>executable</defname>
          <defval>None</defval>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aa4cccd9b2275816052dbc7b5d96ba438" kindref="member">title</ref></type>
          <defname>title</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Find windows with a matching executable or title.

Window searches are case-insensitive.

If neither parameter is be specified, then it is effectively the
same as calling :meth:`get_all_windows`.

:param executable: -- part of the filename of the application&apos;s
   executable to which the target window belongs; not case
   sensitive.
:param title: -- part of the title of the target window; not case
   sensitive.
:type executable: str
:type title: str
:rtype: list
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="78" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="78" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ab0adffc385c1b0ccf78cf6dde5c2b74a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.get_normalized_position</definition>
        <argsstring>(self)</argsstring>
        <name>get_normalized_position</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method to get the window&apos;s normalized position.

This is useful when working with multiple monitors.

:returns: normalized position
:rtype: Rectangle
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="290" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="290" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a13ea545de11bbe7b77f1bbc9ed1ce5c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.get_position</definition>
        <argsstring>(self)</argsstring>
        <name>get_position</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a529710fa5751d2749d97865d0dfb972e">get_position</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a676f5ae6c04e26940500056369fa011b">get_position</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window_1a83f9459a24013758398664200b2caa86">get_position</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a866d6cb4744bd08b24d53ba89e858346">get_position</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method to get the window&apos;s position as a :class:`Rectangle` object.

:returns: window position
:rtype: Rectangle
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="255" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="255" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a43e64fdfd70a455a370111b9db11fe48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.get_window</definition>
        <argsstring>(cls, id)</argsstring>
        <name>get_window</name>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aafd3621964165a581372cf27740f88d4" kindref="member">id</ref></type>
          <defname>id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Get a :class:`Window` object given a window id.

Given the same id, this method will return the same object.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="59" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="59" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a2f7ff8a1bc21cb8aff7d979f8d40a0b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.id</definition>
        <argsstring>(self)</argsstring>
        <name>id</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Protected access to id attribute. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="134" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1afa9b8c8c3a5b8a014c687ae8daa69b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.id</definition>
        <argsstring>(self, value)</argsstring>
        <name>id</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>value</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="139" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a054543ac6fa58bb2c3eaca54f1d7090b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.is_maximized</definition>
        <argsstring>(self)</argsstring>
        <name>is_maximized</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1afa5dae387fd6be9f5a032ed83a42cf95">is_maximized</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window_1a51005892718ee93c24341986f8fb7ba9">is_maximized</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a82364b726b3b351309481231ba4b2f34">is_maximized</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1adbd932eeb2e152beda8857c4f57e526c">is_maximized</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the window is currently maximized. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="235" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae82ec1ff8d09bfa29e532d9b6e1836ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.is_minimized</definition>
        <argsstring>(self)</argsstring>
        <name>is_minimized</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a500e05ffb305a39b98a7a23e43748bcd">is_minimized</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1acd66693a5cfe9f963c9108f33564b2cb">is_minimized</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1ade0886b1d3fb6d95dff386ee83d89f47">is_minimized</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the window is currently minimized. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="230" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aad542c59bde2625ef31e455d72fc575f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.is_visible</definition>
        <argsstring>(self)</argsstring>
        <name>is_visible</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a07a2aeb81996125e5ecbe4f546351ff3">is_visible</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a2984b14cc571ec46207e5701c8e1bc03">is_visible</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a2b59421144c192a016ecbc5761a1f748">is_visible</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the window is currently visible.

This may be indeterminable for some windows.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="240" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="240" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a51b031395547a6e6a928b2dba548c816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.matches</definition>
        <argsstring>(self, context)</argsstring>
        <name>matches</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>context</type>
          <defname>context</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the window matches the given context. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="248" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a2ebbc5e073901c89de326dfc0c76499f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.maximize</definition>
        <argsstring>(self)</argsstring>
        <name>maximize</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a26607a669377f454babe3385d8e1c653">maximize</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a64dee29bfa3da18f0c64636dafab28c1">maximize</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1afe6ca732399057ff42982d922ae9b027">maximize</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Maximize the window (if possible). </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="328" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae54394ad507ce64f864183d21f799626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.minimize</definition>
        <argsstring>(self)</argsstring>
        <name>minimize</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a889d0463f3b7523946c088b02faf780f">minimize</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a8b65fbe83f37e1bf0657bcb332a75bc6">minimize</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a8952b07136dc2726ff6585b094d64ba6">minimize</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Minimize the window (if possible). </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="324" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a9c169cac5d5606d14435f4cec535e364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.move</definition>
        <argsstring>(self, rectangle, animate=None)</argsstring>
        <name>move</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>rectangle</type>
          <defname>rectangle</defname>
        </param>
        <param>
          <type>animate</type>
          <defname>animate</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Move the window, optionally animating its movement.

:param rectangle: new window position and size
:param animate: name of window mover
:type rectangle: Rectangle
:type animate: str
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="353" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="353" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a493027bd096357de25501607bbd66b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.pid</definition>
        <argsstring>(self)</argsstring>
        <name>pid</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read-only access to the window&apos;s process ID.

This will be the PID of the window&apos;s process, not any subprocess.

If the window has no associated process id, this will return
``None``.

:returns: pid
:rtype: int | None
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="215" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="215" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a4188b2e6ced452189f14043e9e42eb53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.restore</definition>
        <argsstring>(self)</argsstring>
        <name>restore</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1ab5db70b894bc0653690ec45e44983652">restore</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a32c0d77ff440af6daaf184818ddaf1d2">restore</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a60b7ccfeeb2c1c015560634d0c620145">restore</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Restore the window if it is minimized or maximized. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="336" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a17184bd383bf416ff5165187615b8b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.set_focus</definition>
        <argsstring>(self)</argsstring>
        <name>set_focus</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1aa1fbdff7f2a920123d3ed03b0192fceb">set_focus</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window_1a415949620c2bbecf0d6a7251b8b023e0">set_focus</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1ab9df0fb54d52fa45d18a38dbb4fe3986">set_focus</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a16a1f33df3834228b5ff9c723eba03ab">set_focus</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Set the window as the active window without raising it.

*Note*: this method will behave like :meth:`set_foreground()` in
environments where this isn&apos;t possible.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="344" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="344" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a8853b8be6978da5ca290e38328c86e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.set_foreground</definition>
        <argsstring>(self)</argsstring>
        <name>set_foreground</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a4674fb59c478da6bfaa8056a6cda67c6">set_foreground</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window_1aee391c1998979b6b8b47bcaea75ec332">set_foreground</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a947b7260db8405acb467611ab019fc38">set_foreground</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a26112e9b1e7e8a311a933ba61854df02">set_foreground</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Set the window as the foreground (active) window. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="340" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a4801ac838456acd27b30cddf4aae609c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.set_normalized_position</definition>
        <argsstring>(self, rectangle, monitor=None)</argsstring>
        <name>set_normalized_position</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>rectangle</type>
          <defname>rectangle</defname>
        </param>
        <param>
          <type>monitor</type>
          <defname>monitor</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method to get the window&apos;s normalized position.

This is useful when working with multiple monitors.

:param rectangle: window position
:type rectangle: Rectangle
:param monitor: monitor to normalize to (default: the first one).
:type monitor: Monitor
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="304" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="304" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae0210d010dc268245814dabdd17b3715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.set_position</definition>
        <argsstring>(self, rectangle)</argsstring>
        <name>set_position</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a9aaf261ac9b167c6ba9c8823cff05935">set_position</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a9e0c45b73dca5f784f1a3e573a2a88c7">set_position</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window_1ada6b566a47b4bb958c606e31eb60de6c">set_position</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a633c144f300658cbedeb5dad17aed4a2">set_position</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>rectangle</type>
          <defname>rectangle</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method to set the window&apos;s position using a :class:`Rectangle`
object.

:param rectangle: window position
:type rectangle: Rectangle
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="264" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="264" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aa4cccd9b2275816052dbc7b5d96ba438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow.title</definition>
        <argsstring>(self)</argsstring>
        <name>title</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read-only access to the window&apos;s title. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="192" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="192" bodyend="200"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6cf2c04f26483b16c62da6589c5a8b2b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow._get_class_name</definition>
        <argsstring>(self)</argsstring>
        <name>_get_class_name</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a7145d9f3eaf55689fc96614901bd9c71">_get_class_name</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1ab78fb8a962b27955c84cd75a5234d502">_get_class_name</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a646bdfe788868e84c5c1afc0f1a4226d">_get_class_name</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="179" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6593032dc95a7b4e27d04892631139b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow._get_name</definition>
        <argsstring>(self)</argsstring>
        <name>_get_name</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="157" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="157" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a8dd171828bf9d20d782f3e4a09788685" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow._get_window_module</definition>
        <argsstring>(self)</argsstring>
        <name>_get_window_module</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a336bea71be308cc1066703f88e7b6874">_get_window_module</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a320c3d5945603ce11f3dc7c5b8f1990a">_get_window_module</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window_1a2ac8bad98414b982a457a3210188c9aa">_get_window_module</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a800a21b4b0c70a2c5349296de19ac81e">_get_window_module</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="183" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aea79158ee43cebfa2bd3cd32910ba1b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow._get_window_pid</definition>
        <argsstring>(self)</argsstring>
        <name>_get_window_pid</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a2455aa19c3f5b12c51d8674bc12b6e7b">_get_window_pid</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window_1ac6402681775f45691fef74ff8e8417bf">_get_window_pid</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a68b60501f8d0566200589927f36c2658">_get_window_pid</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a417c7d5f45edd8cd626554a51639329c">_get_window_pid</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="187" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a7076edafa3d390321a8207b10ca1877b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow._get_window_text</definition>
        <argsstring>(self)</argsstring>
        <name>_get_window_text</name>
        <reimplementedby refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1add522145806c0a68c088e892efd9b4d9">_get_window_text</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow_1a24aa0a79c17ee0d044d09122ea096779">_get_window_text</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1aafa0cac8e3d2debd923abce189f183e9">_get_window_text</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="175" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="175" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1adc865e2370736d8530a35d6f5685621c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow._set_id</definition>
        <argsstring>(self, id)</argsstring>
        <name>_set_id</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aafd3621964165a581372cf27740f88d4" kindref="member">id</ref></type>
          <defname>id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="142" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="142" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1acb76f95c3524e7ab4af217fe3503c8a5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.base_window.BaseWindow._set_name</definition>
        <argsstring>(self, name)</argsstring>
        <name>_set_name</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1af8151df04e705f0d77e580dee54b0d7e" kindref="member">name</ref></type>
          <defname>name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="163" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="163" bodyend="167"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>    The base Window class for controlling and placing windows.</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>dragonfly.windows.fake_window.FakeWindow</label>
        <link refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dragonfly.windows.base_window.BaseWindow</label>
        <link refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>object</label>
      </node>
      <node id="5">
        <label>dragonfly.windows.win32_window.Win32Window</label>
        <link refid="classdragonfly_1_1windows_1_1win32__window_1_1Win32Window"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>dragonfly.windows.x11_window.X11Window</label>
        <link refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dragonfly.windows.darwin_window.DarwinWindow</label>
        <link refid="classdragonfly_1_1windows_1_1darwin__window_1_1DarwinWindow"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dragonfly.windows.base_window.BaseWindow</label>
        <link refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>object</label>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" line="43" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/base_window.py" bodystart="43" bodyend="373"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aabd0a8a77bd6de9e4da12e2a5c7fdbe6" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a3d7dfc6c1540135d3488931af373dd5a" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>__repr__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6cf2c04f26483b16c62da6589c5a8b2b" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>_get_class_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6593032dc95a7b4e27d04892631139b6" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>_get_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a8dd171828bf9d20d782f3e4a09788685" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>_get_window_module</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aea79158ee43cebfa2bd3cd32910ba1b9" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>_get_window_pid</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a7076edafa3d390321a8207b10ca1877b" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>_get_window_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6598c4f857f23d3069a634de4a0149ee" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>_handle</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a10fc38af0c7bbe6f9280bfe80cab2d8d" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>_id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a15d67b10b96f9aeb2216c50497d62b2c" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>_names</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1adc865e2370736d8530a35d6f5685621c" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>_set_id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1acb76f95c3524e7ab4af217fe3503c8a5" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>_set_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1af5cb30f0e630414e8de4f9dd02f26d39" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>_windows_by_id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a0ad233d03d4e560d508b0736383db477" prot="private" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>_windows_by_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ac94cb76eacb9388cd7be1c9ea68d2c5a" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>classname</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a12652977c2e2439eb4018607b11d72ac" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>close</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a84fb1bafed13d3b11bfc81bed9ff322a" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>cls_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a5e8da6c3a06d69a730966eebc18ae309" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>executable</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1adbfb949d694a91d2b324fbeb01ed0917" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>get_all_windows</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ad8de679f418d9412a06874c1630b6534" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>get_containing_monitor</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a84081bfe7e50f0d97e95c0b9c0f4956f" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>get_foreground</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae63505f0d06f4f15608559fa3cdacac0" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>get_matching_windows</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ab0adffc385c1b0ccf78cf6dde5c2b74a" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>get_normalized_position</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a13ea545de11bbe7b77f1bbc9ed1ce5c7" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>get_position</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a43e64fdfd70a455a370111b9db11fe48" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>get_window</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a41b1b75df4528228d6a1efb88baf3b82" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>handle</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aafd3621964165a581372cf27740f88d4" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a2f7ff8a1bc21cb8aff7d979f8d40a0b7" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1afa9b8c8c3a5b8a014c687ae8daa69b19" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a054543ac6fa58bb2c3eaca54f1d7090b" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>is_maximized</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae82ec1ff8d09bfa29e532d9b6e1836ac" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>is_minimized</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aad542c59bde2625ef31e455d72fc575f" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>is_visible</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a51b031395547a6e6a928b2dba548c816" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>matches</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a2ebbc5e073901c89de326dfc0c76499f" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>maximize</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae54394ad507ce64f864183d21f799626" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>minimize</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a9c169cac5d5606d14435f4cec535e364" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>move</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1af8151df04e705f0d77e580dee54b0d7e" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a493027bd096357de25501607bbd66b50" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>pid</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a4188b2e6ced452189f14043e9e42eb53" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>restore</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a17184bd383bf416ff5165187615b8b10" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>set_focus</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a8853b8be6978da5ca290e38328c86e31" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>set_foreground</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a4801ac838456acd27b30cddf4aae609c" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>set_normalized_position</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae0210d010dc268245814dabdd17b3715" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>set_position</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aa4cccd9b2275816052dbc7b5d96ba438" prot="public" virt="non-virtual"><scope>dragonfly::windows::base_window::BaseWindow</scope><name>title</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
