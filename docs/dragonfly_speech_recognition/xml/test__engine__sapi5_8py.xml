<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__engine__sapi5_8py" kind="file" language="Python">
    <compoundname>test_engine_sapi5.py</compoundname>
    <innerclass refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5" prot="public">dragonfly::test::test_engine_sapi5::TestEngineSapi5</innerclass>
    <innernamespace refid="namespacedragonfly_1_1test_1_1test__engine__sapi5">dragonfly::test::test_engine_sapi5</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacedragonfly_1_1test_1_1test__engine__sapi5" refkind="compound"><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Dragonfly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(c)<sp/>Copyright<sp/>2007,<sp/>2008<sp/>by<sp/>Christo<sp/>Butcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>LGPL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>Dragonfly.<sp/><sp/>If<sp/>not,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unittest</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>six<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>text_type,<sp/>string_types</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines" kindref="compound">dragonfly.engines</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>get_engine,<sp/>EngineBase</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines_1_1base_1_1dictation" kindref="compound">dragonfly.engines.base.dictation</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>DictationContainerBase</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5" kindref="compound">TestEngineSapi5</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1a6755d34a579c2b48831438789cf7de77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1a6755d34a579c2b48831438789cf7de77" kindref="member">test_get_engine_sapi5_is_usable</ref>(self):</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>the<sp/>sapi5<sp/>engine<sp/>is<sp/>usable.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine<sp/>=<sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>()</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(isinstance(engine,<sp/>EngineBase))</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(engine.name.startswith(</highlight><highlight class="stringliteral">&quot;sapi5&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.speak(</highlight><highlight class="stringliteral">&quot;testing<sp/>WSR&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dragonfly<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Literal,<sp/>Sequence</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1test" kindref="compound">dragonfly.test</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ElementTester</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq<sp/>=<sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1afd0c0c3012ffdebee3500092a27713e7" kindref="member">Sequence</ref>([<ref refid="namespacedragonfly_1_1grammar_1_1elements_1a012cfe2ca8a31508c1262048051c398c" kindref="member">Literal</ref>(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1a012cfe2ca8a31508c1262048051c398c" kindref="member">Literal</ref>(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">)])</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester<sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1element__tester_1_1ElementTester" kindref="compound">ElementTester</ref>(seq,<sp/>engine=engine)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>tester.recognize(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual([</highlight><highlight class="stringliteral">u&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">u&quot;world&quot;</highlight><highlight class="normal">],<sp/>results)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1adb9523ef1d40e3b113f6058062be5a29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1adb9523ef1d40e3b113f6058062be5a29" kindref="member">test_dictation</ref>(self):</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>dictation<sp/>separately<sp/>for<sp/>SAPI5<sp/>because<sp/>test_dictation.py</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>won&apos;t<sp/>work<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dragonfly<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Dictation,<sp/>Literal,<sp/>Sequence</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1test" kindref="compound">dragonfly.test</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ElementTester,<sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq<sp/>=<sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1afd0c0c3012ffdebee3500092a27713e7" kindref="member">Sequence</ref>([<ref refid="namespacedragonfly_1_1grammar_1_1elements_1a012cfe2ca8a31508c1262048051c398c" kindref="member">Literal</ref>(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1a56a36e895956f6e50060b69fbdbdcee8" kindref="member">Dictation</ref>(</highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">)])</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tester<sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1element__tester_1_1ElementTester" kindref="compound">ElementTester</ref>(seq)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>one<sp/>word.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>tester.recognize(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Verify<sp/>recognition<sp/>returned<sp/>dictation<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictation<sp/>=<sp/>results[1]</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(dictation,<sp/>DictationContainerBase):</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>(</highlight><highlight class="stringliteral">u&quot;Expected<sp/>recognition<sp/>result<sp/>to<sp/>be<sp/>a<sp/>dictation&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">u&quot;<sp/>container,<sp/>but<sp/>received<sp/>%r&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>(repr(dictation).decode(</highlight><highlight class="stringliteral">&quot;windows-1252&quot;</highlight><highlight class="normal">),))</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.fail(message.encode(</highlight><highlight class="stringliteral">&quot;windows-1252&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Verifying<sp/>dictation<sp/>converts/encode<sp/>successfully.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(str(dictation),<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(text_type(dictation),<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(isinstance(repr(dictation),<sp/>string_types))</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>incomplete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>tester.recognize(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1a7eeb1d6ba87f5d14cd25baddaebbc176" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1a7eeb1d6ba87f5d14cd25baddaebbc176" kindref="member">test_recognition_observers</ref>(self):</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>RecognitionObservers<sp/>are<sp/>a<sp/>bit<sp/>quirky<sp/>for<sp/>the<sp/>sapi5<sp/>engines,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>so<sp/>the<sp/>tests<sp/>for<sp/>them<sp/>are<sp/>repeated<sp/>here<sp/>to<sp/>handle<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dragonfly<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>(Integer,<sp/>Literal,<sp/>RecognitionHistory,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecognitionObserver)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1test" kindref="compound">dragonfly.test</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ElementTester,<sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RecognitionObserverTester(<ref refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver" kindref="compound">RecognitionObserver</ref>):</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>RecognitionObserver<sp/>class<sp/>from<sp/>the<sp/>recobs<sp/>doctests.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecognitionObserver.__init__(self)</highlight></codeline>
<codeline lineno="88" refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1ad4b0795cdb4a4e0af955afb0b1364339" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1ad4b0795cdb4a4e0af955afb0b1364339" kindref="member">waiting</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1a5fa39a2f2f0d2ef65f42db187634d770" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1a5fa39a2f2f0d2ef65f42db187634d770" kindref="member">words</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">on_begin(self):</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1ad4b0795cdb4a4e0af955afb0b1364339" kindref="member">waiting</ref><sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">on_recognition(self,<sp/>words):</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1ad4b0795cdb4a4e0af955afb0b1364339" kindref="member">waiting</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1a5fa39a2f2f0d2ef65f42db187634d770" kindref="member">words</ref><sp/>=<sp/>words</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">on_failure(self):</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1ad4b0795cdb4a4e0af955afb0b1364339" kindref="member">waiting</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__engine__sapi5_1_1TestEngineSapi5_1a5fa39a2f2f0d2ef65f42db187634d770" kindref="member">words</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_recobs<sp/>=<sp/>RecognitionObserverTester()</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_recobs.register()</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>test_recobs.waiting,<sp/>test_recobs.words</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results<sp/>==<sp/>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>simple<sp/>literal<sp/>element<sp/>recognitions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_lit<sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1element__tester_1_1ElementTester" kindref="compound">ElementTester</ref>(<ref refid="namespacedragonfly_1_1grammar_1_1elements_1a012cfe2ca8a31508c1262048051c398c" kindref="member">Literal</ref>(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>test_lit.recognize(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>test_recobs.waiting,<sp/>test_recobs.words</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results<sp/>==<sp/>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">u&apos;hello&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">u&apos;world&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>test_lit.recognize(</highlight><highlight class="stringliteral">&quot;hello<sp/>universe&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>test_recobs.waiting,<sp/>test_recobs.words</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results<sp/>==<sp/>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>Integer<sp/>element<sp/>recognitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_int<sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1element__tester_1_1ElementTester" kindref="compound">ElementTester</ref>(Integer(min=1,<sp/>max=100))</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>test_int.recognize(</highlight><highlight class="stringliteral">&quot;seven&quot;</highlight><highlight class="normal">)<sp/>==<sp/>7</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>test_recobs.waiting,<sp/>test_recobs.words</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results<sp/>==<sp/>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">u&apos;seven&apos;</highlight><highlight class="normal">,))</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>test_int.recognize(</highlight><highlight class="stringliteral">&quot;forty<sp/>seven&quot;</highlight><highlight class="normal">)<sp/>==<sp/>47</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>test_recobs.waiting,<sp/>test_recobs.words</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results<sp/>==<sp/>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="stringliteral">u&apos;forty&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">u&apos;seven&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>test_int.recognize(</highlight><highlight class="stringliteral">&quot;one<sp/>hundred&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>test_recobs.waiting,<sp/>test_recobs.words</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results<sp/>==<sp/>(</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>test_lit.recognize(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">u&apos;hello<sp/>world&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Now<sp/>test<sp/>RecognitionHistory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionHistory" kindref="compound">RecognitionHistory</ref>()</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>test_lit.recognize(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">u&apos;hello<sp/>world&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Not<sp/>yet<sp/>registered,<sp/>so<sp/>didn&apos;t<sp/>receive<sp/>previous<sp/>recognition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>history<sp/>==<sp/>[]</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history.register()</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>test_lit.recognize(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">u&apos;hello<sp/>world&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Now<sp/>registered,<sp/>so<sp/>should<sp/>have<sp/>received<sp/>previous<sp/>recognition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>history<sp/>==<sp/>[(</highlight><highlight class="stringliteral">u&apos;hello&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">u&apos;world&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>test_lit.recognize(</highlight><highlight class="stringliteral">&quot;hello<sp/>universe&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Failed<sp/>recognitions<sp/>are<sp/>ignored,<sp/>so<sp/>history<sp/>is<sp/>unchanged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>history<sp/>==<sp/>[(</highlight><highlight class="stringliteral">u&apos;hello&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">u&apos;world&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>test_int.recognize(</highlight><highlight class="stringliteral">&quot;eighty<sp/>six&quot;</highlight><highlight class="normal">)<sp/>==<sp/>86</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>history<sp/>==<sp/>[(</highlight><highlight class="stringliteral">u&apos;hello&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">u&apos;world&apos;</highlight><highlight class="normal">),<sp/>(</highlight><highlight class="stringliteral">u&apos;eighty&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">u&apos;six&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>RecognitionHistory<sp/>class<sp/>allows<sp/>its<sp/>maximum<sp/>length<sp/>to<sp/>be<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionHistory" kindref="compound">RecognitionHistory</ref>(3)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history.register()</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>history<sp/>==<sp/>[]</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>word<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate([</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;five&quot;</highlight><highlight class="normal">]):</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>test_int.recognize(word)<sp/>==<sp/>i<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>history<sp/>==<sp/>[(</highlight><highlight class="stringliteral">u&apos;three&apos;</highlight><highlight class="normal">,),<sp/>(</highlight><highlight class="stringliteral">u&apos;four&apos;</highlight><highlight class="normal">,),<sp/>(</highlight><highlight class="stringliteral">u&apos;five&apos;</highlight><highlight class="normal">,)]</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionHistory" kindref="compound">RecognitionHistory</ref>(1)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history.register()</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>history<sp/>==<sp/>[]</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>word<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate([</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;four&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;five&quot;</highlight><highlight class="normal">]):</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>test_int.recognize(word)<sp/>==<sp/>i<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>history<sp/>==<sp/>[(</highlight><highlight class="stringliteral">u&apos;five&apos;</highlight><highlight class="normal">,)]</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sapi5.py"/>
  </compounddef>
</doxygen>
