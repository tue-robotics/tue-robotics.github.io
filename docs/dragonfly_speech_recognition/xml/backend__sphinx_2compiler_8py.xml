<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="backend__sphinx_2compiler_8py" kind="file" language="Python">
    <compoundname>backend_sphinx/compiler.py</compoundname>
    <innerclass refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler" prot="public">dragonfly::engines::backend_sphinx::compiler::JSGFCompiler</innerclass>
    <innerclass refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1PatchedRepeat" prot="public">dragonfly::engines::backend_sphinx::compiler::PatchedRepeat</innerclass>
    <innerclass refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler" prot="public">dragonfly::engines::backend_sphinx::compiler::SphinxJSGFCompiler</innerclass>
    <innernamespace refid="namespacedragonfly_1_1engines_1_1backend__sphinx_1_1compiler">dragonfly::engines::backend_sphinx::compiler</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacedragonfly_1_1engines_1_1backend__sphinx_1_1compiler" refkind="compound"><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Dragonfly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(c)<sp/>Copyright<sp/>2007,<sp/>2008<sp/>by<sp/>Christo<sp/>Butcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>LGPL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>Dragonfly.<sp/><sp/>If<sp/>not,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral">Compilers<sp/>for<sp/>JSpeech<sp/>Grammar<sp/>Format<sp/>(JSGF)<sp/>and<sp/>the<sp/>CMU<sp/>Pocket<sp/>Sphinx<sp/>speech</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">recognition<sp/>engine.</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>jsgf</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>jsgf.ext</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar" kindref="compound">dragonfly.grammar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>elements<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>elements_</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1list" kindref="compound">dragonfly.grammar.list</ref><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>List,<sp/>DictList</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines_1_1base" kindref="compound">dragonfly.engines.base</ref><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>CompilerBase,<sp/>CompilerError</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">#<sp/>noinspection<sp/>PyUnusedLocal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler" kindref="compound">JSGFCompiler</ref>(CompilerBase):</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Dragonfly<sp/>compiler<sp/>for<sp/>JSpeech<sp/>Grammar<sp/>Format<sp/>(JSGF)</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>class<sp/>translates<sp/>dragonfly<sp/>elements,<sp/>rules<sp/>and<sp/>grammars<sp/>into</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>JSGF<sp/>expansions,<sp/>rules<sp/>and<sp/>grammars<sp/>respectively.</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1ad94a38460b6b01fa1f17c68d8d543dfd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GrammarClass<sp/>=<sp/>jsgf.Grammar</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>@staticmethod</highlight></codeline>
<codeline lineno="47" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a2ac54a359e30fa864639b403fb3b52d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a2ac54a359e30fa864639b403fb3b52d2" kindref="member">get_reference_name</ref>(o):</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/>a<sp/>non-nil<sp/>name<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>hasattr(o,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>o.name:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>o.__class__.__name__</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>o.name</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Assume<sp/>the<sp/>object<sp/>is<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>o</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>JSGF<sp/>and<sp/>Pocket<sp/>Sphinx<sp/>don&apos;t<sp/>allow<sp/>spaces<sp/>in<sp/>names,<sp/>but<sp/>dragonfly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>does.<sp/>Work<sp/>around<sp/>this<sp/>by<sp/>changing<sp/>any<sp/>spaces<sp/>to<sp/>underscores.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name.replace(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>compiling<sp/>grammars<sp/>and<sp/>rules.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a716327eb9f23feee47b7c6068cee5c07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a716327eb9f23feee47b7c6068cee5c07" kindref="member">compile_grammar</ref>(self,<sp/>grammar,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Take<sp/>a<sp/>dragonfly<sp/>grammar<sp/>and<sp/>translate<sp/>it<sp/>into<sp/>a<sp/>JSGF<sp/>grammar<sp/>object</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>methods<sp/>for<sp/>compiling<sp/>the<sp/>grammar<sp/>and<sp/>matching<sp/>speech.</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>grammar:</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>args:</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>kwargs:</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.debug(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Compiling<sp/>grammar<sp/>%s.&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self,<sp/>grammar.name))</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>a<sp/>new<sp/>JSGF<sp/>Grammar<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unknown_words<sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1ad94a38460b6b01fa1f17c68d8d543dfd" kindref="member">GrammarClass</ref>(name=self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a2ac54a359e30fa864639b403fb3b52d2" kindref="member">get_reference_name</ref>(grammar))</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Compile<sp/>each<sp/>dragonfly<sp/>rule<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>new<sp/>grammar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>rule<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>grammar.rules:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.add_rule(self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1aea1fec882f0c3db5fa1f9ec25906fa16" kindref="member">compile_rule</ref>(rule,<sp/>result,<sp/>unknown_words))</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Also<sp/>compile<sp/>and<sp/>add<sp/>any<sp/>dragonfly<sp/>Lists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>lst<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>grammar.lists:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.add_rule(self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a877c55c94a7fbcc46abebee192c86830" kindref="member">compile_list</ref>(lst,<sp/>result,<sp/>unknown_words))</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Log<sp/>a<sp/>warning<sp/>about<sp/>unknown<sp/>words<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>unknown_words:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.warning(</highlight><highlight class="stringliteral">&quot;Grammar<sp/>&apos;%s&apos;<sp/>used<sp/>words<sp/>not<sp/>found<sp/>in<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pronunciation<sp/>dictionary:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>result.name,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">.join(sorted(unknown_words)))</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/>None<sp/>for<sp/>empty<sp/>grammars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>result.rules:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1aea1fec882f0c3db5fa1f9ec25906fa16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1aea1fec882f0c3db5fa1f9ec25906fa16" kindref="member">compile_rule</ref>(self,<sp/>rule,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.Rule(</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a2ac54a359e30fa864639b403fb3b52d2" kindref="member">get_reference_name</ref>(rule),</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visible=rule.exported,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansion=self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(rule.element,<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>compiling<sp/>dragonfly<sp/>lists<sp/>and<sp/>dictionary<sp/>lists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>These<sp/>have<sp/>no<sp/>equivalent<sp/>in<sp/>JSGF,<sp/>so<sp/>hidden/private<sp/>rules<sp/>are<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a877c55c94a7fbcc46abebee192c86830" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a877c55c94a7fbcc46abebee192c86830" kindref="member">compile_list</ref>(self,<sp/>lst,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(lst,<sp/>List):</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>literal_list<sp/>=<sp/>[elements_.Literal(item)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>item<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lst]</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>isinstance(lst,<sp/>DictList):</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keys<sp/>=<sp/>list(lst.keys())</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keys.sort()</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>literal_list<sp/>=<sp/>[elements_.Literal(key)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>keys]</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>compile<sp/>dragonfly<sp/>List<sp/>%s&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>lst)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.HiddenRule(</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a2ac54a359e30fa864639b403fb3b52d2" kindref="member">get_reference_name</ref>(lst),</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(elements_.Alternative(literal_list),<sp/>*args,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**kwargs)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a0ed8e6df9ad02a3e8b4ac4750d974c9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a0ed8e6df9ad02a3e8b4ac4750d974c9b" kindref="member">recompile_list</ref>(self,<sp/>lst,<sp/>jsgf_grammar):</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Used<sp/>from<sp/>the<sp/>GrammarWrapper<sp/>class<sp/>to<sp/>get<sp/>an<sp/>updated<sp/>list<sp/>and<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>unknown<sp/>words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unknown_words<sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a877c55c94a7fbcc46abebee192c86830" kindref="member">compile_list</ref>(lst,<sp/>jsgf_grammar,<sp/>unknown_words),</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unknown_words)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>compiling<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Look<sp/>for<sp/>a<sp/>compiler<sp/>method<sp/>to<sp/>handle<sp/>the<sp/>given<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>element_type,<sp/>compiler<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.element_compilers:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(element,<sp/>element_type):</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compiler(self,<sp/>element,<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Didn&apos;t<sp/>find<sp/>a<sp/>compiler<sp/>method<sp/>for<sp/>this<sp/>element<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>NotImplementedError(</highlight><highlight class="stringliteral">&quot;Compiler<sp/>%s<sp/>not<sp/>implemented&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>element<sp/>type<sp/>%s.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>(self,<sp/>element))</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a215eea092ca9a44e80e0435ba15f0a86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a215eea092ca9a44e80e0435ba15f0a86" kindref="member">_compile_repetition</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Compile<sp/>the<sp/>first<sp/>element<sp/>only;<sp/>pyjsgf<sp/>doesn&apos;t<sp/>support<sp/>limits<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>repetition<sp/>(yet).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children<sp/>=<sp/>element.children</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(children)<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.debug(</highlight><highlight class="stringliteral">&quot;Ignoring<sp/>limits<sp/>of<sp/>repetition<sp/>element<sp/>%s.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>element)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiled_child<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(children[0],<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.Repeat(compiled_child)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a95ad32e785529953f634af45b66cb37b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a95ad32e785529953f634af45b66cb37b" kindref="member">_compile_sequence</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Compile<sp/>Repetition<sp/>elements<sp/>separately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(element,<sp/>elements_.Repetition):</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a215eea092ca9a44e80e0435ba15f0a86" kindref="member">_compile_repetition</ref>(element,<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children<sp/>=<sp/>element.children</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(children)<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.Sequence(*[</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(c,<sp/>*args,<sp/>**kwargs)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>children</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>])</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>len(children)<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Skip<sp/>redundant<sp/>(1<sp/>child)<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(children[0],<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Compile<sp/>an<sp/>Empty<sp/>element<sp/>for<sp/>empty<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(elements_.Empty(),<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1ae048403eccf5b5e854179964753f07e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1ae048403eccf5b5e854179964753f07e8" kindref="member">_compile_alternative</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children<sp/>=<sp/>element.children</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(children)<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.AlternativeSet(*[</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(c,<sp/>*args,<sp/>**kwargs)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>children</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>])</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>len(children)<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Skip<sp/>redundant<sp/>(1<sp/>child)<sp/>alternatives.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(children[0],<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Compile<sp/>an<sp/>Empty<sp/>element<sp/>for<sp/>empty<sp/>alternatives.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(elements_.Empty(),<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1abce16ab8689c981747a497b9d23de7ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1abce16ab8689c981747a497b9d23de7ba" kindref="member">_compile_optional</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(element.children[0],<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.OptionalGrouping(child)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a81f3c2f782eec4d16af566c60e1adac1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a81f3c2f782eec4d16af566c60e1adac1" kindref="member">_compile_literal</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.Literal(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">.join(element.words))</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a6f3514f7efa563b1ace5823748dbc104" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a6f3514f7efa563b1ace5823748dbc104" kindref="member">_compile_rule_ref</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>element.rule.name.replace(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.NamedRuleRef(name)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a1f0f0358bfaec1d88c0fee2929e270ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a1f0f0358bfaec1d88c0fee2929e270ef" kindref="member">_compile_list_ref</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>element.list.name.replace(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.NamedRuleRef(name)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a9b420713bcd036c1dc51f17b9c369b1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a9b420713bcd036c1dc51f17b9c369b1e" kindref="member">_compile_empty</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.NullRef()</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a875f4a16be40222a3da6a6f73cddd7f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a875f4a16be40222a3da6a6f73cddd7f4" kindref="member">_compile_impossible</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.VoidRef()</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1ab9e48968cdbfdb28576102e7dcebbc6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1ab9e48968cdbfdb28576102e7dcebbc6a" kindref="member">_compile_dictation</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>JSGF<sp/>has<sp/>no<sp/>equivalent<sp/>for<sp/>dictation<sp/>elements.<sp/>Instead<sp/>compile<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>return<sp/>an<sp/>Impossible<sp/>element<sp/>that<sp/>allows<sp/>dictation<sp/>to<sp/>be<sp/>used,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>but<sp/>not<sp/>matched.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_.Impossible(),<sp/>*args,<sp/>**kwargs</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1PatchedRepeat" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1PatchedRepeat" kindref="compound">PatchedRepeat</ref>(jsgf.Repeat):</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="223"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Repeat<sp/>class<sp/>patched<sp/>to<sp/>compile<sp/>JSGF<sp/>repeats<sp/>as</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;expansion<sp/>[expansion]*&quot;<sp/>to<sp/>avoid<sp/>a<sp/>bug<sp/>in<sp/>Pocket<sp/>Sphinx<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>repeat<sp/>operator.</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1PatchedRepeat_1ac70cc598d0c5e6018cc2d4e4dbf0928d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1PatchedRepeat_1ac70cc598d0c5e6018cc2d4e4dbf0928d" kindref="member">compile</ref>(self,<sp/>ignore_tags=False):</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>super(PatchedRepeat,<sp/>self).<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1PatchedRepeat_1ac70cc598d0c5e6018cc2d4e4dbf0928d" kindref="member">compile</ref>()</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiled<sp/>=<sp/>self.child.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1PatchedRepeat_1ac70cc598d0c5e6018cc2d4e4dbf0928d" kindref="member">compile</ref>(ignore_tags)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.tag<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>ignore_tags:</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(%s)[%s]*%s&quot;</highlight><highlight class="normal"><sp/>%<sp/>(compiled,<sp/>compiled,<sp/>self.tag)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(%s)[%s]*&quot;</highlight><highlight class="normal"><sp/>%<sp/>(compiled,<sp/>compiled)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler" kindref="compound">SphinxJSGFCompiler</ref>(<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler" kindref="compound">JSGFCompiler</ref>):</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>JSGF<sp/>compiler<sp/>sub-class<sp/>used<sp/>by<sp/>the<sp/>CMU<sp/>Pocket<sp/>Sphinx<sp/>backend.</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1a6823a96a1ab7a362615716f207deb3b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1a6823a96a1ab7a362615716f207deb3b0" kindref="member">__init__</ref>(self,<sp/>engine):</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSGFCompiler.__init__(self)</highlight></codeline>
<codeline lineno="243" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1adfc812439db802ebac5cdba53f941312" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1adfc812439db802ebac5cdba53f941312" kindref="member">engine</ref><sp/>=<sp/>engine</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Use<sp/>a<sp/>very<sp/>unlikely<sp/>phrase<sp/>to<sp/>replace<sp/>unknown<sp/>words.<sp/>NullRefs<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>used<sp/>instead<sp/>if<sp/>words<sp/>aren&apos;t<sp/>in<sp/>the<sp/>vocabulary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1a84c7ffe1eb82f1ad6eec1e76b563a647" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1a84c7ffe1eb82f1ad6eec1e76b563a647" kindref="member">impossible_literal</ref><sp/>=<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;en&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;impossible<sp/>&quot;</highlight><highlight class="normal"><sp/>*<sp/>20,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}.get(engine.language,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>compiling<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1aec23081bfda683fdc4f261497e3487cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1aec23081bfda683fdc4f261497e3487cf" kindref="member">_compile_repetition</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Compile<sp/>the<sp/>first<sp/>element<sp/>only;<sp/>pyjsgf<sp/>doesn&apos;t<sp/>support<sp/>limits<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>repetition<sp/>(yet).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children<sp/>=<sp/>element.children</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(children)<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.debug(</highlight><highlight class="stringliteral">&quot;Ignoring<sp/>limits<sp/>of<sp/>repetition<sp/>element<sp/>%s.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>element)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/>a<sp/>PatchedRepeat<sp/>instead<sp/>of<sp/>a<sp/>normal<sp/>Repeat<sp/>expansion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiled_child<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(children[0],<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1PatchedRepeat" kindref="compound">PatchedRepeat</ref>(compiled_child)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1ae3cbbe51d1da0940370cc2f1632b1824" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1ae3cbbe51d1da0940370cc2f1632b1824" kindref="member">_compile_literal</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Build<sp/>literals<sp/>as<sp/>sequences<sp/>and<sp/>use<sp/>&lt;NULL&gt;<sp/>for<sp/>unknown<sp/>words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>word<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>element.words:</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1adfc812439db802ebac5cdba53f941312" kindref="member">engine</ref>.check_valid_word(word):</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children.append(jsgf.Literal(word))</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children.append(self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_.Impossible(),<sp/>*args,<sp/>**kwargs</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>))</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Save<sp/>the<sp/>unknown<sp/>word.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[1].add(word)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.Sequence(*children)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1a6f0690fa1b062527c315a0e0cbb58722" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1a6f0690fa1b062527c315a0e0cbb58722" kindref="member">_compile_impossible</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Override<sp/>this<sp/>to<sp/>avoid<sp/>VoidRefs<sp/>disabling<sp/>entire<sp/>rules/grammars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Use<sp/>a<sp/>special<sp/>&lt;_impossible&gt;<sp/>private<sp/>rule<sp/>instead.<sp/>Only<sp/>add<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>special<sp/>rule<sp/>if<sp/>it<sp/>isn&apos;t<sp/>in<sp/>the<sp/>result<sp/>grammar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar<sp/>=<sp/>args[0]</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;_impossible&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>grammar.rule_names:</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>the<sp/>impossible<sp/>literal<sp/>contains<sp/>only<sp/>valid<sp/>words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>set(self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1a84c7ffe1eb82f1ad6eec1e76b563a647" kindref="member">impossible_literal</ref>.split())</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_literal<sp/>=<sp/>bool(words)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>word<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>words:</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>valid_literal:</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1adfc812439db802ebac5cdba53f941312" kindref="member">engine</ref>.check_valid_word(word):</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_literal<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>valid_literal:</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansion<sp/>=<sp/>jsgf.Literal(self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1a84c7ffe1eb82f1ad6eec1e76b563a647" kindref="member">impossible_literal</ref>)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Fallback<sp/>on<sp/>a<sp/>NullRef.<sp/>There<sp/>are<sp/>some<sp/>problems<sp/>with<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>these,<sp/>but<sp/>they<sp/>get<sp/>the<sp/>job<sp/>done<sp/>for<sp/>simple<sp/>rules.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expansion<sp/>=<sp/>jsgf.NullRef()</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.add_rule(jsgf.Rule(</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=</highlight><highlight class="stringliteral">&quot;_impossible&quot;</highlight><highlight class="normal">,<sp/>visible=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>expansion=expansion</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>))</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jsgf.NamedRuleRef(</highlight><highlight class="stringliteral">&quot;_impossible&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO<sp/>Change<sp/>this<sp/>to<sp/>allow<sp/>dictation<sp/>elements<sp/>to<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1a9a0a812d25badae21056fe38649f2f19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1SphinxJSGFCompiler_1a9a0a812d25badae21056fe38649f2f19" kindref="member">_compile_dictation</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1compiler_1_1JSGFCompiler_1a7b5042de5f7b97d7d820101bde5c6cc1" kindref="member">compile_element</ref>(</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements_.Impossible(),<sp/>*args,<sp/>**kwargs</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/compiler.py"/>
  </compounddef>
</doxygen>
