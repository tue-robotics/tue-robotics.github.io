<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__grammar_8py" kind="file" language="Python">
    <compoundname>test_grammar.py</compoundname>
    <innernamespace refid="namespacetest__grammar">test_grammar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacetest__grammar" refkind="compound"><highlight class="comment">#!/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacegrammar__parser_1_1cfgparser" kindref="compound">grammar_parser.cfgparser</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>CFGParser</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>argparse</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="namespacetest__grammar_1ab261065d691451da201771f9538c608e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacetest__grammar_1ab261065d691451da201771f9538c608e" kindref="member">read_valid_file</ref>(p,<sp/>arg):</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(arg):</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.error(f</highlight><highlight class="stringliteral">&quot;The<sp/>file<sp/>{arg}<sp/>does<sp/>not<sp/>exist!&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>open(arg,<sp/></highlight><highlight class="stringliteral">&apos;r&apos;</highlight><highlight class="normal">).<ref refid="namespacesetup_1aa74fef7df4d976d8d3b23e0157e33777" kindref="member">read</ref>()</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="namespacetest__grammar_1a4e8a0910349b0cd3e1bc84c5e08d9468" refkind="member"><highlight class="normal">parser<sp/>=<sp/>argparse.ArgumentParser()</highlight></codeline>
<codeline lineno="14" refid="namespacetest__grammar_1a2d627203d6cca5b11d2cc4fa9c3e00cd" refkind="member"><highlight class="normal">parser.add_argument(</highlight><highlight class="stringliteral">&quot;target&quot;</highlight><highlight class="normal">,<sp/>type=str)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">parser.add_argument(</highlight><highlight class="stringliteral">&quot;--grammar&quot;</highlight><highlight class="normal">,<sp/>type=str)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">parser.add_argument(</highlight><highlight class="stringliteral">&quot;--grammar-file&quot;</highlight><highlight class="normal">,<sp/>type=</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/><ref refid="namespacetest__grammar_1ab261065d691451da201771f9538c608e" kindref="member">read_valid_file</ref>(parser,<sp/>x))</highlight></codeline>
<codeline lineno="17" refid="namespacetest__grammar_1ad9bbca34dd6ef34f74702663e84673ff" refkind="member"><highlight class="normal">parser.add_argument(</highlight><highlight class="stringliteral">&quot;--random&quot;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&quot;store_true&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">parser.add_argument(</highlight><highlight class="stringliteral">&quot;--sentence&quot;</highlight><highlight class="normal">,<sp/>type=str)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">parser.add_argument(</highlight><highlight class="stringliteral">&quot;--verify&quot;</highlight><highlight class="normal">,<sp/>action=</highlight><highlight class="stringliteral">&quot;store_true&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="20" refid="namespacetest__grammar_1a3e40aac09a62ac938b425c272132bbb0" refkind="member"><highlight class="normal">args<sp/>=<sp/>parser.parse_args()</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Verify<sp/>the<sp/>specified<sp/>grammar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.grammar_file<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>args.grammar)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(args.grammar_file<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>args.grammar<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.error(</highlight><highlight class="stringliteral">&quot;Please<sp/>specify<sp/>either<sp/>a<sp/>grammar<sp/>string<sp/>using<sp/>--grammar<sp/>of<sp/>a<sp/>grammar<sp/>file<sp/>using<sp/>--grammar-file&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Verify<sp/>sentence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>args.random<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>args.sentence:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>parser.error(</highlight><highlight class="stringliteral">&quot;Specify<sp/>a<sp/>sentence<sp/>via<sp/>--sentence<sp/>or<sp/>use<sp/>--random&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="namespacetest__grammar_1a46903fbd03d3dcb76caa9ba955e28fc6" refkind="member"><highlight class="normal">grammar<sp/>=<sp/>args.grammar_file<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>args.grammar_file<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>args.grammar</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">print(f</highlight><highlight class="stringliteral">&quot;Parsing<sp/>grammar:\n\n{grammar}\n\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="namespacetest__grammar_1a9ec25848eb13ef113763e4ba2c809504" refkind="member"><highlight class="normal">grammar_parser<sp/>=<sp/>CFGParser.fromstring(grammar)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>args.verify:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>grammar_parser.verify()</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="namespacetest__grammar_1a2f4d8b0b9f8aa0d2e960168992ea56c2" refkind="member"><highlight class="normal">sentence<sp/>=<sp/>args.sentence<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>args.sentence<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>grammar_parser.get_random_sentence(args.target)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">print(f</highlight><highlight class="stringliteral">&quot;Parsing<sp/>sentence:\n\n{sentence}\n\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="namespacetest__grammar_1a9d381af7a8cfeb711be63d2642ca3ad8" refkind="member"><highlight class="normal">result<sp/>=<sp/>grammar_parser.parse(args.target,<sp/>sentence,<sp/>debug=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">print(f</highlight><highlight class="stringliteral">&quot;Result:\n\n{result}&quot;</highlight><highlight class="normal">)</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/grammar_parser/test/test_grammar.py"/>
  </compounddef>
</doxygen>
