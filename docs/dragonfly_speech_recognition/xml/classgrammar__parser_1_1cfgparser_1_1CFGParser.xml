<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgrammar__parser_1_1cfgparser_1_1CFGParser" kind="class" language="Python" prot="public">
    <compoundname>grammar_parser::cfgparser::CFGParser</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acc313c251ed7b7b9981e4bec30dead0d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>grammar_parser.cfgparser.CFGParser::functions</definition>
        <argsstring></argsstring>
        <name>functions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="345" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" prot="public" static="no" mutable="no">
        <type></type>
        <definition>grammar_parser.cfgparser.CFGParser::rules</definition>
        <argsstring></argsstring>
        <name>rules</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="344" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="344" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a5ecdb519554b73b7afe02248bd5b54b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.__init__</definition>
        <argsstring>(self)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="343" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ae8a9718fb205eca40969c44fe0c7fa6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.add_rule</definition>
        <argsstring>(self, s)</argsstring>
        <name>add_rule</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>s</type>
          <defname>s</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="406" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="406" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aa9fd5a02b0a122ea5b2a3a31f6c2a985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.check_rules</definition>
        <argsstring>(self)</argsstring>
        <name>check_rules</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Verify completeness of the loaded grammar, no rules that refer to missing
sub-rules and no functions that don&apos;t exist.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="381" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="381" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a6b4793b7a26193a27c12fe8db01be8fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.get_completion_function</definition>
        <argsstring>(self, func_name)</argsstring>
        <name>get_completion_function</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>func_name</type>
          <defname>func_name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="644" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="644" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aef1f24105c012a19e4e826db915c04d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.get_random_sentence</definition>
        <argsstring>(self, lname)</argsstring>
        <name>get_random_sentence</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>lname</type>
          <defname>lname</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="707" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="707" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acaa69542bedb3bb2c1a0766ec811558e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.get_semantics</definition>
        <argsstring>(self, tree)</argsstring>
        <name>get_semantics</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>tree</type>
          <defname>tree</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Get the semantics of a tree.
This means that variables are unified with their values, which may be recursively gotten from the tree&apos;s subtrees. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="424" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="424" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a1c694b10bca37bed8341b095c7262912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.get_unwrapped</definition>
        <argsstring>(self, lname)</argsstring>
        <name>get_unwrapped</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>lname</type>
          <defname>lname</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="678" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="678" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a2917cc849a8e7391270b22a8ca1c2341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.has_completion_function</definition>
        <argsstring>(self, func_name)</argsstring>
        <name>has_completion_function</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>func_name</type>
          <defname>func_name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="641" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="641" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a01dd7b5dd2c19668d7bd427a1601ea86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.next_word</definition>
        <argsstring>(self, target, words)</argsstring>
        <name>next_word</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>target</type>
          <defname>target</defname>
        </param>
        <param>
          <type>words</type>
          <defname>words</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="595" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="595" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a185e051b08bded47277321b278e33b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.parse</definition>
        <argsstring>(self, target, words, debug=False)</argsstring>
        <name>parse</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>target</type>
          <defname>target</defname>
        </param>
        <param>
          <type>words</type>
          <defname>words</defname>
        </param>
        <param>
          <type>debug</type>
          <defname>debug</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Parse the given sentence against the grammar loaded in the class. This
method hides all errors (and returns False in that case). Use the
self.parse_raw function if the difference between a successful and
failed parse is relevant.

:param target: Target rule in the grammar to start parsing the sentence.
:type target: str.

:param words: Sentence to parse, either as a single string or a list of words.
:type words: str, or a list of str.

:param debug: If True, output the matched sequence in the tree.
:type debug: Boolean, by default False.

:return: The captured data value collected during parsing if parsing
 succeeds, else False.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="440" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="440" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a2534c7f1443069198beb2d467e1f9fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.parse_raw</definition>
        <argsstring>(self, target, words, debug=False)</argsstring>
        <name>parse_raw</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>target</type>
          <defname>target</defname>
        </param>
        <param>
          <type>words</type>
          <defname>words</defname>
        </param>
        <param>
          <type>debug</type>
          <defname>debug</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Parse the given sentence against the grammar loaded in the class. This
method throws exceptions on failures, the self.parse function returns
False in such a case.

:param target: Target rule in the grammar to start parsing the sentence.
:type target: str.

:param words: Sentence to parse, either as a single string or a list of words.
:type words: str, or a list of str.

:param debug: If True, output the matched sequence in the tree.
:type debug: Boolean, by default False.

:return: The captured data value collected during parsing if parsing
 succeeds, a GrammarError exception if the grammar is found to
 be incorrect, or a ParseError exception if the sentence fails
 to match the grammar.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="472" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="472" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a402b1840f02b980e9c07b83a96b801a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.set_function</definition>
        <argsstring>(self, name, func)</argsstring>
        <name>set_function</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>name</type>
          <defname>name</defname>
        </param>
        <param>
          <type>func</type>
          <defname>func</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Add a new function to the parser. Must be done before loading the grammar.

TODO #11: Ensure the function expansion result does not refer to missing sub-rules or functions.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="416" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="416" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a937afc076896af0476cf3ae45ed66ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.to_graphviz</definition>
        <argsstring>(self, graph)</argsstring>
        <name>to_graphviz</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>graph</type>
          <defname>graph</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="651" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="651" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a55ed74b90773447f93550248c1e96cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.verify</definition>
        <argsstring>(self, target=None)</argsstring>
        <name>verify</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>target</type>
          <defname>target</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="397" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="397" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a61d849d538e2f9ffc8f470d11a9f1447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.visualize_options</definition>
        <argsstring>(self, graph, target_rule, previous_words=None, depth=2)</argsstring>
        <name>visualize_options</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>graph</type>
          <defname>graph</defname>
        </param>
        <param>
          <type>target_rule</type>
          <defname>target_rule</defname>
        </param>
        <param>
          <type>previous_words</type>
          <defname>previous_words</defname>
          <defval>None</defval>
        </param>
        <param>
          <type><ref refid="namespacegrammar__parser_1_1cfgparser_1aa7ff86f3e26c3f5ba8427f1399404c31" kindref="member">depth</ref></type>
          <defname>depth</defname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="656" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="656" bodyend="677"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a00ddec73b160cf683c03668b5fc14506" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.fromfile</definition>
        <argsstring>(filename, parser=None)</argsstring>
        <name>fromfile</name>
        <param>
          <type>filename</type>
          <defname>filename</defname>
        </param>
        <param>
          <type>parser</type>
          <defname>parser</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Load the grammar from the provided file.

:param filename: Path to the text file containing the grammar
:param parser: If not None, the parser to use (else a new parser is created).
:return: The parser containing the grammar.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="348" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="348" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a9c42f8838ff6b25b8234bd3250fd1d92" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.fromstring</definition>
        <argsstring>(string, parser=None)</argsstring>
        <name>fromstring</name>
        <param>
          <type>string</type>
          <defname>string</defname>
        </param>
        <param>
          <type>parser</type>
          <defname>parser</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Load the grammar from the provided text.

:param string: Text containing the grammar
:param parser: If not None, the parser to use (else a new parser is created).
:return: The parser containing the grammar.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="361" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="361" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aeffed607010bb2ae519838fe75a4a3e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser.graphviz_id</definition>
        <argsstring>()</argsstring>
        <name>graphviz_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="648" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="648" bodyend="650"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a5db09b7fc5c2811e8682ae95871877da" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser._next_word</definition>
        <argsstring>(self, TIdx, words)</argsstring>
        <name>_next_word</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>TIdx</type>
          <defname>TIdx</defname>
        </param>
        <param>
          <type>words</type>
          <defname>words</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="607" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="607" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a550ef374b0c5d4de75007eb74090ce5f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def grammar_parser.cfgparser.CFGParser._parse</definition>
        <argsstring>(self, TIdx, words, word_index)</argsstring>
        <name>_parse</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>TIdx</type>
          <defname>TIdx</defname>
        </param>
        <param>
          <type>words</type>
          <defname>words</defname>
        </param>
        <param>
          <type>word_index</type>
          <defname>word_index</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Try to match the provided words on the given grammar rule option.

:param TIdx: Tuple of grammar Rule, and rule alternative index.
:param words: Words to match on the alternative.
:param word_index: First word in words to match on the alternative.
:return: On successful match None is returned, else an index in words
 pointing at the position that failed to match. Note that the
 index may be equal to the number of words (indicating that
 words are missing).
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="521" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="521" bodyend="592"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Parser for parsing the heard sentence, and converting it to information for
the action that should be performed.

Usage:
- For loading a grammar from a file use fromfile().
- For loading a grammar from a text string use fromstring().

- For loading a grammar with functions, construct a CFGParser object, add
  the functions using CFGParser.set_function(), and finally load the
  grammar using fromfile or fromstring, passing in the CFGParser object
  as well.

The parser performs a few basic checks on the grammar, such as missing
sub-rules and missing functions while loading. The CFGParser.verify function
goes a step further by expanding all alternatives.

To parse a sentence, use parse_raw() at a CFGParser instance to get maximum information, or
use parse() at a CFGParser instance to avoid getting exceptions.
</verbatim> </para>
    </detaileddescription>
    <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" line="321" column="1" bodyfile="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py" bodystart="321" bodyend="720"/>
    <listofallmembers>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a5ecdb519554b73b7afe02248bd5b54b6" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>__init__</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a5db09b7fc5c2811e8682ae95871877da" prot="private" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>_next_word</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a550ef374b0c5d4de75007eb74090ce5f" prot="private" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>_parse</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ae8a9718fb205eca40969c44fe0c7fa6b" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>add_rule</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aa9fd5a02b0a122ea5b2a3a31f6c2a985" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>check_rules</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a00ddec73b160cf683c03668b5fc14506" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>fromfile</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a9c42f8838ff6b25b8234bd3250fd1d92" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>fromstring</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acc313c251ed7b7b9981e4bec30dead0d" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>functions</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a6b4793b7a26193a27c12fe8db01be8fc" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>get_completion_function</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aef1f24105c012a19e4e826db915c04d2" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>get_random_sentence</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acaa69542bedb3bb2c1a0766ec811558e" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>get_semantics</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a1c694b10bca37bed8341b095c7262912" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>get_unwrapped</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aeffed607010bb2ae519838fe75a4a3e5" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>graphviz_id</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a2917cc849a8e7391270b22a8ca1c2341" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>has_completion_function</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a01dd7b5dd2c19668d7bd427a1601ea86" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>next_word</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a185e051b08bded47277321b278e33b5d" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>parse</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a2534c7f1443069198beb2d467e1f9fde" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>parse_raw</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>rules</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a402b1840f02b980e9c07b83a96b801a8" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>set_function</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a937afc076896af0476cf3ae45ed66ea3" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>to_graphviz</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a55ed74b90773447f93550248c1e96cde" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>verify</name></member>
      <member refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a61d849d538e2f9ffc8f470d11a9f1447" prot="public" virt="non-virtual"><scope>grammar_parser::cfgparser::CFGParser</scope><name>visualize_options</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
