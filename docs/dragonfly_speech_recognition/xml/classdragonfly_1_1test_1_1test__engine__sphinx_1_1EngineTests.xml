<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::test::test_engine_sphinx::EngineTests</compoundname>
    <basecompoundref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase" prot="public" virt="non-virtual">dragonfly.test.test_engine_sphinx.SphinxEngineCase</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1aa9e4c7cdfb9ac26336aeb8259bf7d302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.EngineTests.test_built_in_keyphrase_unknown_words</definition>
        <argsstring>(self)</argsstring>
        <name>test_built_in_keyphrase_unknown_words</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Verify that errors are logged for built-in keyphrases with unknown words.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="327" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="327" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1aff4254448fec1dc2651493f395a6c2bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.EngineTests.test_engine_config</definition>
        <argsstring>(self)</argsstring>
        <name>test_engine_config</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Verify that engine configuration is validated correctly. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="187" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="187" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1abcf097cfc05c76a97f316520d08a639a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.EngineTests.test_get_engine_sphinx_is_usable</definition>
        <argsstring>(self)</argsstring>
        <name>test_get_engine_sphinx_is_usable</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Verify that the sphinx engine is usable by testing that a simple
rule is loaded correctly and works correctly.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="171" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="171" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a51ba8fe96320ea372526aa8213db3398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.EngineTests.test_keyphrases_and_recobs</definition>
        <argsstring>(self)</argsstring>
        <name>test_keyphrases_and_recobs</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Verify that observers are notified of keyphrase events. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="283" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="283" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a8a1d2fcd073a12a219624583794c60a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.EngineTests.test_pause_resume_recognition</definition>
        <argsstring>(self)</argsstring>
        <name>test_pause_resume_recognition</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Verify that pause/resume recognition functionality works. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="238" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="238" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a0d73d24793f8a31f5b9c2a9ae473a4cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.EngineTests.test_reference_names_with_spaces</definition>
        <argsstring>(self)</argsstring>
        <name>test_reference_names_with_spaces</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Verify that reference names with spaces are accepted. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="393" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="393" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a13c6962254f761b1c87b2b10b9cdd15e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.EngineTests.test_set_keyphrase_unknown_words</definition>
        <argsstring>(self)</argsstring>
        <name>test_set_keyphrase_unknown_words</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Verify that setting a keyphrase with an unknown word raises an error.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="320" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="320" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1af9b244645f44ce918e7c57483c4298ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.EngineTests.test_start_asleep</definition>
        <argsstring>(self)</argsstring>
        <name>test_start_asleep</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Verify that the START_ASLEEP config option works. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="269" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="269" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a01582902aebe44302b02daf505b606df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.EngineTests.test_training_session</definition>
        <argsstring>(self)</argsstring>
        <name>test_training_session</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Verify that no recognition processing occurs when training. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="407" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="407" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1aeaeda14a3ab67bbcce15d6aa704d7743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.EngineTests.test_unknown_grammar_words</definition>
        <argsstring>(self)</argsstring>
        <name>test_unknown_grammar_words</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Verify that warnings are logged for grammars with unknown words.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="356" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="356" bodyend="392"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Tests for most of the engine&apos;s functionality.
</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dragonfly.test.test_engine_sphinx.SphinxEngineCase</label>
        <link refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>TestCase</label>
      </node>
      <node id="1">
        <label>dragonfly.test.test_engine_sphinx.EngineTests</label>
        <link refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>dragonfly.test.test_engine_sphinx.SphinxEngineCase</label>
        <link refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>TestCase</label>
      </node>
      <node id="1">
        <label>dragonfly.test.test_engine_sphinx.EngineTests</label>
        <link refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="167" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="167" bodyend="442"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ab626a72cfbd85f361f117cf88a08b041" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>assert_mimic_failure</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>assert_mimic_success</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7926500801079ddd01b114e0195ea8ba" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>assert_recobs_result</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc6f5c405d95aecef13ebf34758371d9" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>assert_test_function_called</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac9f79da30ec7de020f3615fe46a97d91" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>compile_log</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>engine</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a50448ef0a4fa61143981c5ff22012ca2" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>get_test_function</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a109b4079a7de7c75d63367e074ad9ad4" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>log</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1aad121a8a08b5af7504961514b3c8fb36" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>reset_test_functions</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a6a6a19199f656880b4f693d4c2ca76f2" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>setUp</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a36943518646ef9c239bdfcdc4e6e6753" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>tearDown</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1aa9e4c7cdfb9ac26336aeb8259bf7d302" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>test_built_in_keyphrase_unknown_words</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1aff4254448fec1dc2651493f395a6c2bd" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>test_engine_config</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1abcf097cfc05c76a97f316520d08a639a" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>test_get_engine_sphinx_is_usable</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a51ba8fe96320ea372526aa8213db3398" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>test_keyphrases_and_recobs</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1adb8a26d9a09d84ccadcbd68a4d826b00" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>test_map</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a8a1d2fcd073a12a219624583794c60a0" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>test_pause_resume_recognition</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac3a88aece1f6bd60001439c027cde098" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>test_recobs</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a0d73d24793f8a31f5b9c2a9ae473a4cd" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>test_reference_names_with_spaces</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a13c6962254f761b1c87b2b10b9cdd15e" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>test_set_keyphrase_unknown_words</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1af9b244645f44ce918e7c57483c4298ef" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>test_start_asleep</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1a01582902aebe44302b02daf505b606df" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>test_training_session</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests_1aeaeda14a3ab67bbcce15d6aa704d7743" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::EngineTests</scope><name>test_unknown_grammar_words</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
