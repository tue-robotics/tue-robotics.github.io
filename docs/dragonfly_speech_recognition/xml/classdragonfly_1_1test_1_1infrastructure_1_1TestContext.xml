<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1test_1_1infrastructure_1_1TestContext" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::test::infrastructure::TestContext</compoundname>
    <basecompoundref refid="classdragonfly_1_1grammar_1_1context_1_1Context" prot="public" virt="non-virtual">dragonfly.grammar.context.Context</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1test_1_1infrastructure_1_1TestContext_1afe3f92824a1e5fb0486eac0c0cbdaf12" prot="public" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.test.infrastructure.TestContext::active</definition>
        <argsstring></argsstring>
        <name>active</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/infrastructure.py" line="54" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/infrastructure.py" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1test_1_1infrastructure_1_1TestContext_1a47fb699e2309006efc01b6bee7018986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.infrastructure.TestContext.__init__</definition>
        <argsstring>(self, active)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1test_1_1infrastructure_1_1TestContext_1afe3f92824a1e5fb0486eac0c0cbdaf12" kindref="member">active</ref></type>
          <defname>active</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/infrastructure.py" line="52" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/infrastructure.py" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1infrastructure_1_1TestContext_1a8ed7d806ffb0f6841a6b7129d1642c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.infrastructure.TestContext.matches</definition>
        <argsstring>(self, executable, title, handle)</argsstring>
        <name>matches</name>
        <reimplements refid="classdragonfly_1_1grammar_1_1context_1_1Context_1a1dfdbfcc2b9e90e7b659599fc29bc26f">matches</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>executable</type>
          <defname>executable</defname>
        </param>
        <param>
          <type>title</type>
          <defname>title</defname>
        </param>
        <param>
          <type>handle</type>
          <defname>handle</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Indicate whether the system is currently within this context.

    Arguments:
     - *executable* (*str*) --
       path name to the executable of the foreground application
     - *title* (*str*) -- title of the foreground window
     - *handle* (*int*) -- window handle to the foreground window

    The default implementation of this method simply returns *True*.

    .. note::

       This is generally the method which developers should
       overload to give derived context classes custom
       functionality.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/infrastructure.py" line="56" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/infrastructure.py" bodystart="56" bodyend="59"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Simple context class used to test rule and grammar contexts. </verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dragonfly.test.infrastructure.TestContext</label>
        <link refid="classdragonfly_1_1test_1_1infrastructure_1_1TestContext"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dragonfly.grammar.context.Context</label>
        <link refid="classdragonfly_1_1grammar_1_1context_1_1Context"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dragonfly.test.infrastructure.TestContext</label>
        <link refid="classdragonfly_1_1test_1_1infrastructure_1_1TestContext"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dragonfly.grammar.context.Context</label>
        <link refid="classdragonfly_1_1grammar_1_1context_1_1Context"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>object</label>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/infrastructure.py" line="50" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/infrastructure.py" bodystart="50" bodyend="59"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1grammar_1_1context_1_1Context_1a116d1723f457474e7b71dfa078158c24" prot="public" virt="non-virtual"><scope>dragonfly::test::infrastructure::TestContext</scope><name>__and__</name></member>
      <member refid="classdragonfly_1_1test_1_1infrastructure_1_1TestContext_1a47fb699e2309006efc01b6bee7018986" prot="public" virt="non-virtual"><scope>dragonfly::test::infrastructure::TestContext</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1grammar_1_1context_1_1Context_1abf7250a6563da475d20a639270f6ee0d" prot="public" virt="non-virtual" ambiguityscope="dragonfly::grammar::context::Context."><scope>dragonfly::test::infrastructure::TestContext</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1grammar_1_1context_1_1Context_1afce9f1cfb551b64db7cc763890541053" prot="public" virt="non-virtual"><scope>dragonfly::test::infrastructure::TestContext</scope><name>__invert__</name></member>
      <member refid="classdragonfly_1_1grammar_1_1context_1_1Context_1ae37d8a8b1d4b4d547305134d9a146cb7" prot="public" virt="non-virtual"><scope>dragonfly::test::infrastructure::TestContext</scope><name>__or__</name></member>
      <member refid="classdragonfly_1_1grammar_1_1context_1_1Context_1a249b0ea0c83c32fc75a415b5a3fcef54" prot="public" virt="non-virtual"><scope>dragonfly::test::infrastructure::TestContext</scope><name>__repr__</name></member>
      <member refid="classdragonfly_1_1grammar_1_1context_1_1Context_1a1c45805ee6a280a09ea7f41b30627eab" prot="private" virt="non-virtual"><scope>dragonfly::test::infrastructure::TestContext</scope><name>_log</name></member>
      <member refid="classdragonfly_1_1grammar_1_1context_1_1Context_1aee89c812701a7622cb89cbbe81b70997" prot="private" virt="non-virtual"><scope>dragonfly::test::infrastructure::TestContext</scope><name>_log_match</name></member>
      <member refid="classdragonfly_1_1grammar_1_1context_1_1Context_1af2798dd4a94ec5cbff8dc0d39c98f903" prot="private" virt="non-virtual"><scope>dragonfly::test::infrastructure::TestContext</scope><name>_str</name></member>
      <member refid="classdragonfly_1_1test_1_1infrastructure_1_1TestContext_1afe3f92824a1e5fb0486eac0c0cbdaf12" prot="public" virt="non-virtual"><scope>dragonfly::test::infrastructure::TestContext</scope><name>active</name></member>
      <member refid="classdragonfly_1_1grammar_1_1context_1_1Context_1adcabeee25d6f44e9f761855d9744d716" prot="public" virt="non-virtual"><scope>dragonfly::test::infrastructure::TestContext</scope><name>copy</name></member>
      <member refid="classdragonfly_1_1test_1_1infrastructure_1_1TestContext_1a8ed7d806ffb0f6841a6b7129d1642c93" prot="public" virt="non-virtual"><scope>dragonfly::test::infrastructure::TestContext</scope><name>matches</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
