<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="elements__basic_8py" kind="file" language="Python">
    <compoundname>elements_basic.py</compoundname>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative" prot="public">dragonfly::grammar::elements_basic::Alternative</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation" prot="public">dragonfly::grammar::elements_basic::Dictation</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1DictListRef" prot="public">dragonfly::grammar::elements_basic::DictListRef</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase" prot="public">dragonfly::grammar::elements_basic::ElementBase</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty" prot="public">dragonfly::grammar::elements_basic::Empty</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Impossible" prot="public">dragonfly::grammar::elements_basic::Impossible</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef" prot="public">dragonfly::grammar::elements_basic::ListRef</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal" prot="public">dragonfly::grammar::elements_basic::Literal</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Modifier" prot="public">dragonfly::grammar::elements_basic::Modifier</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional" prot="public">dragonfly::grammar::elements_basic::Optional</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition" prot="public">dragonfly::grammar::elements_basic::Repetition</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef" prot="public">dragonfly::grammar::elements_basic::RuleRef</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap" prot="public">dragonfly::grammar::elements_basic::RuleWrap</innerclass>
    <innerclass refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence" prot="public">dragonfly::grammar::elements_basic::Sequence</innerclass>
    <innernamespace refid="namespacedragonfly_1_1grammar_1_1elements__basic">dragonfly::grammar::elements_basic</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacedragonfly_1_1grammar_1_1elements__basic" refkind="compound"><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Dragonfly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(c)<sp/>Copyright<sp/>2007,<sp/>2008<sp/>by<sp/>Christo<sp/>Butcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>LGPL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>Dragonfly.<sp/><sp/>If<sp/>not,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral">Fundamental<sp/>element<sp/>classes</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">============================================================================</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">Dragonfly<sp/>grammars<sp/>are<sp/>built<sp/>up<sp/>out<sp/>of<sp/>a<sp/>small<sp/>set<sp/>of<sp/>fundamental<sp/>building</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral">blocks.<sp/><sp/>These<sp/>building<sp/>blocks<sp/>are<sp/>implemented<sp/>by<sp/>the<sp/>following<sp/>*element*</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral">classes:</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/>-<sp/>:class:`ElementBase`<sp/>--</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/><sp/><sp/>the<sp/>base<sp/>class<sp/>from<sp/>which<sp/>all<sp/>other<sp/>element<sp/>classes<sp/>are<sp/>derived</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"><sp/>-<sp/>:class:`Sequence`<sp/>--</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/><sp/><sp/>sequence<sp/>of<sp/>child<sp/>elements<sp/>which<sp/>must<sp/>all<sp/>match<sp/>in<sp/>the<sp/>order<sp/>given</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/>-<sp/>:class:`Alternative`<sp/>--</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/><sp/><sp/>list<sp/>of<sp/>possibilities<sp/>of<sp/>which<sp/>only<sp/>one<sp/>will<sp/>be<sp/>matched</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/>-<sp/>:class:`Optional`<sp/>--</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/>wrapper<sp/>around<sp/>a<sp/>child<sp/>element<sp/>which<sp/>makes<sp/>the<sp/>child<sp/>element<sp/>optional</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/>-<sp/>:class:`Repetition`<sp/>--</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/>repetition<sp/>of<sp/>a<sp/>child<sp/>element</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/>-<sp/>:class:`Literal`<sp/>--</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/>literal<sp/>word<sp/>which<sp/>must<sp/>be<sp/>said<sp/>exactly<sp/>by<sp/>the<sp/>speaker<sp/>as<sp/>given</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral"><sp/>-<sp/>:class:`RuleRef`<sp/>--</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/>reference<sp/>to<sp/>a<sp/>:class:`dragonfly.grammar.rule_base.Rule`<sp/>object;</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/>this<sp/>element<sp/>allows<sp/>a<sp/>rule<sp/>to<sp/>include<sp/>(i.e.<sp/>reference)<sp/>another<sp/>rule</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"><sp/>-<sp/>:class:`ListRef`<sp/>--</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral"><sp/><sp/><sp/>reference<sp/>to<sp/>a<sp/>:class:`dragonfly.grammar.list.List`<sp/>object</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/>-<sp/>:class:`Impossible`<sp/>--</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"><sp/><sp/><sp/>a<sp/>special<sp/>element<sp/>that<sp/>cannot<sp/>be<sp/>recognized</highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/>-<sp/>:class:`Empty`<sp/>--</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/><sp/>a<sp/>special<sp/>element<sp/>that<sp/>is<sp/>always<sp/>recognized</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral">The<sp/>following<sp/>*element*<sp/>classes<sp/>are<sp/>built<sp/>up<sp/>out<sp/>of<sp/>the<sp/>fundamental</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral">classes<sp/>listed<sp/>above:</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/>-<sp/>:class:`Dictation`<sp/>--</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"><sp/><sp/><sp/>free-form<sp/>dictation;<sp/>this<sp/>element<sp/>matches<sp/>any<sp/>words<sp/>the<sp/>speaker<sp/>says,</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/>and<sp/>includes<sp/>facilities<sp/>for<sp/>formatting<sp/>the<sp/>spoken<sp/>words<sp/>with<sp/>correct</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/>spacing<sp/>and<sp/>capitalization</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/>-<sp/>:class:`Modifier`<sp/>--</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/>modifies<sp/>the<sp/>output<sp/>of<sp/>another<sp/>element<sp/>by<sp/>applying<sp/>a<sp/>function<sp/>to<sp/>it</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/>following<sp/>recognition</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/>-<sp/>:class:`DictListRef`<sp/>--</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/>reference<sp/>to<sp/>a<sp/>:class:`dragonfly.DictList`<sp/>object;<sp/>this<sp/>element<sp/>is</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/>similar<sp/>to<sp/>the<sp/>:class:`dragonfly.ListRef`<sp/>element,<sp/>except<sp/>that<sp/>it<sp/>returns</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/><sp/>the<sp/>value<sp/>associated<sp/>with<sp/>the<sp/>spoken<sp/>words<sp/>instead<sp/>of<sp/>the<sp/>spoken<sp/>words</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/>themselves</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/>-<sp/>:class:`RuleWrap`<sp/>--</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"><sp/><sp/><sp/>an<sp/>element<sp/>class<sp/>used<sp/>to<sp/>wrap<sp/>a<sp/>Dragonfly<sp/>element<sp/>into<sp/>a<sp/>new<sp/>private</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/>rule<sp/>to<sp/>be<sp/>referenced<sp/>by<sp/>the<sp/>same<sp/>element<sp/>or<sp/>other<sp/>:class:`RuleRef`</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/>elements</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral">See<sp/>the<sp/>following<sp/>documentation<sp/>sections<sp/>for<sp/>additional<sp/>information<sp/>and</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral">usage<sp/>examples:</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/>*<sp/>:ref:`Elements<sp/>(Object<sp/>model<sp/>section)<sp/>&lt;RefObjectModelElements&gt;`</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/>*<sp/>:ref:`RefElementBasicDocTests`</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=abstract-method,no-self-use,too-many-lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Suppress<sp/>a<sp/>few<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>copy</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>itertools</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logging</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>six<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>integer_types,<sp/>string_types</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1rule__base" kindref="compound">dragonfly.grammar.rule_base</ref><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Rule</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1list" kindref="compound">dragonfly.grammar.list</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ListBase,<sp/>DictList</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">#===========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Element<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="namespacedragonfly_1_1grammar_1_1elements__basic_1a2f8953802d11f2d77cf9a5ad6d33708e" refkind="member"><highlight class="normal">id_generator<sp/>=<sp/>itertools.count()</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase" kindref="compound">ElementBase</ref>(object):</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Base<sp/>class<sp/>for<sp/>all<sp/>other<sp/>element<sp/>classes.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a5bd1a9be70f09c0e74b86a888b813aad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;uninitialized&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a3bd1a9e8cccf7ad0e8639ad6ea25e569" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_log_decode<sp/>=<sp/>logging.getLogger(</highlight><highlight class="stringliteral">&quot;grammar.decode&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="102" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a2a400cba074f562db1cce30ac537ca52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_log_eval<sp/>=<sp/>logging.getLogger(</highlight><highlight class="stringliteral">&quot;grammar.eval&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a2333eeef7b754f9989301817c7a51901" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a2333eeef7b754f9989301817c7a51901" kindref="member">__init__</ref>(self,<sp/>name=None,<sp/>default=None):</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>argument:</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element;<sp/>can<sp/>be<sp/>used<sp/>when<sp/>interpreting</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex<sp/>recognition<sp/>for<sp/>retrieving<sp/>elements<sp/>by<sp/>name.</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*default*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>default<sp/>value<sp/>used<sp/>if<sp/>this<sp/>element<sp/>is<sp/>optional<sp/>and<sp/>wasn&apos;t</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spoken</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>name:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1aa84e3c0d7a310f6503836439a83409ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a5bd1a9be70f09c0e74b86a888b813aad" kindref="member">name</ref><sp/>=<sp/>name</highlight></codeline>
<codeline lineno="118" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1aa0bbb9c347cc144dc8ec9089b752d1fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1aa0bbb9c347cc144dc8ec9089b752d1fd" kindref="member">_default</ref><sp/>=<sp/>default</highlight></codeline>
<codeline lineno="119" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref><sp/>=<sp/>next(id_generator)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>introspection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a5c249a5f0b4fcfd312693aa2693646f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a5c249a5f0b4fcfd312693aa2693646f4" kindref="member">__repr__</ref>(self):</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a5bd1a9be70f09c0e74b86a888b813aad" kindref="member">name</ref>:<sp/><sp/><sp/>name_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>name=%r&quot;</highlight><highlight class="normal"><sp/>%<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a5bd1a9be70f09c0e74b86a888b813aad" kindref="member">name</ref></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%s(...%s)&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self.__class__.__name__,<sp/>name_str)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a13a76c99b260b6a0150352e039cc818d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a13a76c99b260b6a0150352e039cc818d" kindref="member">_get_children</ref>(self):</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>an<sp/>iterable<sp/>of<sp/>this<sp/>element&apos;s<sp/>children.</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>method<sp/>is<sp/>used<sp/>by<sp/>the<sp/>:meth:`.children`<sp/>property,<sp/>and</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>should<sp/>be<sp/>overloaded<sp/>by<sp/>any<sp/>derived<sp/>classes<sp/>to<sp/>give</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>correct<sp/>children<sp/>element.</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>By<sp/>default,<sp/>this<sp/>method<sp/>returns<sp/>an<sp/>empty<sp/>tuple.</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>()</highlight></codeline>
<codeline lineno="141" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a474483e51e223868deafb59b6cc9f226" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>children<sp/>=<sp/>property(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>self:<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a13a76c99b260b6a0150352e039cc818d" kindref="member">_get_children</ref>(),</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc=</highlight><highlight class="stringliteral">&quot;Iterable<sp/>of<sp/>child<sp/>elements.<sp/><sp/>(Read-only)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1aa407bc864e150bd0f0c124ae71168e31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1aa407bc864e150bd0f0c124ae71168e31" kindref="member">element_tree_string</ref>(self):</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>a<sp/>formatted<sp/>multi-line<sp/>string<sp/>representing<sp/>this</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>and<sp/>its<sp/>children.</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack<sp/>=<sp/>[(self,<sp/>0)]</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>stack:</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element,<sp/>index<sp/>=<sp/>stack.pop()</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>index<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree.append((element,<sp/>len(stack)))</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(element.children)<sp/>&gt;<sp/>index:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack.append((element,<sp/>index<sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack.append((element.children[index],<sp/>0))</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines<sp/>=<sp/>(indent*depth<sp/>+<sp/>str(element)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>element,<sp/>depth<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>tree)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">.join(lines)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>load-time<sp/>setup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1ae8496a9a9d3fd77702f372f0d20c3ef3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1ae8496a9a9d3fd77702f372f0d20c3ef3" kindref="member">dependencies</ref>(self,<sp/>memo):</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>an<sp/>iterable<sp/>containing<sp/>the<sp/>dependencies<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>and<sp/>of<sp/>this<sp/>element&apos;s<sp/>children.</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="171"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>dependencies<sp/>are<sp/>the<sp/>objects<sp/>that<sp/>are<sp/>necessary</highlight></codeline>
<codeline lineno="172"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>this<sp/>element.<sp/><sp/>These<sp/>include<sp/>lists<sp/>and<sp/>other<sp/>rules.</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>memo:</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memo.add(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref>)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependencies<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a474483e51e223868deafb59b6cc9f226" kindref="member">children</ref>:</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependencies.extend(c.dependencies(memo))</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dependencies</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a55faf3b287d31d1dec9858942c75a194" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a55faf3b287d31d1dec9858942c75a194" kindref="member">gstring</ref>(self):</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>a<sp/>formatted<sp/>grammar<sp/>string<sp/>of<sp/>the<sp/>contents</highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>this<sp/>element<sp/>and<sp/>its<sp/>children.</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>grammar<sp/>string<sp/>is<sp/>of<sp/>a<sp/>format<sp/>similar<sp/>to<sp/>that<sp/>used</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>Natlink<sp/>to<sp/>define<sp/>its<sp/>grammars.</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>NotImplementedError(</highlight><highlight class="stringliteral">&quot;Call<sp/>to<sp/>virtual<sp/>method<sp/>gstring()&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>base<sp/>class<sp/>ElementBase&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>recognition<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a9203f4df00c4c987d10bd8c00814bbb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a9203f4df00c4c987d10bd8c00814bbb6" kindref="member">decode</ref>(self,<sp/>state):</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Attempt<sp/>to<sp/>decode<sp/>the<sp/>recognition<sp/>stored<sp/>in<sp/>the<sp/>given<sp/>*state*.</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>NotImplementedError(</highlight><highlight class="stringliteral">&quot;Call<sp/>to<sp/>virtual<sp/>method<sp/>decode()&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>base<sp/>class<sp/>ElementBase&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a1006d0e330eda5f0f132bb3992bd8d1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a1006d0e330eda5f0f132bb3992bd8d1d" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Determine<sp/>the<sp/>semantic<sp/>value<sp/>of<sp/>this<sp/>element<sp/>given<sp/>the</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recognition<sp/>results<sp/>stored<sp/>in<sp/>the<sp/>*node*.</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Argument:</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*node*<sp/>--</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>:class:`dragonfly.grammar.state.Node`<sp/>instance</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>representing<sp/>this<sp/>element<sp/>within<sp/>the<sp/>recognition</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse<sp/>tree</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>default<sp/>behavior<sp/>of<sp/>this<sp/>method<sp/>is<sp/>to<sp/>return</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>iterable<sp/>containing<sp/>the<sp/>recognized<sp/>words<sp/>matched</highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>this<sp/>element<sp/>(i.e.<sp/>*node.words()*).</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.words()</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1acca1fd7cd9fc4bff2d96cdc0855b0ea8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1acca1fd7cd9fc4bff2d96cdc0855b0ea8" kindref="member">has_default</ref>(self):</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1aa0bbb9c347cc144dc8ec9089b752d1fd" kindref="member">_default</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline lineno="230" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1adcd1378c9523c840349e97a6a775edad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1adcd1378c9523c840349e97a6a775edad" kindref="member">default</ref>(self):</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1aa0bbb9c347cc144dc8ec9089b752d1fd" kindref="member">_default</ref></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Internal<sp/>utility<sp/>methods<sp/>for<sp/>use<sp/>by<sp/>derived<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1ac9000520c1ed2cc45e750aa4f58c33e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1ac9000520c1ed2cc45e750aa4f58c33e0" kindref="member">_copy_sequence</ref>(self,<sp/>sequence,<sp/>name,<sp/>item_types=None):</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Utility<sp/>function<sp/>for<sp/>derived<sp/>classes<sp/>that<sp/>checks<sp/>that<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/>is<sp/>a<sp/>sequence,<sp/>copies<sp/>its<sp/>contents<sp/>into<sp/>a<sp/>new<sp/>tuple,</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>checks<sp/>that<sp/>each<sp/>item<sp/>is<sp/>of<sp/>a<sp/>given<sp/>type.</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>tuple(sequence)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>TypeError:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;%s<sp/>object<sp/>must<sp/>be<sp/>a<sp/>sequence.&quot;</highlight><highlight class="normal"><sp/>%<sp/>name)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>item_types:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalid<sp/>=<sp/>[c<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>result<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(c,<sp/>item_types)]</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>invalid:</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;%s<sp/>object<sp/>must<sp/>contain<sp/>only<sp/>%s<sp/>types.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>(Received<sp/>%s)&quot;</highlight><highlight class="normal"><sp/>%<sp/>(name,<sp/>item_types,<sp/>result))</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">#===========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Basic<sp/>structural<sp/>element<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence" kindref="compound">Sequence</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase" kindref="compound">ElementBase</ref>):</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>class<sp/>representing<sp/>a<sp/>sequence<sp/>of<sp/>child<sp/>elements</highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>must<sp/>all<sp/>match<sp/>a<sp/>recognition<sp/>in<sp/>the<sp/>correct<sp/>order.</highlight></codeline>
<codeline lineno="266"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="267"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="268"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*children*<sp/>(iterable,<sp/>default:<sp/>*()*)<sp/>--</highlight></codeline>
<codeline lineno="269"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>child<sp/>elements<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="270"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*default*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>default<sp/>value<sp/>used<sp/>if<sp/>this<sp/>element<sp/>is<sp/>optional<sp/>and<sp/>wasn&apos;t</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spoken</highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>a<sp/>recognition<sp/>to<sp/>match,<sp/>all<sp/>child<sp/>elements<sp/>must<sp/>match</highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>recognition<sp/>in<sp/>the<sp/>order<sp/>that<sp/>they<sp/>were<sp/>given<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*children*<sp/>constructor<sp/>argument.</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Example<sp/>usage::</highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>from<sp/>dragonfly.test<sp/>import<sp/>ElementTester</highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>seq<sp/>=<sp/>Sequence([Literal(&quot;hello&quot;),<sp/>Literal(&quot;world&quot;)])</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>test_seq<sp/>=<sp/>ElementTester(seq)</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>test_seq.recognize(&quot;hello<sp/>world&quot;)</highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&apos;hello&apos;,<sp/>&apos;world&apos;]</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;&gt;<sp/>test_seq.recognize(&quot;hello<sp/>universe&quot;)</highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a8a3162550e539f4876bb3d5081c29e52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a8a3162550e539f4876bb3d5081c29e52" kindref="member">__init__</ref>(self,<sp/>children=(),<sp/>name=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementBase.__init__(self,<sp/>name=name,<sp/>default=default)</highlight></codeline>
<codeline lineno="294" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a58e9c5d9f1ad80ffe485dd0ca6b57027" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a58e9c5d9f1ad80ffe485dd0ca6b57027" kindref="member">_children</ref><sp/>=<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1ac9000520c1ed2cc45e750aa4f58c33e0" kindref="member">_copy_sequence</ref>(children,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>ElementBase)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>introspection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a9dba1457795ee51b44a5cb297fa53d0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a9dba1457795ee51b44a5cb297fa53d0f" kindref="member">_get_children</ref>(self):</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Returns<sp/>the<sp/>child<sp/>elements<sp/>contained<sp/>within<sp/>the<sp/>sequence.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a58e9c5d9f1ad80ffe485dd0ca6b57027" kindref="member">_children</ref></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>load-time<sp/>setup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1abd984ef6e0431e3e95ba9334756d6b79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1abd984ef6e0431e3e95ba9334756d6b79" kindref="member">dependencies</ref>(self,<sp/>memo):</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>memo:</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memo.add(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref>)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependencies<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a58e9c5d9f1ad80ffe485dd0ca6b57027" kindref="member">_children</ref>:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependencies.extend(c.dependencies(memo))</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dependencies</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1ae7e8ae6a32fed88acc15b37bdcfb786d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1ae7e8ae6a32fed88acc15b37bdcfb786d" kindref="member">gstring</ref>(self):</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">.join([e.gstring()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>e<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a58e9c5d9f1ad80ffe485dd0ca6b57027" kindref="member">_children</ref>])<sp/>\</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>recognition<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a54378c1fa31b17b3860a79fa30f4991a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a54378c1fa31b17b3860a79fa30f4991a" kindref="member">decode</ref>(self,<sp/>state):</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_attempt(self)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Special<sp/>case<sp/>for<sp/>an<sp/>empty<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a58e9c5d9f1ad80ffe485dd0ca6b57027" kindref="member">_children</ref>)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Attempt<sp/>to<sp/>walk<sp/>a<sp/>path<sp/>through<sp/>the<sp/>entire<sp/>sequence<sp/>of<sp/>children</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>so<sp/>that<sp/>each<sp/>one<sp/>decodes<sp/>successfully.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>[self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a58e9c5d9f1ad80ffe485dd0ca6b57027" kindref="member">_children</ref>[0].<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a54378c1fa31b17b3860a79fa30f4991a" kindref="member">decode</ref>(state)]</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>path:</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Allow<sp/>the<sp/>last<sp/>child<sp/>to<sp/>attempt<sp/>decoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:<sp/>next(path[-1])</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>StopIteration:</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Last<sp/>child<sp/>failed<sp/>to<sp/>decode,<sp/>remove<sp/>from<sp/>path<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>allowed<sp/>the<sp/>one-before-last<sp/>child<sp/>to<sp/>reattempt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path.pop()</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Last<sp/>child<sp/>successfully<sp/>decoded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(path)<sp/>&lt;<sp/>len(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a58e9c5d9f1ad80ffe485dd0ca6b57027" kindref="member">_children</ref>):</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Sequence<sp/>not<sp/>yet<sp/>complete,<sp/>append<sp/>the<sp/>next<sp/>child.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path.append(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a58e9c5d9f1ad80ffe485dd0ca6b57027" kindref="member">_children</ref>[len(path)].<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a54378c1fa31b17b3860a79fa30f4991a" kindref="member">decode</ref>(state))</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Sequence<sp/>complete,<sp/>all<sp/>children<sp/>decoded<sp/>successfully.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Sequence<sp/>of<sp/>children<sp/>could<sp/>not<sp/>all<sp/>decode<sp/>successfully:<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a981b796898ebccd6999972a7944d11b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence_1a981b796898ebccd6999972a7944d11b3" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="362"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>*value*<sp/>of<sp/>a<sp/>:class:`Sequence`<sp/>is<sp/>a<sp/>list<sp/>containing</highlight></codeline>
<codeline lineno="363"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>values<sp/>of<sp/>each<sp/>of<sp/>its<sp/>children.</highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[child.value()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>child<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>node.children]</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional" kindref="compound">Optional</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase" kindref="compound">ElementBase</ref>):</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>class<sp/>representing<sp/>an<sp/>optional<sp/>child<sp/>element.</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*child*<sp/>(*ElementBase*)<sp/>--</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>child<sp/>element<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*default*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="381"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>default<sp/>value<sp/>used<sp/>if<sp/>this<sp/>element<sp/>is<sp/>optional<sp/>and<sp/>wasn&apos;t</highlight></codeline>
<codeline lineno="382"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spoken</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Recognitions<sp/>always<sp/>match<sp/>this<sp/>element.<sp/><sp/>If<sp/>the<sp/>child<sp/>element</highlight></codeline>
<codeline lineno="385"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>match<sp/>the<sp/>recognition,<sp/>then<sp/>that<sp/>result<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="386"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Otherwise,<sp/>this<sp/>element<sp/>itself<sp/>does<sp/>match<sp/>but<sp/>the<sp/>child</highlight></codeline>
<codeline lineno="387"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>not<sp/>processed.</highlight></codeline>
<codeline lineno="388"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="389"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1a4ef3e4a76b9257b29d5b4cc9f822fc57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1a4ef3e4a76b9257b29d5b4cc9f822fc57" kindref="member">__init__</ref>(self,<sp/>child,<sp/>name=None,<sp/>default=None):</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementBase.__init__(self,<sp/>name,<sp/>default=default)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(child,<sp/>ElementBase):</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;Child<sp/>of<sp/>%s<sp/>object<sp/>must<sp/>be<sp/>an&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>ElementBase<sp/>instance.&quot;</highlight><highlight class="normal"><sp/>%<sp/>self)</highlight></codeline>
<codeline lineno="397" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1afd5820db0b9b0772652ac1b707ef8945" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1afd5820db0b9b0772652ac1b707ef8945" kindref="member">_child</ref><sp/>=<sp/>child</highlight></codeline>
<codeline lineno="398" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1ac4a994bb65c2efffac8bb90b9be00bee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1ac4a994bb65c2efffac8bb90b9be00bee" kindref="member">_greedy</ref><sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>introspection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1a5e2505f1f84b1c2ce1f671fab0922c2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1a5e2505f1f84b1c2ce1f671fab0922c2d" kindref="member">_get_children</ref>(self):</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Returns<sp/>the<sp/>optional<sp/>child<sp/>element.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1afd5820db0b9b0772652ac1b707ef8945" kindref="member">_child</ref>,<sp/>)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>load-time<sp/>setup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1ab2c46ae1b56d889b39eeb1610577b059" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1ab2c46ae1b56d889b39eeb1610577b059" kindref="member">dependencies</ref>(self,<sp/>memo):</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>memo:</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memo.add(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref>)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1afd5820db0b9b0772652ac1b707ef8945" kindref="member">_child</ref>.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1ab2c46ae1b56d889b39eeb1610577b059" kindref="member">dependencies</ref>(memo)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1a1303dc59ac7e0dd84ba453b98417b27e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1a1303dc59ac7e0dd84ba453b98417b27e" kindref="member">gstring</ref>(self):</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1afd5820db0b9b0772652ac1b707ef8945" kindref="member">_child</ref>.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1a1303dc59ac7e0dd84ba453b98417b27e" kindref="member">gstring</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>recognition<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1ad40427651dcc2083cf042339e7bf1d07" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1ad40427651dcc2083cf042339e7bf1d07" kindref="member">decode</ref>(self,<sp/>state):</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=unused-variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_attempt(self)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>in<sp/>greedy<sp/>mode,<sp/>allow<sp/>the<sp/>child<sp/>to<sp/>decode<sp/>before.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1ac4a994bb65c2efffac8bb90b9be00bee" kindref="member">_greedy</ref>:</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>result<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1afd5820db0b9b0772652ac1b707ef8945" kindref="member">_child</ref>.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1ad40427651dcc2083cf042339e7bf1d07" kindref="member">decode</ref>(state):</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Rollback<sp/>decoding<sp/>so<sp/>that<sp/>the<sp/>null-decode<sp/>can<sp/>be<sp/>yielded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_rollback(self)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Yield<sp/>the<sp/>null-decode<sp/>possibility.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>not<sp/>in<sp/>greedy<sp/>mode,<sp/>allow<sp/>the<sp/>child<sp/>to<sp/>decode<sp/>after.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1ac4a994bb65c2efffac8bb90b9be00bee" kindref="member">_greedy</ref>:</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>result<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1afd5820db0b9b0772652ac1b707ef8945" kindref="member">_child</ref>.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1ad40427651dcc2083cf042339e7bf1d07" kindref="member">decode</ref>(state):</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>No<sp/>more<sp/>decoding<sp/>possibilities<sp/>available,<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1a87b0137f206f104dbf1604347047f916" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1a87b0137f206f104dbf1604347047f916" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="453"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>*value*<sp/>of<sp/>a<sp/>:class:`Optional`<sp/>is<sp/>the<sp/>value<sp/>of<sp/>its<sp/>child,</highlight></codeline>
<codeline lineno="454"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>the<sp/>child<sp/>did<sp/>match<sp/>the<sp/>recognition.<sp/><sp/>Otherwise<sp/>the</highlight></codeline>
<codeline lineno="455"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*value*<sp/>is<sp/>*None*.</highlight></codeline>
<codeline lineno="456"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="457"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>node.children:</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.children[0].<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional_1a87b0137f206f104dbf1604347047f916" kindref="member">value</ref>()</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative" kindref="compound">Alternative</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase" kindref="compound">ElementBase</ref>):</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="468"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>class<sp/>representing<sp/>several<sp/>child<sp/>elements<sp/>of<sp/>which<sp/>only</highlight></codeline>
<codeline lineno="469"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one<sp/>will<sp/>match.</highlight></codeline>
<codeline lineno="470"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="471"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="472"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*children*<sp/>(iterable,<sp/>default:<sp/>*()*)<sp/>--</highlight></codeline>
<codeline lineno="473"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>child<sp/>elements<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="474"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="475"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="476"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*default*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="477"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>default<sp/>value<sp/>used<sp/>if<sp/>this<sp/>element<sp/>is<sp/>optional<sp/>and<sp/>wasn&apos;t</highlight></codeline>
<codeline lineno="478"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spoken</highlight></codeline>
<codeline lineno="479"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="480"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>a<sp/>recognition<sp/>to<sp/>match,<sp/>at<sp/>least<sp/>one<sp/>of<sp/>the<sp/>child<sp/>elements</highlight></codeline>
<codeline lineno="481"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>match<sp/>the<sp/>recognition.<sp/><sp/>The<sp/>first<sp/>matching<sp/>child<sp/>is</highlight></codeline>
<codeline lineno="482"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used.<sp/><sp/>Child<sp/>elements<sp/>are<sp/>searched<sp/>in<sp/>the<sp/>order<sp/>they<sp/>are<sp/>given</highlight></codeline>
<codeline lineno="483"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>*children*<sp/>constructor<sp/>argument.</highlight></codeline>
<codeline lineno="484"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a9e25bbe284f390caccca1ae9aaef4f9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a9e25bbe284f390caccca1ae9aaef4f9f" kindref="member">__init__</ref>(self,<sp/>children=(),<sp/>name=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementBase.__init__(self,<sp/>name,<sp/>default=default)</highlight></codeline>
<codeline lineno="489" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a437c38560300c589522540ba22e3f8bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a437c38560300c589522540ba22e3f8bb" kindref="member">_children</ref><sp/>=<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1ac9000520c1ed2cc45e750aa4f58c33e0" kindref="member">_copy_sequence</ref>(children,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>ElementBase)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>introspection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a39ccda58f04793a62168180b757a7d52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a39ccda58f04793a62168180b757a7d52" kindref="member">_get_children</ref>(self):</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Returns<sp/>the<sp/>alternative<sp/>child<sp/>elements.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a437c38560300c589522540ba22e3f8bb" kindref="member">_children</ref></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>load-time<sp/>setup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a872ec6512f38a67cadc97aee1690e3e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a872ec6512f38a67cadc97aee1690e3e2" kindref="member">gstring</ref>(self):</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal">.join([e.gstring()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>e<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a437c38560300c589522540ba22e3f8bb" kindref="member">_children</ref>])<sp/>\</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a6d76e5368b8c08b50bde508936f66cf6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a6d76e5368b8c08b50bde508936f66cf6" kindref="member">dependencies</ref>(self,<sp/>memo):</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>memo:</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memo.add(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref>)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependencies<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a437c38560300c589522540ba22e3f8bb" kindref="member">_children</ref>:</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependencies.extend(c.dependencies(memo))</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dependencies</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>recognition<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a2726d9e6a2f228b3d6624f02cc15a7af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a2726d9e6a2f228b3d6624f02cc15a7af" kindref="member">decode</ref>(self,<sp/>state):</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_attempt(self)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Special<sp/>case<sp/>for<sp/>an<sp/>empty<sp/>list<sp/>of<sp/>alternatives.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a437c38560300c589522540ba22e3f8bb" kindref="member">_children</ref>)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Iterate<sp/>through<sp/>the<sp/>children.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>child<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a437c38560300c589522540ba22e3f8bb" kindref="member">_children</ref>:</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Iterate<sp/>through<sp/>this<sp/>child&apos;s<sp/>possible<sp/>decoding<sp/>states.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=unused-variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>result<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>child.decode(state):</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Rollback<sp/>to<sp/>the<sp/>alternative&apos;s<sp/>original<sp/>state,<sp/>so<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>next<sp/>child<sp/>starts<sp/>decoding<sp/>without<sp/>interference<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>previous<sp/>child.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_rollback(self)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>None<sp/>of<sp/>the<sp/>children<sp/>could<sp/>decode<sp/>successfully:<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a73c4989dc996948804dfcb8401bb0664" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a73c4989dc996948804dfcb8401bb0664" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="551"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>*value*<sp/>of<sp/>an<sp/>:class:`Alternative`<sp/>is<sp/>the<sp/>value<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="552"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>that<sp/>matched<sp/>the<sp/>recognition.</highlight></codeline>
<codeline lineno="553"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="554"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.children[0].<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative_1a73c4989dc996948804dfcb8401bb0664" kindref="member">value</ref>()</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition" kindref="compound">Repetition</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence" kindref="compound">Sequence</ref>):</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="562"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>class<sp/>representing<sp/>a<sp/>repetition<sp/>of<sp/>one<sp/>child<sp/>element.</highlight></codeline>
<codeline lineno="563"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="564"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="565"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*child*<sp/>(*ElementBase*)<sp/>--</highlight></codeline>
<codeline lineno="566"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>child<sp/>element<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="567"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*min*<sp/>(*int*,<sp/>default:<sp/>*1*)<sp/>--</highlight></codeline>
<codeline lineno="568"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>times<sp/>that<sp/>the<sp/>child<sp/>element<sp/>must</highlight></codeline>
<codeline lineno="569"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>recognized;<sp/>may<sp/>be<sp/>0</highlight></codeline>
<codeline lineno="570"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*max*<sp/>(*int*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="571"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>times<sp/>that<sp/>the<sp/>child<sp/>element<sp/>must</highlight></codeline>
<codeline lineno="572"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>recognized;<sp/>if<sp/>*None*,<sp/>the<sp/>child<sp/>element<sp/>must<sp/>be<sp/>recognized</highlight></codeline>
<codeline lineno="573"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exactly<sp/>*min*<sp/>times<sp/>(i.e.<sp/>*max<sp/>=<sp/>min<sp/>+<sp/>1*)</highlight></codeline>
<codeline lineno="574"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="575"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="576"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*default*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="577"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>default<sp/>value<sp/>used<sp/>if<sp/>this<sp/>element<sp/>is<sp/>optional<sp/>and<sp/>wasn&apos;t</highlight></codeline>
<codeline lineno="578"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spoken</highlight></codeline>
<codeline lineno="579"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*optimize*<sp/>(*bool*,<sp/>default:<sp/>*True*)<sp/>--</highlight></codeline>
<codeline lineno="580"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whether<sp/>the<sp/>engine&apos;s<sp/>compiler<sp/>should<sp/>compile<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="581"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimally</highlight></codeline>
<codeline lineno="582"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="583"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>a<sp/>recognition<sp/>to<sp/>match,<sp/>at<sp/>least<sp/>one<sp/>of<sp/>the<sp/>child<sp/>elements</highlight></codeline>
<codeline lineno="584"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>match<sp/>the<sp/>recognition.<sp/><sp/>The<sp/>first<sp/>matching<sp/>child<sp/>is</highlight></codeline>
<codeline lineno="585"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used.<sp/><sp/>Child<sp/>elements<sp/>are<sp/>searched<sp/>in<sp/>the<sp/>order<sp/>they<sp/>are<sp/>given</highlight></codeline>
<codeline lineno="586"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>*children*<sp/>constructor<sp/>argument.</highlight></codeline>
<codeline lineno="587"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="588"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>*optimize*<sp/>argument<sp/>is<sp/>set<sp/>to<sp/>*True*,<sp/>the<sp/>compiler<sp/>will</highlight></codeline>
<codeline lineno="589"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ignore<sp/>the<sp/>*min*<sp/>and<sp/>*max*<sp/>limits<sp/>to<sp/>reduce<sp/>grammar<sp/>complexity.<sp/>If</highlight></codeline>
<codeline lineno="590"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>number<sp/>of<sp/>repetitions<sp/>recognized<sp/>is<sp/>more<sp/>than<sp/>the<sp/>*max*<sp/>value,</highlight></codeline>
<codeline lineno="591"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>rule<sp/>will<sp/>fail<sp/>to<sp/>match.</highlight></codeline>
<codeline lineno="592"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="593"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=redefined-builtin,unused-variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a9d9722993405fb2404d842d98273a2aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a9d9722993405fb2404d842d98273a2aa" kindref="member">__init__</ref>(self,<sp/>child,<sp/>min=1,<sp/>max=None,<sp/>name=None,<sp/>default=None,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimize=True):</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(child,<sp/>ElementBase):</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;Child<sp/>of<sp/>%s<sp/>object<sp/>must<sp/>be<sp/>an&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>ElementBase<sp/>instance.&quot;</highlight><highlight class="normal"><sp/>%<sp/>self)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>isinstance(min,<sp/>integer_types)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>max<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>isinstance(max,<sp/>integer_types)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>max<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>min<sp/>&lt;<sp/>max,<sp/></highlight><highlight class="stringliteral">&quot;min<sp/>must<sp/>be<sp/>less<sp/>than<sp/>max&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ac9520612ecd7f6dc0106cbf91b0babc0" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="606" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ae6647ea6b2ec1e944293582af1cec356" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ac9520612ecd7f6dc0106cbf91b0babc0" kindref="member">_child</ref><sp/>=<sp/>child</highlight></codeline>
<codeline lineno="607" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a56585e0a4433b4bdd96f29f666b5240c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ae6647ea6b2ec1e944293582af1cec356" kindref="member">_min</ref><sp/>=<sp/>min</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>max<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a56585e0a4433b4bdd96f29f666b5240c" kindref="member">_max</ref><sp/>=<sp/>min<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="609" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ab652220268a7c2c2b8603afc9c970d52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a56585e0a4433b4bdd96f29f666b5240c" kindref="member">_max</ref><sp/>=<sp/>max</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ab652220268a7c2c2b8603afc9c970d52" kindref="member">_optimize</ref><sp/>=<sp/>optimize</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional_length<sp/>=<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a56585e0a4433b4bdd96f29f666b5240c" kindref="member">_max</ref><sp/>-<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ae6647ea6b2ec1e944293582af1cec356" kindref="member">_min</ref><sp/>-<sp/>1</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>optional_length<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional" kindref="compound">Optional</ref>(child)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>index<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(optional_length-1):</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional" kindref="compound">Optional</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence" kindref="compound">Sequence</ref>([child,<sp/>element]))</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ae6647ea6b2ec1e944293582af1cec356" kindref="member">_min</ref><sp/>&gt;=<sp/>1:</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children<sp/>=<sp/>[child]<sp/>*<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ae6647ea6b2ec1e944293582af1cec356" kindref="member">_min</ref><sp/>+<sp/>[element]</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children<sp/>=<sp/>[element]</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ae6647ea6b2ec1e944293582af1cec356" kindref="member">_min</ref><sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children<sp/>=<sp/>[child]<sp/>*<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ae6647ea6b2ec1e944293582af1cec356" kindref="member">_min</ref></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&quot;Repetition<sp/>not<sp/>allowed<sp/>to<sp/>be<sp/>empty.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sequence.__init__(self,<sp/>children,<sp/>name=name,<sp/>default=default)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a1aae0a664b8b2ff843ead82e3398aa78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>min<sp/>=<sp/>property(</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>self:<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ae6647ea6b2ec1e944293582af1cec356" kindref="member">_min</ref>,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc=</highlight><highlight class="stringliteral">&quot;The<sp/>minimum<sp/>number<sp/>of<sp/>times<sp/>that<sp/>the<sp/>child<sp/>element<sp/>must<sp/>be<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;recognized;<sp/>may<sp/>be<sp/>0.<sp/>(Read-only)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a54dd30fc5accf072d27fb9914e796384" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>property(</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>self:<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a56585e0a4433b4bdd96f29f666b5240c" kindref="member">_max</ref>,</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc=</highlight><highlight class="stringliteral">&quot;The<sp/>maximum<sp/>number<sp/>of<sp/>times<sp/>that<sp/>the<sp/>child<sp/>element<sp/>must<sp/>be<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;recognized;<sp/>if<sp/>*None*,<sp/>the<sp/>child<sp/>element<sp/>must<sp/>be<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;recognized<sp/>exactly<sp/>*min*<sp/>times<sp/>(i.e.<sp/>*max<sp/>=<sp/>min<sp/>+<sp/>1*).<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(Read-only)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a613205a425fe336b3aec5c7de52ea38c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>optimize<sp/>=<sp/>property(</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>self:<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ab652220268a7c2c2b8603afc9c970d52" kindref="member">_optimize</ref>,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc=</highlight><highlight class="stringliteral">&quot;Whether<sp/>the<sp/>engine&apos;s<sp/>compiler<sp/>should<sp/>compile<sp/>the<sp/>element<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;optimally.<sp/>(Read-only)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a762a47cf5889ce58ba0d28285b81c9d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a762a47cf5889ce58ba0d28285b81c9d1" kindref="member">dependencies</ref>(self,<sp/>memo):</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>memo:</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memo.add(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref>)</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ac9520612ecd7f6dc0106cbf91b0babc0" kindref="member">_child</ref>.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a762a47cf5889ce58ba0d28285b81c9d1" kindref="member">dependencies</ref>(memo)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>recognition<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a7a3b9aca5c246602eec9c47b8d85cfda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a7a3b9aca5c246602eec9c47b8d85cfda" kindref="member">get_repetitions</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="660"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>a<sp/>list<sp/>containing<sp/>the<sp/>nodes<sp/>associated<sp/>with</highlight></codeline>
<codeline lineno="661"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>each<sp/>repetition<sp/>of<sp/>this<sp/>element&apos;s<sp/>child<sp/>element.</highlight></codeline>
<codeline lineno="662"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="663"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Argument:</highlight></codeline>
<codeline lineno="664"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*node*<sp/>(*Node*)<sp/>--</highlight></codeline>
<codeline lineno="665"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>parse<sp/>tree<sp/>node<sp/>associated<sp/>with<sp/>this<sp/>repetition<sp/>element;</highlight></codeline>
<codeline lineno="666"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>necessary<sp/>for<sp/>searching<sp/>for<sp/>child<sp/>elements<sp/>within<sp/>the<sp/>parse</highlight></codeline>
<codeline lineno="667"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree</highlight></codeline>
<codeline lineno="668"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="669"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repetitions<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>index<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ae6647ea6b2ec1e944293582af1cec356" kindref="member">_min</ref>):</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/>node.children[index]</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>element.actor<sp/>!=<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ac9520612ecd7f6dc0106cbf91b0babc0" kindref="member">_child</ref>:</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>child<sp/>of<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>(self,<sp/>element.actor))</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repetitions.append(element)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a56585e0a4433b4bdd96f29f666b5240c" kindref="member">_max</ref><sp/>-<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ae6647ea6b2ec1e944293582af1cec356" kindref="member">_min</ref><sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optional<sp/>=<sp/>node.children[-1]</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>optional.children:</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child<sp/>=<sp/>optional.children[0]</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(child.actor,<sp/>Sequence):</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>len(child.children)<sp/>==<sp/>2</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element,<sp/>optional<sp/>=<sp/>child.children</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>element.actor<sp/>!=<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ac9520612ecd7f6dc0106cbf91b0babc0" kindref="member">_child</ref>:</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>child<sp/>of<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>(self,<sp/>element.actor))</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repetitions.append(element)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>child.actor<sp/>==<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1ac9520612ecd7f6dc0106cbf91b0babc0" kindref="member">_child</ref>:</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repetitions.append(child)</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>child<sp/>of<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%<sp/>(self,<sp/>child.actor))</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>repetitions</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1abcaaefb37518da0d7c57273ef4b3ec84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1abcaaefb37518da0d7c57273ef4b3ec84" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="700"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>*value*<sp/>of<sp/>a<sp/>:class:`Repetition`<sp/>is<sp/>a<sp/>list<sp/>containing</highlight></codeline>
<codeline lineno="701"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>values<sp/>of<sp/>its<sp/>child.</highlight></codeline>
<codeline lineno="702"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="703"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>length<sp/>of<sp/>this<sp/>list<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>number<sp/>of<sp/>times</highlight></codeline>
<codeline lineno="704"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>the<sp/>child<sp/>element<sp/>was<sp/>recognized.</highlight></codeline>
<codeline lineno="705"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="706"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repetitions<sp/>=<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Repetition_1a7a3b9aca5c246602eec9c47b8d85cfda" kindref="member">get_repetitions</ref>(node)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[r.value()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>r<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>repetitions]</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal" kindref="compound">Literal</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase" kindref="compound">ElementBase</ref>):</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="715"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>class<sp/>representing<sp/>one<sp/>or<sp/>more<sp/>literal<sp/>words<sp/>which<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="716"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>said<sp/>exactly<sp/>by<sp/>the<sp/>speaker<sp/>as<sp/>given.</highlight></codeline>
<codeline lineno="717"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="718"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quoted<sp/>words<sp/>can<sp/>be<sp/>used<sp/>to<sp/>potentially<sp/>improve<sp/>accuracy.<sp/>This</highlight></codeline>
<codeline lineno="719"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currently<sp/>only<sp/>has<sp/>an<sp/>effect<sp/>if<sp/>using<sp/>the<sp/>Natlink<sp/>SR<sp/>engine</highlight></codeline>
<codeline lineno="720"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>back-end.</highlight></codeline>
<codeline lineno="721"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="722"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="723"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*text*<sp/>(*str*)<sp/>--</highlight></codeline>
<codeline lineno="724"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>words<sp/>to<sp/>be<sp/>said<sp/>by<sp/>the<sp/>speaker</highlight></codeline>
<codeline lineno="725"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="726"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="727"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*value*<sp/>(*object*,<sp/>default:<sp/>*the<sp/>recognized<sp/>words*)<sp/>--</highlight></codeline>
<codeline lineno="728"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>returned<sp/>when<sp/>this<sp/>element<sp/>is<sp/>successfully<sp/>decoded</highlight></codeline>
<codeline lineno="729"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*default*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="730"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>default<sp/>value<sp/>used<sp/>if<sp/>this<sp/>element<sp/>is<sp/>optional<sp/>and<sp/>wasn&apos;t</highlight></codeline>
<codeline lineno="731"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spoken</highlight></codeline>
<codeline lineno="732"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*quote_start_str*<sp/>(*str*,<sp/>default:<sp/>\&quot;)<sp/>--</highlight></codeline>
<codeline lineno="733"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>string<sp/>used<sp/>for<sp/>specifying<sp/>the<sp/>start<sp/>of<sp/>quoted<sp/>words.</highlight></codeline>
<codeline lineno="734"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*quote_end_str*<sp/>(*str*,<sp/>default:<sp/>\&quot;)<sp/>--</highlight></codeline>
<codeline lineno="735"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>string<sp/>used<sp/>for<sp/>specifying<sp/>the<sp/>end<sp/>of<sp/>quoted<sp/>words.</highlight></codeline>
<codeline lineno="736"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*strip_quote_strs*<sp/>(*bool*,<sp/>default:<sp/>*True*)<sp/>--</highlight></codeline>
<codeline lineno="737"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whether<sp/>the<sp/>start<sp/>and<sp/>end<sp/>quote<sp/>strings<sp/>should<sp/>be<sp/>stripped<sp/>from</highlight></codeline>
<codeline lineno="738"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>element&apos;s<sp/>word<sp/>lists.</highlight></codeline>
<codeline lineno="739"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="740"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a6a1e32678c34c27c0cebdf08a3bf8415" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a6a1e32678c34c27c0cebdf08a3bf8415" kindref="member">__init__</ref>(self,<sp/>text,<sp/>name=None,<sp/>value=None,<sp/>default=None,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quote_start_str=&apos;&quot;&apos;,<sp/>quote_end_str=&apos;&quot;&apos;,</highlight></codeline>
<codeline lineno="744" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a6c003099a36dcf08548e2d9877069bbc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strip_quote_strs=True):</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementBase.__init__(self,<sp/>name,<sp/>default=default)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a6c003099a36dcf08548e2d9877069bbc" kindref="member">_value</ref><sp/>=<sp/>value</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(text,<sp/>string_types):</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;Text<sp/>of<sp/>%s<sp/>object<sp/>must<sp/>be<sp/>a&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>string.&quot;</highlight><highlight class="normal"><sp/>%<sp/>self)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>the<sp/>words<sp/>and<sp/>extended<sp/>words<sp/>lists.<sp/>The<sp/>latter<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>quoted<sp/>words<sp/>as<sp/>single<sp/>items.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words_ext<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_quoted_sequence<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>word<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>text.split():</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Begin<sp/>quoted<sp/>words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>word.startswith(quote_start_str):</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_quoted_sequence.append(word)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>End<sp/>quoted<sp/>words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>current_quoted_sequence<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>word.endswith(quote_end_str):</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_quoted_sequence.append(word)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quoted_words<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">.join(current_quoted_sequence)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Strip<sp/>quote<sp/>start<sp/>and<sp/>end<sp/>strings<sp/>if<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>strip_quote_strs:</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quoted_words<sp/>=<sp/>quoted_words[len(quote_start_str):</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len(quote_end_str)<sp/>*<sp/>-1]</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>the<sp/>words<sp/>to<sp/>both<sp/>lists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words.extend(quoted_words.split())</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words_ext.append(quoted_words)</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Clear<sp/>current<sp/>sequence<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>current_quoted_sequence[:]</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Continuing<sp/>quoted<sp/>words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>current_quoted_sequence:</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_quoted_sequence.append(word)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Unquoted<sp/>words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words.append(word)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words_ext.append(word)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Handle<sp/>unfinished<sp/>quoted<sp/>words<sp/>sequence<sp/>by<sp/>treating<sp/>it<sp/>as<sp/>normal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>current_quoted_sequence:</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words.extend(current_quoted_sequence)</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words_ext.extend(current_quoted_sequence)</highlight></codeline>
<codeline lineno="792" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1aaa4b88760bcb34d606a1af638c69a4d5" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="793" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1aaab2fbf0e0186294d7359c75e7e7f0aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>both<sp/>lists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1aaa4b88760bcb34d606a1af638c69a4d5" kindref="member">_words</ref><sp/>=<sp/>words</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1aaab2fbf0e0186294d7359c75e7e7f0aa" kindref="member">_words_ext</ref><sp/>=<sp/>words_ext</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>introspection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a584b89a49dd36477ac15a1c8ba124537" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a584b89a49dd36477ac15a1c8ba124537" kindref="member">__repr__</ref>(self):</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%s(%r)&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self.__class__.__name__,<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a153892349250307a47f4ce1691342ebe" kindref="member">words</ref>)</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a153892349250307a47f4ce1691342ebe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>words<sp/>=<sp/>property(</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>self:<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1aaa4b88760bcb34d606a1af638c69a4d5" kindref="member">_words</ref>,</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc=</highlight><highlight class="stringliteral">&quot;The<sp/>words<sp/>to<sp/>be<sp/>said<sp/>by<sp/>the<sp/>speaker.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1ab847446236ff8e9151a78213bb37f135" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>words_ext<sp/>=<sp/>property(</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>self:<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1aaab2fbf0e0186294d7359c75e7e7f0aa" kindref="member">_words_ext</ref>,</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc=</highlight><highlight class="stringliteral">&quot;The<sp/>words<sp/>to<sp/>be<sp/>said<sp/>by<sp/>the<sp/>speaker,<sp/>with<sp/>any<sp/>quoted<sp/>words<sp/>as<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;single<sp/>items.<sp/>This<sp/>is<sp/>extends<sp/>the<sp/>:py:attr:`~words`<sp/>property.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>load-time<sp/>setup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a22d0a438988976bc2f201fa1157b76dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a22d0a438988976bc2f201fa1157b76dc" kindref="member">dependencies</ref>(self,<sp/>memo):</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1ae1b583264c14aebb046dfeb01ce74ef1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1ae1b583264c14aebb046dfeb01ce74ef1" kindref="member">gstring</ref>(self):</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">.join(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1aaa4b88760bcb34d606a1af638c69a4d5" kindref="member">_words</ref>)</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>recognition<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a86c93de38c3b126bc8e89f96805e119b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a86c93de38c3b126bc8e89f96805e119b" kindref="member">decode</ref>(self,<sp/>state):</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_attempt(self)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Iterate<sp/>through<sp/>this<sp/>element&apos;s<sp/>words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>all<sp/>match,<sp/>success.<sp/><sp/>Else,<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>state.engine<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>state.engine.quoted_words_support:</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1aaab2fbf0e0186294d7359c75e7e7f0aa" kindref="member">_words_ext</ref></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1aaa4b88760bcb34d606a1af638c69a4d5" kindref="member">_words</ref></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(words)):</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>state.word(i)</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>word<sp/>isn&apos;t<sp/>None,<sp/>make<sp/>it<sp/>lowercase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>word:</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>word.lower()</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>words<sp/>are<sp/>not<sp/>the<sp/>same,<sp/>then<sp/>this<sp/>is<sp/>a<sp/>decode<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>word<sp/>!=<sp/>words[i].lower():</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>All<sp/>words<sp/>matched,<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.next(len(words))</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Only<sp/>one<sp/>decoding<sp/>possibility,<sp/>failure<sp/>on<sp/>retry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1afb38fb1d73506956d965e768a48a9fc7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1afb38fb1d73506956d965e768a48a9fc7" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a6c003099a36dcf08548e2d9877069bbc" kindref="member">_value</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">u&quot;<sp/>&quot;</highlight><highlight class="normal">.join(node.words())</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal_1a6c003099a36dcf08548e2d9877069bbc" kindref="member">_value</ref></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef" kindref="compound">RuleRef</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase" kindref="compound">ElementBase</ref>):</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="867"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>class<sp/>representing<sp/>a<sp/>reference<sp/>to<sp/>another<sp/>Dragonfly<sp/>rule.</highlight></codeline>
<codeline lineno="868"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="869"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="870"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*rule*<sp/>(*Rule*)<sp/>--</highlight></codeline>
<codeline lineno="871"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>Dragonfly<sp/>rule<sp/>to<sp/>reference</highlight></codeline>
<codeline lineno="872"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="873"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="874"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*default*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="875"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>default<sp/>value<sp/>used<sp/>if<sp/>this<sp/>element<sp/>is<sp/>optional<sp/>and<sp/>wasn&apos;t</highlight></codeline>
<codeline lineno="876"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spoken</highlight></codeline>
<codeline lineno="877"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="878"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ad1b1e5b8d8c1074c9a807d33ad37173b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ad1b1e5b8d8c1074c9a807d33ad37173b" kindref="member">__init__</ref>(self,<sp/>rule,<sp/>name=None,<sp/>default=None):</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementBase.__init__(self,<sp/>name,<sp/>default=default)</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(rule,<sp/>Rule):</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;Rule<sp/>object<sp/>of<sp/>%s<sp/>object<sp/>must<sp/>be<sp/>a&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Dragonfly<sp/>rule.&quot;</highlight><highlight class="normal"><sp/>%<sp/>self)</highlight></codeline>
<codeline lineno="886" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ab571b3c0a5174f210991808ce0aaefdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ab571b3c0a5174f210991808ce0aaefdf" kindref="member">_rule</ref><sp/>=<sp/>rule</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>introspection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a3d579d6172c566fe313247636e975ceb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a3d579d6172c566fe313247636e975ceb" kindref="member">__repr__</ref>(self):</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>hasattr(self,<sp/></highlight><highlight class="stringliteral">&quot;_rule&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ElementBase.__repr__(self)</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;%s(%s)&apos;</highlight><highlight class="normal"><sp/>%<sp/>(self.__class__.__name__,<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ab571b3c0a5174f210991808ce0aaefdf" kindref="member">_rule</ref>.name)</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a98066ba6b734f36f6c3418ed75d02e52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>property(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>self:<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ab571b3c0a5174f210991808ce0aaefdf" kindref="member">_rule</ref>)</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>load-time<sp/>setup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a60de345256154be148c5f564160f0983" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a60de345256154be148c5f564160f0983" kindref="member">dependencies</ref>(self,<sp/>memo):</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>memo:</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memo.add(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref>)</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ab571b3c0a5174f210991808ce0aaefdf" kindref="member">_rule</ref>]<sp/>+<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ab571b3c0a5174f210991808ce0aaefdf" kindref="member">_rule</ref>.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a60de345256154be148c5f564160f0983" kindref="member">dependencies</ref>(memo)</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1aaed97cfed575c2928f5764144949e02e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1aaed97cfed575c2928f5764144949e02e" kindref="member">gstring</ref>(self):</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ab571b3c0a5174f210991808ce0aaefdf" kindref="member">_rule</ref>.name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>recognition<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ac7b9be36b4ffdadeca7865612042b8fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ac7b9be36b4ffdadeca7865612042b8fd" kindref="member">decode</ref>(self,<sp/>state):</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_attempt(self)</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Allow<sp/>the<sp/>rule<sp/>to<sp/>attempt<sp/>decoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=unused-variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>result<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ab571b3c0a5174f210991808ce0aaefdf" kindref="member">_rule</ref>.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ac7b9be36b4ffdadeca7865612042b8fd" kindref="member">decode</ref>(state):</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>rule<sp/>failed<sp/>to<sp/>deliver<sp/>a<sp/>valid<sp/>decoding,<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a54646a5c2c92c5d791f0cdd1a29d10aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a54646a5c2c92c5d791f0cdd1a29d10aa" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.children[0].<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a54646a5c2c92c5d791f0cdd1a29d10aa" kindref="member">value</ref>()</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef" kindref="compound">ListRef</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase" kindref="compound">ElementBase</ref>):</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="935"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>class<sp/>representing<sp/>a<sp/>reference<sp/>to<sp/>a<sp/>Dragonfly<sp/>List.</highlight></codeline>
<codeline lineno="936"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="937"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="938"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="939"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="940"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*list*<sp/>(*ListBase*)<sp/>--</highlight></codeline>
<codeline lineno="941"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>Dragonfly<sp/>List<sp/>to<sp/>reference</highlight></codeline>
<codeline lineno="942"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*key*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="943"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>to<sp/>differentiate<sp/>between<sp/>list<sp/>references<sp/>at<sp/>runtime</highlight></codeline>
<codeline lineno="944"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*default*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="945"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>default<sp/>value<sp/>used<sp/>if<sp/>this<sp/>element<sp/>is<sp/>optional<sp/>and<sp/>wasn&apos;t</highlight></codeline>
<codeline lineno="946"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spoken</highlight></codeline>
<codeline lineno="947"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="948"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=redefined-builtin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a26cf925568e51a3e220e726316f82d80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a26cf925568e51a3e220e726316f82d80" kindref="member">__init__</ref>(self,<sp/>name,<sp/>list,<sp/>key=None,<sp/>default=None):</highlight></codeline>
<codeline lineno="952" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1aedbfc748f0f07b30b037f172c5840832" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1aedbfc748f0f07b30b037f172c5840832" kindref="member">_list</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a2b5e88dc8e9c4e6f496e932a489981ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a2b5e88dc8e9c4e6f496e932a489981ea" kindref="member">_key</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementBase.__init__(self,<sp/>name=name,<sp/>default=default)</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(list,<sp/>ListBase):</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;List<sp/>argument<sp/>to<sp/>%s<sp/>constructor<sp/>must<sp/>be<sp/>a&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>Dragonfly<sp/>list.&quot;</highlight><highlight class="normal"><sp/>%<sp/>self.__class__.__name__)</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1aedbfc748f0f07b30b037f172c5840832" kindref="member">_list</ref><sp/>=<sp/>list</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a2b5e88dc8e9c4e6f496e932a489981ea" kindref="member">_key</ref><sp/>=<sp/>key</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>introspection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a01c5587ea2c2ca89eab5611ff8ceecdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a01c5587ea2c2ca89eab5611ff8ceecdc" kindref="member">__repr__</ref>(self):</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1aedbfc748f0f07b30b037f172c5840832" kindref="member">_list</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments.append(repr(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1aedbfc748f0f07b30b037f172c5840832" kindref="member">_list</ref>.name))</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a2b5e88dc8e9c4e6f496e932a489981ea" kindref="member">_key</ref>:</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments.append(</highlight><highlight class="stringliteral">&quot;key=%r&quot;</highlight><highlight class="normal"><sp/>%<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a2b5e88dc8e9c4e6f496e932a489981ea" kindref="member">_key</ref>)</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%s(%s)&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self.__class__.__name__,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">.join(arguments))</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1ae4bd41b804f2070410db44dc8aed7eda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>list<sp/>=<sp/>property(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>self:<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1aedbfc748f0f07b30b037f172c5840832" kindref="member">_list</ref>)</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>load-time<sp/>setup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a32c881310c78f8f5dab42be7a5758912" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a32c881310c78f8f5dab42be7a5758912" kindref="member">dependencies</ref>(self,<sp/>memo):</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>memo:</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memo.add(self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" kindref="member">_id</ref>)</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1aedbfc748f0f07b30b037f172c5840832" kindref="member">_list</ref>]</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a43bd7a9ae5f6bf4f726e2320fa22b556" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a43bd7a9ae5f6bf4f726e2320fa22b556" kindref="member">gstring</ref>(self):</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal"><sp/>+<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1aedbfc748f0f07b30b037f172c5840832" kindref="member">_list</ref>.name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>recognition<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1aa4ca511066b7e6fad5d24de7821aeb31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1aa4ca511066b7e6fad5d24de7821aeb31" kindref="member">decode</ref>(self,<sp/>state):</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_attempt(self)</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>next<sp/>word(s)<sp/>is/are<sp/>in<sp/>the<sp/>list,<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>state.word()</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>word<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1aedbfc748f0f07b30b037f172c5840832" kindref="member">_list</ref>:</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.next(delta<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>state.word(delta)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>next<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>next</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>word<sp/>is<sp/>not<sp/>in<sp/>the<sp/>list,<sp/>or<sp/>on<sp/>retry,<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a8ecef164c1017b0651a00dee0b824c5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1a8ecef164c1017b0651a00dee0b824c5f" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>node.words()</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">.join(words)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1DictListRef" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1DictListRef" kindref="compound">DictListRef</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef" kindref="compound">ListRef</ref>):</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1020"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>class<sp/>representing<sp/>a<sp/>reference<sp/>to<sp/>a<sp/>Dragonfly<sp/>DictList.</highlight></codeline>
<codeline lineno="1021"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1022"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="1023"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="1024"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="1025"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*dict*<sp/>(*DictList*)<sp/>--</highlight></codeline>
<codeline lineno="1026"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>Dragonfly<sp/>DictList<sp/>to<sp/>reference</highlight></codeline>
<codeline lineno="1027"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*key*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="1028"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>to<sp/>differentiate<sp/>between<sp/>list<sp/>references<sp/>at<sp/>runtime</highlight></codeline>
<codeline lineno="1029"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*default*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="1030"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>default<sp/>value<sp/>used<sp/>if<sp/>this<sp/>element<sp/>is<sp/>optional<sp/>and<sp/>wasn&apos;t</highlight></codeline>
<codeline lineno="1031"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spoken</highlight></codeline>
<codeline lineno="1032"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1033"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=redefined-builtin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1DictListRef_1a944561c27ceb33b862025cc4af3c4294" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1DictListRef_1a944561c27ceb33b862025cc4af3c4294" kindref="member">__init__</ref>(self,<sp/>name,<sp/>dict,<sp/>key=None,<sp/>default=None):</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>isinstance(dict,<sp/>DictList):</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&quot;Dict<sp/>object<sp/>of<sp/>%s<sp/>object<sp/>must<sp/>be<sp/>a<sp/>Dragonfly<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DictList.&quot;</highlight><highlight class="normal"><sp/>%<sp/>self.__class__.__name__)</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ListRef.__init__(self,<sp/>name,<sp/>dict,<sp/>key,<sp/>default=default)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>recognition<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1DictListRef_1a9ed9d3c9d691c270b3ed23b1c0938df3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1DictListRef_1a9ed9d3c9d691c270b3ed23b1c0938df3" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>=<sp/>ListRef.value(self,<sp/>node)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ListRef_1aedbfc748f0f07b30b037f172c5840832" kindref="member">_list</ref>[key]</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty" kindref="compound">Empty</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase" kindref="compound">ElementBase</ref>):</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1053"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>class<sp/>representing<sp/>something<sp/>that<sp/>is<sp/>always<sp/>recognized.</highlight></codeline>
<codeline lineno="1054"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1055"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="1056"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="1057"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="1058"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*value*<sp/>(*object*,<sp/>default:<sp/>*True*)<sp/>--</highlight></codeline>
<codeline lineno="1059"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>returned<sp/>when<sp/>this<sp/>element<sp/>is<sp/>successfully<sp/>decoded<sp/>(always)</highlight></codeline>
<codeline lineno="1060"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1061"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Empty<sp/>elements<sp/>are<sp/>equivalent<sp/>to<sp/>children<sp/>of<sp/>:class:`Optional`</highlight></codeline>
<codeline lineno="1062"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements.</highlight></codeline>
<codeline lineno="1063"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1064"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty_1a16fc44bf4cd66b4bf9e588c3bb00c483" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty_1a16fc44bf4cd66b4bf9e588c3bb00c483" kindref="member">__init__</ref>(self,<sp/>name=None,<sp/>value=True,<sp/>default=None):</highlight></codeline>
<codeline lineno="1067" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty_1a9497e36365bccb778e10282904ec2415" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty_1a9497e36365bccb778e10282904ec2415" kindref="member">_value</ref><sp/>=<sp/>value</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementBase.__init__(self,<sp/>name,<sp/>default=default)</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>load-time<sp/>setup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty_1ac08ee0ea74d9158fee7ca8925ea44475" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty_1ac08ee0ea74d9158fee7ca8925ea44475" kindref="member">gstring</ref>(self):</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;Empty()&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>recognition<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty_1a8254a1305be2a70950dad0584b5817d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty_1a8254a1305be2a70950dad0584b5817d0" kindref="member">decode</ref>(self,<sp/>state):</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_attempt(self)</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty_1a8afdafaeb343ac8d8aca741290af197b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty_1a8afdafaeb343ac8d8aca741290af197b" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Empty_1a9497e36365bccb778e10282904ec2415" kindref="member">_value</ref></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">#===========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Slightly<sp/>more<sp/>complex<sp/>element<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation" kindref="compound">Dictation</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase" kindref="compound">ElementBase</ref>):</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1097"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>class<sp/>representing<sp/>free<sp/>dictation.</highlight></codeline>
<codeline lineno="1098"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1099"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="1100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="1101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="1102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*format*<sp/>(*bool*,<sp/>default:<sp/>*True*)<sp/>--</highlight></codeline>
<codeline lineno="1103"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whether<sp/>the<sp/>value<sp/>returned<sp/>should<sp/>be<sp/>a</highlight></codeline>
<codeline lineno="1104"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`DictationContainerBase`<sp/>object.<sp/>If<sp/>*False*,<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="1105"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returned<sp/>value<sp/>is<sp/>a<sp/>list<sp/>of<sp/>the<sp/>recognized<sp/>words</highlight></codeline>
<codeline lineno="1106"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*default*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="1107"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>default<sp/>value<sp/>used<sp/>if<sp/>this<sp/>element<sp/>is<sp/>optional<sp/>and<sp/>wasn&apos;t</highlight></codeline>
<codeline lineno="1108"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spoken</highlight></codeline>
<codeline lineno="1109"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1110"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns<sp/>a<sp/>string-like<sp/>:class:`DictationContainerBase`<sp/>object</highlight></codeline>
<codeline lineno="1111"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>containing<sp/>the<sp/>recognised<sp/>words.</highlight></codeline>
<codeline lineno="1112"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>By<sp/>default<sp/>this<sp/>is<sp/>formatted<sp/>as<sp/>a<sp/>lowercase<sp/>sentence.</highlight></codeline>
<codeline lineno="1113"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alternative<sp/>formatting<sp/>can<sp/>be<sp/>applied<sp/>by<sp/>calling<sp/>string<sp/>methods<sp/>like</highlight></codeline>
<codeline lineno="1114"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>`replace`<sp/>or<sp/>`upper`<sp/>on<sp/>a<sp/>:class:`Dictation`<sp/>object,<sp/>or<sp/>by<sp/>passing</highlight></codeline>
<codeline lineno="1115"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>arbitrary<sp/>formatting<sp/>function<sp/>(taking<sp/>and<sp/>returning<sp/>a<sp/>string)<sp/>to</highlight></codeline>
<codeline lineno="1116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>`apply`<sp/>method.</highlight></codeline>
<codeline lineno="1117"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Camel<sp/>case<sp/>text<sp/>can<sp/>be<sp/>produced<sp/>using<sp/>the<sp/>`camel`<sp/>method.<sp/>For</highlight></codeline>
<codeline lineno="1119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>example:</highlight></codeline>
<codeline lineno="1120"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>code::<sp/>python</highlight></codeline>
<codeline lineno="1122"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_func<sp/>=<sp/>lambda<sp/>s:<sp/>s.upper()</highlight></codeline>
<codeline lineno="1124"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictation(&quot;formattedtext&quot;).apply(str_func)</highlight></codeline>
<codeline lineno="1125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictation(&quot;snake_text&quot;).lower().replace(&quot;<sp/>&quot;,<sp/>&quot;_&quot;)</highlight></codeline>
<codeline lineno="1126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictation(&quot;camelText&quot;).camel()</highlight></codeline>
<codeline lineno="1127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=redefined-builtin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a05d078d65176ae10f81f13178eb96039" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a05d078d65176ae10f81f13178eb96039" kindref="member">__init__</ref>(self,<sp/>name=None,<sp/>format=True,<sp/>default=None):</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementBase.__init__(self,<sp/>name,<sp/>default=default)</highlight></codeline>
<codeline lineno="1132" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a5910ac8abf6ac5442f2b8aa123320c8a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a5910ac8abf6ac5442f2b8aa123320c8a" kindref="member">_format_words</ref><sp/>=<sp/>format</highlight></codeline>
<codeline lineno="1133" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a915bd92958ac0240153cd0f77d698f48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a915bd92958ac0240153cd0f77d698f48" kindref="member">_string_methods</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a664d1ad0355ce38e5196d0b98cf508bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a664d1ad0355ce38e5196d0b98cf508bf" kindref="member">__repr__</ref>(self):</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a5bd1a9be70f09c0e74b86a888b813aad" kindref="member">name</ref>:</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%s(%r)&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self.__class__.__name__,<sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a5bd1a9be70f09c0e74b86a888b813aad" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%s()&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self.__class__.__name__)</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a69925cda797dee60d3f89b620841aae8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a69925cda797dee60d3f89b620841aae8" kindref="member">__getattr__</ref>(self,<sp/>name):</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(name,<sp/>str)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>name[:2]<sp/>==<sp/>name[-2:]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>skip<sp/>non-existing<sp/>dunder<sp/>method<sp/>lookups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>AttributeError(name)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">call(*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a915bd92958ac0240153cd0f77d698f48" kindref="member">_string_methods</ref>.append((name,<sp/>args,<sp/>kwargs))</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>call</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>load-time<sp/>setup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a0f120e392501734f569e7973c05fb054" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a0f120e392501734f569e7973c05fb054" kindref="member">gstring</ref>(self):</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;Dictation()&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>recognition<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a3083d68a5d81e251cd21825007bd3063" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a3083d68a5d81e251cd21825007bd3063" kindref="member">decode</ref>(self,<sp/>state):</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_attempt(self)</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>at<sp/>least<sp/>one<sp/>word<sp/>has<sp/>been<sp/>dictated,<sp/>otherwise<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictated_word_guesses<sp/>=<sp/>state.dictated_word_guesses</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_name<sp/>=<sp/>state.rule()</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>dictated_word_guesses<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>rule_name<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;dgndictation&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>rule_name<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>guessing<sp/>which<sp/>words<sp/>are<sp/>dictated<sp/>words<sp/>is<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>rule_name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;dgndictation&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictated_word_guesses<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>how<sp/>many<sp/>words<sp/>have<sp/>been<sp/>dictated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>state.rule(count)<sp/>==<sp/>rule_name:</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Yield<sp/>possible<sp/>states<sp/>where<sp/>the<sp/>number<sp/>of<sp/>dictated<sp/>words</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>gobbled<sp/>is<sp/>decreased<sp/>by<sp/>1<sp/>between<sp/>yields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>guessing,<sp/>be<sp/>conservative<sp/>instead<sp/>and<sp/>gobble<sp/>as<sp/>few<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>next<sp/>words<sp/>as<sp/>possible,<sp/>since<sp/>they<sp/>may<sp/>not<sp/>be<sp/>dictated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>dictated_word_guesses:</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltas<sp/>=<sp/>range(count,<sp/>0,<sp/>-1)</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltas<sp/>=<sp/>range(1,<sp/>count<sp/>+<sp/>1,<sp/>1)</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>deltas:</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.next(i)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_success(self)</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_retry(self)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_rollback(self)</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>None<sp/>of<sp/>the<sp/>possible<sp/>states<sp/>were<sp/>accepted,<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a03b5573191c795ddc7de5f3bd5508a05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a03b5573191c795ddc7de5f3bd5508a05" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a5910ac8abf6ac5442f2b8aa123320c8a" kindref="member">_format_words</ref>:</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.engine.DictationContainer(node.words(),</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Dictation_1a915bd92958ac0240153cd0f77d698f48" kindref="member">_string_methods</ref>)</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.words()</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Modifier" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Modifier" kindref="compound">Modifier</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative" kindref="compound">Alternative</ref>):</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1210"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>allowing<sp/>direct<sp/>modification<sp/>of<sp/>the<sp/>output<sp/>of<sp/>another</highlight></codeline>
<codeline lineno="1211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>at<sp/>recognition<sp/>time.</highlight></codeline>
<codeline lineno="1212"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="1214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*element*<sp/>(*Element*)<sp/>--<sp/>The<sp/>element<sp/>to<sp/>be<sp/>recognised,<sp/>e.g.</highlight></codeline>
<codeline lineno="1215"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`Dictation`<sp/>or<sp/>:class:`Repetition`,<sp/>with<sp/>appropriate</highlight></codeline>
<codeline lineno="1216"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments<sp/>passed.</highlight></codeline>
<codeline lineno="1217"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*modifier*<sp/>(*function*)<sp/>--<sp/>A<sp/>function<sp/>to<sp/>be<sp/>applied<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1218"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>of<sp/>this<sp/>element<sp/>when<sp/>it<sp/>is<sp/>recognised.</highlight></codeline>
<codeline lineno="1219"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1220"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Examples:</highlight></codeline>
<codeline lineno="1221"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1222"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>code::<sp/>python</highlight></codeline>
<codeline lineno="1223"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Recognises<sp/>an<sp/>integer,<sp/>returns<sp/>the<sp/>integer<sp/>plus<sp/>one</highlight></codeline>
<codeline lineno="1225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Modifier(IntegerRef(&quot;plus1&quot;,<sp/>1,<sp/>20),<sp/>lambda<sp/>n:<sp/>n+1)</highlight></codeline>
<codeline lineno="1226"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1227"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Recognises<sp/>a<sp/>series<sp/>of<sp/>integers,<sp/>returns<sp/>them<sp/>separated<sp/>by</highlight></codeline>
<codeline lineno="1228"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>commas<sp/>as<sp/>a<sp/>string</highlight></codeline>
<codeline lineno="1229"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_rep<sp/>=<sp/>Repetition(IntegerRef(&quot;&quot;,<sp/>0,<sp/>10),<sp/>min=1,<sp/>max=5,</highlight></codeline>
<codeline lineno="1230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=&quot;num_seq&quot;)</highlight></codeline>
<codeline lineno="1231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Modifier(int_rep,<sp/>lambda<sp/>r:<sp/>&quot;,<sp/>&quot;.join(map(str,<sp/>r)))</highlight></codeline>
<codeline lineno="1232"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1233"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Modifier_1a3b6484b8782c97aea6b9e7a21d77b70d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Modifier_1a3b6484b8782c97aea6b9e7a21d77b70d" kindref="member">__init__</ref>(self,<sp/>element,<sp/>modifier=None):</highlight></codeline>
<codeline lineno="1235" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Modifier_1a61587b53b1513ac4356ad5974444eacb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Modifier_1a61587b53b1513ac4356ad5974444eacb" kindref="member">_modifier</ref><sp/>=<sp/>modifier</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alternative.__init__(self,<sp/>children=(element,),<sp/>name=element.name,</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default=element.default)</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Modifier_1adbe90b51c030c15ff8b5f42fef517dff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Modifier_1adbe90b51c030c15ff8b5f42fef517dff" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_value<sp/>=<sp/>Alternative.value(self,<sp/>node)</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Modifier_1a61587b53b1513ac4356ad5974444eacb" kindref="member">_modifier</ref>:</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Modifier_1a61587b53b1513ac4356ad5974444eacb" kindref="member">_modifier</ref>(initial_value)</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initial_value</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Impossible" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Impossible" kindref="compound">Impossible</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase" kindref="compound">ElementBase</ref>):</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1250"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>class<sp/>representing<sp/>speech<sp/>that<sp/>cannot<sp/>be<sp/>recognized.</highlight></codeline>
<codeline lineno="1251"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1252"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="1253"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="1254"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="1255"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1256"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Using<sp/>an<sp/>:class:`Impossible`<sp/>element<sp/>in<sp/>a<sp/>Dragonfly<sp/>rule<sp/>makes<sp/>it</highlight></codeline>
<codeline lineno="1257"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impossible<sp/>to<sp/>recognize<sp/>via<sp/>speech<sp/>or<sp/>mimicry.</highlight></codeline>
<codeline lineno="1258"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1259"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Impossible_1a91fc268cabc9dc800a1542fe4ac54d44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Impossible_1a91fc268cabc9dc800a1542fe4ac54d44" kindref="member">__init__</ref>(self,<sp/>name=None):</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementBase.__init__(self,<sp/>name)</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>load-time<sp/>setup.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Impossible_1a6543b0b944865c7248a799244de097c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Impossible_1a6543b0b944865c7248a799244de097c5" kindref="member">gstring</ref>(self):</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;Impossible()&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>runtime<sp/>recognition<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Impossible_1aab1177be2f932b8e5f9cf500f01d7fd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Impossible_1aab1177be2f932b8e5f9cf500f01d7fd1" kindref="member">decode</ref>(self,<sp/>state):</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_attempt(self)</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Impossible<sp/>elements<sp/>always<sp/>fail<sp/>to<sp/>decode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.decode_failure(self)</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Turn<sp/>this<sp/>method<sp/>into<sp/>a<sp/>generator<sp/>by<sp/>using<sp/>&apos;yield&apos;.<sp/>This<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>even<sp/>though<sp/>the<sp/>statement<sp/>is<sp/>unreachable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=unreachable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>state</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Impossible_1a211ba79da821c52082ad646dc114eeec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Impossible_1a211ba79da821c52082ad646dc114eeec" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap" kindref="compound">RuleWrap</ref>(<ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef" kindref="compound">RuleRef</ref>):</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="1293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Element<sp/>class<sp/>to<sp/>wrap<sp/>a<sp/>Dragonfly<sp/>element<sp/>into<sp/>a<sp/>new<sp/>private<sp/>rule</highlight></codeline>
<codeline lineno="1294"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>be<sp/>referenced<sp/>by<sp/>this<sp/>element<sp/>or<sp/>others.</highlight></codeline>
<codeline lineno="1295"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1296"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`RuleWrap`<sp/>is<sp/>a<sp/>sub-class<sp/>of<sp/>:class:`RuleRef`,<sp/>so</highlight></codeline>
<codeline lineno="1297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`RuleWrap`<sp/>elements<sp/>can<sp/>be<sp/>used<sp/>in<sp/>the<sp/>same<sp/>way<sp/>as</highlight></codeline>
<codeline lineno="1298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:class:`RuleRef`<sp/>elements.</highlight></codeline>
<codeline lineno="1299"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Constructor<sp/>arguments:</highlight></codeline>
<codeline lineno="1301"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*name*<sp/>(*str*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="1302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>name<sp/>of<sp/>this<sp/>element</highlight></codeline>
<codeline lineno="1303"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*element*<sp/>(*Element*)<sp/>--</highlight></codeline>
<codeline lineno="1304"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>Dragonfly<sp/>element<sp/>to<sp/>be<sp/>wrapped</highlight></codeline>
<codeline lineno="1305"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>*default*<sp/>(*object*,<sp/>default:<sp/>*None*)<sp/>--</highlight></codeline>
<codeline lineno="1306"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>default<sp/>value<sp/>used<sp/>if<sp/>this<sp/>element<sp/>is<sp/>optional<sp/>and<sp/>wasn&apos;t</highlight></codeline>
<codeline lineno="1307"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spoken</highlight></codeline>
<codeline lineno="1308"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1309"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Examples:</highlight></codeline>
<codeline lineno="1310"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1311"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..<sp/>code::<sp/>python</highlight></codeline>
<codeline lineno="1312"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1313"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>For<sp/>saying<sp/>and<sp/>processing<sp/>a<sp/>Choice<sp/>element<sp/>two<sp/>times.</highlight></codeline>
<codeline lineno="1314"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>letter<sp/>=<sp/>RuleWrap(&quot;letter1&quot;,<sp/>Choice(&quot;&quot;,<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;alpha&quot;:<sp/>&quot;a&quot;,</highlight></codeline>
<codeline lineno="1316"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;bravo&quot;:<sp/>&quot;b&quot;,</highlight></codeline>
<codeline lineno="1317"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;charlie&quot;:<sp/>&quot;c&quot;</highlight></codeline>
<codeline lineno="1318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}))</highlight></codeline>
<codeline lineno="1319"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>letter_extras<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="1320"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>letter,</highlight></codeline>
<codeline lineno="1321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RuleRef(letter.rule,<sp/>&quot;letter2&quot;),</highlight></codeline>
<codeline lineno="1322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RuleRef(letter.rule,<sp/>&quot;letter3&quot;)</highlight></codeline>
<codeline lineno="1323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="1324"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="1325"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap_1a3299d4304f505497a270cfc81b7f7f2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_next_id<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329" refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap_1a043c924cf0cedd0b6edea76b6c44ff14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap_1a043c924cf0cedd0b6edea76b6c44ff14" kindref="member">__init__</ref>(self,<sp/>name,<sp/>element,<sp/>default=None):</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;_%s_%02d&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self.__class__.__name__,<sp/>RuleWrap._next_id)</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RuleWrap._next_id<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule" kindref="compound">Rule</ref>(name=rule_name,<sp/>element=element,<sp/>exported=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RuleRef.__init__(self,<sp/>rule=rule,<sp/>name=name,<sp/>default=default)</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/elements_basic.py"/>
  </compounddef>
</doxygen>
