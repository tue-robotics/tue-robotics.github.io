<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacedragonfly_1_1rpc_1_1methods" kind="namespace" language="Python">
    <compoundname>dragonfly::rpc::methods</compoundname>
    <innerclass refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory" prot="public">dragonfly::rpc::methods::RPCRecognitionHistory</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacedragonfly_1_1rpc_1_1methods_1a0bda637d310bd19df1f3f3acb49e9b1e" prot="private" static="no" mutable="no">
        <type>list</type>
        <definition>list dragonfly::rpc::methods._history_closure</definition>
        <argsstring></argsstring>
        <name>_history_closure</name>
        <initializer>=  [None]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" line="161" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedragonfly_1_1rpc_1_1methods_1ab5fb514a9fc69e848fa74c778ef979df" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list dragonfly::rpc::methods.methods</definition>
        <argsstring></argsstring>
        <name>methods</name>
        <initializer>=  []</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" line="78" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedragonfly_1_1rpc_1_1methods_1ac632eec8b10ab16399d2150e0a38fe8f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.methods._add_method</definition>
        <argsstring>(m)</argsstring>
        <name>_add_method</name>
        <param>
          <type>m</type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" line="81" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" bodystart="81" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1rpc_1_1methods_1a4507d2d7e0d3d94cd565f6b5dbf84d1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.methods.get_engine_language</definition>
        <argsstring>()</argsstring>
        <name>get_engine_language</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Get the current engine&apos;s language.

:returns: language code
:rtype: str
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" line="151" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" bodystart="151" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1rpc_1_1methods_1a2e1882f21eb81ba53d31e06e6f3fde6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.methods.get_recognition_history</definition>
        <argsstring>()</argsstring>
        <name>get_recognition_history</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Get the recognition history if an observer is registered.

The :meth:`register_history` method **must** be called to register the
observer first.

:returns: history
:rtype: list
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" line="200" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" bodystart="200" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1rpc_1_1methods_1ad9392275715129a324e79eb74f2a7cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.methods.is_in_speech</definition>
        <argsstring>()</argsstring>
        <name>is_in_speech</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the user is currently speaking.

The :meth:`register_history` method **must** be called to register the
observer first.

:rtype: bool
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" line="218" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" bodystart="218" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1rpc_1_1methods_1a51f96bf8e60e2f326c4e374fb5bb5180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.methods.list_grammars</definition>
        <argsstring>()</argsstring>
        <name>list_grammars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Get a list of grammars loaded into the current engine.

This includes grammar rules and attributes.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" line="87" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" bodystart="87" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1rpc_1_1methods_1a58a3d09336f9390cedca681ea655d06a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.methods.mimic</definition>
        <argsstring>(words)</argsstring>
        <name>mimic</name>
        <param>
          <type>words</type>
          <defname>words</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Mimic the given *words*.

:param words: string or list of words to mimic
:returns: whether the mimic was a success
:rtype: bool
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" line="119" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" bodystart="119" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1rpc_1_1methods_1af13813b4cc8ca2ee49211106ee142b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.methods.register_history</definition>
        <argsstring>(length=10, record_failures=False)</argsstring>
        <name>register_history</name>
        <param>
          <type>length</type>
          <defname>length</defname>
          <defval>10</defval>
        </param>
        <param>
          <type>record_failures</type>
          <defname>record_failures</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Register an internal recognition observer.

:param length: length to initialize the ``RecognitionHistory`` instance
    with (default ``10``).
:param record_failures: whether to record recognition failures
    (default ``False``).
:type record_failures: bool
:type length: int
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" line="180" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" bodystart="180" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1rpc_1_1methods_1a4641822b496cadaba27dcac12e81af9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.methods.speak</definition>
        <argsstring>(text)</argsstring>
        <name>speak</name>
        <param>
          <type>text</type>
          <defname>text</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Speak the given *text* using text-to-speech using :meth:`engine.speak`.

:param text: text to speak using text-to-speech
:type text: str
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" line="137" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" bodystart="137" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespacedragonfly_1_1rpc_1_1methods_1af0fe53cb0b15923dba79ee1ced283251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.methods.unregister_history</definition>
        <argsstring>()</argsstring>
        <name>unregister_history</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Unregister the internal recognition observer.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" line="235" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" bodystart="235" bodyend="244"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/methods.py" line="1" column="1"/>
  </compounddef>
</doxygen>
