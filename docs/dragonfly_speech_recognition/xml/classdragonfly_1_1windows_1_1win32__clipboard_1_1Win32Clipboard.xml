<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::windows::win32_clipboard::Win32Clipboard</compoundname>
    <basecompoundref refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard" prot="public" virt="non-virtual">dragonfly.windows.base_clipboard.BaseClipboard</basecompoundref>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a66f9a9d703475962bc2458ac8c8f4c58" prot="public" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.windows.win32_clipboard.Win32Clipboard::format_hdrop</definition>
        <argsstring></argsstring>
        <name>format_hdrop</name>
        <initializer>=  win32con.CF_HDROP</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="123" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a77d6801dd8ba9ac182ffa73e59de0178" prot="public" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.windows.win32_clipboard.Win32Clipboard::format_locale</definition>
        <argsstring></argsstring>
        <name>format_locale</name>
        <initializer>=  win32con.CF_LOCALE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="122" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a2dd933fd240102e5b3a2557ac94696a7" prot="public" static="yes" mutable="no">
        <type>dictionary</type>
        <definition>dictionary dragonfly.windows.win32_clipboard.Win32Clipboard::format_names</definition>
        <argsstring></argsstring>
        <name>format_names</name>
        <initializer>=  {
        format_text:     &quot;text&quot;,
        format_oemtext:  &quot;oemtext&quot;,
        format_unicode:  &quot;unicode&quot;,
        format_locale:   &quot;locale&quot;,
        format_hdrop:    &quot;hdrop&quot;,
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="124" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1aecd9a73d3c16616cef07c10954d07991" prot="public" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.windows.win32_clipboard.Win32Clipboard::format_oemtext</definition>
        <argsstring></argsstring>
        <name>format_oemtext</name>
        <initializer>=  win32con.CF_OEMTEXT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="120" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1ab9412e14d69b91534d2284af5fee45ce" prot="public" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.windows.win32_clipboard.Win32Clipboard::format_text</definition>
        <argsstring></argsstring>
        <name>format_text</name>
        <initializer>=  win32con.CF_TEXT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="119" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1adc549c91fb1a97971ad90ad864dc6fcd" prot="public" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.windows.win32_clipboard.Win32Clipboard::format_unicode</definition>
        <argsstring></argsstring>
        <name>format_unicode</name>
        <initializer>=  win32con.CF_UNICODETEXT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="121" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1aae4f0a7c823bbe96f4f3d0ae0b207a65" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.windows.win32_clipboard.Win32Clipboard::_contents</definition>
        <argsstring></argsstring>
        <name>_contents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="295" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="295" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1afa1046802c130a7167edb782e8296392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.win32_clipboard.Win32Clipboard.clear_clipboard</definition>
        <argsstring>(cls)</argsstring>
        <name>clear_clipboard</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a0a2bd0e2c4912503fcb8417966a772be">clear_clipboard</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Clear the system clipboard.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="159" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a8555fba962590e63f8ec5478c170cdd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.win32_clipboard.Win32Clipboard.copy_from_system</definition>
        <argsstring>(self, formats=None, clear=False)</argsstring>
        <name>copy_from_system</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1ac516f0c2bb2bd381ae17aab97bb63009">copy_from_system</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>formats</type>
          <defname>formats</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>clear</type>
          <defname>clear</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Copy the system clipboard contents into this instance.

    Arguments:
     - *formats* (iterable, default: None) -- if not None, only the
       given content formats will be retrieved.  If None, all
       available formats will be retrieved.
     - *clear* (boolean, default: False) -- if true, the system
       clipboard will be cleared after its contents have been
       retrieved.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="247" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="247" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1adfd1bc26f757fd848dc869ec07abc3af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.win32_clipboard.Win32Clipboard.copy_to_system</definition>
        <argsstring>(self, clear=True)</argsstring>
        <name>copy_to_system</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a3997ec766f4074c17002e8b60a002add">copy_to_system</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>clear</type>
          <defname>clear</defname>
          <defval>True</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Copy the contents of this instance into the system clipboard.

    Arguments:
     - *clear* (boolean, default: True) -- if true, the system
       clipboard will be cleared before this instance&apos;s contents are
       transferred.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="301" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="301" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1aab4d4cd37b6110eba29e52ff4c6b69d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.win32_clipboard.Win32Clipboard.get_system_text</definition>
        <argsstring>(cls)</argsstring>
        <name>get_system_text</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a796603f97fdd64124c9a95f6c4a64463">get_system_text</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Retrieve the system clipboard text.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="133" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="133" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a74c04b202577085e95476186cf584fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.win32_clipboard.Win32Clipboard.set_system_text</definition>
        <argsstring>(cls, content)</argsstring>
        <name>set_system_text</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1abbf6ac05d4a76d8cec1d647745a2c3fd">set_system_text</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>content</type>
          <defname>content</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Set the system clipboard text.

    Arguments:
     - *content* (string) -- the clipboard contents to set.

    If *None* is given as the *content*, text on the system
    clipboard will be cleared.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="146" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="146" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a798aab7e8996bd0604af4174d71270cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.win32_clipboard.Win32Clipboard.synchronized_changes</definition>
        <argsstring>(cls, timeout, step=0.001, formats=None, initial_clipboard=None)</argsstring>
        <name>synchronized_changes</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a50ea58fe86ea83fcd51eb4cff36d3536">synchronized_changes</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>timeout</type>
          <defname>timeout</defname>
        </param>
        <param>
          <type>step</type>
          <defname>step</defname>
          <defval>0.001</defval>
        </param>
        <param>
          <type>formats</type>
          <defname>formats</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>initial_clipboard</type>
          <defname>initial_clipboard</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Context manager for synchronizing local and system clipboard
    changes.  This takes the same arguments as the
    :meth:`wait_for_change` method.

    Arguments:
     - *timeout* (float) -- timeout in seconds.
     - *step* (float, default: 0.001) -- number of seconds between
       each check.
     - *formats* (iterable, default: None) -- if not None, only
       changes to the given content formats will register.  If None,
       all formats will be observed.
     - *initial_clipboard* (Clipboard, default: None) -- if a
       clipboard is given, the method will wait until the system
       clipboard differs from the instance&apos;s contents.

    Use with a Python &apos;with&apos; block::

       from dragonfly import Clipboard, Key

       # Copy the selected text with Ctrl+C and wait until a system
       #  clipboard change is detected.
       timeout = 3
       with Clipboard.synchronized_changes(timeout):
   Key(&quot;c-c&quot;, use_hardware=True).execute()

       # Retrieve the system text.
       text = Clipboard.get_system_text()</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="219" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="219" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a0d8e91ca772fdbbc13351a2839092a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.win32_clipboard.Win32Clipboard.wait_for_change</definition>
        <argsstring>(cls, timeout, step=0.001, formats=None, initial_clipboard=None)</argsstring>
        <name>wait_for_change</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1aa1e9cf841915023c8c4389d26825aa92">wait_for_change</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>timeout</type>
          <defname>timeout</defname>
        </param>
        <param>
          <type>step</type>
          <defname>step</defname>
          <defval>0.001</defval>
        </param>
        <param>
          <type>formats</type>
          <defname>formats</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>initial_clipboard</type>
          <defname>initial_clipboard</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>    Wait (poll) for the system clipboard to change.

    This is a blocking method which returns whether or not the
    system clipboard changed within a specified timeout period.

    Arguments:
     - *timeout* (float) -- timeout in seconds.
     - *step* (float, default: 0.001) -- number of seconds between
       each check.
     - *formats* (iterable, default: None) -- if not None, only
       changes to the given content formats will register.  If None,
       all formats will be observed.
     - *initial_clipboard* (Clipboard, default: None) -- if a
       clipboard is given, the method will wait until the system
       clipboard differs from the instance&apos;s contents.</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="206" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="206" bodyend="216"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a7da7109e78868832c86da8e58e7deac7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.win32_clipboard.Win32Clipboard._update_format_names</definition>
        <argsstring>(self, formats)</argsstring>
        <name>_update_format_names</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>formats</type>
          <defname>formats</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="234" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="234" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a4fc5975f9a25b203340c8644a49c84fb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.win32_clipboard.Win32Clipboard._wait_for_change</definition>
        <argsstring>(cls, timeout, step, formats, initial_clipboard, seq_no)</argsstring>
        <name>_wait_for_change</name>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>timeout</type>
          <defname>timeout</defname>
        </param>
        <param>
          <type>step</type>
          <defname>step</defname>
        </param>
        <param>
          <type>formats</type>
          <defname>formats</defname>
        </param>
        <param>
          <type>initial_clipboard</type>
          <defname>initial_clipboard</defname>
        </param>
        <param>
          <type>seq_no</type>
          <defname>seq_no</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="164" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="164" bodyend="204"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Class for interacting with the Windows system clipboard.

This is Dragonfly&apos;s default clipboard class on Windows.</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dragonfly.windows.win32_clipboard.Win32Clipboard</label>
        <link refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>object</label>
      </node>
      <node id="2">
        <label>dragonfly.windows.base_clipboard.BaseClipboard</label>
        <link refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dragonfly.windows.win32_clipboard.Win32Clipboard</label>
        <link refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>object</label>
      </node>
      <node id="2">
        <label>dragonfly.windows.base_clipboard.BaseClipboard</label>
        <link refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" line="109" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/win32_clipboard.py" bodystart="109" bodyend="310"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a598c4eed65f7687bb8e262899da2dd06" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>__eq__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a1caf3f9afe6d0e3a8a7ed7fea80cc7af" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a2db43fb9a198633fdd137287573c573d" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>__lt__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1aa00beba334d8609af5cd7af09fd6e77a" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>__ne__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1aec4171d54222fe4ab6b7c83482657581" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>__repr__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1af993c64b7d9dae2411f08bf8aff4564e" prot="private" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>_clipboard_formats_changed</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1aae4f0a7c823bbe96f4f3d0ae0b207a65" prot="private" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>_contents</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a4d7791f11aef7a86ccebee4f3cdf0257" prot="private" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>_convert_format_hdrop</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a30896a65cd8ef592678a9b31d22efb43" prot="private" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>_convert_format_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1acd0b4355dfa6593a49e7cd3d298b05db" prot="private" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>_convert_format_unicode</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a199fe68b100f319cea29cf22a95095e5" prot="private" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>_log</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a7da7109e78868832c86da8e58e7deac7" prot="private" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>_update_format_names</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a4fc5975f9a25b203340c8644a49c84fb" prot="private" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>_wait_for_change</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1afa1046802c130a7167edb782e8296392" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>clear_clipboard</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a49e12deba0b20d3587f8fd21236224a9" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>convert_format_content</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a8555fba962590e63f8ec5478c170cdd8" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>copy_from_system</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1adfd1bc26f757fd848dc869ec07abc3af" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>copy_to_system</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a66f9a9d703475962bc2458ac8c8f4c58" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>format_hdrop</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a77d6801dd8ba9ac182ffa73e59de0178" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>format_locale</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a2dd933fd240102e5b3a2557ac94696a7" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>format_names</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1aecd9a73d3c16616cef07c10954d07991" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>format_oemtext</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1ab9412e14d69b91534d2284af5fee45ce" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>format_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1adc549c91fb1a97971ad90ad864dc6fcd" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>format_unicode</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1ad0d003bcc7b43da4d97bb7cb7c4a4580" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>get_available_formats</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a9199d017cc8b606824a9ab1e38ccf0f7" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>get_format</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1aab4d4cd37b6110eba29e52ff4c6b69d8" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>get_system_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1ad36b4ea62e12b8eb4e26bb33f451998b" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>get_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a915dc706e2779f028d2d20ea8eabb20d" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>has_format</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a12b10cd6a9f325683d28bd519fcbf331" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>has_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a2c6241f533f81c67b803426646632e16" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>set_format</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a74c04b202577085e95476186cf584fdb" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>set_system_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a98dd8df4a48d5ff22d1e81329e0dc8f4" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>set_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a798aab7e8996bd0604af4174d71270cf" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>synchronized_changes</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__clipboard_1_1BaseClipboard_1a813f3b8689ca73ad55c1cfd249c2c3ab" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>text</name></member>
      <member refid="classdragonfly_1_1windows_1_1win32__clipboard_1_1Win32Clipboard_1a0d8e91ca772fdbbc13351a2839092a42" prot="public" virt="non-virtual"><scope>dragonfly::windows::win32_clipboard::Win32Clipboard</scope><name>wait_for_change</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
