<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__cfgparser_8py" kind="file" language="Python">
    <compoundname>test_cfgparser.py</compoundname>
    <innerclass refid="classtest__cfgparser_1_1TestCfgParser" prot="public">test_cfgparser::TestCfgParser</innerclass>
    <innerclass refid="classtest__cfgparser_1_1TestComplexGrammar" prot="public">test_cfgparser::TestComplexGrammar</innerclass>
    <innerclass refid="classtest__cfgparser_1_1TestConjunct" prot="public">test_cfgparser::TestConjunct</innerclass>
    <innerclass refid="classtest__cfgparser_1_1TestEmptySubrules" prot="public">test_cfgparser::TestEmptySubrules</innerclass>
    <innerclass refid="classtest__cfgparser_1_1TestOption" prot="public">test_cfgparser::TestOption</innerclass>
    <innerclass refid="classtest__cfgparser_1_1TestParseNextAtom" prot="public">test_cfgparser::TestParseNextAtom</innerclass>
    <innerclass refid="classtest__cfgparser_1_1TestRule" prot="public">test_cfgparser::TestRule</innerclass>
    <innerclass refid="classtest__cfgparser_1_1TestSingleRule" prot="public">test_cfgparser::TestSingleRule</innerclass>
    <innerclass refid="classtest__cfgparser_1_1TestSubrules" prot="public">test_cfgparser::TestSubrules</innerclass>
    <innernamespace refid="namespacetest__cfgparser">test_cfgparser</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacetest__cfgparser" refkind="compound"><highlight class="comment">#!/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unittest</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacegrammar__parser_1_1cfgparser" kindref="compound">grammar_parser.cfgparser</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>grammar_parser<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>cfgparser</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="classtest__cfgparser_1_1TestOption" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestOption" kindref="compound">TestOption</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="10" refid="classtest__cfgparser_1_1TestOption_1a13a99588d097bbfa5aa0086bb9939120" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestOption_1a13a99588d097bbfa5aa0086bb9939120" kindref="member">test_option_equality</ref>(self):</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option_a<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(lsemantic=</highlight><highlight class="stringliteral">&apos;&quot;left&quot;&apos;</highlight><highlight class="normal">,<sp/>conjs=[</highlight><highlight class="stringliteral">&apos;left&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option_b<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(lsemantic=</highlight><highlight class="stringliteral">&apos;&quot;left&quot;&apos;</highlight><highlight class="normal">,<sp/>conjs=[</highlight><highlight class="stringliteral">&apos;left&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(option_a,<sp/>option_b)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="classtest__cfgparser_1_1TestOption_1a0e2428ccd7ebeced7653d23a82af243f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestOption_1a0e2428ccd7ebeced7653d23a82af243f" kindref="member">test_option_inequality_1</ref>(self):</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option_a<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(lsemantic=</highlight><highlight class="stringliteral">&apos;&quot;left&quot;&apos;</highlight><highlight class="normal">,<sp/>conjs=[</highlight><highlight class="stringliteral">&apos;left&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option_b<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(lsemantic=</highlight><highlight class="stringliteral">&apos;&quot;right&quot;&apos;</highlight><highlight class="normal">,<sp/>conjs=[</highlight><highlight class="stringliteral">&apos;right&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertNotEqual(option_a,<sp/>option_b)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="classtest__cfgparser_1_1TestConjunct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestConjunct" kindref="compound">TestConjunct</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="24" refid="classtest__cfgparser_1_1TestConjunct_1a8e13d6afca14f5564f8e6666f4268ab8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestConjunct_1a8e13d6afca14f5564f8e6666f4268ab8" kindref="member">test_conjunct_equality</ref>(self):</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj_a<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(name=</highlight><highlight class="stringliteral">&apos;left&apos;</highlight><highlight class="normal">,<sp/>rsemantic=</highlight><highlight class="stringliteral">&apos;left&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj_b<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(name=</highlight><highlight class="stringliteral">&apos;left&apos;</highlight><highlight class="normal">,<sp/>rsemantic=</highlight><highlight class="stringliteral">&apos;left&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(conj_a,<sp/>conj_b)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classtest__cfgparser_1_1TestRule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestRule" kindref="compound">TestRule</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="32" refid="classtest__cfgparser_1_1TestRule_1aba2b9db4118daf4b4a1c4aae5e61ae0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestRule_1aba2b9db4118daf4b4a1c4aae5e61ae0d" kindref="member">test_rule_equality_1</ref>(self):</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_a<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Rule" kindref="compound">Rule</ref>(lname=</highlight><highlight class="stringliteral">&apos;SIDE&apos;</highlight><highlight class="normal">,<sp/>options=[<ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(lsemantic=</highlight><highlight class="stringliteral">&apos;&quot;left&quot;&apos;</highlight><highlight class="normal">,<sp/>conjs=[<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(</highlight><highlight class="stringliteral">&apos;left&apos;</highlight><highlight class="normal">)])])</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_b<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Rule" kindref="compound">Rule</ref>(lname=</highlight><highlight class="stringliteral">&apos;SIDE&apos;</highlight><highlight class="normal">,<sp/>options=[<ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(lsemantic=</highlight><highlight class="stringliteral">&apos;&quot;left&quot;&apos;</highlight><highlight class="normal">,<sp/>conjs=[<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(</highlight><highlight class="stringliteral">&apos;left&apos;</highlight><highlight class="normal">)])])</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(rule_a,<sp/>rule_b)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classtest__cfgparser_1_1TestRule_1a52e74ad69efc5578440d7777c03f9c05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestRule_1a52e74ad69efc5578440d7777c03f9c05" kindref="member">test_from_cfg_def_1</ref>(self):</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;SIDE[&quot;left&quot;]<sp/>-&gt;<sp/>left&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>Rule.from_cfg_def(line)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(rule.lname,<sp/></highlight><highlight class="stringliteral">&quot;SIDE&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(len(rule.options),<sp/>1)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_option<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(lsemantic=</highlight><highlight class="stringliteral">&apos;&quot;left&quot;&apos;</highlight><highlight class="normal">,<sp/>conjs=[<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(</highlight><highlight class="stringliteral">&apos;left&apos;</highlight><highlight class="normal">)])</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(rule.options[0],<sp/>expected_option)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classtest__cfgparser_1_1TestRule_1a0995ce61244bf0ea9c1305bbec4d155f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestRule_1a0995ce61244bf0ea9c1305bbec4d155f" kindref="member">test_from_cfg_def_4</ref>(self):</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;V_GRASP[&quot;pick-up&quot;]<sp/>-&gt;<sp/>grab<sp/>|<sp/>grasp<sp/>|<sp/>pick&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>Rule.from_cfg_def(line)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grab_rule<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(</highlight><highlight class="stringliteral">&apos;&quot;pick-up&quot;&apos;</highlight><highlight class="normal">,<sp/>[<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(</highlight><highlight class="stringliteral">&apos;grab&apos;</highlight><highlight class="normal">)])</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grasp_rule<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(</highlight><highlight class="stringliteral">&apos;&quot;pick-up&quot;&apos;</highlight><highlight class="normal">,<sp/>[<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(</highlight><highlight class="stringliteral">&apos;grasp&apos;</highlight><highlight class="normal">)])</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pick_up_rule<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(</highlight><highlight class="stringliteral">&apos;&quot;pick-up&quot;&apos;</highlight><highlight class="normal">,<sp/>[<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(</highlight><highlight class="stringliteral">&apos;pick&apos;</highlight><highlight class="normal">)])<sp/><sp/></highlight><highlight class="comment">#<sp/>up<sp/>is<sp/>missing<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(len(rule.options),<sp/>3)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(grab_rule,<sp/>rule.options)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(grasp_rule,<sp/>rule.options)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(pick_up_rule,<sp/>rule.options)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="classtest__cfgparser_1_1TestCfgParser" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestCfgParser" kindref="compound">TestCfgParser</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="65" refid="classtest__cfgparser_1_1TestCfgParser_1add2bf416c21aff14c67164f161ad0060" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestCfgParser_1add2bf416c21aff14c67164f161ad0060" kindref="member">test_add_rule_1</ref>(self):</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser" kindref="compound">CFGParser</ref>()</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(len(parser.rules),<sp/>0)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_rule(</highlight><highlight class="stringliteral">&quot;&quot;&quot;SIDE[&quot;left&quot;]<sp/>-&gt;<sp/>left&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(len(parser.rules),<sp/>1)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>parser.rules[</highlight><highlight class="stringliteral">&quot;SIDE&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(rule.lname,<sp/></highlight><highlight class="stringliteral">&quot;SIDE&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(len(rule.options),<sp/>1)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_option<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(lsemantic=</highlight><highlight class="stringliteral">&apos;&quot;left&quot;&apos;</highlight><highlight class="normal">,<sp/>conjs=[<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(</highlight><highlight class="stringliteral">&apos;left&apos;</highlight><highlight class="normal">)])</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(rule.options[0],<sp/>expected_option)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classtest__cfgparser_1_1TestCfgParser_1a95f4a5df5af46215f28cbc78a3f03ec4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestCfgParser_1a95f4a5df5af46215f28cbc78a3f03ec4" kindref="member">test_add_rule_4</ref>(self):</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser" kindref="compound">CFGParser</ref>()</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_rule(</highlight><highlight class="stringliteral">&quot;&quot;&quot;V_GRASP[&quot;pick-up&quot;]<sp/>-&gt;<sp/>grab<sp/>|<sp/>grasp<sp/>|<sp/>pick&quot;&quot;&quot;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>up<sp/>after<sp/>pick<sp/>is<sp/>missing<sp/>to<sp/>make<sp/>this<sp/>work.<sp/>&apos;ip&apos;<sp/>is<sp/>probably<sp/>a<sp/>remaining_str<sp/>or<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>parser.rules[</highlight><highlight class="stringliteral">&quot;V_GRASP&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grab_rule<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(</highlight><highlight class="stringliteral">&apos;&quot;pick-up&quot;&apos;</highlight><highlight class="normal">,<sp/>[<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(</highlight><highlight class="stringliteral">&apos;grab&apos;</highlight><highlight class="normal">)])</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grasp_rule<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(</highlight><highlight class="stringliteral">&apos;&quot;pick-up&quot;&apos;</highlight><highlight class="normal">,<sp/>[<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(</highlight><highlight class="stringliteral">&apos;grasp&apos;</highlight><highlight class="normal">)])</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pick_up_rule<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(</highlight><highlight class="stringliteral">&apos;&quot;pick-up&quot;&apos;</highlight><highlight class="normal">,<sp/>[<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(</highlight><highlight class="stringliteral">&apos;pick&apos;</highlight><highlight class="normal">)])<sp/><sp/></highlight><highlight class="comment">#<sp/>up<sp/>is<sp/>missing<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(len(rule.options),<sp/>3)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(grab_rule,<sp/>rule.options)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(grasp_rule,<sp/>rule.options)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(pick_up_rule,<sp/>rule.options)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classtest__cfgparser_1_1TestParseNextAtom" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestParseNextAtom" kindref="compound">TestParseNextAtom</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="99" refid="classtest__cfgparser_1_1TestParseNextAtom_1a91d697e7b84107fb192c723086b3d750" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestParseNextAtom_1a91d697e7b84107fb192c723086b3d750" kindref="member">test_parse_next_atom_1</ref>(self):</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(name,<sp/>semantics,<sp/>remaining)<sp/>=<sp/><ref refid="namespacegrammar__parser_1_1cfgparser_1ac20401fd2a7ace93c6f0ad562fdeaddd" kindref="member">parse_next_atom</ref>(</highlight><highlight class="stringliteral">&quot;&quot;&quot;SIDE[&quot;left&quot;]&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(name,<sp/></highlight><highlight class="stringliteral">&quot;SIDE&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(semantics,<sp/></highlight><highlight class="stringliteral">&apos;&quot;left&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(remaining,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="classtest__cfgparser_1_1TestParseNextAtom_1ae0546b18a56643679b71da22e2d9e331" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestParseNextAtom_1ae0546b18a56643679b71da22e2d9e331" kindref="member">test_parse_next_atom_2</ref>(self):</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(name,<sp/>semantics,<sp/>remaining)<sp/>=<sp/><ref refid="namespacegrammar__parser_1_1cfgparser_1ac20401fd2a7ace93c6f0ad562fdeaddd" kindref="member">parse_next_atom</ref>(</highlight><highlight class="stringliteral">&quot;&quot;&quot;VP[&quot;action&quot;:<sp/>A]&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(name,<sp/></highlight><highlight class="stringliteral">&quot;VP&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(semantics,<sp/></highlight><highlight class="stringliteral">&apos;&quot;action&quot;:<sp/>A&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(remaining,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classtest__cfgparser_1_1TestParseNextAtom_1a613e380e905cd7e4782687f2fdaf7649" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestParseNextAtom_1a613e380e905cd7e4782687f2fdaf7649" kindref="member">test_parse_next_atom_3</ref>(self):</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(name,<sp/>semantics,<sp/>remaining)<sp/>=<sp/><ref refid="namespacegrammar__parser_1_1cfgparser_1ac20401fd2a7ace93c6f0ad562fdeaddd" kindref="member">parse_next_atom</ref>(</highlight><highlight class="stringliteral">&quot;&quot;&quot;VP[&quot;action&quot;:<sp/>&quot;arm-goal&quot;,<sp/>&quot;symbolic&quot;:<sp/>&quot;reset&quot;,<sp/>&quot;side&quot;:<sp/>S]&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(name,<sp/></highlight><highlight class="stringliteral">&quot;VP&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(semantics,<sp/></highlight><highlight class="stringliteral">&apos;&quot;action&quot;:<sp/>&quot;arm-goal&quot;,<sp/>&quot;symbolic&quot;:<sp/>&quot;reset&quot;,<sp/>&quot;side&quot;:<sp/>S&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(remaining,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="namespacetest__cfgparser_1a27b0c3d60da9a4c19659c5416f4de091" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacetest__cfgparser_1a27b0c3d60da9a4c19659c5416f4de091" kindref="member">normalize_string</ref>(text):</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Normalize<sp/>a<sp/>multi-line<sp/>string.</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>text:<sp/>Multi-line<sp/>text<sp/>string.</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:type<sp/><sp/>text:<sp/>str</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>Text<sp/>string<sp/>containing<sp/>normalized<sp/>lines.</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:rtype:<sp/><sp/>str</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Normalized<sp/>lines<sp/>means:</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>Lines<sp/>have<sp/>been<sp/>shifted<sp/>to<sp/>the<sp/>left<sp/>margin<sp/>as<sp/>far<sp/>as<sp/>possible.</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>Lines<sp/>have<sp/>no<sp/>trailing<sp/>whitespace.</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>Text<sp/>has<sp/>no<sp/>leading<sp/>or<sp/>trailing<sp/>empty<sp/>lines.</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>lead_white_pat<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">&apos;^(<sp/>+)[^<sp/>]&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>lines<sp/>=<sp/>[line.rstrip()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>text.split(</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Find<sp/>trailing<sp/>empty<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>last<sp/>=<sp/>len(lines)<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>last<sp/>&gt;=<sp/>0<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>lines[last]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>last<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>last<sp/>&lt;<sp/>0:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Find<sp/>leading<sp/>empty<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>first<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>lines[first]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>first<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>lines<sp/>=<sp/>lines[first:last<sp/>+<sp/>1]</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Strip<sp/>common<sp/>whitespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>common_length<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lines:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>lead_white_pat.match(line)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>m:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead_length<sp/>=<sp/>len(m.group(1))</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>common_length<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>lead_length<sp/>&lt;<sp/>common_length:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common_length<sp/>=<sp/>lead_length</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>common_length<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(lines):</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>line<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lines[i]<sp/>=<sp/>line[common_length:]</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">.join(lines)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="classtest__cfgparser_1_1TestSingleRule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSingleRule" kindref="compound">TestSingleRule</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="171" refid="classtest__cfgparser_1_1TestSingleRule_1a49ba42a4f543a0f990fb0dab785b350c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSingleRule_1a49ba42a4f543a0f990fb0dab785b350c" kindref="member">setUp</ref>(self):</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar<sp/>=<sp/><ref refid="namespacetest__cfgparser_1a27b0c3d60da9a4c19659c5416f4de091" kindref="member">normalize_string</ref>(</highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="173"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T[{&quot;key&quot;:&quot;value&quot;}]<sp/>-&gt;<sp/>a<sp/>b<sp/>c</highlight></codeline>
<codeline lineno="174"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="classtest__cfgparser_1_1TestSingleRule_1a11eaeda3f1a64420bd1d7cbff40074dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a11eaeda3f1a64420bd1d7cbff40074dd" kindref="member">target_rule</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;T&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="classtest__cfgparser_1_1TestSingleRule_1a9a7132f3864370a1c0c51bb45dc77b7d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a9a7132f3864370a1c0c51bb45dc77b7d" kindref="member">p</ref><sp/>=<sp/>CFGParser.fromstring(grammar)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="classtest__cfgparser_1_1TestSingleRule_1ae007e5630d60ed9bea87b7a37182dc3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSingleRule_1ae007e5630d60ed9bea87b7a37182dc3e" kindref="member">test_single1</ref>(self):</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>self.assertRaises(ParseError):</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a9a7132f3864370a1c0c51bb45dc77b7d" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a11eaeda3f1a64420bd1d7cbff40074dd" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>Missing<sp/>first<sp/>token<sp/>&apos;a&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classtest__cfgparser_1_1TestSingleRule_1aeb2ae70af2e1d1612ff70def449cd090" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSingleRule_1aeb2ae70af2e1d1612ff70def449cd090" kindref="member">test_single2</ref>(self):</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>self.assertRaises(ParseError):</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a9a7132f3864370a1c0c51bb45dc77b7d" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a11eaeda3f1a64420bd1d7cbff40074dd" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;a&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>Missing<sp/>second<sp/>token<sp/>&apos;b&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="classtest__cfgparser_1_1TestSingleRule_1ac44782fbc6cd9b4954571446330244a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSingleRule_1ac44782fbc6cd9b4954571446330244a3" kindref="member">test_single3</ref>(self):</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>self.assertRaises(ParseError):</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a9a7132f3864370a1c0c51bb45dc77b7d" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a11eaeda3f1a64420bd1d7cbff40074dd" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;b&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>Incorrect<sp/>first<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="classtest__cfgparser_1_1TestSingleRule_1aad6ec4a8ed4e756cb466ef567cf882b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSingleRule_1aad6ec4a8ed4e756cb466ef567cf882b5" kindref="member">test_single4</ref>(self):</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>self.assertRaises(ParseError):</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a9a7132f3864370a1c0c51bb45dc77b7d" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a11eaeda3f1a64420bd1d7cbff40074dd" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;q&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>Incorrect<sp/>first<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="classtest__cfgparser_1_1TestSingleRule_1a2c1e440a473657d43bd0bf20c46457cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSingleRule_1a2c1e440a473657d43bd0bf20c46457cc" kindref="member">test_single5</ref>(self):</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>self.assertRaises(ParseError):</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a9a7132f3864370a1c0c51bb45dc77b7d" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a11eaeda3f1a64420bd1d7cbff40074dd" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;a<sp/>b&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>Missing<sp/>third<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="classtest__cfgparser_1_1TestSingleRule_1ab916f65f771e9e977af1ab69d07c503b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSingleRule_1ab916f65f771e9e977af1ab69d07c503b" kindref="member">test_single6</ref>(self):</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>self.assertRaises(ParseError):</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a9a7132f3864370a1c0c51bb45dc77b7d" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a11eaeda3f1a64420bd1d7cbff40074dd" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;a<sp/>b<sp/>c<sp/>d&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>Too<sp/>many<sp/>words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="classtest__cfgparser_1_1TestSingleRule_1a9b430ad285b7612b5b2afa464cb8dfc1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSingleRule_1a9b430ad285b7612b5b2afa464cb8dfc1" kindref="member">test_single7</ref>(self):</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEquals(self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a9a7132f3864370a1c0c51bb45dc77b7d" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestSingleRule_1a11eaeda3f1a64420bd1d7cbff40074dd" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;a<sp/>b<sp/>c&apos;</highlight><highlight class="normal">),<sp/>{</highlight><highlight class="stringliteral">&apos;key&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;value&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="classtest__cfgparser_1_1TestSubrules" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSubrules" kindref="compound">TestSubrules</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="208" refid="classtest__cfgparser_1_1TestSubrules_1aea110df059c36ac94828568ed24ccee8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSubrules_1aea110df059c36ac94828568ed24ccee8" kindref="member">setUp</ref>(self):</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar<sp/>=<sp/><ref refid="namespacetest__cfgparser_1a27b0c3d60da9a4c19659c5416f4de091" kindref="member">normalize_string</ref>(</highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T[X]<sp/>-&gt;<sp/>A[X]<sp/>|<sp/>B[X]</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[&quot;a&quot;]<sp/>-&gt;<sp/>p</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B[&quot;b&quot;]<sp/>-&gt;<sp/>q</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="classtest__cfgparser_1_1TestSubrules_1ac893747a494936221ea7870d02752f86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestSubrules_1ac893747a494936221ea7870d02752f86" kindref="member">target_rule</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;T&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="classtest__cfgparser_1_1TestSubrules_1a35651453ccf9692bff577513451640f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestSubrules_1a35651453ccf9692bff577513451640f0" kindref="member">p</ref><sp/>=<sp/>CFGParser.fromstring(grammar)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="classtest__cfgparser_1_1TestSubrules_1a2872b6ee68e8694dab54a45b7d1c3a11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSubrules_1a2872b6ee68e8694dab54a45b7d1c3a11" kindref="member">test_sub1</ref>(self):</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEquals(self.<ref refid="classtest__cfgparser_1_1TestSubrules_1a35651453ccf9692bff577513451640f0" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestSubrules_1ac893747a494936221ea7870d02752f86" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;p&apos;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&apos;a&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="classtest__cfgparser_1_1TestSubrules_1a15b2d1a01fa3633ca1ebce78dd1bb332" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestSubrules_1a15b2d1a01fa3633ca1ebce78dd1bb332" kindref="member">test_sub2</ref>(self):</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEquals(self.<ref refid="classtest__cfgparser_1_1TestSubrules_1a35651453ccf9692bff577513451640f0" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestSubrules_1ac893747a494936221ea7870d02752f86" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;q&apos;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&apos;b&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="classtest__cfgparser_1_1TestEmptySubrules" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestEmptySubrules" kindref="compound">TestEmptySubrules</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="226" refid="classtest__cfgparser_1_1TestEmptySubrules_1ae0dd5cdd42e83ed2b9a7f35b58a4daff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestEmptySubrules_1ae0dd5cdd42e83ed2b9a7f35b58a4daff" kindref="member">setUp</ref>(self):</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar<sp/>=<sp/><ref refid="namespacetest__cfgparser_1a27b0c3d60da9a4c19659c5416f4de091" kindref="member">normalize_string</ref>(</highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T[X]<sp/>-&gt;<sp/>A[X]<sp/>|<sp/>B[X]</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A[&quot;a&quot;]<sp/>-&gt;<sp/>p<sp/>D</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B[&quot;b&quot;]<sp/>-&gt;<sp/>q<sp/>E</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D<sp/>-&gt;<sp/>|<sp/>r</highlight></codeline>
<codeline lineno="232"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E<sp/>-&gt;<sp/>r<sp/>|</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="classtest__cfgparser_1_1TestEmptySubrules_1afe3e1b3496d3ac7f0d57e9f33f44e677" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestEmptySubrules_1afe3e1b3496d3ac7f0d57e9f33f44e677" kindref="member">target_rule</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;T&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="classtest__cfgparser_1_1TestEmptySubrules_1a20128806f3c36b1eec2779ddd961243b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestEmptySubrules_1a20128806f3c36b1eec2779ddd961243b" kindref="member">p</ref><sp/>=<sp/>CFGParser.fromstring(grammar)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="classtest__cfgparser_1_1TestEmptySubrules_1a42cff30d455c36e53a909f67fae95869" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestEmptySubrules_1a42cff30d455c36e53a909f67fae95869" kindref="member">test_empty_subrule1</ref>(self):</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEquals(self.<ref refid="classtest__cfgparser_1_1TestEmptySubrules_1a20128806f3c36b1eec2779ddd961243b" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestEmptySubrules_1afe3e1b3496d3ac7f0d57e9f33f44e677" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;p&apos;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&apos;a&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>D<sp/>reduces<sp/>to<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="classtest__cfgparser_1_1TestEmptySubrules_1a6a2fb3b19bc190e3c782d84fbd491342" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestEmptySubrules_1a6a2fb3b19bc190e3c782d84fbd491342" kindref="member">test_empty_subrule2</ref>(self):</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEquals(self.<ref refid="classtest__cfgparser_1_1TestEmptySubrules_1a20128806f3c36b1eec2779ddd961243b" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestEmptySubrules_1afe3e1b3496d3ac7f0d57e9f33f44e677" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;q&apos;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&apos;b&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>E<sp/>reduces<sp/>to<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="classtest__cfgparser_1_1TestEmptySubrules_1a731103722fe368f320508391cdccc118" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestEmptySubrules_1a731103722fe368f320508391cdccc118" kindref="member">test_empty_subrule3</ref>(self):</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEquals(self.<ref refid="classtest__cfgparser_1_1TestEmptySubrules_1a20128806f3c36b1eec2779ddd961243b" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestEmptySubrules_1afe3e1b3496d3ac7f0d57e9f33f44e677" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;p<sp/>r&apos;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&apos;a&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="classtest__cfgparser_1_1TestEmptySubrules_1a4529b4792f72350fea298c1044f99646" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestEmptySubrules_1a4529b4792f72350fea298c1044f99646" kindref="member">test_empty_subrule4</ref>(self):</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEquals(self.<ref refid="classtest__cfgparser_1_1TestEmptySubrules_1a20128806f3c36b1eec2779ddd961243b" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestEmptySubrules_1afe3e1b3496d3ac7f0d57e9f33f44e677" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;q<sp/>r&apos;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&apos;b&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="classtest__cfgparser_1_1TestEmptySubrules_1ada0e770c19fbabcf0c772ee7c9714d26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestEmptySubrules_1ada0e770c19fbabcf0c772ee7c9714d26" kindref="member">test_empty_subrule5</ref>(self):</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>self.assertRaises(ParseError):</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestEmptySubrules_1a20128806f3c36b1eec2779ddd961243b" kindref="member">p</ref>.parse_raw(self.<ref refid="classtest__cfgparser_1_1TestEmptySubrules_1afe3e1b3496d3ac7f0d57e9f33f44e677" kindref="member">target_rule</ref>,<sp/></highlight><highlight class="stringliteral">&apos;q<sp/>x&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">#<sp/>Incorrect<sp/>second<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="classtest__cfgparser_1_1TestComplexGrammar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestComplexGrammar" kindref="compound">TestComplexGrammar</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="256" refid="classtest__cfgparser_1_1TestComplexGrammar_1a298b6d10e0491520f606297912d639dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a298b6d10e0491520f606297912d639dd" kindref="member">setUp</ref>(self):</highlight></codeline>
<codeline lineno="257" refid="classtest__cfgparser_1_1TestComplexGrammar_1a58e48029fb429e1dfd6ba0021762a94b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a58e48029fb429e1dfd6ba0021762a94b" kindref="member">target_rule</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;T&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>os.path.abspath(os.path.join(cfgparser.__file__,<sp/></highlight><highlight class="stringliteral">&quot;../../../test/eegpsr_grammar.fcfg&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(path)</highlight></codeline>
<codeline lineno="261" refid="classtest__cfgparser_1_1TestComplexGrammar_1a7b8d5f5f3e172aa0af7f93898bd8c19a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a7b8d5f5f3e172aa0af7f93898bd8c19a" kindref="member">p</ref><sp/>=<sp/>CFGParser.fromfile(path)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="classtest__cfgparser_1_1TestComplexGrammar_1aa480b7c86b8593ca167e87073bab1a29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestComplexGrammar_1aa480b7c86b8593ca167e87073bab1a29" kindref="member">test_eegpsr_1</ref>(self):</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sentence<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;answer<sp/>a<sp/>question&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;actions&apos;</highlight><highlight class="normal">:<sp/>[{</highlight><highlight class="stringliteral">&apos;action&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;answer-question&apos;</highlight><highlight class="normal">}]}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual<sp/>=<sp/>self.<ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a7b8d5f5f3e172aa0af7f93898bd8c19a" kindref="member">p</ref>.parse(self.<ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a58e48029fb429e1dfd6ba0021762a94b" kindref="member">target_rule</ref>,<sp/>sentence)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEquals(expected,<sp/>actual)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="classtest__cfgparser_1_1TestComplexGrammar_1a330e58111925f35a541a9c0a5e1b11ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a330e58111925f35a541a9c0a5e1b11ab" kindref="member">test_eegpsr_2</ref>(self):</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sentence<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>you<sp/>please<sp/>find<sp/>rein<sp/>near<sp/>the<sp/>living<sp/>room&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;actions&apos;</highlight><highlight class="normal">:<sp/>[{</highlight><highlight class="stringliteral">&apos;action&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;find&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;entity&apos;</highlight><highlight class="normal">:<sp/>{</highlight><highlight class="stringliteral">&apos;loc&apos;</highlight><highlight class="normal">:<sp/>{</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">:<sp/>{</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;livingroom&apos;</highlight><highlight class="normal">}},<sp/></highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;person&apos;</highlight><highlight class="normal">}}]}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual<sp/>=<sp/>self.<ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a7b8d5f5f3e172aa0af7f93898bd8c19a" kindref="member">p</ref>.parse(self.<ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a58e48029fb429e1dfd6ba0021762a94b" kindref="member">target_rule</ref>,<sp/>sentence)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEquals(expected,<sp/>actual)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="classtest__cfgparser_1_1TestComplexGrammar_1a7602abb479d276aa407f3dbe0d2ee954" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a7602abb479d276aa407f3dbe0d2ee954" kindref="member">test_eegpsr_3</ref>(self):</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sentence<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;robot<sp/>exit<sp/>the<sp/>arena&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;actions&apos;</highlight><highlight class="normal">:<sp/>[{</highlight><highlight class="stringliteral">&apos;action&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;exit&apos;</highlight><highlight class="normal">}]}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual<sp/>=<sp/>self.<ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a7b8d5f5f3e172aa0af7f93898bd8c19a" kindref="member">p</ref>.parse(self.<ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a58e48029fb429e1dfd6ba0021762a94b" kindref="member">target_rule</ref>,<sp/>sentence)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEquals(expected,<sp/>actual)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="classtest__cfgparser_1_1TestComplexGrammar_1a901d843ad89976277a30d246d1044041" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a901d843ad89976277a30d246d1044041" kindref="member">test_eegpsr_4</ref>(self):</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sentence<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>you<sp/>please<sp/>deliver<sp/>me<sp/>the<sp/>cans&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;actions&apos;</highlight><highlight class="normal">:<sp/>[{</highlight><highlight class="stringliteral">&apos;action&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;bring&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;to&apos;</highlight><highlight class="normal">:<sp/>{</highlight><highlight class="stringliteral">&apos;special&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;operator&apos;</highlight><highlight class="normal">},<sp/></highlight><highlight class="stringliteral">&apos;entity&apos;</highlight><highlight class="normal">:<sp/>{</highlight><highlight class="stringliteral">&apos;cat&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;cans&apos;</highlight><highlight class="normal">}}]}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual<sp/>=<sp/>self.<ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a7b8d5f5f3e172aa0af7f93898bd8c19a" kindref="member">p</ref>.parse(self.<ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a58e48029fb429e1dfd6ba0021762a94b" kindref="member">target_rule</ref>,<sp/>sentence)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEquals(expected,<sp/>actual)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="classtest__cfgparser_1_1TestComplexGrammar_1aab3314554e0cca43b6932e7e20586096" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__cfgparser_1_1TestComplexGrammar_1aab3314554e0cca43b6932e7e20586096" kindref="member">test_eegpsr_5</ref>(self):</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>sentence<sp/>does<sp/>not<sp/>make<sp/>any<sp/>common-sense<sp/>but<sp/>grammar-wise<sp/>it<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sentence<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>you<sp/>put<sp/>the<sp/>coke<sp/>which<sp/>is<sp/>on<sp/>the<sp/>living<sp/>room<sp/>in<sp/>the<sp/>couch<sp/>reach<sp/>the<sp/>living<sp/>room<sp/>and<sp/>answer<sp/>her<sp/>question&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;actions&apos;</highlight><highlight class="normal">:<sp/>[{</highlight><highlight class="stringliteral">&apos;action&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;bring&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;to&apos;</highlight><highlight class="normal">:<sp/>{</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;couch&apos;</highlight><highlight class="normal">}},<sp/>{</highlight><highlight class="stringliteral">&apos;action&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;navigate&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;entity&apos;</highlight><highlight class="normal">:<sp/>{</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">:<sp/>{</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;livingroom&apos;</highlight><highlight class="normal">}}},<sp/>{</highlight><highlight class="stringliteral">&apos;action&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;answer-question&apos;</highlight><highlight class="normal">}]}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual<sp/>=<sp/>self.<ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a7b8d5f5f3e172aa0af7f93898bd8c19a" kindref="member">p</ref>.parse(self.<ref refid="classtest__cfgparser_1_1TestComplexGrammar_1a58e48029fb429e1dfd6ba0021762a94b" kindref="member">target_rule</ref>,<sp/>sentence)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEquals(expected,<sp/>actual)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>rosunit</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>rosunit.unitrun(</highlight><highlight class="stringliteral">&quot;grammar_parser&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;test_grammar_parser&apos;</highlight><highlight class="normal">,<sp/>TestOption)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>rosunit.unitrun(</highlight><highlight class="stringliteral">&quot;grammar_parser&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;test_grammar_parser&apos;</highlight><highlight class="normal">,<sp/>TestConjunct)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>rosunit.unitrun(</highlight><highlight class="stringliteral">&quot;grammar_parser&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;test_grammar_parser&apos;</highlight><highlight class="normal">,<sp/>TestRule)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>rosunit.unitrun(</highlight><highlight class="stringliteral">&quot;grammar_parser&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;test_grammar_parser&apos;</highlight><highlight class="normal">,<sp/>TestCfgParser)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>rosunit.unitrun(</highlight><highlight class="stringliteral">&quot;grammar_parser&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;test_grammar_parser&apos;</highlight><highlight class="normal">,<sp/>TestParseNextAtom)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>rosunit.unitrun(</highlight><highlight class="stringliteral">&quot;grammar_parser&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;test_grammar_parser&apos;</highlight><highlight class="normal">,<sp/>TestSingleRule)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>rosunit.unitrun(</highlight><highlight class="stringliteral">&quot;grammar_parser&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;test_grammar_parser&apos;</highlight><highlight class="normal">,<sp/>TestSubrules)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>rosunit.unitrun(</highlight><highlight class="stringliteral">&quot;grammar_parser&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;test_grammar_parser&apos;</highlight><highlight class="normal">,<sp/>TestEmptySubrules)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>rosunit.unitrun(</highlight><highlight class="stringliteral">&quot;grammar_parser&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;test_grammar_parser&apos;</highlight><highlight class="normal">,<sp/>TestComplexGrammar)</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/grammar_parser/test/test_cfgparser.py"/>
  </compounddef>
</doxygen>
