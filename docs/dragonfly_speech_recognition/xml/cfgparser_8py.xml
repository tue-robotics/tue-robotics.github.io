<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="cfgparser_8py" kind="file" language="Python">
    <compoundname>cfgparser.py</compoundname>
    <innerclass refid="classgrammar__parser_1_1cfgparser_1_1bcolors" prot="public">grammar_parser::cfgparser::bcolors</innerclass>
    <innerclass refid="classgrammar__parser_1_1cfgparser_1_1CFGParser" prot="public">grammar_parser::cfgparser::CFGParser</innerclass>
    <innerclass refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" prot="public">grammar_parser::cfgparser::Conjunct</innerclass>
    <innerclass refid="classgrammar__parser_1_1cfgparser_1_1GrammarError" prot="public">grammar_parser::cfgparser::GrammarError</innerclass>
    <innerclass refid="classgrammar__parser_1_1cfgparser_1_1Option" prot="public">grammar_parser::cfgparser::Option</innerclass>
    <innerclass refid="classgrammar__parser_1_1cfgparser_1_1ParseError" prot="public">grammar_parser::cfgparser::ParseError</innerclass>
    <innerclass refid="classgrammar__parser_1_1cfgparser_1_1Rule" prot="public">grammar_parser::cfgparser::Rule</innerclass>
    <innerclass refid="classgrammar__parser_1_1cfgparser_1_1Tree" prot="public">grammar_parser::cfgparser::Tree</innerclass>
    <innerclass refid="classgrammar__parser_1_1cfgparser_1_1Visualizer" prot="public">grammar_parser::cfgparser::Visualizer</innerclass>
    <innernamespace refid="namespacegrammar__parser_1_1cfgparser">grammar_parser::cfgparser</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacegrammar__parser_1_1cfgparser" refkind="compound"><highlight class="comment">#!<sp/>/usr/bin/python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>-*-<sp/>coding:<sp/>utf-8<sp/>-*-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>----------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;Grammars<sp/>for<sp/>the<sp/>ContextFreeGrammarParser<sp/>are<sp/>built<sp/>from<sp/>production<sp/>rules,<sp/>corresponding<sp/>to<sp/>the<sp/>Rule-class<sp/>below.</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">This<sp/>means<sp/>that<sp/>sentences<sp/>can<sp/>be<sp/>generated<sp/>(and<sp/>auto-completed),<sp/>according<sp/>to<sp/>this<sp/>grammar.</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral">Moreover,<sp/>sentences<sp/>can<sp/>be<sp/>parsed<sp/>according<sp/>to<sp/>the<sp/>same<sp/>rules.</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral">See<sp/>https://www.tutorialspoint.com/automata_theory/context_free_grammar_introduction.htm<sp/>and<sp/>https://en.wikipedia.org/wiki/Context-free_grammar<sp/>for<sp/>an<sp/>introduction<sp/>to<sp/>context<sp/>free<sp/>grammars.</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral">If<sp/>there<sp/>is<sp/>a<sp/>rule<sp/>&quot;A<sp/>-&gt;<sp/>one&quot;,<sp/>then<sp/>that<sp/>means<sp/>that<sp/>to<sp/>generate<sp/>something<sp/>according<sp/>to<sp/>rule<sp/>A,<sp/>the<sp/>generated<sp/>sentence<sp/>is<sp/>&quot;one&quot;</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral">In<sp/>this<sp/>example<sp/>&quot;A&quot;<sp/>is<sp/>the<sp/>lname.<sp/>lname<sp/>stands<sp/>for<sp/>left<sp/>name,<sp/>as<sp/>it&apos;s<sp/>on<sp/>the<sp/>left<sp/>of<sp/>the<sp/>arrow.</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral">Sentences<sp/>are<sp/>produced<sp/>and<sp/>parsed<sp/>from<sp/>left<sp/>to<sp/>right.</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral">There<sp/>can<sp/>be<sp/>multiple<sp/>lines<sp/>in<sp/>the<sp/>grammar<sp/>definition<sp/>file<sp/>with<sp/>the<sp/>same<sp/>lname,<sp/>which<sp/>simply<sp/>add<sp/>ways<sp/>to<sp/>produce/parse<sp/>sentences<sp/>for<sp/>that<sp/>lname.</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral">Rules<sp/>can<sp/>refer<sp/>to<sp/>each<sp/>other<sp/>via<sp/>their<sp/>lname.</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral">If<sp/>a<sp/>rule<sp/>A<sp/>defines<sp/>a<sp/>way<sp/>to<sp/>start<sp/>a<sp/>sentence<sp/>and<sp/>refers<sp/>to<sp/>B,<sp/>that<sp/>means<sp/>the<sp/>completion<sp/>of<sp/>rule<sp/>A<sp/>is<sp/>one<sp/>via<sp/>rule<sp/>B.</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral">For<sp/>example,<sp/>the<sp/>grammar:</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral">A<sp/>-&gt;<sp/>go<sp/>B</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral">B<sp/>-&gt;<sp/>forward</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral">B<sp/>-&gt;<sp/>backward</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">can<sp/>generate<sp/>the<sp/>sentences<sp/>&quot;go<sp/>forward&quot;<sp/>and<sp/>&quot;go<sp/>backward&quot;.<sp/>And<sp/>thus<sp/>parse<sp/>these<sp/>sentences<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">Rules<sp/>can<sp/>also<sp/>have<sp/>variables<sp/>that<sp/>will<sp/>be<sp/>assigned<sp/>to<sp/>when<sp/>a<sp/>sentence<sp/>is<sp/>parsed.</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral">For<sp/>example,<sp/>the<sp/>line:</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>VP[&quot;action&quot;:<sp/>A]<sp/>-&gt;<sp/>V_PLACE[A]</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral">adds<sp/>a<sp/>rule<sp/>for<sp/>the<sp/>lname<sp/>VP,<sp/>with<sp/>a<sp/>field<sp/>called<sp/>&quot;action&quot;,<sp/>which<sp/>will<sp/>be<sp/>set<sp/>to<sp/>A.</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral">The<sp/>value<sp/>for<sp/>A<sp/>is<sp/>determined<sp/>by<sp/>a<sp/>rule<sp/>with<sp/>lname<sp/>V_PLACE,<sp/>which<sp/>will<sp/>determine<sp/>the<sp/>value<sp/>of<sp/>A.</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral">The<sp/>rule</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>V_PLACE[&quot;place&quot;]<sp/>-&gt;<sp/>place<sp/>|<sp/>put</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">applies<sp/>when<sp/>the<sp/>text<sp/>is<sp/>&quot;place&quot;<sp/>or<sp/>&quot;put&quot;.</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral">When<sp/>that<sp/>is<sp/>the<sp/>case,<sp/>the<sp/>rule<sp/>applies<sp/>and<sp/>the<sp/>text<sp/>&quot;place&quot;<sp/>is<sp/>filled<sp/>in<sp/>for<sp/>A.</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral">That<sp/>means<sp/>when<sp/>the<sp/>text<sp/>&quot;put&quot;<sp/>is<sp/>typed,<sp/>the<sp/>variable<sp/>&quot;action&quot;<sp/>will<sp/>be<sp/>assigned<sp/>the<sp/>value<sp/>&quot;place&quot;.</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral">The<sp/>whole<sp/>grammar<sp/>has<sp/>an<sp/>entry<sp/>point,<sp/>or<sp/>root<sp/>rule,<sp/>from<sp/>which<sp/>all<sp/>the<sp/>other<sp/>rules<sp/>are<sp/>referred.</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral">Each<sp/>rule<sp/>forms<sp/>branch<sp/>upon<sp/>branch,<sp/>together<sp/>building<sp/>a<sp/>Tree.</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">When<sp/>a<sp/>sentence<sp/>is<sp/>parsed,<sp/>a<sp/>Tree<sp/>is<sp/>built.<sp/>While<sp/>this<sp/>happens,<sp/>the<sp/>variables<sp/>are<sp/>collected.</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">When<sp/>the<sp/>Tree<sp/>is<sp/>completely<sp/>parsed,<sp/>the<sp/>collected<sp/>variables<sp/>and<sp/>their<sp/>assignments<sp/>are<sp/>fetched<sp/>from<sp/>the<sp/>Tree<sp/>with<sp/>the<sp/>get_semantics-method.</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral">This<sp/>returns<sp/>a<sp/>string.<sp/>However,<sp/>this<sp/>string<sp/>represents<sp/>a<sp/>(nested)<sp/>dictionary<sp/>that<sp/>maps<sp/>a<sp/>variable<sp/>to<sp/>a<sp/>value.</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral">Semantics<sp/>describe<sp/>what<sp/>a<sp/>sentence<sp/>means.<sp/>In<sp/>this<sp/>case,<sp/>it<sp/>describes<sp/>what<sp/>action<sp/>to<sp/>perform<sp/>and<sp/>with<sp/>what<sp/>to<sp/>perform<sp/>it.</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral">The<sp/>semantics<sp/>are<sp/>returned<sp/>to<sp/>whomever<sp/>called<sp/>CFGParser.parse(...),<sp/>usually<sp/>the<sp/>REPL<sp/>on<sp/>console.py.</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral">The<sp/>REPL<sp/>sends<sp/>the<sp/>semantics<sp/>to<sp/>the<sp/>action_server,<sp/>which<sp/>grounds<sp/>the<sp/>semantics<sp/>by<sp/>implementing<sp/>the<sp/>actions.</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>itertools</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>random</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>re</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>yaml</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="classgrammar__parser_1_1cfgparser_1_1GrammarError" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1GrammarError" kindref="compound">GrammarError</ref>(Exception):</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Exception<sp/>indicating<sp/>a<sp/>problem<sp/>in<sp/>the<sp/>grammar<sp/>rules.</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classgrammar__parser_1_1cfgparser_1_1GrammarError_1adc06bb597b7aa249ac4b5afffd29eb9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1GrammarError_1adc06bb597b7aa249ac4b5afffd29eb9c" kindref="member">__init__</ref>(self,<sp/>message):</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exception.__init__(self,<sp/>message)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classgrammar__parser_1_1cfgparser_1_1ParseError" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1ParseError" kindref="compound">ParseError</ref>(Exception):</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Exception<sp/>indicating<sp/>that<sp/>the<sp/>given<sp/>sentence<sp/>does<sp/>not<sp/>match<sp/>on<sp/>the<sp/>grammar.</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classgrammar__parser_1_1cfgparser_1_1ParseError_1a784550e1d4fc002a7239b7191f4dfa68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1ParseError_1a784550e1d4fc002a7239b7191f4dfa68" kindref="member">__init__</ref>(self,<sp/>words,<sp/>word_index):</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>word_index<sp/>&lt;<sp/>0<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>word_index<sp/>&gt;=<sp/>len(words):</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Word<sp/>index<sp/>{}<sp/>is<sp/>missing<sp/>(sentence<sp/>has<sp/>{}<sp/>words)&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word_index,<sp/>len(words))</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Word<sp/>&apos;{}&apos;<sp/>at<sp/>index<sp/>{}<sp/>failed<sp/>to<sp/>match&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words[word_index],<sp/>word_index)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exception.__init__(self,<sp/>msg)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classgrammar__parser_1_1cfgparser_1_1bcolors" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1bcolors" kindref="compound">bcolors</ref>:</highlight></codeline>
<codeline lineno="85" refid="classgrammar__parser_1_1cfgparser_1_1bcolors_1a9dff198e145c22349476e141cc4f418b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>HEADER<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\033[95m&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classgrammar__parser_1_1cfgparser_1_1bcolors_1a8c6475feec015427c75f3a55eee71233" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>OKBLUE<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\033[94m&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classgrammar__parser_1_1cfgparser_1_1bcolors_1a2dc8b8839f60dd4dab0b07ef3ea14c9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>OKGREEN<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\033[92m&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="classgrammar__parser_1_1cfgparser_1_1bcolors_1aa2d9dde0469ffffde6d823864247b5fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>WARNING<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\033[93m&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="classgrammar__parser_1_1cfgparser_1_1bcolors_1ad2b7dc309136701abb95e4efc2748201" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>FAIL<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\033[91m&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="classgrammar__parser_1_1cfgparser_1_1bcolors_1a065976091106d44525f7aa935120d2b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ENDC<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\033[0m&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="classgrammar__parser_1_1cfgparser_1_1bcolors_1a056378d64dbe299b1f6ac955127a37df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BOLD<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\033[1m&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classgrammar__parser_1_1cfgparser_1_1bcolors_1ae8a6a1e592088af53d38b1a633906b2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>UNDERLINE<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\033[4m&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classgrammar__parser_1_1cfgparser_1_1Option" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;An<sp/>option<sp/>is<sp/>a<sp/>continuation<sp/>of<sp/>a<sp/>sentence<sp/>of<sp/>where<sp/>there<sp/>are<sp/>multiple<sp/>ways<sp/>to<sp/>continue<sp/>the<sp/>sentence.</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>These<sp/>choices<sp/>in<sp/>an<sp/>Option<sp/>are<sp/>called<sp/>called<sp/>conjuncts.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classgrammar__parser_1_1cfgparser_1_1Option_1aba68ee3731d75db39f1b38f6dbd5e7a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1aba68ee3731d75db39f1b38f6dbd5e7a4" kindref="member">__init__</ref>(self,<sp/>lsemantic=&quot;&quot;,<sp/>conjs=None):</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Constructor<sp/>of<sp/>an<sp/>Option</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>lsemantic<sp/>the<sp/>name<sp/>of<sp/>the<sp/>semantics<sp/>that<sp/>the<sp/>option<sp/>is<sp/>the<sp/>continuation<sp/>of.<sp/>E.g.<sp/>if<sp/>the<sp/>lsemantic<sp/>is<sp/>some<sp/>action,<sp/>this<sp/>option<sp/>might<sp/>be<sp/>the<sp/>object<sp/>to<sp/>perform<sp/>that<sp/>action<sp/>with.</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>conjs<sp/>the<sp/>choices<sp/>in<sp/>this<sp/>option&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classgrammar__parser_1_1cfgparser_1_1Option_1a9c2b88ea4579ba8145a1edc7b8837e5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a9c2b88ea4579ba8145a1edc7b8837e5b" kindref="member">lsemantic</ref><sp/>=<sp/>lsemantic</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>conjs:</highlight></codeline>
<codeline lineno="105" refid="classgrammar__parser_1_1cfgparser_1_1Option_1a0d8ef5241b6b2a03b533a70b80ba8bf2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a0d8ef5241b6b2a03b533a70b80ba8bf2" kindref="member">conjuncts</ref><sp/>=<sp/>conjs</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a0d8ef5241b6b2a03b533a70b80ba8bf2" kindref="member">conjuncts</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classgrammar__parser_1_1cfgparser_1_1Option_1a5a27bfa1c404344a5f4eb4c0bc0f9fed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a5a27bfa1c404344a5f4eb4c0bc0f9fed" kindref="member">__repr__</ref>(self):</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Option(lsemantic=&apos;{lsem}&apos;,<sp/>conjs={c})&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsem=self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a9c2b88ea4579ba8145a1edc7b8837e5b" kindref="member">lsemantic</ref>,<sp/>c=self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a0d8ef5241b6b2a03b533a70b80ba8bf2" kindref="member">conjuncts</ref>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classgrammar__parser_1_1cfgparser_1_1Option_1a73608a0e8a0760fd66a2f91ee1d8af64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a73608a0e8a0760fd66a2f91ee1d8af64" kindref="member">__eq__</ref>(self,<sp/>other):</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(other,<sp/>Option):</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a9c2b88ea4579ba8145a1edc7b8837e5b" kindref="member">lsemantic</ref><sp/>==<sp/>other.lsemantic<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a0d8ef5241b6b2a03b533a70b80ba8bf2" kindref="member">conjuncts</ref><sp/>==<sp/>other.conjuncts</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>@staticmethod</highlight></codeline>
<codeline lineno="120" refid="classgrammar__parser_1_1cfgparser_1_1Option_1a8492c5295a01470ddb2acd08f810a783" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a8492c5295a01470ddb2acd08f810a783" kindref="member">from_cfg_def</ref>(option_definition,<sp/>left_semantics):</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Parse<sp/>text<sp/>from<sp/>the<sp/>CFG<sp/>definition<sp/>into<sp/>an<sp/>Option<sp/>and<sp/>the<sp/>choices<sp/>it<sp/>is<sp/>composed<sp/>of.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_strs<sp/>=<sp/>option_definition.split(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>opt_str<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>opt_strs:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_str<sp/>=<sp/>opt_str.strip()</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(left_semantics)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>opt_str:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(rname,<sp/>rsem,<sp/>opt_str)<sp/>=<sp/><ref refid="namespacegrammar__parser_1_1cfgparser_1ac20401fd2a7ace93c6f0ad562fdeaddd" kindref="member">parse_next_atom</ref>(opt_str)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_variable<sp/>=<sp/>rname[0].isupper()</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt.conjuncts<sp/>+=<sp/>[<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(rname,<sp/>rsem,<sp/>is_variable)]</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>opt</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="classgrammar__parser_1_1cfgparser_1_1Option_1a5b3731aa90e56a86ba46bd7ffcc0a472" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a5b3731aa90e56a86ba46bd7ffcc0a472" kindref="member">pretty_print</ref>(self,<sp/>level=0):</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tabs<sp/>=<sp/>level<sp/>*<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>tabs<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;Option(lsemantic=&apos;{lsem}&apos;,<sp/>conjs=[&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsem=self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a9c2b88ea4579ba8145a1edc7b8837e5b" kindref="member">lsemantic</ref>)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>conj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a0d8ef5241b6b2a03b533a70b80ba8bf2" kindref="member">conjuncts</ref>:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>ret<sp/>+=<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>ret<sp/>+=<sp/>tabs<sp/>+<sp/>&quot;<sp/><sp/><sp/><sp/>&quot;<sp/>+<sp/>&quot;{c},&quot;.format(c=conj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>conj.pretty_print()</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;])&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="classgrammar__parser_1_1cfgparser_1_1Option_1a52b852ab56b62708e6f7c31fba57b075" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a52b852ab56b62708e6f7c31fba57b075" kindref="member">graphviz_id</ref>(self):</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Option<sp/>&apos;{lsem}&apos;&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(lsem=self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a9c2b88ea4579ba8145a1edc7b8837e5b" kindref="member">lsemantic</ref>).replace(</highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">).replace(</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="classgrammar__parser_1_1cfgparser_1_1Option_1a3fe0d023b2369c15b2e79e05d04c2c62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a3fe0d023b2369c15b2e79e05d04c2c62" kindref="member">to_graphviz</ref>(self,<sp/>graph):</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>conj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a0d8ef5241b6b2a03b533a70b80ba8bf2" kindref="member">conjuncts</ref>:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.edge(self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Option_1a52b852ab56b62708e6f7c31fba57b075" kindref="member">graphviz_id</ref>(),<sp/>conj.graphviz_id())</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj.to_graphviz(graph)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">#<sp/>----------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>:</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;&quot;A<sp/>Conjunct<sp/>is<sp/>a<sp/>placeholder<sp/>in<sp/>the<sp/>parse-tree,<sp/>which<sp/>can<sp/>be<sp/>filled<sp/>in<sp/>by<sp/>an<sp/>Option<sp/>or<sp/>a<sp/>word&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1ac993d3289549ea09504f5b80c3b2892f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1ac993d3289549ea09504f5b80c3b2892f" kindref="member">__init__</ref>(self,<sp/>name,<sp/>rsemantic=&quot;&quot;,<sp/>is_variable=False):</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;:param<sp/>name<sp/>the<sp/>word<sp/>or<sp/>variable</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>rsemantic<sp/>what<sp/>option<sp/>is<sp/>the<sp/>Conjunct<sp/>part<sp/>of</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>is_variable<sp/>is<sp/>the<sp/>conjunct<sp/>variable<sp/>or<sp/>terminal?&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1ab62b1bc1784543b0b3b4324d36967cff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1ab62b1bc1784543b0b3b4324d36967cff" kindref="member">name</ref><sp/>=<sp/>name</highlight></codeline>
<codeline lineno="171" refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a5e0612956ac168dee0365707c9305d4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a5e0612956ac168dee0365707c9305d4d" kindref="member">rsemantic</ref><sp/>=<sp/>rsemantic</highlight></codeline>
<codeline lineno="172" refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a2068c84406418893ae5fdcfde156a71f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a2068c84406418893ae5fdcfde156a71f" kindref="member">is_variable</ref><sp/>=<sp/>is_variable</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1acd3c7bf3528e7e83c5979d2284643752" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1acd3c7bf3528e7e83c5979d2284643752" kindref="member">__repr__</ref>(self):</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Conjunct(name=&apos;{name}&apos;,<sp/>rsemantic=&apos;{r}&apos;,<sp/>is_variable={v})&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1ab62b1bc1784543b0b3b4324d36967cff" kindref="member">name</ref>,<sp/>r=self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a5e0612956ac168dee0365707c9305d4d" kindref="member">rsemantic</ref>,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v=self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a2068c84406418893ae5fdcfde156a71f" kindref="member">is_variable</ref>)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1af7e6a85e72f32cb46c361a5e1aac1e8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1af7e6a85e72f32cb46c361a5e1aac1e8c" kindref="member">__eq__</ref>(self,<sp/>other):</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(other,<sp/>Conjunct):</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1ab62b1bc1784543b0b3b4324d36967cff" kindref="member">name</ref><sp/>==<sp/>other.name<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a5e0612956ac168dee0365707c9305d4d" kindref="member">rsemantic</ref><sp/>==<sp/>other.rsemantic<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a2068c84406418893ae5fdcfde156a71f" kindref="member">is_variable</ref><sp/>==<sp/>other.is_variable</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a0ae7afd794e6e5cc4b7eb0a7a9dcd557" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a0ae7afd794e6e5cc4b7eb0a7a9dcd557" kindref="member">pretty_print</ref>(self,<sp/>level=0):</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a2068c84406418893ae5fdcfde156a71f" kindref="member">is_variable</ref><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1ab62b1bc1784543b0b3b4324d36967cff" kindref="member">name</ref>:</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a5e0612956ac168dee0365707c9305d4d" kindref="member">rsemantic</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a5e0612956ac168dee0365707c9305d4d" kindref="member">rsemantic</ref><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>+<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1ab62b1bc1784543b0b3b4324d36967cff" kindref="member">name</ref><sp/><sp/></highlight><highlight class="comment">#<sp/>+<sp/>str(self)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bcolors.OKGREEN<sp/>+<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1ab62b1bc1784543b0b3b4324d36967cff" kindref="member">name</ref><sp/>+<sp/>bcolors.ENDC<sp/><sp/></highlight><highlight class="comment">#<sp/>+<sp/>str(self)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a5b6efa09aca8f4fb0e09e969cbe68983" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a5b6efa09aca8f4fb0e09e969cbe68983" kindref="member">graphviz_id</ref>(self):</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Conjunct<sp/>{name}&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(name=self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1ab62b1bc1784543b0b3b4324d36967cff" kindref="member">name</ref>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1ab7dd396710b7e13a34e41ca713bd773d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1ab7dd396710b7e13a34e41ca713bd773d" kindref="member">to_graphviz</ref>(self,<sp/>graph):</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.node(self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct_1a5b6efa09aca8f4fb0e09e969cbe68983" kindref="member">graphviz_id</ref>())</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">#<sp/>----------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="classgrammar__parser_1_1cfgparser_1_1Rule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Rule" kindref="compound">Rule</ref>:</highlight></codeline>
<codeline lineno="202" refid="classgrammar__parser_1_1cfgparser_1_1Rule_1a9a2d887a94b95974b9d77420425c36a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1a9a2d887a94b95974b9d77420425c36a1" kindref="member">__init__</ref>(self,<sp/>lname,<sp/>options=None):</highlight></codeline>
<codeline lineno="203" refid="classgrammar__parser_1_1cfgparser_1_1Rule_1aa5319269960cfeb637d245fd3d20bb58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1aa5319269960cfeb637d245fd3d20bb58" kindref="member">lname</ref><sp/>=<sp/>lname</highlight></codeline>
<codeline lineno="204" refid="classgrammar__parser_1_1cfgparser_1_1Rule_1aaa6835b88c634ec93877c28ba95c351c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1aaa6835b88c634ec93877c28ba95c351c" kindref="member">options</ref><sp/>=<sp/>options<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>options<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="classgrammar__parser_1_1cfgparser_1_1Rule_1a103f8a853272905570436c700c1013fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1a103f8a853272905570436c700c1013fa" kindref="member">__repr__</ref>(self):</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Rule(lname=&apos;{lname}&apos;,<sp/>options={opts})&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(lname=self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1aa5319269960cfeb637d245fd3d20bb58" kindref="member">lname</ref>,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opts=self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1aaa6835b88c634ec93877c28ba95c351c" kindref="member">options</ref>)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="classgrammar__parser_1_1cfgparser_1_1Rule_1a376c9d7ee5dafd12453cec24db21c1b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1a376c9d7ee5dafd12453cec24db21c1b8" kindref="member">__eq__</ref>(self,<sp/>other):</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(other,<sp/>Rule):</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1aa5319269960cfeb637d245fd3d20bb58" kindref="member">lname</ref><sp/>==<sp/>other.lname<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1aaa6835b88c634ec93877c28ba95c351c" kindref="member">options</ref><sp/>==<sp/>other.options</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>@staticmethod</highlight></codeline>
<codeline lineno="217" refid="classgrammar__parser_1_1cfgparser_1_1Rule_1adcfa74b8fffce5fc48ab02da73e59591" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1adcfa74b8fffce5fc48ab02da73e59591" kindref="member">from_cfg_def</ref>(s):</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>s.split(</highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(tmp)<sp/>!=<sp/>2:</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>grammar,<sp/>please<sp/>use<sp/>proper<sp/>&apos;<sp/>-&gt;<sp/>&apos;<sp/>arrows&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lname,<sp/>lsem,<sp/>outstr)<sp/>=<sp/><ref refid="namespacegrammar__parser_1_1cfgparser_1ac20401fd2a7ace93c6f0ad562fdeaddd" kindref="member">parse_next_atom</ref>(tmp[0].strip())</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Rule" kindref="compound">Rule</ref>(lname)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule.options<sp/>=<sp/>list(Option.from_cfg_def(tmp[1],<sp/>lsem))</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rule</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="classgrammar__parser_1_1cfgparser_1_1Rule_1ad70b915d5dfab98b1bf09d8ff37fdb02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1ad70b915d5dfab98b1bf09d8ff37fdb02" kindref="member">pretty_print</ref>(self,<sp/>level=0):</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tabs<sp/>=<sp/>(level)<sp/>*<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/><sp/><sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>tabs<sp/>+<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1aa5319269960cfeb637d245fd3d20bb58" kindref="member">lname</ref></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>option<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1aaa6835b88c634ec93877c28ba95c351c" kindref="member">options</ref>:</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>option.pretty_print(level=level<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="classgrammar__parser_1_1cfgparser_1_1Rule_1a6d95381c2c8a60d3b5feb1f21687bb52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1a6d95381c2c8a60d3b5feb1f21687bb52" kindref="member">graphviz_id</ref>(self):</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Rule<sp/>{lname}&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(lname=self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1aa5319269960cfeb637d245fd3d20bb58" kindref="member">lname</ref>)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="classgrammar__parser_1_1cfgparser_1_1Rule_1a44a8dc08970a562de31dd09f97231d92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1a44a8dc08970a562de31dd09f97231d92" kindref="member">to_graphviz</ref>(self,<sp/>graph):</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>opt<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1aaa6835b88c634ec93877c28ba95c351c" kindref="member">options</ref>:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.edge(self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Rule_1a6d95381c2c8a60d3b5feb1f21687bb52" kindref="member">graphviz_id</ref>(),<sp/>opt.graphviz_id())</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt.to_graphviz(graph)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">#<sp/>----------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="classgrammar__parser_1_1cfgparser_1_1Tree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Tree" kindref="compound">Tree</ref>:</highlight></codeline>
<codeline lineno="252" refid="classgrammar__parser_1_1cfgparser_1_1Tree_1ac55a568ce854a81c49a982dcb42f979a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1ac55a568ce854a81c49a982dcb42f979a" kindref="member">__init__</ref>(self,<sp/>option):</highlight></codeline>
<codeline lineno="253" refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a55e3d0f92e33115514bfc992ba7304e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a55e3d0f92e33115514bfc992ba7304e2" kindref="member">option</ref><sp/>=<sp/>option</highlight></codeline>
<codeline lineno="254" refid="classgrammar__parser_1_1cfgparser_1_1Tree_1afe39fe12f8245cf3d94e7fb631037386" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1afe39fe12f8245cf3d94e7fb631037386" kindref="member">subtrees</ref><sp/>=<sp/>[</highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a55e3d0f92e33115514bfc992ba7304e2" kindref="member">option</ref>.conjuncts]</highlight></codeline>
<codeline lineno="255" refid="classgrammar__parser_1_1cfgparser_1_1Tree_1ac97872ab26911e60e7698ca3bc42a331" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1ac97872ab26911e60e7698ca3bc42a331" kindref="member">parent</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a4f73f695fd947ae09494550d12787b2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a4f73f695fd947ae09494550d12787b2b" kindref="member">parent_idx</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="classgrammar__parser_1_1cfgparser_1_1Tree_1ac65739f36ffba7470efc2dcdc9cdfb9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1ac65739f36ffba7470efc2dcdc9cdfb9e" kindref="member">next</ref>(self,<sp/>idx):</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>idx<sp/>+<sp/>1<sp/>&lt;<sp/>len(self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a55e3d0f92e33115514bfc992ba7304e2" kindref="member">option</ref>.conjuncts):</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self,<sp/>idx<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1ac97872ab26911e60e7698ca3bc42a331" kindref="member">parent</ref>:</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1ac97872ab26911e60e7698ca3bc42a331" kindref="member">parent</ref>.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1ac65739f36ffba7470efc2dcdc9cdfb9e" kindref="member">next</ref>(self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a4f73f695fd947ae09494550d12787b2b" kindref="member">parent_idx</ref>)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>0</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="classgrammar__parser_1_1cfgparser_1_1Tree_1ac49be2755bb51524148a9f3fbc74cd32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1ac49be2755bb51524148a9f3fbc74cd32" kindref="member">add_subtree</ref>(self,<sp/>idx,<sp/>tree):</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree.parent<sp/>=<sp/>self</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tree.parent_idx<sp/>=<sp/>idx</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1afe39fe12f8245cf3d94e7fb631037386" kindref="member">subtrees</ref>[idx]<sp/>=<sp/>tree</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tree</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a29a018b68e000aa649392a0f45472d2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a29a018b68e000aa649392a0f45472d2d" kindref="member">__repr__</ref>(self):</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO:<sp/>Make<sp/>this<sp/>print<sp/>like<sp/>a<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str(zip(self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a55e3d0f92e33115514bfc992ba7304e2" kindref="member">option</ref>.conjuncts,<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1afe39fe12f8245cf3d94e7fb631037386" kindref="member">subtrees</ref>))</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a571dd35a82c6089c67cbbd2d2cd9371e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a571dd35a82c6089c67cbbd2d2cd9371e" kindref="member">pretty_print</ref>(self,<sp/>level=0):</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>print<sp/>self,<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>tabs<sp/>=<sp/>(level-1)*&apos;<sp/><sp/><sp/><sp/>&apos;<sp/>+<sp/>&quot;│<sp/><sp/><sp/>├───&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tabs<sp/>=<sp/>(level)<sp/>*<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/><sp/><sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;└───&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>tabs<sp/>=<sp/>&quot;\t&quot;<sp/>*<sp/>level<sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>&quot;#tabs<sp/>+<sp/>self.option.pretty_print(level=level)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>conjunct,<sp/>subtree<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>zip(self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1a55e3d0f92e33115514bfc992ba7304e2" kindref="member">option</ref>.conjuncts,<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree_1afe39fe12f8245cf3d94e7fb631037386" kindref="member">subtrees</ref>):</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>tabs<sp/>+<sp/>conjunct.pretty_print()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>hasattr(subtree,<sp/></highlight><highlight class="stringliteral">&quot;pretty_print&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>subtree.pretty_print(level=level<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>ret<sp/>+=<sp/>&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">#<sp/>----------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="namespacegrammar__parser_1_1cfgparser_1ac20401fd2a7ace93c6f0ad562fdeaddd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacegrammar__parser_1_1cfgparser_1ac20401fd2a7ace93c6f0ad562fdeaddd" kindref="member">parse_next_atom</ref>(s):</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns<sp/>(name,<sp/>semantics,<sp/>remaining_str)</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>For<sp/>example<sp/>for<sp/>&quot;VP[X,<sp/>Y]<sp/>foo<sp/>bar&quot;<sp/>it<sp/>returns:</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;VP&quot;,<sp/>&quot;X,<sp/>Y&quot;,<sp/>&quot;foo<sp/>bar&quot;)</highlight></codeline>
<codeline lineno="300"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>s:</highlight></codeline>
<codeline lineno="301"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>Tuple<sp/>with<sp/>the<sp/>rule&apos;s<sp/>lname,<sp/>the<sp/>variables<sp/>involved<sp/>and<sp/>the<sp/>remaining<sp/>text:<sp/>(&quot;VP&quot;,<sp/>&quot;X,<sp/>Y&quot;,<sp/>&quot;foo<sp/>bar&quot;)</highlight></codeline>
<codeline lineno="302"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s.strip()</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>len(s)):</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>s[i]</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>c<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s[:i],<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>s[i:].strip()</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>c<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;[&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>s.find(</highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">,<sp/>i)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>j<sp/>&lt;<sp/>0:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Exception</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s[:i],<sp/>s[i<sp/>+<sp/>1:j],<sp/>s[j<sp/>+<sp/>1:].strip()</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">#<sp/>----------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser" kindref="compound">CFGParser</ref>:</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Parser<sp/>for<sp/>parsing<sp/>the<sp/>heard<sp/>sentence,<sp/>and<sp/>converting<sp/>it<sp/>to<sp/>information<sp/>for</highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>the<sp/>action<sp/>that<sp/>should<sp/>be<sp/>performed.</highlight></codeline>
<codeline lineno="325"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="326"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Usage:</highlight></codeline>
<codeline lineno="327"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>For<sp/>loading<sp/>a<sp/>grammar<sp/>from<sp/>a<sp/>file<sp/>use<sp/>fromfile().</highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>For<sp/>loading<sp/>a<sp/>grammar<sp/>from<sp/>a<sp/>text<sp/>string<sp/>use<sp/>fromstring().</highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>-<sp/>For<sp/>loading<sp/>a<sp/>grammar<sp/>with<sp/>functions,<sp/>construct<sp/>a<sp/>CFGParser<sp/>object,<sp/>add</highlight></codeline>
<codeline lineno="331"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>functions<sp/>using<sp/>CFGParser.set_function(),<sp/>and<sp/>finally<sp/>load<sp/>the</highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>grammar<sp/>using<sp/>fromfile<sp/>or<sp/>fromstring,<sp/>passing<sp/>in<sp/>the<sp/>CFGParser<sp/>object</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="334"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>parser<sp/>performs<sp/>a<sp/>few<sp/>basic<sp/>checks<sp/>on<sp/>the<sp/>grammar,<sp/>such<sp/>as<sp/>missing</highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>sub-rules<sp/>and<sp/>missing<sp/>functions<sp/>while<sp/>loading.<sp/>The<sp/>CFGParser.verify<sp/>function</highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>goes<sp/>a<sp/>step<sp/>further<sp/>by<sp/>expanding<sp/>all<sp/>alternatives.</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>To<sp/>parse<sp/>a<sp/>sentence,<sp/>use<sp/>parse_raw()<sp/>at<sp/>a<sp/>CFGParser<sp/>instance<sp/>to<sp/>get<sp/>maximum<sp/>information,<sp/>or</highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>use<sp/>parse()<sp/>at<sp/>a<sp/>CFGParser<sp/>instance<sp/>to<sp/>avoid<sp/>getting<sp/>exceptions.</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a5ecdb519554b73b7afe02248bd5b54b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a5ecdb519554b73b7afe02248bd5b54b6" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="344" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref><sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="345" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acc313c251ed7b7b9981e4bec30dead0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acc313c251ed7b7b9981e4bec30dead0d" kindref="member">functions</ref><sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>@staticmethod</highlight></codeline>
<codeline lineno="348" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a00ddec73b160cf683c03668b5fc14506" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a00ddec73b160cf683c03668b5fc14506" kindref="member">fromfile</ref>(filename,<sp/>parser=None):</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Load<sp/>the<sp/>grammar<sp/>from<sp/>the<sp/>provided<sp/>file.</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>filename:<sp/>Path<sp/>to<sp/>the<sp/>text<sp/>file<sp/>containing<sp/>the<sp/>grammar</highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>parser:<sp/>If<sp/>not<sp/>None,<sp/>the<sp/>parser<sp/>to<sp/>use<sp/>(else<sp/>a<sp/>new<sp/>parser<sp/>is<sp/>created).</highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:<sp/>The<sp/>parser<sp/>containing<sp/>the<sp/>grammar.</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>open(filename)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>f:</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>=<sp/>f.read()</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CFGParser.fromstring(string,<sp/>parser)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>@staticmethod</highlight></codeline>
<codeline lineno="361" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a9c42f8838ff6b25b8234bd3250fd1d92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a9c42f8838ff6b25b8234bd3250fd1d92" kindref="member">fromstring</ref>(string,<sp/>parser=None):</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="363"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Load<sp/>the<sp/>grammar<sp/>from<sp/>the<sp/>provided<sp/>text.</highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>string:<sp/>Text<sp/>containing<sp/>the<sp/>grammar</highlight></codeline>
<codeline lineno="366"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>parser:<sp/>If<sp/>not<sp/>None,<sp/>the<sp/>parser<sp/>to<sp/>use<sp/>(else<sp/>a<sp/>new<sp/>parser<sp/>is<sp/>created).</highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:<sp/>The<sp/>parser<sp/>containing<sp/>the<sp/>grammar.</highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>parser<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser" kindref="compound">CFGParser</ref>()</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>line<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>string.replace(</highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">).split(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>line.strip()</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>line<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>line[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;#&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.add_rule(line)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.check_rules()</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parser</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aa9fd5a02b0a122ea5b2a3a31f6c2a985" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aa9fd5a02b0a122ea5b2a3a31f6c2a985" kindref="member">check_rules</ref>(self):</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Verify<sp/>completeness<sp/>of<sp/>the<sp/>loaded<sp/>grammar,<sp/>no<sp/>rules<sp/>that<sp/>refer<sp/>to<sp/>missing</highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sub-rules<sp/>and<sp/>no<sp/>functions<sp/>that<sp/>don&apos;t<sp/>exist.</highlight></codeline>
<codeline lineno="385"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>rule<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>.values():</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>option<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>rule.options:</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>conj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>option.conjuncts:</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>conj.is_variable:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>conj.name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Rule<sp/>&apos;{}&apos;<sp/>is<sp/>missing&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj.name)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>conj.name[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;$&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>conj.name[</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1:]<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acc313c251ed7b7b9981e4bec30dead0d" kindref="member">functions</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Function<sp/>&apos;{}&apos;<sp/>is<sp/>missing&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj.name[1:])</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a55ed74b90773447f93550248c1e96cde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a55ed74b90773447f93550248c1e96cde" kindref="member">verify</ref>(self,<sp/>target=None):</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>target<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Try<sp/>whether<sp/>all<sp/>rules<sp/>in<sp/>the<sp/>grammar<sp/>are<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>r<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>:</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a1c694b10bca37bed8341b095c7262912" kindref="member">get_unwrapped</ref>(r)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a1c694b10bca37bed8341b095c7262912" kindref="member">get_unwrapped</ref>(target)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ae8a9718fb205eca40969c44fe0c7fa6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ae8a9718fb205eca40969c44fe0c7fa6b" kindref="member">add_rule</ref>(self,<sp/>s):</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>Rule.from_cfg_def(s)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>See<sp/>if<sp/>a<sp/>rule<sp/>with<sp/>this<sp/>lname<sp/>already<sp/>exists.<sp/>If<sp/>not,<sp/>add<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>rule.lname<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>:</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original_rule<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>[rule.lname]</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original_rule.options<sp/>+=<sp/>rule.options</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>[rule.lname]<sp/>=<sp/>rule</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a402b1840f02b980e9c07b83a96b801a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a402b1840f02b980e9c07b83a96b801a8" kindref="member">set_function</ref>(self,<sp/>name,<sp/>func):</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="418"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Add<sp/>a<sp/>new<sp/>function<sp/>to<sp/>the<sp/>parser.<sp/>Must<sp/>be<sp/>done<sp/>before<sp/>loading<sp/>the<sp/>grammar.</highlight></codeline>
<codeline lineno="419"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="420"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TODO<sp/>#11:<sp/>Ensure<sp/>the<sp/>function<sp/>expansion<sp/>result<sp/>does<sp/>not<sp/>refer<sp/>to<sp/>missing<sp/>sub-rules<sp/>or<sp/>functions.</highlight></codeline>
<codeline lineno="421"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acc313c251ed7b7b9981e4bec30dead0d" kindref="member">functions</ref>[name]<sp/>=<sp/>func</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acaa69542bedb3bb2c1a0766ec811558e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acaa69542bedb3bb2c1a0766ec811558e" kindref="member">get_semantics</ref>(self,<sp/>tree):</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Get<sp/>the<sp/>semantics<sp/>of<sp/>a<sp/>tree.</highlight></codeline>
<codeline lineno="426"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>means<sp/>that<sp/>variables<sp/>are<sp/>unified<sp/>with<sp/>their<sp/>values,<sp/>which<sp/>may<sp/>be<sp/>recursively<sp/>gotten<sp/>from<sp/>the<sp/>tree&apos;s<sp/>subtrees.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semantics<sp/>=<sp/>tree.option.lsemantic</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(0,<sp/>len(tree.subtrees)):</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj<sp/>=<sp/>tree.option.conjuncts[i]</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtree<sp/>=<sp/>tree.subtrees[i]</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>subtree:</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child_semantics<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acaa69542bedb3bb2c1a0766ec811558e" kindref="member">get_semantics</ref>(subtree)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semantics<sp/>=<sp/>semantics.replace(conj.rsemantic,<sp/>child_semantics)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>semantics</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a185e051b08bded47277321b278e33b5d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a185e051b08bded47277321b278e33b5d" kindref="member">parse</ref>(self,<sp/>target,<sp/>words,<sp/>debug=False):</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parse<sp/>the<sp/>given<sp/>sentence<sp/>against<sp/>the<sp/>grammar<sp/>loaded<sp/>in<sp/>the<sp/>class.<sp/>This</highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>hides<sp/>all<sp/>errors<sp/>(and<sp/>returns<sp/>False<sp/>in<sp/>that<sp/>case).<sp/>Use<sp/>the</highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.parse_raw<sp/>function<sp/>if<sp/>the<sp/>difference<sp/>between<sp/>a<sp/>successful<sp/>and</highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>parse<sp/>is<sp/>relevant.</highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>target:<sp/>Target<sp/>rule<sp/>in<sp/>the<sp/>grammar<sp/>to<sp/>start<sp/>parsing<sp/>the<sp/>sentence.</highlight></codeline>
<codeline lineno="448"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>target:<sp/>str.</highlight></codeline>
<codeline lineno="449"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="450"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>words:<sp/>Sentence<sp/>to<sp/>parse,<sp/>either<sp/>as<sp/>a<sp/>single<sp/>string<sp/>or<sp/>a<sp/>list<sp/>of<sp/>words.</highlight></codeline>
<codeline lineno="451"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>words:<sp/>str,<sp/>or<sp/>a<sp/>list<sp/>of<sp/>str.</highlight></codeline>
<codeline lineno="452"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="453"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>debug:<sp/>If<sp/>True,<sp/>output<sp/>the<sp/>matched<sp/>sequence<sp/>in<sp/>the<sp/>tree.</highlight></codeline>
<codeline lineno="454"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>debug:<sp/>Boolean,<sp/>by<sp/>default<sp/>False.</highlight></codeline>
<codeline lineno="455"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="456"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:<sp/>The<sp/>captured<sp/>data<sp/>value<sp/>collected<sp/>during<sp/>parsing<sp/>if<sp/>parsing</highlight></codeline>
<codeline lineno="457"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>succeeds,<sp/>else<sp/>False.</highlight></codeline>
<codeline lineno="458"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a2534c7f1443069198beb2d467e1f9fde" kindref="member">parse_raw</ref>(target,<sp/>words,<sp/>debug)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>GrammarError<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>ex:</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;grammar_parser,<sp/>Grammar<sp/>error:<sp/>{}&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(ex))</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>ParseError<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>ex:</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;grammar_parser,<sp/>Parse<sp/>error:<sp/>{}&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(ex))</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a2534c7f1443069198beb2d467e1f9fde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a2534c7f1443069198beb2d467e1f9fde" kindref="member">parse_raw</ref>(self,<sp/>target,<sp/>words,<sp/>debug=False):</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="474"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parse<sp/>the<sp/>given<sp/>sentence<sp/>against<sp/>the<sp/>grammar<sp/>loaded<sp/>in<sp/>the<sp/>class.<sp/>This</highlight></codeline>
<codeline lineno="475"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>throws<sp/>exceptions<sp/>on<sp/>failures,<sp/>the<sp/>self.parse<sp/>function<sp/>returns</highlight></codeline>
<codeline lineno="476"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>False<sp/>in<sp/>such<sp/>a<sp/>case.</highlight></codeline>
<codeline lineno="477"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="478"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>target:<sp/>Target<sp/>rule<sp/>in<sp/>the<sp/>grammar<sp/>to<sp/>start<sp/>parsing<sp/>the<sp/>sentence.</highlight></codeline>
<codeline lineno="479"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>target:<sp/>str.</highlight></codeline>
<codeline lineno="480"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="481"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>words:<sp/>Sentence<sp/>to<sp/>parse,<sp/>either<sp/>as<sp/>a<sp/>single<sp/>string<sp/>or<sp/>a<sp/>list<sp/>of<sp/>words.</highlight></codeline>
<codeline lineno="482"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>words:<sp/>str,<sp/>or<sp/>a<sp/>list<sp/>of<sp/>str.</highlight></codeline>
<codeline lineno="483"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="484"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>debug:<sp/>If<sp/>True,<sp/>output<sp/>the<sp/>matched<sp/>sequence<sp/>in<sp/>the<sp/>tree.</highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:type<sp/>debug:<sp/>Boolean,<sp/>by<sp/>default<sp/>False.</highlight></codeline>
<codeline lineno="486"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="487"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:<sp/>The<sp/>captured<sp/>data<sp/>value<sp/>collected<sp/>during<sp/>parsing<sp/>if<sp/>parsing</highlight></codeline>
<codeline lineno="488"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>succeeds,<sp/>a<sp/>GrammarError<sp/>exception<sp/>if<sp/>the<sp/>grammar<sp/>is<sp/>found<sp/>to</highlight></codeline>
<codeline lineno="489"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>incorrect,<sp/>or<sp/>a<sp/>ParseError<sp/>exception<sp/>if<sp/>the<sp/>sentence<sp/>fails</highlight></codeline>
<codeline lineno="490"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>match<sp/>the<sp/>grammar.</highlight></codeline>
<codeline lineno="491"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(words,<sp/>str):</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>words.split(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>target<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>:</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Exception(</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Target<sp/>{}<sp/>not<sp/>present<sp/>in<sp/>grammar<sp/>rules&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(target))</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>[target]</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_fail<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>opt<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>rule.options:</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Tree" kindref="compound">Tree</ref>(opt)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a550ef374b0c5d4de75007eb74090ce5f" kindref="member">_parse</ref>((T,<sp/>0),<sp/>words,<sp/>0)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ret<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>debug:</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(T.pretty_print())</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Simply<sp/>take<sp/>the<sp/>first<sp/>tree<sp/>that<sp/>successfully<sp/>parses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semantics_str<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acaa69542bedb3bb2c1a0766ec811558e" kindref="member">get_semantics</ref>(T).replace(</highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">).replace(</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semantics<sp/>=<sp/>yaml.safe_load(semantics_str)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>just<sp/>let<sp/>the<sp/>yaml<sp/>error<sp/>bubble<sp/>up,<sp/>the<sp/>will<sp/>give<sp/>a<sp/>nice<sp/>backtrace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>semantics</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>best_fail<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>best_fail<sp/>&lt;<sp/>ret:</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_fail<sp/>=<sp/>ret</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>best_fail<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1ParseError" kindref="compound">ParseError</ref>(words,<sp/>best_fail)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a550ef374b0c5d4de75007eb74090ce5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a550ef374b0c5d4de75007eb74090ce5f" kindref="member">_parse</ref>(self,<sp/>TIdx,<sp/>words,<sp/>word_index):</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Try<sp/>to<sp/>match<sp/>the<sp/>provided<sp/>words<sp/>on<sp/>the<sp/>given<sp/>grammar<sp/>rule<sp/>option.</highlight></codeline>
<codeline lineno="524"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="525"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>TIdx:<sp/>Tuple<sp/>of<sp/>grammar<sp/>Rule,<sp/>and<sp/>rule<sp/>alternative<sp/>index.</highlight></codeline>
<codeline lineno="526"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>words:<sp/>Words<sp/>to<sp/>match<sp/>on<sp/>the<sp/>alternative.</highlight></codeline>
<codeline lineno="527"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:param<sp/>word_index:<sp/>First<sp/>word<sp/>in<sp/>words<sp/>to<sp/>match<sp/>on<sp/>the<sp/>alternative.</highlight></codeline>
<codeline lineno="528"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:return:<sp/>On<sp/>successful<sp/>match<sp/>None<sp/>is<sp/>returned,<sp/>else<sp/>an<sp/>index<sp/>in<sp/>words</highlight></codeline>
<codeline lineno="529"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointing<sp/>at<sp/>the<sp/>position<sp/>that<sp/>failed<sp/>to<sp/>match.<sp/>Note<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="530"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>may<sp/>be<sp/>equal<sp/>to<sp/>the<sp/>number<sp/>of<sp/>words<sp/>(indicating<sp/>that</highlight></codeline>
<codeline lineno="531"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>are<sp/>missing).</highlight></codeline>
<codeline lineno="532"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(T,<sp/>idx)<sp/>=<sp/>TIdx</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>T:</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>ran<sp/>out<sp/>of<sp/>grammar.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(words)<sp/>==<sp/>word_index:</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>And<sp/>out<sp/>of<sp/>words<sp/>at<sp/>the<sp/>same<sp/>time,<sp/>hooray!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word_index</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(T.option.conjuncts)<sp/>==<sp/>idx:</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a550ef374b0c5d4de75007eb74090ce5f" kindref="member">_parse</ref>(T.next(idx),<sp/>words,<sp/>word_index)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>At<sp/>least<sp/>one<sp/>grammar<sp/>symbol<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj<sp/>=<sp/>T.option.conjuncts[idx]</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>conj.is_variable:</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Conjunct<sp/>is<sp/>a<sp/>sub-rule,<sp/>&apos;check_rules&apos;<sp/>ensures<sp/>a<sp/>sub-rule<sp/>exists,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>but<sp/>functions<sp/>may<sp/>introduce<sp/>new<sp/>sub-rule<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>conj.name<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>:</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1GrammarError" kindref="compound">GrammarError</ref>(</highlight><highlight class="stringliteral">&quot;Rule<sp/>&apos;{}&apos;<sp/>does<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(conj.name))</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>[conj.name].options</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>conj.name[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Conjunct<sp/>is<sp/>a<sp/>function<sp/>that<sp/>must<sp/>be<sp/>expanded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/>conj.name[1:]</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&apos;check_rules&apos;<sp/>ensures<sp/>the<sp/>function<sp/>exists,<sp/>but<sp/>a<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>$function<sp/>expansion<sp/>may<sp/>be<sp/>wrong.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>func_name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acc313c251ed7b7b9981e4bec30dead0d" kindref="member">functions</ref>:</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1GrammarError" kindref="compound">GrammarError</ref>(</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Function<sp/>&apos;{}&apos;<sp/>does<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(func_name))</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acc313c251ed7b7b9981e4bec30dead0d" kindref="member">functions</ref>[func_name](words[word_index:])</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>XXX<sp/>Expanded<sp/>result<sp/>should<sp/>not<sp/>refer<sp/>to<sp/>missing<sp/>sub-rules<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>functions.<sp/>However,<sp/>any<sp/>check<sp/>at<sp/>this<sp/>time<sp/>is<sp/>too<sp/>late.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Conjunct<sp/>is<sp/>an<sp/>actual<sp/>word.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>word_index<sp/>&gt;=<sp/>len(words):</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ran<sp/>out<sp/>of<sp/>words<sp/>but<sp/>not<sp/>out<sp/>of<sp/>grammar<sp/>terminals.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word_index</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>conj.name<sp/>==<sp/>words[word_index]:</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a550ef374b0c5d4de75007eb74090ce5f" kindref="member">_parse</ref>(T.next(idx),<sp/>words,<sp/>word_index<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word_index</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_fail<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>opt<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>options:</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtree<sp/>=<sp/>T.add_subtree(idx,<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Tree" kindref="compound">Tree</ref>(opt))</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a550ef374b0c5d4de75007eb74090ce5f" kindref="member">_parse</ref>((subtree,<sp/>0),<sp/>words,<sp/>word_index)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ret<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>best_fail<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>best_fail<sp/>&lt;<sp/>ret:</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best_fail<sp/>=<sp/>ret</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>best_fail<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best_fail</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a01dd7b5dd2c19668d7bd427a1601ea86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a01dd7b5dd2c19668d7bd427a1601ea86" kindref="member">next_word</ref>(self,<sp/>target,<sp/>words):</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>target<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>:</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>[target]</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_words<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>opt<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>rule.options:</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_words<sp/>+=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a5db09b7fc5c2811e8682ae95871877da" kindref="member">_next_word</ref>((<ref refid="classgrammar__parser_1_1cfgparser_1_1Tree" kindref="compound">Tree</ref>(opt),<sp/>0),<sp/>words)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_words</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a5db09b7fc5c2811e8682ae95871877da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a5db09b7fc5c2811e8682ae95871877da" kindref="member">_next_word</ref>(self,<sp/>TIdx,<sp/>words):</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(T,<sp/>idx)<sp/>=<sp/>TIdx</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>T:</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj<sp/>=<sp/>T.option.conjuncts[idx]</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>conj.is_variable:</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>conj.name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>:</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>[conj.name].options</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>conj.name[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/>conj.name[1:]</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a2917cc849a8e7391270b22a8ca1c2341" kindref="member">has_completion_function</ref>(func_name):</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a6b4793b7a26193a27c12fe8db01be8fc" kindref="member">get_completion_function</ref>(func_name)(words)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>words<sp/>==<sp/>[]:</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[conj.name]</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>conj.name<sp/>==<sp/>words[0]:</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a5db09b7fc5c2811e8682ae95871877da" kindref="member">_next_word</ref>(T.next(idx),<sp/>words[1:])</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[]</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_words<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>opt<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>options:</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subtree<sp/>=<sp/>T.add_subtree(idx,<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Tree" kindref="compound">Tree</ref>(opt))</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_words<sp/>+=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a5db09b7fc5c2811e8682ae95871877da" kindref="member">_next_word</ref>((subtree,<sp/>0),<sp/>words)</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_words</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a2917cc849a8e7391270b22a8ca1c2341" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a2917cc849a8e7391270b22a8ca1c2341" kindref="member">has_completion_function</ref>(self,<sp/>func_name):</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func_name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acc313c251ed7b7b9981e4bec30dead0d" kindref="member">functions</ref></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a6b4793b7a26193a27c12fe8db01be8fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a6b4793b7a26193a27c12fe8db01be8fc" kindref="member">get_completion_function</ref>(self,<sp/>func_name):</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1acc313c251ed7b7b9981e4bec30dead0d" kindref="member">functions</ref>[func_name]</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>@staticmethod</highlight></codeline>
<codeline lineno="648" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aeffed607010bb2ae519838fe75a4a3e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aeffed607010bb2ae519838fe75a4a3e5" kindref="member">graphviz_id</ref>():</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;CFGParser&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a937afc076896af0476cf3ae45ed66ea3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a937afc076896af0476cf3ae45ed66ea3" kindref="member">to_graphviz</ref>(self,<sp/>graph):</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>name,<sp/>rule<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>.items():</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.edge(self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aeffed607010bb2ae519838fe75a4a3e5" kindref="member">graphviz_id</ref>(),<sp/>rule.graphviz_id())</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule.to_graphviz(graph)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a61d849d538e2f9ffc8f470d11a9f1447" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a61d849d538e2f9ffc8f470d11a9f1447" kindref="member">visualize_options</ref>(self,<sp/>graph,<sp/>target_rule,<sp/>previous_words=None,<sp/>depth=2):</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_words<sp/>=<sp/>[]<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>previous_words<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>previous_words</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colors<sp/>=<sp/>itertools.cycle(</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;blue&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cyan&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;magenta&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;black&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;purple&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;orange&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>previous_words:</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_word<sp/>=<sp/>previous_words[-1]</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_word<sp/>=<sp/>target_rule</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.node(previous_word)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_words<sp/>=<sp/>set(self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a01dd7b5dd2c19668d7bd427a1601ea86" kindref="member">next_word</ref>(target_rule,<sp/>previous_words))</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>next_words<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>depth:</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>next_word<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>next_words:</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph.edge(previous_word,<sp/>next_word,<sp/>color=colors.next())</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a61d849d538e2f9ffc8f470d11a9f1447" kindref="member">visualize_options</ref>(graph,<sp/>target_rule,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous_words<sp/>+<sp/>[next_word],</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth=depth<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a1c694b10bca37bed8341b095c7262912" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a1c694b10bca37bed8341b095c7262912" kindref="member">get_unwrapped</ref>(self,<sp/>lname):</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>lname<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>:</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Exception(</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Target<sp/>{}<sp/>not<sp/>present<sp/>in<sp/>grammar<sp/>rules&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(lname))</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1ab6a0c51e3d7c2afc29665e788488d423" kindref="member">rules</ref>[lname]</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_strings<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>opt<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>rule.options:</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj_strings<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>conj<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>opt.conjuncts:</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>conj.is_variable:</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unwrapped_string<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a1c694b10bca37bed8341b095c7262912" kindref="member">get_unwrapped</ref>(conj.name)</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>unwrapped_string:</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj_strings.append(unwrapped_string)</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conj_strings.append(conj.name)</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt_strings.append(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">.join(conj_strings))</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">.join(opt_strings)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(opt_strings)<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/>s<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aef1f24105c012a19e4e826db915c04d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1aef1f24105c012a19e4e826db915c04d2" kindref="member">get_random_sentence</ref>(self,<sp/>lname):</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unwrapped<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1CFGParser_1a1c694b10bca37bed8341b095c7262912" kindref="member">get_unwrapped</ref>(lname)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;(%s)&quot;</highlight><highlight class="normal"><sp/>%<sp/>unwrapped</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>re.search(</highlight><highlight class="stringliteral">&apos;\([^)]+\)&apos;</highlight><highlight class="normal">,<sp/>spec):</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options<sp/>=<sp/>re.findall(</highlight><highlight class="stringliteral">&apos;\([^()]+\)&apos;</highlight><highlight class="normal">,<sp/>spec)</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>option<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>options:</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec<sp/>=<sp/>spec.replace(option,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random.choice(option[1:-1].split(</highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">)),<sp/>1)</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spec</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>graphviz</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="namespacegrammar__parser_1_1cfgparser_1a8c17657891cb6fac9077d45182d19dcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>grammar_file<sp/>=<sp/>sys.argv[1]</highlight></codeline>
<codeline lineno="725" refid="namespacegrammar__parser_1_1cfgparser_1a67dd590c752878b114c708a382b96cb4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rule<sp/>=<sp/>sys.argv[2]</highlight></codeline>
<codeline lineno="726" refid="namespacegrammar__parser_1_1cfgparser_1aa7ff86f3e26c3f5ba8427f1399404c31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>depth<sp/>=<sp/>int(sys.argv[3])</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="728" refid="classgrammar__parser_1_1cfgparser_1_1Visualizer" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Visualizer" kindref="compound">Visualizer</ref>:</highlight></codeline>
<codeline lineno="729" refid="classgrammar__parser_1_1cfgparser_1_1Visualizer_1afa5ea68de52b2d9ee62170cb8f7dd2e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Visualizer_1afa5ea68de52b2d9ee62170cb8f7dd2e7" kindref="member">__init__</ref>(self,<sp/>grammarfile):</highlight></codeline>
<codeline lineno="730" refid="classgrammar__parser_1_1cfgparser_1_1Visualizer_1a819b2f95e9b86ca0ee84fbca99a04516" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Visualizer_1a819b2f95e9b86ca0ee84fbca99a04516" kindref="member">parser</ref><sp/>=<sp/>CFGParser.fromfile(grammarfile)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732" refid="classgrammar__parser_1_1cfgparser_1_1Visualizer_1aca018f71017c3007abbf0c6c56dbba1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Visualizer_1aca018f71017c3007abbf0c6c56dbba1e" kindref="member">get_completion_function</ref>(self,<sp/>name):</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>[<ref refid="classgrammar__parser_1_1cfgparser_1_1Option" kindref="compound">Option</ref>(name,<sp/>[<ref refid="classgrammar__parser_1_1cfgparser_1_1Conjunct" kindref="compound">Conjunct</ref>(name.upper())])]</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735" refid="classgrammar__parser_1_1cfgparser_1_1Visualizer_1aeb5bbda408ca5442de1d21c2117eb250" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgrammar__parser_1_1cfgparser_1_1Visualizer_1aeb5bbda408ca5442de1d21c2117eb250" kindref="member">test</ref>(self,<sp/>rule,<sp/>depth):</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Visualizer_1a819b2f95e9b86ca0ee84fbca99a04516" kindref="member">parser</ref>.has_completion_function<sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>func_name:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Visualizer_1a819b2f95e9b86ca0ee84fbca99a04516" kindref="member">parser</ref>.get_completion_function<sp/>=<sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Visualizer_1aca018f71017c3007abbf0c6c56dbba1e" kindref="member">get_completion_function</ref></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/>graphviz.Digraph(strict=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgrammar__parser_1_1cfgparser_1_1Visualizer_1a819b2f95e9b86ca0ee84fbca99a04516" kindref="member">parser</ref>.visualize_options(g,<sp/>rule,<sp/>depth=int(depth))</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.render(</highlight><highlight class="stringliteral">&apos;options&apos;</highlight><highlight class="normal">,<sp/>view=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743" refid="namespacegrammar__parser_1_1cfgparser_1a4f309abc23df1f9a1709c344ae1ff343" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>tester<sp/>=<sp/><ref refid="classgrammar__parser_1_1cfgparser_1_1Visualizer" kindref="compound">Visualizer</ref>(grammar_file)</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>tester.test(rule,<sp/>depth=depth)</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/grammar_parser/src/grammar_parser/cfgparser.py"/>
  </compounddef>
</doxygen>
