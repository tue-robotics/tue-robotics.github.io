<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::windows::x11_window::X11Window</compoundname>
    <basecompoundref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow" prot="public" virt="non-virtual">dragonfly.windows.base_window.BaseWindow</basecompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a548cf1701cdd93072e76b84a3c1d44b6" prot="private" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.windows.x11_window.X11Window::_log</definition>
        <argsstring></argsstring>
        <name>_log</name>
        <initializer>=  logging.getLogger(&quot;window&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="60" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1aa732e8ec3cf2edde0a289006d96ceaf8" prot="public" static="yes" mutable="no">
        <type>string</type>
        <definition>string dragonfly.windows.x11_window.X11Window::wmctrl</definition>
        <argsstring></argsstring>
        <name>wmctrl</name>
        <initializer>=  &quot;wmctrl&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="66" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a66ef9f9f8f53e1ee65a7952ec262a83b" prot="public" static="yes" mutable="no">
        <type>string</type>
        <definition>string dragonfly.windows.x11_window.X11Window::xdotool</definition>
        <argsstring></argsstring>
        <name>xdotool</name>
        <initializer>=  &quot;xdotool&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="67" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1aac6fe7581b7658865577fc02211742b5" prot="public" static="yes" mutable="no">
        <type>string</type>
        <definition>string dragonfly.windows.x11_window.X11Window::xprop</definition>
        <argsstring></argsstring>
        <name>xprop</name>
        <initializer>=  &quot;xprop&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="68" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a3c19caf7fefc882ba0d0d47aebabf049" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.windows.x11_window.X11Window::_executable</definition>
        <argsstring></argsstring>
        <name>_executable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="229" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9c8e2f1c69f6540f9c15a842aca3d418" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.windows.x11_window.X11Window::_pid</definition>
        <argsstring></argsstring>
        <name>_pid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="228" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="228" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a646bdfe788868e84c5c1afc0f1a4226d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._get_class_name</definition>
        <argsstring>(self)</argsstring>
        <name>_get_class_name</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6cf2c04f26483b16c62da6589c5a8b2b">_get_class_name</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="283" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a5594eee0eff5b728789696cdd19f2641" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._get_properties_from_xprop</definition>
        <argsstring>(self, *properties)</argsstring>
        <name>_get_properties_from_xprop</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>*</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="238" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="238" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a800a21b4b0c70a2c5349296de19ac81e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._get_window_module</definition>
        <argsstring>(self)</argsstring>
        <name>_get_window_module</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a8dd171828bf9d20d782f3e4a09788685">_get_window_module</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="356" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="356" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a417c7d5f45edd8cd626554a51639329c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._get_window_pid</definition>
        <argsstring>(self)</argsstring>
        <name>_get_window_pid</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aea79158ee43cebfa2bd3cd32910ba1b9">_get_window_pid</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="287" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="287" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1aafa0cac8e3d2debd923abce189f183e9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._get_window_text</definition>
        <argsstring>(self)</argsstring>
        <name>_get_window_text</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a7076edafa3d390321a8207b10ca1877b">_get_window_text</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="273" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="273" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1ad9bc6c2da0797c384fc3f7cd34b431a8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._is_maximized</definition>
        <argsstring>(cls, state)</argsstring>
        <name>_is_maximized</name>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" kindref="member">cls</ref></type>
          <defname>cls</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a670613698b31122660eefc8f32a0063c" kindref="member">state</ref></type>
          <defname>state</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="386" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="386" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a6201c794efe6646acd99163b94c6ad43" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._is_minimized</definition>
        <argsstring>(cls, state)</argsstring>
        <name>_is_minimized</name>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" kindref="member">cls</ref></type>
          <defname>cls</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a670613698b31122660eefc8f32a0063c" kindref="member">state</ref></type>
          <defname>state</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="373" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="373" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a7763e6f1dce989cf17ea3abbf59dd012" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._no_window_state</definition>
        <argsstring>(self)</argsstring>
        <name>_no_window_state</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="353" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="353" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a26f25f283742483c75e0579e991465f8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._run_command</definition>
        <argsstring>(cls, command, arguments)</argsstring>
        <name>_run_command</name>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" kindref="member">cls</ref></type>
          <defname>cls</defname>
        </param>
        <param>
          <type>command</type>
          <defname>command</defname>
        </param>
        <param>
          <type>arguments</type>
          <defname>arguments</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Run a command with arguments and return the result.

:param command: command to run
:type command: str
:param arguments: arguments to append
:type arguments: list
:returns: stdout, return_code
:rtype: tuple
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="71" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="71" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a648267f2ea2025928b80faef16869a49" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._run_command_simple</definition>
        <argsstring>(cls, exe, arguments)</argsstring>
        <name>_run_command_simple</name>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" kindref="member">cls</ref></type>
          <defname>cls</defname>
        </param>
        <param>
          <type>exe</type>
          <defname>exe</defname>
        </param>
        <param>
          <type>arguments</type>
          <defname>arguments</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="118" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="118" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1ab2cb01676cf182e24186f0c07b6d4289" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._run_wmctrl_command_simple</definition>
        <argsstring>(cls, arguments)</argsstring>
        <name>_run_wmctrl_command_simple</name>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" kindref="member">cls</ref></type>
          <defname>cls</defname>
        </param>
        <param>
          <type>arguments</type>
          <defname>arguments</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="126" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a1e5a2e3ece762333a234322ffce7087d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._run_xdotool_command</definition>
        <argsstring>(cls, arguments)</argsstring>
        <name>_run_xdotool_command</name>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" kindref="member">cls</ref></type>
          <defname>cls</defname>
        </param>
        <param>
          <type>arguments</type>
          <defname>arguments</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="130" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1ae124f39ebfc4cb25b7576220afe88087" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._run_xdotool_command_simple</definition>
        <argsstring>(cls, arguments)</argsstring>
        <name>_run_xdotool_command_simple</name>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" kindref="member">cls</ref></type>
          <defname>cls</defname>
        </param>
        <param>
          <type>arguments</type>
          <defname>arguments</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="134" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a19700d7f47060d3c9b741e96ca1c9d7d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._run_xprop_command</definition>
        <argsstring>(cls, arguments)</argsstring>
        <name>_run_xprop_command</name>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" kindref="member">cls</ref></type>
          <defname>cls</defname>
        </param>
        <param>
          <type>arguments</type>
          <defname>arguments</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="138" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1aedb65a46376f8d3a48d1b4f85da268b3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window._toggle_maximize</definition>
        <argsstring>(self, is_maximized)</argsstring>
        <name>_toggle_maximize</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1adbd932eeb2e152beda8857c4f57e526c" kindref="member">is_maximized</ref></type>
          <defname>is_maximized</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="454" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="454" bodyend="463"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1afd6d2fdfa880884d99cf971ad6f62de2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.__init__</definition>
        <argsstring>(self, id)</argsstring>
        <name>__init__</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aabd0a8a77bd6de9e4da12e2a5c7fdbe6">__init__</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aafd3621964165a581372cf27740f88d4" kindref="member">id</ref></type>
          <defname>id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="226" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="226" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a4feaf3fbb8ce40b8019bc3b5fe507760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.__repr__</definition>
        <argsstring>(self)</argsstring>
        <name>__repr__</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a3d7dfc6c1540135d3488931af373dd5a">__repr__</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="231" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a96c902ed22cdc0f187f5f8fd92108739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.close</definition>
        <argsstring>(self)</argsstring>
        <name>close</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a12652977c2e2439eb4018607b11d72ac">close</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Close the window (if possible). </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="481" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="481" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.cls</definition>
        <argsstring>(self)</argsstring>
        <name>cls</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read-only access to the window&apos;s class. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="299" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="299" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1aacff9565e324b399ff2f720721b3711d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.get_all_windows</definition>
        <argsstring>(cls)</argsstring>
        <name>get_all_windows</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1adbfb949d694a91d2b324fbeb01ed0917">get_all_windows</reimplements>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" kindref="member">cls</ref></type>
          <defname>cls</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Get a list of all windows. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="155" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="155" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a646506b29524989a6930e7fe7cebf934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.get_foreground</definition>
        <argsstring>(cls)</argsstring>
        <name>get_foreground</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a84081bfe7e50f0d97e95c0b9c0f4956f">get_foreground</reimplements>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" kindref="member">cls</ref></type>
          <defname>cls</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Get the foreground window. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="145" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="145" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1abae7f1a8267730ec567387564ab4d84e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.get_matching_windows</definition>
        <argsstring>(cls, executable=None, title=None)</argsstring>
        <name>get_matching_windows</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae63505f0d06f4f15608559fa3cdacac0">get_matching_windows</reimplements>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" kindref="member">cls</ref></type>
          <defname>cls</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a5e8da6c3a06d69a730966eebc18ae309" kindref="member">executable</ref></type>
          <defname>executable</defname>
          <defval>None</defval>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aa4cccd9b2275816052dbc7b5d96ba438" kindref="member">title</ref></type>
          <defname>title</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Find windows with a matching executable or title.

Window searches are case-insensitive.

If neither parameter is be specified, then it is effectively the
same as calling :meth:`get_all_windows`.

:param executable: -- part of the filename of the application&apos;s
   executable to which the target window belongs; not case
   sensitive.
:param title: -- part of the title of the target window; not case
   sensitive.
:type executable: str
:type title: str
:rtype: list
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="184" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="184" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a866d6cb4744bd08b24d53ba89e858346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.get_position</definition>
        <argsstring>(self)</argsstring>
        <name>get_position</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a13ea545de11bbe7b77f1bbc9ed1ce5c7">get_position</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method to get the window&apos;s position as a :class:`Rectangle` object.

:returns: window position
:rtype: Rectangle
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="424" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="424" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9eecfad9d5e6cae00d914631cc20daea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.is_focused</definition>
        <argsstring>(self)</argsstring>
        <name>is_focused</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the window has input focus.

This does not work for all window types (e.g. pop up menus).

:rtype: bool
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="410" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="410" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1ad0647c4b964c14346079a4878b812ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.is_fullscreen</definition>
        <argsstring>(self)</argsstring>
        <name>is_fullscreen</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the window is in fullscreen mode.

This does not work for all window types (e.g. pop up menus).

:rtype: bool
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="398" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="398" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1adbd932eeb2e152beda8857c4f57e526c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.is_maximized</definition>
        <argsstring>(self)</argsstring>
        <name>is_maximized</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a054543ac6fa58bb2c3eaca54f1d7090b">is_maximized</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the window is currently maximized. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="394" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="394" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1ade0886b1d3fb6d95dff386ee83d89f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.is_minimized</definition>
        <argsstring>(self)</argsstring>
        <name>is_minimized</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae82ec1ff8d09bfa29e532d9b6e1836ac">is_minimized</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the window is currently minimized. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="377" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="377" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a2b59421144c192a016ecbc5761a1f748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.is_visible</definition>
        <argsstring>(self)</argsstring>
        <name>is_visible</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aad542c59bde2625ef31e455d72fc575f">is_visible</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the window is currently visible.

This may be indeterminable for some windows.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="381" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="381" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1afe6ca732399057ff42982d922ae9b027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.maximize</definition>
        <argsstring>(self)</argsstring>
        <name>maximize</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a2ebbc5e073901c89de326dfc0c76499f">maximize</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Maximize the window (if possible). </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="464" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="464" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a8952b07136dc2726ff6585b094d64ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.minimize</definition>
        <argsstring>(self)</argsstring>
        <name>minimize</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae54394ad507ce64f864183d21f799626">minimize</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Minimize the window (if possible). </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="449" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="449" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a60b7ccfeeb2c1c015560634d0c620145" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.restore</definition>
        <argsstring>(self)</argsstring>
        <name>restore</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a4188b2e6ced452189f14043e9e42eb53">restore</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Restore the window if it is minimized or maximized. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="469" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="469" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a66b32b888f7981a474d18a2f33ce0091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.role</definition>
        <argsstring>(self)</argsstring>
        <name>role</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read-only access to the window&apos;s X11 role attribute.

:returns: role
:rtype: str
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="305" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="305" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a16a1f33df3834228b5ff9c723eba03ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.set_focus</definition>
        <argsstring>(self)</argsstring>
        <name>set_focus</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a17184bd383bf416ff5165187615b8b10">set_focus</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Set the input focus to this window.

This method will set the input focus, but will not necessarily bring
the window to the front.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="503" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="503" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a26112e9b1e7e8a311a933ba61854df02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.set_foreground</definition>
        <argsstring>(self)</argsstring>
        <name>set_foreground</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a8853b8be6978da5ca290e38328c86e31">set_foreground</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Set the window as the foreground (active) window. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="491" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="491" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a633c144f300658cbedeb5dad17aed4a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.set_position</definition>
        <argsstring>(self, rectangle)</argsstring>
        <name>set_position</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae0210d010dc268245814dabdd17b3715">set_position</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>rectangle</type>
          <defname>rectangle</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method to set the window&apos;s position using a :class:`Rectangle`
object.

:param rectangle: window position
:type rectangle: Rectangle
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="438" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="438" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a670613698b31122660eefc8f32a0063c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.state</definition>
        <argsstring>(self)</argsstring>
        <name>state</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read-only access to the X window state.

Windows can have multiple states, so this returns a tuple.

This property invokes a (relatively) long-running function, so
store the result locally instead of using it multiple times.

If the window does not have the _NET_WM_STATE property, then
``None`` will be returned.

:return: window state (if any)
:rtype: tuple | None
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="327" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="327" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1af9f6f84ef166ceb4897b0053f642539f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.x11_window.X11Window.type</definition>
        <argsstring>(self)</argsstring>
        <name>type</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Read-only access to the window&apos;s X11 type property, if it is set.

:returns: type
:rtype: str
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="316" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="316" bodyend="325"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>    The Window class is an interface to the window control and
    placement APIs for X11.

    Window control methods such as :meth:`close` will return ``True``
    if successful.

    This class requires the following external programs:

    * ``wmctrl``
    * ``xdotool``
    * ``xprop``</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dragonfly.windows.base_window.BaseWindow</label>
        <link refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>object</label>
      </node>
      <node id="1">
        <label>dragonfly.windows.x11_window.X11Window</label>
        <link refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>string</label>
      </node>
      <node id="2">
        <label>dragonfly.windows.base_window.BaseWindow</label>
        <link refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>object</label>
      </node>
      <node id="1">
        <label>dragonfly.windows.x11_window.X11Window</label>
        <link refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>wmctrl</edgelabel>
          <edgelabel>xprop</edgelabel>
          <edgelabel>xdotool</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" line="44" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/x11_window.py" bodystart="44" bodyend="513"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1afd6d2fdfa880884d99cf971ad6f62de2" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a4feaf3fbb8ce40b8019bc3b5fe507760" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>__repr__</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a3c19caf7fefc882ba0d0d47aebabf049" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_executable</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a646bdfe788868e84c5c1afc0f1a4226d" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_get_class_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6593032dc95a7b4e27d04892631139b6" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_get_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a5594eee0eff5b728789696cdd19f2641" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_get_properties_from_xprop</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a800a21b4b0c70a2c5349296de19ac81e" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_get_window_module</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a417c7d5f45edd8cd626554a51639329c" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_get_window_pid</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1aafa0cac8e3d2debd923abce189f183e9" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_get_window_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6598c4f857f23d3069a634de4a0149ee" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_handle</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a10fc38af0c7bbe6f9280bfe80cab2d8d" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_id</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1ad9bc6c2da0797c384fc3f7cd34b431a8" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_is_maximized</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a6201c794efe6646acd99163b94c6ad43" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_is_minimized</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a548cf1701cdd93072e76b84a3c1d44b6" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_log</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a15d67b10b96f9aeb2216c50497d62b2c" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_names</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a7763e6f1dce989cf17ea3abbf59dd012" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_no_window_state</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9c8e2f1c69f6540f9c15a842aca3d418" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_pid</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a26f25f283742483c75e0579e991465f8" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_run_command</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a648267f2ea2025928b80faef16869a49" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_run_command_simple</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1ab2cb01676cf182e24186f0c07b6d4289" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_run_wmctrl_command_simple</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a1e5a2e3ece762333a234322ffce7087d" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_run_xdotool_command</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1ae124f39ebfc4cb25b7576220afe88087" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_run_xdotool_command_simple</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a19700d7f47060d3c9b741e96ca1c9d7d" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_run_xprop_command</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1adc865e2370736d8530a35d6f5685621c" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_set_id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1acb76f95c3524e7ab4af217fe3503c8a5" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_set_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1aedb65a46376f8d3a48d1b4f85da268b3" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_toggle_maximize</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1af5cb30f0e630414e8de4f9dd02f26d39" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_windows_by_id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a0ad233d03d4e560d508b0736383db477" prot="private" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>_windows_by_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ac94cb76eacb9388cd7be1c9ea68d2c5a" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>classname</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a96c902ed22cdc0f187f5f8fd92108739" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>close</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9853521aff32346ae97d46be556fecb4" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>cls</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a84fb1bafed13d3b11bfc81bed9ff322a" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>cls_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a5e8da6c3a06d69a730966eebc18ae309" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>executable</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1aacff9565e324b399ff2f720721b3711d" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>get_all_windows</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ad8de679f418d9412a06874c1630b6534" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>get_containing_monitor</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a646506b29524989a6930e7fe7cebf934" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>get_foreground</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1abae7f1a8267730ec567387564ab4d84e" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>get_matching_windows</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ab0adffc385c1b0ccf78cf6dde5c2b74a" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>get_normalized_position</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a866d6cb4744bd08b24d53ba89e858346" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>get_position</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a43e64fdfd70a455a370111b9db11fe48" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>get_window</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a41b1b75df4528228d6a1efb88baf3b82" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>handle</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aafd3621964165a581372cf27740f88d4" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a2f7ff8a1bc21cb8aff7d979f8d40a0b7" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1afa9b8c8c3a5b8a014c687ae8daa69b19" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>id</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a9eecfad9d5e6cae00d914631cc20daea" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>is_focused</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1ad0647c4b964c14346079a4878b812ccf" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>is_fullscreen</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1adbd932eeb2e152beda8857c4f57e526c" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>is_maximized</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1ade0886b1d3fb6d95dff386ee83d89f47" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>is_minimized</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a2b59421144c192a016ecbc5761a1f748" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>is_visible</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a51b031395547a6e6a928b2dba548c816" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>matches</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1afe6ca732399057ff42982d922ae9b027" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>maximize</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a8952b07136dc2726ff6585b094d64ba6" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>minimize</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a9c169cac5d5606d14435f4cec535e364" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>move</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1af8151df04e705f0d77e580dee54b0d7e" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a493027bd096357de25501607bbd66b50" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>pid</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a60b7ccfeeb2c1c015560634d0c620145" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>restore</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a66b32b888f7981a474d18a2f33ce0091" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>role</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a16a1f33df3834228b5ff9c723eba03ab" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>set_focus</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a26112e9b1e7e8a311a933ba61854df02" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>set_foreground</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a4801ac838456acd27b30cddf4aae609c" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>set_normalized_position</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a633c144f300658cbedeb5dad17aed4a2" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>set_position</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a670613698b31122660eefc8f32a0063c" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>state</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aa4cccd9b2275816052dbc7b5d96ba438" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>title</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1af9f6f84ef166ceb4897b0053f642539f" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>type</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1aa732e8ec3cf2edde0a289006d96ceaf8" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>wmctrl</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1a66ef9f9f8f53e1ee65a7952ec262a83b" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>xdotool</name></member>
      <member refid="classdragonfly_1_1windows_1_1x11__window_1_1X11Window_1aac6fe7581b7658865577fc02211742b5" prot="public" virt="non-virtual"><scope>dragonfly::windows::x11_window::X11Window</scope><name>xprop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
