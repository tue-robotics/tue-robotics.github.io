<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="parse_8py" kind="file" language="Python">
    <compoundname>parse.py</compoundname>
    <innerclass refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer" prot="public">dragonfly::parsing::parse::CompoundTransformer</innerclass>
    <innerclass refid="classdragonfly_1_1parsing_1_1parse_1_1ParseError" prot="public">dragonfly::parsing::parse::ParseError</innerclass>
    <innernamespace refid="namespacedragonfly_1_1parsing_1_1parse">dragonfly::parsing::parse</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacedragonfly_1_1parsing_1_1parse" refkind="compound"><highlight class="keyword">from</highlight><highlight class="normal"><sp/>lark<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Lark,<sp/>Transformer</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements__basic" kindref="compound">dragonfly.grammar.elements_basic</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>(Literal,<sp/>Optional,<sp/>Sequence,</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alternative,<sp/>Empty)</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="namespacedragonfly_1_1parsing_1_1parse_1a0114ac964441d6c1cf56ea282f0ba3a5" refkind="member"><highlight class="normal">grammar_string<sp/>=<sp/></highlight><highlight class="stringliteral">r&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral">?start:<sp/>alternative</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral">//<sp/>?<sp/>means<sp/>that<sp/>the<sp/>rule<sp/>will<sp/>be<sp/>inlined<sp/>iff<sp/>there<sp/>is<sp/>a<sp/>single<sp/>child</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral">?alternative:<sp/>sequence<sp/>(&quot;|&quot;<sp/>sequence)*</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral">?sequence:<sp/>single*</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>sequence<sp/>&quot;{&quot;<sp/>WORD<sp/>&quot;}&quot;<sp/><sp/>-&gt;<sp/>special</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral">?single:<sp/>WORD+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>literal</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;&lt;&quot;<sp/>WORD<sp/>&quot;&gt;&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>reference</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;[&quot;<sp/>alternative<sp/>&quot;]&quot;<sp/><sp/>-&gt;<sp/>optional</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&quot;(&quot;<sp/>alternative<sp/>&quot;)&quot;</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral">//<sp/>Match<sp/>anything<sp/>which<sp/>is<sp/>not<sp/>whitespace<sp/>or<sp/>a<sp/>control<sp/>character,</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral">//<sp/>we<sp/>will<sp/>let<sp/>the<sp/>engine<sp/>handle<sp/>invalid<sp/>words</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral">WORD:<sp/>/[^\s\[\]&lt;&gt;|(){}]+/</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">%import<sp/>common.WS_INLINE</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral">%ignore<sp/>WS_INLINE</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="namespacedragonfly_1_1parsing_1_1parse_1ad218d117401de79879312e39a40148f0" refkind="member"><highlight class="normal">spec_parser<sp/>=<sp/>Lark(</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>grammar_string,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>parser=</highlight><highlight class="stringliteral">&quot;lalr&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classdragonfly_1_1parsing_1_1parse_1_1ParseError" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1parsing_1_1parse_1_1ParseError" kindref="compound">ParseError</ref>(Exception):</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer" kindref="compound">CompoundTransformer</ref>(Transformer):</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Visits<sp/>each<sp/>node<sp/>of<sp/>the<sp/>parse<sp/>tree<sp/>starting<sp/>with<sp/>the<sp/>leaves</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>working<sp/>up,<sp/>replacing<sp/>lark<sp/>Tree<sp/>objects<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appropriate<sp/>dragonfly<sp/>classes.</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a0cb9b7311dc9f11f8f30962a6c08f472" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a0cb9b7311dc9f11f8f30962a6c08f472" kindref="member">__init__</ref>(self,<sp/>extras=None,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="43" refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a59879f6b06448766a9a33f941e2a06df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a59879f6b06448766a9a33f941e2a06df" kindref="member">extras</ref><sp/>=<sp/>extras<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Transformer.__init__(self,<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1aa6b0764f3c81bca1d775e7aaca2e4286" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1aa6b0764f3c81bca1d775e7aaca2e4286" kindref="member">optional</ref>(self,<sp/>args):</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Optional" kindref="compound">Optional</ref>(args[0])</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a027785c9e8fbe55fbb79cc004ebe1c92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a027785c9e8fbe55fbb79cc004ebe1c92" kindref="member">literal</ref>(self,<sp/>args):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Literal" kindref="compound">Literal</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">.join(args))</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a157e036ca7ff77f349f64c7d07f657d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a157e036ca7ff77f349f64c7d07f657d3" kindref="member">sequence</ref>(self,<sp/>args):</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Sequence" kindref="compound">Sequence</ref>(args)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a17d6474e4c48fea8867fee34ece63a85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a17d6474e4c48fea8867fee34ece63a85" kindref="member">alternative</ref>(self,<sp/>args):</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1Alternative" kindref="compound">Alternative</ref>(args)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a793da19261d807c77971b67e5ef08d79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a793da19261d807c77971b67e5ef08d79" kindref="member">reference</ref>(self,<sp/>args):</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref<sp/>=<sp/>args[0]</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1a59879f6b06448766a9a33f941e2a06df" kindref="member">extras</ref>[ref]</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>KeyError:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>reference<sp/>name<sp/>%r&quot;</highlight><highlight class="normal"><sp/>%<sp/>(str(ref)))</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1ac5e832fff060ae143fbed277a92c0bd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer_1ac5e832fff060ae143fbed277a92c0bd5" kindref="member">special</ref>(self,<sp/>args):</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child,<sp/>specifier<sp/>=<sp/>args</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>specifier:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>value<sp/>=<sp/>specifier.split(</highlight><highlight class="stringliteral">&apos;=&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Try<sp/>to<sp/>convert<sp/>the<sp/>value<sp/>to<sp/>a<sp/>bool,<sp/>None<sp/>or<sp/>a<sp/>float.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>value<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;True&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;False&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>bool(value)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>value<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;None&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>float(value)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>ValueError:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Conversion<sp/>failed,<sp/>value<sp/>is<sp/>just<sp/>a<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,<sp/>value<sp/>=<sp/>specifier,<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;weight&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child.weight<sp/>=<sp/>float(value)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;test_special&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child.test_special<sp/>=<sp/>value</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classdragonfly_1_1parsing_1_1parse_1_1ParseError" kindref="compound">ParseError</ref>(</highlight><highlight class="stringliteral">&quot;Unrecognized<sp/>special<sp/>specifier:<sp/>{%s}&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specifier)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>child</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/parsing/parse.py"/>
  </compounddef>
</doxygen>
