<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="backend__natlink_2compiler_8py" kind="file" language="Python">
    <compoundname>backend_natlink/compiler.py</compoundname>
    <innerclass refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler" prot="public">dragonfly::engines::backend_natlink::compiler::_Compiler</innerclass>
    <innerclass refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler" prot="public">dragonfly::engines::backend_natlink::compiler::NatlinkCompiler</innerclass>
    <innernamespace refid="namespacedragonfly_1_1engines_1_1backend__natlink_1_1compiler">dragonfly::engines::backend_natlink::compiler</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacedragonfly_1_1engines_1_1backend__natlink_1_1compiler" refkind="compound"><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Dragonfly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(c)<sp/>Copyright<sp/>2007,<sp/>2008<sp/>by<sp/>Christo<sp/>Butcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>LGPL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>Dragonfly.<sp/><sp/>If<sp/>not,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>file<sp/>implements<sp/>the<sp/>compiler<sp/>class<sp/>for<sp/>Natlink.</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>struct</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>six<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>string_types,<sp/>text_type</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>locale<sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>getpreferredencoding</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar" kindref="compound">dragonfly.grammar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>elements<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>elements_</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines_1_1base" kindref="compound">dragonfly.engines.base</ref><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>CompilerBase,<sp/>CompilerError</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">#===========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler" kindref="compound">NatlinkCompiler</ref>(CompilerBase):</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>compiling<sp/>grammars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a580cc469c0749b0563f2d42b2155a2bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a580cc469c0749b0563f2d42b2155a2bb" kindref="member">compile_grammar</ref>(self,<sp/>grammar):</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.debug(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Compiling<sp/>grammar<sp/>%s.&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self,<sp/>grammar.name))</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler<sp/>=<sp/><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler" kindref="compound">_Compiler</ref>()</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>rule<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>grammar.rules:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a446e930982eb6067fe0284deaecb23b5" kindref="member">_compile_rule</ref>(rule,<sp/>compiler)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiled_grammar<sp/>=<sp/>compiler.compile()</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_names<sp/>=<sp/>compiler.rule_names</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print<sp/>compiler.debug_state_string()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(compiled_grammar,<sp/>rule_names)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a446e930982eb6067fe0284deaecb23b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a446e930982eb6067fe0284deaecb23b5" kindref="member">_compile_rule</ref>(self,<sp/>rule,<sp/>compiler):</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.debug(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Compiling<sp/>rule<sp/>%s.&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self,<sp/>rule.name))</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>rule.imported:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.start_rule_definition(rule.name,<sp/>exported=rule.exported)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.compile_element(rule.element,<sp/>compiler)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.end_rule_definition()</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>compiling<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1ae0a185e5a1c222bc5e004fdee13961d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1ae0a185e5a1c222bc5e004fdee13961d1" kindref="member">_compile_sequence</ref>(self,<sp/>element,<sp/>compiler):</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children<sp/>=<sp/>element.children</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(children)<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Compile<sp/>Sequence<sp/>and<sp/>Repetition<sp/>elements<sp/>differently.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_rep<sp/>=<sp/>isinstance(element,<sp/>elements_.Repetition)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_rep<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>element.optimize:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.start_repetition()</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.compile_element(children[0],<sp/>compiler)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.end_repetition()</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.start_sequence()</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>children:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.compile_element(c,<sp/>compiler)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.end_sequence()</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>len(children)<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.compile_element(children[0],<sp/>compiler)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a610de039292adf6555b13906a5d9ed4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a610de039292adf6555b13906a5d9ed4d" kindref="member">_compile_alternative</ref>(self,<sp/>element,<sp/>compiler):</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children<sp/>=<sp/>element.children</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(children)<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.start_alternative()</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>c<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>children:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.compile_element(c,<sp/>compiler)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.end_alternative()</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>len(children)<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.compile_element(children[0],<sp/>compiler)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a36d3a7afd370c98047d92bb84b0782de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a36d3a7afd370c98047d92bb84b0782de" kindref="member">_compile_optional</ref>(self,<sp/>element,<sp/>compiler):</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.start_optional()</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.compile_element(element.children[0],<sp/>compiler)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.end_optional()</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1af1f90375019744bd40547a661e1f2256" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1af1f90375019744bd40547a661e1f2256" kindref="member">_compile_literal</ref>(self,<sp/>element,<sp/>compiler):</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Use<sp/>the<sp/>element&apos;s<sp/>words<sp/>extension<sp/>property<sp/>to<sp/>enable<sp/>use<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>quoted<sp/>words.<sp/>DNS<sp/>will<sp/>receive<sp/>quoted<sp/>words<sp/>as<sp/>single<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>can<sp/>help<sp/>with<sp/>accuracy<sp/>in<sp/>some<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>element.words_ext</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(words)<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.add_word(words[0])</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>len(words)<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.start_sequence()</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>w<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>words:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.add_word(w)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.end_sequence()</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1add7133c0af893c3a652240dc0078f1b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1add7133c0af893c3a652240dc0078f1b2" kindref="member">_compile_rule_ref</ref>(self,<sp/>element,<sp/>compiler):</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.add_rule(element.rule.name,<sp/>imported=element.rule.imported)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a46f918a4eb1eb12087b38d8d783c78eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a46f918a4eb1eb12087b38d8d783c78eb" kindref="member">_compile_list_ref</ref>(self,<sp/>element,<sp/>compiler):</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.add_list(element.list.name)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1af1741558fe59fe1058d8cf97e4a83416" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1af1741558fe59fe1058d8cf97e4a83416" kindref="member">_compile_dictation</ref>(self,<sp/>element,<sp/>compiler):</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.add_rule(</highlight><highlight class="stringliteral">&quot;dgndictation&quot;</highlight><highlight class="normal">,<sp/>imported=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1ad72d0eb38c09073156b42eb47e21f65a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1ad72d0eb38c09073156b42eb47e21f65a" kindref="member">_compile_impossible</ref>(self,<sp/>element,<sp/>compiler):</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.add_list(</highlight><highlight class="stringliteral">&quot;_empty_list&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a1800c224589ac7379a147b1eceea3672" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1NatlinkCompiler_1a1800c224589ac7379a147b1eceea3672" kindref="member">_compile_empty</ref>(self,<sp/>element,<sp/>compiler):</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">#===========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Internal<sp/>compiler<sp/>class<sp/>which<sp/>takes<sp/>care<sp/>of<sp/>the<sp/>binary<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/>used<sp/>to<sp/>specify<sp/>grammars<sp/>with<sp/>Dragon<sp/>NaturallySpeaking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">_Compiler(object):</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Numeric<sp/>values<sp/>used<sp/>in<sp/>the<sp/>binary<sp/>form<sp/>of<sp/>rule<sp/>definitions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa00f09e3e19b211c97710934071cc0d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_start_type<sp/>=<sp/>1;<sp/>_end_type<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="136" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a7ed66b80889a5444701a2b9e79728333" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_word_type<sp/>=<sp/>3;<sp/>_rule_type<sp/>=<sp/>4;<sp/>_list_type<sp/>=<sp/>6</highlight></codeline>
<codeline lineno="137" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1ac104977bf801fdea239c529016d6fd58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_seq_value<sp/>=<sp/>1;<sp/>_alt_value<sp/>=<sp/>2;<sp/>_rep_value<sp/>=<sp/>3;<sp/>_opt_value<sp/>=<sp/>4</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a7c1303b90ad1a6150e5d1c6e862df494" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a7c1303b90ad1a6150e5d1c6e862df494" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="140" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa1a2b10aa9836baa6b6f85ef95746626" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa1a2b10aa9836baa6b6f85ef95746626" kindref="member">_words</ref><sp/>=<sp/>[];<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a7052d9f3a0eeb78b9dfbbb89c0a92cbd" kindref="member">_lists</ref><sp/>=<sp/>[];<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a141ccec888f509e6c27135915a52dd46" kindref="member">_rules</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="141" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1adfa040b4a983f9a066ce5af48b3ccab6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1adfa040b4a983f9a066ce5af48b3ccab6" kindref="member">_import_rules</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="142" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a818a4a4d42bd452c9339087d8dd9208b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a818a4a4d42bd452c9339087d8dd9208b" kindref="member">_export_rules</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="143" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a33734861ae7c118b42b2b20dc548aea0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a33734861ae7c118b42b2b20dc548aea0" kindref="member">_rule_definitions</ref><sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1ae294df416bbcaf22ea81e4131c775428" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1ae294df416bbcaf22ea81e4131c775428" kindref="member">_current_rule_export</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1af154eaa79ad17f7feacc3a6754de269d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1af154eaa79ad17f7feacc3a6754de269d" kindref="member">start_rule_definition</ref>(self,<sp/>name,<sp/>exported=False):</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;start<sp/>defining<sp/>a<sp/>rule.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>no<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>start<sp/>defining<sp/>a<sp/>rule<sp/>while&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;a<sp/>different<sp/>rule<sp/>is<sp/>already<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>isinstance(name,<sp/>string_types),<sp/>(</highlight><highlight class="stringliteral">&quot;The<sp/>rule<sp/>name<sp/>must<sp/>be<sp/>a&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>string,<sp/>received<sp/>%r.&quot;</highlight><highlight class="normal"><sp/>%<sp/>name)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref><sp/>=<sp/>name</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1ae294df416bbcaf22ea81e4131c775428" kindref="member">_current_rule_export</ref><sp/>=<sp/>exported</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a6c7d7f481d4a18f07482e077747799ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a6c7d7f481d4a18f07482e077747799ba" kindref="member">end_rule_definition</ref>(self):</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;End<sp/>defining<sp/>a<sp/>rule.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>a<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>end<sp/>defining<sp/>a<sp/>rule<sp/>when&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>rule<sp/>is<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>that<sp/>no<sp/>other<sp/>rule<sp/>has<sp/>been<sp/>defined<sp/>with<sp/>this<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a33734861ae7c118b42b2b20dc548aea0" kindref="member">_rule_definitions</ref>:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Rule<sp/>&apos;%s&apos;<sp/>defined<sp/>more<sp/>than<sp/>once.&quot;</highlight><highlight class="normal"><sp/>%<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>this<sp/>rule<sp/>has<sp/>not<sp/>been<sp/>used<sp/>before,<sp/>register<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a141ccec888f509e6c27135915a52dd46" kindref="member">_rules</ref>:</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a141ccec888f509e6c27135915a52dd46" kindref="member">_rules</ref>.append(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1ae294df416bbcaf22ea81e4131c775428" kindref="member">_current_rule_export</ref>:</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a818a4a4d42bd452c9339087d8dd9208b" kindref="member">_export_rules</ref>.append(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a33734861ae7c118b42b2b20dc548aea0" kindref="member">_rule_definitions</ref>[self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>]<sp/>=<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1ae294df416bbcaf22ea81e4131c775428" kindref="member">_current_rule_export</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Compound<sp/>structures<sp/>in<sp/>a<sp/>rule<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9d5b9bdb43d7cebd9f2a1b55372c5688" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9d5b9bdb43d7cebd9f2a1b55372c5688" kindref="member">start_sequence</ref>(self):</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;start<sp/>a<sp/>sequence<sp/>structure<sp/>in<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>a<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>start<sp/>a<sp/>sequence<sp/>because&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>rule<sp/>is<sp/>currently<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Append<sp/>the<sp/>start-tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref>.append(</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa00f09e3e19b211c97710934071cc0d0" kindref="member">_start_type</ref>,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1ac104977bf801fdea239c529016d6fd58" kindref="member">_seq_value</ref>)<sp/>)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a2a545883e1d746d90f811c26813da18d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a2a545883e1d746d90f811c26813da18d" kindref="member">end_sequence</ref>(self):</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;End<sp/>a<sp/>sequence<sp/>structure<sp/>in<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>a<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>end<sp/>a<sp/>sequence<sp/>because&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>rule<sp/>is<sp/>currently<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Append<sp/>the<sp/>end-tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref>.append(</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self._end_type,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1ac104977bf801fdea239c529016d6fd58" kindref="member">_seq_value</ref>)<sp/>)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1ae783b4a8b08ee431f91ef9b3bc4c4016" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1ae783b4a8b08ee431f91ef9b3bc4c4016" kindref="member">start_alternative</ref>(self):</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;start<sp/>an<sp/>alternative<sp/>structure<sp/>in<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>a<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>start<sp/>an<sp/>alternative<sp/>because&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>rule<sp/>is<sp/>currently<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Append<sp/>the<sp/>start-tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref>.append(</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa00f09e3e19b211c97710934071cc0d0" kindref="member">_start_type</ref>,<sp/>self._alt_value)<sp/>)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a435eca1d702425dd46a19935d73bd45b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a435eca1d702425dd46a19935d73bd45b" kindref="member">end_alternative</ref>(self):</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;End<sp/>an<sp/>alternative<sp/>structure<sp/>in<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>a<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>end<sp/>an<sp/>alternative<sp/>because&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>rule<sp/>is<sp/>currently<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Append<sp/>the<sp/>end-tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref>.append(</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self._end_type,<sp/>self._alt_value)<sp/>)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1afe60e5ffe7570341408187ab3620f9c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1afe60e5ffe7570341408187ab3620f9c5" kindref="member">start_repetition</ref>(self):</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;start<sp/>a<sp/>repetition<sp/>structure<sp/>in<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>a<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>start<sp/>a<sp/>repetition<sp/>because&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>rule<sp/>is<sp/>currently<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Append<sp/>the<sp/>start-tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref>.append(</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa00f09e3e19b211c97710934071cc0d0" kindref="member">_start_type</ref>,<sp/>self._rep_value)<sp/>)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a5d76b9a9bc7d75490a7e8c9a11ae8600" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a5d76b9a9bc7d75490a7e8c9a11ae8600" kindref="member">end_repetition</ref>(self):</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;End<sp/>a<sp/>repetition<sp/>structure<sp/>in<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>a<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>end<sp/>a<sp/>repetition<sp/>because&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>rule<sp/>is<sp/>currently<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Append<sp/>the<sp/>end-tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref>.append(</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self._end_type,<sp/>self._rep_value)<sp/>)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aad037702f35649d291f0ac8690f906ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aad037702f35649d291f0ac8690f906ae" kindref="member">start_optional</ref>(self):</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;start<sp/>a<sp/>optional<sp/>structure<sp/>in<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>a<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>start<sp/>a<sp/>optional<sp/>because&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>rule<sp/>is<sp/>currently<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Append<sp/>the<sp/>start-tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref>.append(</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa00f09e3e19b211c97710934071cc0d0" kindref="member">_start_type</ref>,<sp/>self._opt_value)<sp/>)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1afea7aa24f321e0850dec69f0c50f0e90" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1afea7aa24f321e0850dec69f0c50f0e90" kindref="member">end_optional</ref>(self):</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;End<sp/>a<sp/>optional<sp/>structure<sp/>in<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>a<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>end<sp/>a<sp/>optional<sp/>because&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>rule<sp/>is<sp/>currently<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Append<sp/>the<sp/>end-tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref>.append(</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(self._end_type,<sp/>self._opt_value)<sp/>)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Terminal<sp/>elements<sp/>in<sp/>a<sp/>rule<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a0bc0ed14a944a7caf2237a1ff007328b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a0bc0ed14a944a7caf2237a1ff007328b" kindref="member">add_word</ref>(self,<sp/>word):</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Append<sp/>a<sp/>literal<sp/>word<sp/>to<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>a<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>word<sp/>&apos;%s&apos;<sp/>because&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>rule<sp/>is<sp/>currently<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal"><sp/>%<sp/>word)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>this<sp/>word&apos;s<sp/>ID.<sp/><sp/>If<sp/>this<sp/>word<sp/>has<sp/>not<sp/>been<sp/>used<sp/>before,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>register<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>word<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa1a2b10aa9836baa6b6f85ef95746626" kindref="member">_words</ref>:</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa1a2b10aa9836baa6b6f85ef95746626" kindref="member">_words</ref>.append(word)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>=<sp/>len(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa1a2b10aa9836baa6b6f85ef95746626" kindref="member">_words</ref>)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa1a2b10aa9836baa6b6f85ef95746626" kindref="member">_words</ref>.index(word)<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Append<sp/>the<sp/>word<sp/>to<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref>.append(<sp/>(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a7ed66b80889a5444701a2b9e79728333" kindref="member">_word_type</ref>,<sp/>id)<sp/>)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a972f8202d37a77b0a678b241175680f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a972f8202d37a77b0a678b241175680f9" kindref="member">add_list</ref>(self,<sp/>list):</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Append<sp/>a<sp/>list<sp/>to<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>a<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>list<sp/>&apos;%s&apos;<sp/>because&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>rule<sp/>is<sp/>currently<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal"><sp/>%<sp/>list)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>this<sp/>list&apos;s<sp/>ID.<sp/><sp/>If<sp/>this<sp/>list<sp/>has<sp/>not<sp/>been<sp/>used<sp/>before,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>register<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>list<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a7052d9f3a0eeb78b9dfbbb89c0a92cbd" kindref="member">_lists</ref>:</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a7052d9f3a0eeb78b9dfbbb89c0a92cbd" kindref="member">_lists</ref>.append(list)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>=<sp/>len(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a7052d9f3a0eeb78b9dfbbb89c0a92cbd" kindref="member">_lists</ref>)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a7052d9f3a0eeb78b9dfbbb89c0a92cbd" kindref="member">_lists</ref>.index(list)<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Append<sp/>the<sp/>list<sp/>to<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref>.append(<sp/>(self._list_type,<sp/>id)<sp/>)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a30c170fb1dd3ea895116e4cbb3bd3019" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a30c170fb1dd3ea895116e4cbb3bd3019" kindref="member">add_rule</ref>(self,<sp/>rule,<sp/>imported<sp/>=<sp/>False):</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Append<sp/>a<sp/>rule<sp/>reference<sp/>to<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>a<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>rule<sp/>&apos;%s&apos;<sp/>because&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>no<sp/>rule<sp/>is<sp/>currently<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal"><sp/>%<sp/>rule)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>this<sp/>rule&apos;s<sp/>ID.<sp/><sp/>If<sp/>this<sp/>rule<sp/>has<sp/>not<sp/>been<sp/>used<sp/>before,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>register<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>rule<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a141ccec888f509e6c27135915a52dd46" kindref="member">_rules</ref>:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a141ccec888f509e6c27135915a52dd46" kindref="member">_rules</ref>.append(rule)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>imported:<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1adfa040b4a983f9a066ce5af48b3ccab6" kindref="member">_import_rules</ref>.append(rule)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>=<sp/>len(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a141ccec888f509e6c27135915a52dd46" kindref="member">_rules</ref>)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>this<sp/>rule<sp/>has<sp/>been<sp/>referenced<sp/>multiple<sp/>times,<sp/>make<sp/>sure<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>it<sp/>has<sp/>either<sp/>always<sp/>being<sp/>imported<sp/>or<sp/>never<sp/>been<sp/>imported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>imported<sp/>!=<sp/>(rule<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1adfa040b4a983f9a066ce5af48b3ccab6" kindref="member">_import_rules</ref>):</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Rule<sp/>&apos;%s&apos;<sp/>cannot<sp/>be<sp/>referenced<sp/>as<sp/>both&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>imported<sp/>and<sp/>not<sp/>imported<sp/>within<sp/>a&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>grammar.&quot;</highlight><highlight class="normal"><sp/>%<sp/>rule)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a141ccec888f509e6c27135915a52dd46" kindref="member">_rules</ref>.index(rule)<sp/>+<sp/>1</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Append<sp/>the<sp/>rule<sp/>to<sp/>the<sp/>rule<sp/>currently<sp/>being<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a40a839059334ea6d492c00e8d0df76a4" kindref="member">_current_rule_definition</ref>.append(<sp/>(self._rule_type,<sp/>id)<sp/>)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a79cf8f70a1c71766c5cf4e2e26d5bd6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a79cf8f70a1c71766c5cf4e2e26d5bd6f" kindref="member">compile</ref>(self):</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Compile<sp/>a<sp/>binary<sp/>grammar<sp/>of<sp/>this<sp/>compiler&apos;s<sp/>current<sp/>state.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>no<sp/>rule<sp/>is<sp/>being<sp/>defined<sp/>at<sp/>the<sp/>moment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a9a87163c5b9c26bb458b89afde9bdc71" kindref="member">_current_rule_name</ref>:</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>compile<sp/>grammar<sp/>while<sp/>a<sp/>rule&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>being<sp/>defined.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Grammar<sp/>header:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>-<sp/>dwType;<sp/>use<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>-<sp/>dwFlags;<sp/>use<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>[struct.pack(</highlight><highlight class="stringliteral">&quot;LL&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>0)]</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Lists<sp/>of<sp/>the<sp/>names<sp/>and<sp/>IDs<sp/>of<sp/>exports,<sp/>imports,<sp/>lists,<sp/>and<sp/>words.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a1c0adace7fadfc40be59e4b1a63c490e" kindref="member">_compile_id_chunk</ref>(4,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a818a4a4d42bd452c9339087d8dd9208b" kindref="member">_export_rules</ref>,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a141ccec888f509e6c27135915a52dd46" kindref="member">_rules</ref>))</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a1c0adace7fadfc40be59e4b1a63c490e" kindref="member">_compile_id_chunk</ref>(5,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1adfa040b4a983f9a066ce5af48b3ccab6" kindref="member">_import_rules</ref>,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a141ccec888f509e6c27135915a52dd46" kindref="member">_rules</ref>))</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a1c0adace7fadfc40be59e4b1a63c490e" kindref="member">_compile_id_chunk</ref>(6,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a7052d9f3a0eeb78b9dfbbb89c0a92cbd" kindref="member">_lists</ref>,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a7052d9f3a0eeb78b9dfbbb89c0a92cbd" kindref="member">_lists</ref>))</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a1c0adace7fadfc40be59e4b1a63c490e" kindref="member">_compile_id_chunk</ref>(2,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa1a2b10aa9836baa6b6f85ef95746626" kindref="member">_words</ref>,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa1a2b10aa9836baa6b6f85ef95746626" kindref="member">_words</ref>))</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>List<sp/>of<sp/>rule<sp/>definitions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a2c2228c57fbdff53de509cebcafeb0c1" kindref="member">_compile_rule_chunk</ref>(3))</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/>a<sp/>concatenation<sp/>of<sp/>the<sp/>header<sp/>and<sp/>chunks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">.join(output)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a1c0adace7fadfc40be59e4b1a63c490e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a1c0adace7fadfc40be59e4b1a63c490e" kindref="member">_compile_id_chunk</ref>(self,<sp/>chunk_id,<sp/>subset,<sp/>ordered_superset):</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Loop<sp/>through<sp/>the<sp/>elements<sp/>of<sp/>the<sp/>superset,<sp/>and<sp/>if<sp/>also<sp/>present<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>the<sp/>subset<sp/>create<sp/>a<sp/>data<sp/>entry<sp/>of<sp/>its<sp/>ID<sp/>and<sp/>name.<sp/><sp/>The<sp/>IDs<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>counting<sp/>at<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>name,<sp/>id<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>zip(ordered_superset,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range(1,<sp/>len(ordered_superset)<sp/>+<sp/>1)):</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Skip<sp/>names<sp/>not<sp/>included<sp/>in<sp/>the<sp/>subset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>name<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>subset:<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Chunk<sp/>element:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>dwSize;<sp/>size<sp/>of<sp/>this<sp/>element<sp/>in<sp/>bytes<sp/>including<sp/>this<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>dwNum;<sp/>the<sp/>element&apos;s<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>szName;<sp/>the<sp/>element&apos;s<sp/>name<sp/>terminated<sp/>by<sp/>at<sp/>least<sp/>one<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>element&apos;s<sp/>name<sp/>must<sp/>be<sp/>followed<sp/>by<sp/>one<sp/>or<sp/>more<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>characters,<sp/>so<sp/>that<sp/>its<sp/>size<sp/>in<sp/>bytes<sp/>is<sp/>a<sp/>multiple<sp/>of<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(name,<sp/>text_type):</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>name.encode(getpreferredencoding())</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padded_len<sp/>=<sp/>(len(name)<sp/>+<sp/>4)<sp/>&amp;<sp/>(~3)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/>struct.pack((</highlight><highlight class="stringliteral">&quot;LL%ds&quot;</highlight><highlight class="normal"><sp/>%<sp/>padded_len),</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padded_len<sp/>+<sp/>8,<sp/>id,<sp/>name)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements.append(element)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Concatenate<sp/>all<sp/>the<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_data<sp/>=<sp/>b</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">.join(elements)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Chunk<sp/>header:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>dwChunkId;<sp/>words:2,<sp/>rule<sp/>definitions:3,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>exports:4,<sp/>imports:5,<sp/>lists:6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>dwChunkSize;<sp/>size<sp/>of<sp/>this<sp/>chunk<sp/>in<sp/>bytes<sp/>excluding<sp/>this<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header<sp/>=<sp/>struct.pack(</highlight><highlight class="stringliteral">&quot;LL&quot;</highlight><highlight class="normal">,<sp/>chunk_id,<sp/>len(element_data))</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/>the<sp/>header<sp/>and<sp/>the<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>header<sp/>+<sp/>element_data</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a2c2228c57fbdff53de509cebcafeb0c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a2c2228c57fbdff53de509cebcafeb0c1" kindref="member">_compile_rule_chunk</ref>(self,<sp/>chunk_id):</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Loop<sp/>through<sp/>all<sp/>known<sp/>rule<sp/>names,<sp/>and<sp/>if<sp/>they<sp/>are<sp/>defined<sp/>within</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>this<sp/>grammar<sp/>create<sp/>a<sp/>rule<sp/>definition<sp/>entry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>definitions<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>name,<sp/>id<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>zip(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a141ccec888f509e6c27135915a52dd46" kindref="member">_rules</ref>,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range(1,<sp/>len(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a141ccec888f509e6c27135915a52dd46" kindref="member">_rules</ref>)<sp/>+<sp/>1)):</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Skip<sp/>imported<sp/>rules.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1adfa040b4a983f9a066ce5af48b3ccab6" kindref="member">_import_rules</ref>:</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a33734861ae7c118b42b2b20dc548aea0" kindref="member">_rule_definitions</ref>:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Rule<sp/>&apos;%s&apos;<sp/>cannot<sp/>be<sp/>both<sp/>imported&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>defined<sp/>in<sp/>a<sp/>grammar&quot;</highlight><highlight class="normal"><sp/>%<sp/>name)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Make<sp/>sure<sp/>that<sp/>a<sp/>definition<sp/>has<sp/>been<sp/>given.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>name<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a33734861ae7c118b42b2b20dc548aea0" kindref="member">_rule_definitions</ref>:</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Rule<sp/>&apos;%s&apos;<sp/>is<sp/>neither<sp/>imported&quot;</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>nor<sp/>defined&quot;</highlight><highlight class="normal"><sp/>%<sp/>name)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Build<sp/>the<sp/>definition<sp/>sequence<sp/>for<sp/>this<sp/>rule.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>t,<sp/>v<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a33734861ae7c118b42b2b20dc548aea0" kindref="member">_rule_definitions</ref>[name]:</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Definition<sp/>element:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>wType;<sp/>start:1,<sp/>end:2,<sp/>word:3,<sp/>rule:4,<sp/>list:6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>wProb;<sp/>probability<sp/>rating,<sp/>use<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>dwValue;<sp/>depends<sp/>on<sp/>wType<sp/>as<sp/>follows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>-<sp/>if<sp/>wType<sp/>is<sp/>start<sp/>or<sp/>end,<sp/>then<sp/>dwValue<sp/>is<sp/>one<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sequence:1,<sp/>alternative:2,<sp/>repetition:3,<sp/>optional:4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>-<sp/>if<sp/>wType<sp/>is<sp/>word,<sp/>rule,<sp/>or<sp/>list,<sp/>then<sp/>dwValue<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>ID<sp/>of<sp/>the<sp/>corresponding<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>=<sp/>struct.pack(</highlight><highlight class="stringliteral">&quot;HHL&quot;</highlight><highlight class="normal">,<sp/>t,<sp/>0,<sp/>v)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements.append(element)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Definition<sp/>header:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>dwSize;<sp/>size<sp/>of<sp/>this<sp/>rule<sp/>definition<sp/>in<sp/>bytes<sp/>including</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>this<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>dwNum;<sp/>the<sp/>ID<sp/>of<sp/>this<sp/>rule.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>definition_size<sp/>=<sp/>8<sp/>+<sp/>sum([len(s)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>elements])</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>definition<sp/>=<sp/>struct.pack(</highlight><highlight class="stringliteral">&quot;LL&quot;</highlight><highlight class="normal">,<sp/>definition_size,<sp/>id)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>definition<sp/>+=<sp/>b</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">.join(elements)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>definitions.append(definition)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Concatenate<sp/>all<sp/>the<sp/>rule<sp/>definitions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>definition_data<sp/>=<sp/>b</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">.join(definitions)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Rule<sp/>definition<sp/>chunk<sp/>header:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>dwChunkId;<sp/>rule<sp/>definitions:3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>-<sp/>dwChunkSize;<sp/>size<sp/>of<sp/>this<sp/>chunk<sp/>in<sp/>bytes<sp/>excluding<sp/>this<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header<sp/>=<sp/>struct.pack(</highlight><highlight class="stringliteral">&quot;LL&quot;</highlight><highlight class="normal">,<sp/>chunk_id,<sp/>len(definition_data))</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/>the<sp/>header<sp/>and<sp/>the<sp/>rule<sp/>definitions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>header<sp/>+<sp/>definition_data</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aaf62f6a0ef56b41cb142aafaa340743f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aaf62f6a0ef56b41cb142aafaa340743f" kindref="member">_get_rule_names</ref>(self):</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tuple(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a141ccec888f509e6c27135915a52dd46" kindref="member">_rules</ref>)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a20bb3a2416a618ab0370bd4187aba256" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>rule_names<sp/>=<sp/>property(_get_rule_names,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc=</highlight><highlight class="stringliteral">&quot;Read-only<sp/>access<sp/>to<sp/>the<sp/>list<sp/>of<sp/>rule<sp/>names.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a5b90bb26d56427911226e2ab43a94676" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a5b90bb26d56427911226e2ab43a94676" kindref="member">debug_state_string</ref>(self):</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Debug.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>textwrap</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper<sp/>=<sp/>textwrap.TextWrapper(subsequent_indent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper.initial_indent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;exported<sp/>rules:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(wrapper.wrap(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">.join(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a818a4a4d42bd452c9339087d8dd9208b" kindref="member">_export_rules</ref>)))</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper.initial_indent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;imported<sp/>rules:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(wrapper.wrap(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">.join(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1adfa040b4a983f9a066ce5af48b3ccab6" kindref="member">_import_rules</ref>)))</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper.initial_indent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lists:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(wrapper.wrap(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">.join(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a7052d9f3a0eeb78b9dfbbb89c0a92cbd" kindref="member">_lists</ref>)))</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper.initial_indent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;words:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(wrapper.wrap(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">.join(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1aa1a2b10aa9836baa6b6f85ef95746626" kindref="member">_words</ref>)))</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper.initial_indent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rule<sp/>definitions:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(wrapper.wrap(str(self.<ref refid="classdragonfly_1_1engines_1_1backend__natlink_1_1compiler_1_1__Compiler_1a33734861ae7c118b42b2b20dc548aea0" kindref="member">_rule_definitions</ref>)))</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">.join([</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">.join(lines)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>lines<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>output<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>lines])</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_natlink/compiler.py"/>
  </compounddef>
</doxygen>
