<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::test::test_engine_sphinx::SphinxEngineCase</compoundname>
    <basecompoundref prot="public" virt="non-virtual">TestCase</basecompoundref>
    <derivedcompoundref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests" prot="public" virt="non-virtual">dragonfly.test.test_engine_sphinx.EngineTests</derivedcompoundref>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac9f79da30ec7de020f3615fe46a97d91" prot="public" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.test.test_engine_sphinx.SphinxEngineCase::compile_log</definition>
        <argsstring></argsstring>
        <name>compile_log</name>
        <initializer>=  logging.getLogger(&quot;engine.compiler&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="74" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a109b4079a7de7c75d63367e074ad9ad4" prot="public" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.test.test_engine_sphinx.SphinxEngineCase::log</definition>
        <argsstring></argsstring>
        <name>log</name>
        <initializer>=  logging.getLogger(&quot;engine&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="73" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" prot="public" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.test.test_engine_sphinx.SphinxEngineCase::engine</definition>
        <argsstring></argsstring>
        <name>engine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="77" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1adb8a26d9a09d84ccadcbd68a4d826b00" prot="public" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.test.test_engine_sphinx.SphinxEngineCase::test_map</definition>
        <argsstring></argsstring>
        <name>test_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="89" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac3a88aece1f6bd60001439c027cde098" prot="public" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.test.test_engine_sphinx.SphinxEngineCase::test_recobs</definition>
        <argsstring></argsstring>
        <name>test_recobs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="95" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ab626a72cfbd85f361f117cf88a08b041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.SphinxEngineCase.assert_mimic_failure</definition>
        <argsstring>(self, *phrases)</argsstring>
        <name>assert_mimic_failure</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>*</type>
          <declname>phrases</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="159" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.SphinxEngineCase.assert_mimic_success</definition>
        <argsstring>(self, *phrases)</argsstring>
        <name>assert_mimic_success</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>*</type>
          <declname>phrases</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Assert that the engine can successfully mimic a number of speech
strings.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="149" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="149" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7926500801079ddd01b114e0195ea8ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.SphinxEngineCase.assert_recobs_result</definition>
        <argsstring>(self, waiting, words)</argsstring>
        <name>assert_recobs_result</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>waiting</type>
          <defname>waiting</defname>
        </param>
        <param>
          <type>words</type>
          <defname>words</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="162" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc6f5c405d95aecef13ebf34758371d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.SphinxEngineCase.assert_test_function_called</definition>
        <argsstring>(self, func, n)</argsstring>
        <name>assert_test_function_called</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>func</type>
          <defname>func</defname>
        </param>
        <param>
          <type>n</type>
          <defname>n</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Assert that a test function was called n times.
:type func: callable
:param n: number of times the test function should have been called
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="129" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="129" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a50448ef0a4fa61143981c5ff22012ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.SphinxEngineCase.get_test_function</definition>
        <argsstring>(self)</argsstring>
        <name>get_test_function</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Create and return a test function used for testing whether
key phrases or rules are processed correctly, insofar as they reach
the correct processing method/function.

Note that returned test functions accept variable arguments.
:return: callable
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="107" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="107" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1aad121a8a08b5af7504961514b3c8fb36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.SphinxEngineCase.reset_test_functions</definition>
        <argsstring>(self)</argsstring>
        <name>reset_test_functions</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Reset the test_map values for all test functions.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="139" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="139" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a6a6a19199f656880b4f693d4c2ca76f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.SphinxEngineCase.setUp</definition>
        <argsstring>(self)</argsstring>
        <name>setUp</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="76" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="76" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a36943518646ef9c239bdfcdc4e6e6753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.test.test_engine_sphinx.SphinxEngineCase.tearDown</definition>
        <argsstring>(self)</argsstring>
        <name>tearDown</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="98" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="98" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Base TestCase class for Sphinx engine tests
</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dragonfly.test.test_engine_sphinx.SphinxEngineCase</label>
        <link refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>TestCase</label>
      </node>
      <node id="3">
        <label>dragonfly.test.test_engine_sphinx.EngineTests</label>
        <link refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1EngineTests"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dragonfly.test.test_engine_sphinx.SphinxEngineCase</label>
        <link refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>TestCase</label>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" line="68" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_engine_sphinx.py" bodystart="68" bodyend="167"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ab626a72cfbd85f361f117cf88a08b041" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>assert_mimic_failure</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc637cba16a608019b7c1e615d2d6df0" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>assert_mimic_success</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7926500801079ddd01b114e0195ea8ba" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>assert_recobs_result</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1acc6f5c405d95aecef13ebf34758371d9" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>assert_test_function_called</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac9f79da30ec7de020f3615fe46a97d91" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>compile_log</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a7eaefe3971df1393db2ec57e59ef0158" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>engine</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a50448ef0a4fa61143981c5ff22012ca2" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>get_test_function</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a109b4079a7de7c75d63367e074ad9ad4" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>log</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1aad121a8a08b5af7504961514b3c8fb36" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>reset_test_functions</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a6a6a19199f656880b4f693d4c2ca76f2" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>setUp</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1a36943518646ef9c239bdfcdc4e6e6753" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>tearDown</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1adb8a26d9a09d84ccadcbd68a4d826b00" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>test_map</name></member>
      <member refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1SphinxEngineCase_1ac3a88aece1f6bd60001439c027cde098" prot="public" virt="non-virtual"><scope>dragonfly::test::test_engine_sphinx::SphinxEngineCase</scope><name>test_recobs</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
