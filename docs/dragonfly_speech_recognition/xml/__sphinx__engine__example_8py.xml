<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="__sphinx__engine__example_8py" kind="file" language="Python">
    <compoundname>_sphinx_engine_example.py</compoundname>
    <innerclass refid="class__sphinx__engine__example_1_1ExampleRule" prot="public">_sphinx_engine_example::ExampleRule</innerclass>
    <innerclass refid="class__sphinx__engine__example_1_1Observer" prot="public">_sphinx_engine_example::Observer</innerclass>
    <innernamespace refid="namespace__sphinx__engine__example">_sphinx_engine_example</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespace__sphinx__engine__example" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">Dragonfly<sp/>command<sp/>module<sp/>designed<sp/>for<sp/>use<sp/>with<sp/>the<sp/>CMU<sp/>Pocket<sp/>Sphinx<sp/>engine,</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">either<sp/>with<sp/>the<sp/>module<sp/>loader<sp/>or<sp/>as<sp/>a<sp/>script.</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">Shows<sp/>use<sp/>of<sp/>dragonfly<sp/>Functions,<sp/>Lists,<sp/>Repetition,<sp/>Dictation,<sp/>IntegerRefs,</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">Mimic,<sp/>etc.</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dragonfly<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>(Dictation,<sp/>Function,<sp/>Grammar,<sp/>IntegerRef,<sp/>List,</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ListRef,<sp/>MappingRule,<sp/>RecognitionObserver,<sp/>Mimic,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Repetition,<sp/>get_engine,<sp/>Text)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>this<sp/>file<sp/>is<sp/>being<sp/>run,<sp/>not<sp/>imported,<sp/>then<sp/>use<sp/>the<sp/>sphinx<sp/>engine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="namespace__sphinx__engine__example_1a2759f89db595435f94ed922ed5c679a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>sphinx_engine<sp/>=<sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>(</highlight><highlight class="stringliteral">&quot;sphinx&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="namespace__sphinx__engine__example_1a4cb2630530979f1a29c6ac92fbdd5694" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespace__sphinx__engine__example_1a4cb2630530979f1a29c6ac92fbdd5694" kindref="member">print_</ref>(x):</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>print(x)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Set<sp/>up<sp/>a<sp/>dragonfly<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="namespace__sphinx__engine__example_1a1cc692e49126bf8c66678c263dd67992" refkind="member"><highlight class="normal">lst<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1list_1_1List" kindref="compound">List</ref>(</highlight><highlight class="stringliteral">&quot;lst&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="namespace__sphinx__engine__example_1a364bb009c32359d6f81cd020713dc835" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespace__sphinx__engine__example_1a364bb009c32359d6f81cd020713dc835" kindref="member">update_list</ref>():</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>lst:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Removing<sp/>item<sp/>from<sp/>list.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lst.pop()</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;list<sp/>item&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Added<sp/>&apos;%s&apos;<sp/>to<sp/>the<sp/>list.&quot;</highlight><highlight class="normal"><sp/>%<sp/>item)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lst.append(item)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="namespace__sphinx__engine__example_1a211dc5c436cca373cce707d61fbf370c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespace__sphinx__engine__example_1a211dc5c436cca373cce707d61fbf370c" kindref="member">write_transcripts</ref>():</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>engine<sp/>=<sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>()</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>engine.name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;sphinx&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.write_transcript_files(</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;training.fileids&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;training.transcription&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Define<sp/>a<sp/>function<sp/>for<sp/>typing<sp/>multiple<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="namespace__sphinx__engine__example_1ad38c4dfcc56cf3258ce2745b3de7d6bb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespace__sphinx__engine__example_1ad38c4dfcc56cf3258ce2745b3de7d6bb" kindref="member">type_numbers</ref>(numbers):</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>Text(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">.join(map(str,<sp/>numbers))).execute()</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="class__sphinx__engine__example_1_1ExampleRule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class__sphinx__engine__example_1_1ExampleRule" kindref="compound">ExampleRule</ref>(<ref refid="classdragonfly_1_1grammar_1_1rule__mapping_1_1MappingRule" kindref="compound">MappingRule</ref>):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>mapping<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Recognise<sp/>&apos;hello&apos;<sp/>followed<sp/>by<sp/>arbitrary<sp/>dictation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>mapping<sp/>cannot<sp/>be<sp/>matched<sp/>using<sp/>Pocket<sp/>Sphinx<sp/>because<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>engine&apos;s<sp/>support<sp/>for<sp/>dictation<sp/>has<sp/>been<sp/>temporarily<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hello<sp/>&lt;dictation&gt;&quot;</highlight><highlight class="normal">:<sp/>Function(print_,<sp/>dict(dictation=</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>You<sp/>still<sp/>can<sp/>use<sp/>Mimic<sp/>or<sp/>engine.mimic()<sp/>to<sp/>match<sp/>dictation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;say<sp/>hello<sp/>world&quot;</highlight><highlight class="normal">:<sp/>Mimic(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;WORLD&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Update<sp/>and<sp/>recognise<sp/>from<sp/>a<sp/>dragonfly<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;update<sp/>list&quot;</highlight><highlight class="normal">:<sp/>Function(update_list),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;lst&gt;&quot;</highlight><highlight class="normal">:<sp/>Function(print_,<sp/>dict(lst=</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Command<sp/>to<sp/>type<sp/>numbers,<sp/>e.g.<sp/>&apos;type<sp/>one<sp/>two<sp/>three&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;type<sp/>&lt;numbers&gt;&quot;</highlight><highlight class="normal">:<sp/>Function(type_numbers),</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Write<sp/>transcript<sp/>files<sp/>used<sp/>for<sp/>training<sp/>models.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(make|write)<sp/>transcripts&quot;</highlight><highlight class="normal">:<sp/>Function(write_transcripts),</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>extras<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1a56a36e895956f6e50060b69fbdbdcee8" kindref="member">Dictation</ref>(</highlight><highlight class="stringliteral">&quot;dictation&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1ab5ca6dc762d1358eee80c0cb7f18544d" kindref="member">ListRef</ref>(</highlight><highlight class="stringliteral">&quot;lst&quot;</highlight><highlight class="normal">,<sp/>lst),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1ae5ca132f0f9ddff970a697aab8b29c25" kindref="member">Repetition</ref>(IntegerRef(</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>20),<sp/>min=1,<sp/>max=16,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=</highlight><highlight class="stringliteral">&quot;numbers&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="namespace__sphinx__engine__example_1aecc3b07c9f84ce96b896c8dea2ae357a" refkind="member"><highlight class="normal">grammar<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1grammar__base_1_1Grammar" kindref="compound">Grammar</ref>(</highlight><highlight class="stringliteral">&quot;Sphinx<sp/>engine<sp/>example&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">grammar.add_rule(<ref refid="class__sphinx__engine__example_1_1ExampleRule" kindref="compound">ExampleRule</ref>())</highlight></codeline>
<codeline lineno="80"><highlight class="normal">grammar.load()</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>this<sp/>file<sp/>is<sp/>being<sp/>run,<sp/>not<sp/>imported,<sp/>set<sp/>up<sp/>a<sp/>recognition<sp/>observer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>to<sp/>print<sp/>some<sp/>info.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="class__sphinx__engine__example_1_1Observer" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class__sphinx__engine__example_1_1Observer" kindref="compound">Observer</ref>(<ref refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver" kindref="compound">RecognitionObserver</ref>):</highlight></codeline>
<codeline lineno="88" refid="class__sphinx__engine__example_1_1Observer_1aac8f1d34576d050f7cbb328a5ca7d708" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="class__sphinx__engine__example_1_1Observer_1aac8f1d34576d050f7cbb328a5ca7d708" kindref="member">on_begin</ref>(self):</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Speech<sp/>started.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="class__sphinx__engine__example_1_1Observer_1aaf4c96c175bf6cd640ceacf62cbe299a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="class__sphinx__engine__example_1_1Observer_1aaf4c96c175bf6cd640ceacf62cbe299a" kindref="member">on_recognition</ref>(self,<sp/>words):</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">.join(words))</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="class__sphinx__engine__example_1_1Observer_1ac80ebae19af2dcfdb6fecc4458004dd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="class__sphinx__engine__example_1_1Observer_1ac80ebae19af2dcfdb6fecc4458004dd1" kindref="member">on_failure</ref>(self):</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(</highlight><highlight class="stringliteral">&quot;Sorry,<sp/>what<sp/>was<sp/>that?&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="namespace__sphinx__engine__example_1a8f4952ac2769fb3791da5c153c7ca35b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>observer<sp/>=<sp/><ref refid="class__sphinx__engine__example_1_1Observer" kindref="compound">Observer</ref>()</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>observer.register()</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Start<sp/>engine&apos;s<sp/>main<sp/>recognition<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sphinx_engine.recognise_forever()</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>KeyboardInterrupt:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/examples/_sphinx_engine_example.py"/>
  </compounddef>
</doxygen>
