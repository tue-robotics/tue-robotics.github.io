<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="action__text_8py" kind="file" language="Python">
    <compoundname>action_text.py</compoundname>
    <innerclass refid="classdragonfly_1_1actions_1_1action__text_1_1Text" prot="public">dragonfly::actions::action_text::Text</innerclass>
    <innernamespace refid="namespacedragonfly_1_1actions_1_1action__text">dragonfly::actions::action_text</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacedragonfly_1_1actions_1_1action__text" refkind="compound"><highlight class="comment">#<sp/>encoding:<sp/>utf-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Dragonfly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(c)<sp/>Copyright<sp/>2007,<sp/>2008<sp/>by<sp/>Christo<sp/>Butcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>LGPL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>Dragonfly.<sp/><sp/>If<sp/>not,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">#<sp/>pylint:<sp/>disable=line-too-long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">Text<sp/>action</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral">============================================================================</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral">This<sp/>section<sp/>describes<sp/>the<sp/>:class:`Text`<sp/>action<sp/>object.<sp/>This<sp/>type<sp/>of</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral">action<sp/>is<sp/>used<sp/>for<sp/>typing<sp/>text<sp/>into<sp/>the<sp/>foreground<sp/>application.<sp/><sp/>This<sp/>works</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral">on<sp/>Windows,<sp/>Mac<sp/>OS<sp/>and<sp/>with<sp/>X11<sp/>(e.g.<sp/>on<sp/>Linux).</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral">To<sp/>use<sp/>this<sp/>class<sp/>on<sp/>X11/Linux,<sp/>the</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral">`xdotool<sp/>&lt;https://www.semicomplete.com/projects/xdotool/&gt;`__<sp/>program<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral">installed<sp/>and<sp/>the<sp/>``DISPLAY``<sp/>environment<sp/>variable<sp/>set.<sp/><sp/>This<sp/>class<sp/>does</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral">**not**<sp/>support<sp/>typing<sp/>text<sp/>in<sp/>Wayland<sp/>sessions.</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">It<sp/>differs<sp/>from<sp/>the<sp/>:class:`Key`<sp/>action<sp/>in<sp/>that<sp/>:class:`Text`<sp/>is<sp/>used<sp/>for</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral">typing<sp/>literal<sp/>text,<sp/>while<sp/>:class:`dragonfly.actions.action_key.Key`</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral">emulates<sp/>pressing<sp/>keys<sp/>on<sp/>the<sp/>keyboard.<sp/><sp/>An<sp/>example<sp/>of<sp/>this<sp/>is<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">arrow-keys<sp/>are<sp/>not<sp/>part<sp/>of<sp/>a<sp/>text<sp/>and<sp/>so<sp/>cannot<sp/>be<sp/>typed<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral">:class:`Text`<sp/>action,<sp/>but<sp/>can<sp/>be<sp/>sent<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral">:class:`dragonfly.actions.action_key.Key`<sp/>action.</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">Windows<sp/>Unicode<sp/>Keyboard<sp/>Support</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral">............................................................................</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral">The<sp/>:class:`Text`<sp/>action<sp/>can<sp/>be<sp/>used<sp/>to<sp/>type<sp/>arbitrary<sp/>Unicode<sp/>characters</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral">using<sp/>the<sp/>`relevant<sp/>Windows<sp/>API<sp/>&lt;https://docs.microsoft.com/en-us/windows/desktop/api/winuser/ns-winuser-tagkeybdinput#remarks&gt;`__.</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral">This<sp/>is<sp/>disabled<sp/>by<sp/>default<sp/>because<sp/>it<sp/>ignores<sp/>the<sp/>up/down<sp/>status<sp/>of</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral">modifier<sp/>keys<sp/>(e.g.<sp/>ctrl).</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral">It<sp/>can<sp/>be<sp/>enabled<sp/>by<sp/>changing<sp/>the<sp/>``unicode_keyboard``<sp/>setting<sp/>in</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral">`~/.dragonfly2-speech/settings.cfg`<sp/>to<sp/>``True``::</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>unicode_keyboard<sp/>=<sp/>True</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral">If<sp/>you<sp/>need<sp/>to<sp/>simulate<sp/>typing<sp/>arbitrary<sp/>Unicode<sp/>characters<sp/>*and*<sp/>have</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral">*individual*<sp/>:class:`Text`<sp/>actions<sp/>respect<sp/>modifier<sp/>keys<sp/>normally<sp/>for<sp/>normal</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral">characters,<sp/>set<sp/>the<sp/>configuration<sp/>as<sp/>above<sp/>and<sp/>use<sp/>the<sp/>``use_hardware``</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral">parameter<sp/>for<sp/>:class:`Text`<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral">..<sp/>code::<sp/>python</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/>action<sp/>=<sp/>Text(&quot;σμ&quot;)<sp/>+<sp/>Key(&quot;ctrl:down&quot;)<sp/>+<sp/>Text(&quot;]&quot;,<sp/>use_hardware=True)<sp/>+<sp/>Key(&quot;ctrl:up&quot;)</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/>action.execute()</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral">Some<sp/>applications<sp/>require<sp/>hardware<sp/>emulation<sp/>versus<sp/>Unicode<sp/>keyboard</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral">emulation.<sp/>If<sp/>you<sp/>use<sp/>such<sp/>applications,<sp/>add<sp/>their<sp/>executable<sp/>names<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral">``hardware_apps``<sp/>list<sp/>in<sp/>the<sp/>configuration<sp/>file<sp/>mentioned<sp/>above<sp/>to<sp/>make</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral">dragonfly<sp/>always<sp/>use<sp/>hardware<sp/>emulation<sp/>for<sp/>them.</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral">If<sp/>hardware<sp/>emulation<sp/>is<sp/>required,<sp/>then<sp/>the<sp/>action<sp/>will<sp/>use<sp/>the<sp/>keyboard</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral">layout<sp/>of<sp/>the<sp/>foreground<sp/>window<sp/>when<sp/>calculating<sp/>keyboard<sp/>events.<sp/>If<sp/>any<sp/>of</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral">the<sp/>specified<sp/>characters<sp/>are<sp/>not<sp/>typeable<sp/>using<sp/>the<sp/>current<sp/>window&apos;s</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral">keyboard<sp/>layout,<sp/>then<sp/>an<sp/>error<sp/>will<sp/>be<sp/>logged<sp/>and<sp/>no<sp/>keys<sp/>will<sp/>be<sp/>typed::</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>action.exec<sp/>(ERROR):<sp/>Execution<sp/>failed:<sp/>Keyboard<sp/>interface<sp/>cannot<sp/>type<sp/>this<sp/>character:<sp/>&apos;μ&apos;</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral">Keys<sp/>in<sp/>ranges<sp/>0-9,<sp/>a-z<sp/>and<sp/>A-Z<sp/>are<sp/>always<sp/>typeable.<sp/>If<sp/>keys<sp/>in<sp/>these<sp/>ranges</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral">cannot<sp/>be<sp/>typed<sp/>using<sp/>the<sp/>current<sp/>keyboard<sp/>layout,<sp/>then<sp/>the<sp/>equivalent<sp/>key</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral">will<sp/>be<sp/>used<sp/>instead.<sp/>For<sp/>example,<sp/>the<sp/>following<sp/>code<sp/>will<sp/>result<sp/>in<sp/>the<sp/>&apos;я&apos;</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral">key<sp/>being<sp/>pressed<sp/>when<sp/>using<sp/>the<sp/>main<sp/>Cyrillic<sp/>keyboard<sp/>layout:<sp/>::</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/>#<sp/>This<sp/>is<sp/>equivalent<sp/>to<sp/>Text(u&quot;яЯ&quot;).</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/>Text(&quot;zZ&quot;).execute()</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral">These<sp/>settings<sp/>and<sp/>parameters<sp/>have<sp/>no<sp/>effect<sp/>on<sp/>other<sp/>platforms.</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral">X11/Linux<sp/>Unicode<sp/>Keyboard<sp/>Support</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral">............................................................................</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral">The<sp/>:class:`Text`<sp/>action<sp/>can<sp/>also<sp/>type<sp/>arbitrary<sp/>Unicode<sp/>characters<sp/>on<sp/>X11.</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral">This<sp/>works<sp/>regardless<sp/>of<sp/>the<sp/>``use_hardware``<sp/>parameter<sp/>or</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral">``unicode_keyboard``<sp/>setting.</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral">Unlike<sp/>on<sp/>Windows,<sp/>modifier<sp/>keys<sp/>will<sp/>be<sp/>respected<sp/>by<sp/>:class:`Text`<sp/>actions</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral">on<sp/>X11.<sp/>As<sp/>such,<sp/>the<sp/>previous<sp/>Windows<sp/>example<sp/>will<sp/>work<sp/>and<sp/>can<sp/>even<sp/>be</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral">simplified<sp/>a<sp/>little:</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral">..<sp/>code::<sp/>python</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/><sp/>action<sp/>=<sp/>Text(&quot;σμ&quot;)<sp/>+<sp/>Key(&quot;ctrl:down&quot;)<sp/>+<sp/>Text(&quot;]&quot;)<sp/>+<sp/>Key(&quot;ctrl:up&quot;)</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/><sp/>action.execute()</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral">It<sp/>can<sp/>also<sp/>be<sp/>done<sp/>with<sp/>one<sp/>:class:`Key`<sp/>action:</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral">..<sp/>code::<sp/>python</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral"><sp/><sp/><sp/>Key(&quot;σ,μ,c-]&quot;).execute()</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral">Text<sp/>class<sp/>reference</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral">............................................................................</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>locale<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>getpreferredencoding</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>six<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>binary_type</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1actions_1_1action__base" kindref="compound">dragonfly.actions.action_base</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ActionError</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1actions_1_1action__key" kindref="compound">dragonfly.actions.action_key</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Key</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1actions_1_1action__base__keyboard" kindref="compound">dragonfly.actions.action_base_keyboard</ref><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>BaseKeyboardAction</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines" kindref="compound">dragonfly.engines</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>get_engine</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1windows_1_1clipboard" kindref="compound">dragonfly.windows.clipboard</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Clipboard</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="classdragonfly_1_1actions_1_1action__text_1_1Text" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1actions_1_1action__text_1_1Text" kindref="compound">Text</ref>(<ref refid="classdragonfly_1_1actions_1_1action__base__keyboard_1_1BaseKeyboardAction" kindref="compound">BaseKeyboardAction</ref>):</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>`Action`<sp/>that<sp/>sends<sp/>keyboard<sp/>events<sp/>to<sp/>type<sp/>text.</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Arguments:</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>-<sp/>*spec*<sp/>(*str*)<sp/>--<sp/>the<sp/>text<sp/>to<sp/>type</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>-<sp/>*static*<sp/>(boolean)<sp/>--</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>*True*,<sp/>do<sp/>not<sp/>dynamically<sp/>interpret<sp/>*spec*</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>executing<sp/>this<sp/>action</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>-<sp/>*pause*<sp/>(*float*)<sp/>--</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>time<sp/>to<sp/>pause<sp/>between<sp/>each<sp/>keystroke,<sp/>given</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>seconds</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>-<sp/>*autofmt*<sp/>(boolean)<sp/>--</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>*True*,<sp/>attempt<sp/>to<sp/>format<sp/>the<sp/>text<sp/>with<sp/>correct</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spacing<sp/>and<sp/>capitalization.<sp/><sp/>This<sp/>is<sp/>done<sp/>by<sp/>first<sp/>mimicking</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>word<sp/>recognition<sp/>and<sp/>then<sp/>analyzing<sp/>its<sp/>spacing<sp/>and</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capitalization<sp/>and<sp/>applying<sp/>the<sp/>same<sp/>formatting<sp/>to<sp/>the<sp/>text.</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>-<sp/>*use_hardware*<sp/>(boolean)<sp/>--</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>*True*,<sp/>send<sp/>keyboard<sp/>events<sp/>using<sp/>hardware<sp/>emulation<sp/>instead<sp/>of</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>Unicode<sp/>text.<sp/>This<sp/>will<sp/>respect<sp/>the<sp/>up/down<sp/>status<sp/>of<sp/>modifier</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keys.</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a1e8a28fcb8c05687ed6349998b76d568" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_specials<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;enter&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;tab&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a9622529e3ac08c5e8dcbc93b402777d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a9622529e3ac08c5e8dcbc93b402777d3" kindref="member">__init__</ref>(self,<sp/>spec=None,<sp/>static=False,<sp/>pause=None,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>autofmt=False,<sp/>use_hardware=False):</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(spec,<sp/>binary_type):</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spec<sp/>=<sp/>spec.decode(getpreferredencoding())</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseKeyboardAction.__init__(self,<sp/>spec=spec,<sp/>static=static,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_hardware=use_hardware)</highlight></codeline>
<codeline lineno="167" refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a409532d8adb10cce1aa9c2373c853916" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>other<sp/>members.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a6283dbf6d6b61ba363892551993747f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a409532d8adb10cce1aa9c2373c853916" kindref="member">_autofmt</ref><sp/>=<sp/>autofmt</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a6283dbf6d6b61ba363892551993747f4" kindref="member">_pause</ref><sp/>=<sp/>self.<ref refid="classdragonfly_1_1actions_1_1action__base__keyboard_1_1BaseKeyboardAction_1a888620f9a8e4b0b0e70de084ab1ba9a1" kindref="member">_pause_default</ref><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>pause<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>pause</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1ab503ed7258b3d915e74ed3a4d291e82c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1ab503ed7258b3d915e74ed3a4d291e82c" kindref="member">_parse_spec</ref>(self,<sp/>spec):</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Convert<sp/>the<sp/>given<sp/>*spec*<sp/>to<sp/>keyboard<sp/>events.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_symbols<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>character<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>spec:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>character<sp/>is<sp/>the<sp/>key<sp/>symbol,<sp/>except<sp/>in<sp/>special<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>character<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a1e8a28fcb8c05687ed6349998b76d568" kindref="member">_specials</ref>:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_symbol<sp/>=<sp/>self.<ref refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a1e8a28fcb8c05687ed6349998b76d568" kindref="member">_specials</ref>[character]</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_symbol<sp/>=<sp/>character</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>the<sp/>key<sp/>symbol<sp/>to<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_symbols.append(key_symbol)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key_symbols</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a509b9139516287671f14875addb26f61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a509b9139516287671f14875addb26f61" kindref="member">_execute_events</ref>(self,<sp/>events):</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Send<sp/>keyboard<sp/>events.</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>instance<sp/>was<sp/>initialized<sp/>with<sp/>*autofmt*<sp/>True,</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>this<sp/>method<sp/>will<sp/>mimic<sp/>a<sp/>word<sp/>recognition</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>analyze<sp/>its<sp/>formatting<sp/>so<sp/>as<sp/>to<sp/>autoformat</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>text&apos;s<sp/>spacing<sp/>and<sp/>capitalization<sp/>before</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sending<sp/>it<sp/>as<sp/>keyboard<sp/>events.</highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a409532d8adb10cce1aa9c2373c853916" kindref="member">_autofmt</ref>:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Mimic<sp/>a<sp/>word,<sp/>select<sp/>and<sp/>copy<sp/>it<sp/>to<sp/>retrieve<sp/>capitalization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>().<ref refid="namespacedragonfly_1_1rpc_1_1methods_1a58a3d09336f9390cedca681ea655d06a" kindref="member">mimic</ref>(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdragonfly_1_1actions_1_1action__key_1_1Key" kindref="compound">Key</ref>(</highlight><highlight class="stringliteral">&quot;cs-left,<sp/>c-c/5&quot;</highlight><highlight class="normal">).<ref refid="classdragonfly_1_1actions_1_1action__base_1_1ActionBase_1a86ef0362bdcfbca96ae7f69df40b43f3" kindref="member">execute</ref>()</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>Clipboard.get_system_text()</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Inspect<sp/>formatting<sp/>of<sp/>the<sp/>mimicked<sp/>word.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>word.find(</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>index<sp/>==<sp/>-1:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>word.find(</highlight><highlight class="stringliteral">&quot;Test&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capitalize<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>index<sp/>==<sp/>-1:</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1actions_1_1action__base_1_1ActionBase_1a3861efea158692698e3a4f9d79ec7395" kindref="member">_log</ref>.error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>autoformat.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capitalize<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Capitalize<sp/>given<sp/>text<sp/>if<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>self.<ref refid="classdragonfly_1_1actions_1_1action__base_1_1DynStrActionBase_1ad98662369d0517d6b46e97ad72a28442" kindref="member">_spec</ref></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>capitalize:</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>text<sp/>=<sp/>text[0].capitalize()<sp/>+<sp/>text[1:]</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Reconstruct<sp/>autoformatted<sp/>output<sp/>and<sp/>convert<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/>to<sp/>keyboard<sp/>events.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix<sp/>=<sp/>word[:index]</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suffix<sp/>=<sp/>word[index<sp/>+<sp/>4:]</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>events<sp/>=<sp/>self.<ref refid="classdragonfly_1_1actions_1_1action__base_1_1DynStrActionBase_1a0c1a8108e201f2f636581d10081352a5" kindref="member">_parse_spec</ref>(prefix<sp/>+<sp/>text<sp/>+<sp/>suffix)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Calculate<sp/>keyboard<sp/>events.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_hardware<sp/>=<sp/>self.<ref refid="classdragonfly_1_1actions_1_1action__base__keyboard_1_1BaseKeyboardAction_1a0569d7f41c01730c8c507a3b97914cd2" kindref="member">require_hardware_events</ref>()</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyboard_events<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key_symbol<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>events:</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>a<sp/>Typeable<sp/>object<sp/>for<sp/>each<sp/>key<sp/>symbol,<sp/>if<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeable<sp/>=<sp/>self.<ref refid="classdragonfly_1_1actions_1_1action__base__keyboard_1_1BaseKeyboardAction_1a44deda432d697d0710bb820ac91a04a7" kindref="member">_get_typeable</ref>(key_symbol,<sp/>use_hardware)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Raise<sp/>an<sp/>error<sp/>message<sp/>if<sp/>a<sp/>Typeable<sp/>could<sp/>not<sp/>be<sp/>retrieved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>typeable<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error_message<sp/>=<sp/>(</highlight><highlight class="stringliteral">&quot;Keyboard<sp/>interface<sp/>cannot<sp/>type<sp/>this&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>character:<sp/>%r&quot;</highlight><highlight class="normal"><sp/>%<sp/>key_symbol)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/><ref refid="classdragonfly_1_1actions_1_1action__base_1_1ActionError" kindref="compound">ActionError</ref>(error_message)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>keyboard<sp/>events<sp/>using<sp/>the<sp/>Typeable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyboard_events.extend(typeable.events(self.<ref refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1a6283dbf6d6b61ba363892551993747f4" kindref="member">_pause</ref>))</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Send<sp/>keyboard<sp/>events.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1actions_1_1action__base__keyboard_1_1BaseKeyboardAction_1a239ea8dd1f84236442786b874c06d4af" kindref="member">_keyboard</ref>.send_keyboard_events(keyboard_events)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1afa666e768c24bd936c82094debd48057" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1actions_1_1action__text_1_1Text_1afa666e768c24bd936c82094debd48057" kindref="member">__str__</ref>(self):</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">u&quot;{!r}&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(self.<ref refid="classdragonfly_1_1actions_1_1action__base_1_1DynStrActionBase_1ad98662369d0517d6b46e97ad72a28442" kindref="member">_spec</ref>)</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/actions/action_text.py"/>
  </compounddef>
</doxygen>
