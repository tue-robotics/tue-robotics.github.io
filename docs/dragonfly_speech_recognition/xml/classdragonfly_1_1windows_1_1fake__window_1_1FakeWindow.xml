<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::windows::fake_window::FakeWindow</compoundname>
    <basecompoundref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow" prot="public" virt="non-virtual">dragonfly.windows.base_window.BaseWindow</basecompoundref>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a018e1511b64d2a2cd34e7a5116c4a2a6" prot="public" static="yes" mutable="no">
        <type>string</type>
        <definition>string dragonfly.windows.fake_window.FakeWindow::fake_classname</definition>
        <argsstring></argsstring>
        <name>fake_classname</name>
        <initializer>=  &apos;&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="32" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1aec6c2193c25e11700b1e4408ab36b01b" prot="public" static="yes" mutable="no">
        <type>string</type>
        <definition>string dragonfly.windows.fake_window.FakeWindow::fake_executable</definition>
        <argsstring></argsstring>
        <name>fake_executable</name>
        <initializer>=  &apos;&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="33" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a0b026b659ce778d66a710bf2be8889c8" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int dragonfly.windows.fake_window.FakeWindow::fake_pid</definition>
        <argsstring></argsstring>
        <name>fake_pid</name>
        <initializer>=  0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="34" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1aa9188e4ae995be3d5bb90e6dfbe85b4c" prot="public" static="yes" mutable="no">
        <type>string</type>
        <definition>string dragonfly.windows.fake_window.FakeWindow::fake_title</definition>
        <argsstring></argsstring>
        <name>fake_title</name>
        <initializer>=  &apos;&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="31" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a6c71e4c2d65d580cf9a2cc80fa9e4e5f" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.windows.fake_window.FakeWindow::_rectangle</definition>
        <argsstring></argsstring>
        <name>_rectangle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="42" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a9f18f39da88b0e9a5086c2b191d79e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.__init__</definition>
        <argsstring>(self, id)</argsstring>
        <name>__init__</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aabd0a8a77bd6de9e4da12e2a5c7fdbe6">__init__</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aafd3621964165a581372cf27740f88d4" kindref="member">id</ref></type>
          <defname>id</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="40" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a97cba506a038085d2eab20b5072fa214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.close</definition>
        <argsstring>(self)</argsstring>
        <name>close</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a12652977c2e2439eb4018607b11d72ac">close</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Close the window (if possible). </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="97" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a3bba23eacf9ea2f68f05584f9c08698f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.get_all_windows</definition>
        <argsstring>(cls)</argsstring>
        <name>get_all_windows</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1adbfb949d694a91d2b324fbeb01ed0917">get_all_windows</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Get a list of all windows. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="45" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1ab0697bd23ffe0f6ae63f19f516f4d517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.get_foreground</definition>
        <argsstring>(cls)</argsstring>
        <name>get_foreground</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a84081bfe7e50f0d97e95c0b9c0f4956f">get_foreground</reimplements>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Get the foreground window. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="37" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a529710fa5751d2749d97865d0dfb972e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.get_position</definition>
        <argsstring>(self)</argsstring>
        <name>get_position</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a13ea545de11bbe7b77f1bbc9ed1ce5c7">get_position</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method to get the window&apos;s position as a :class:`Rectangle` object.

:returns: window position
:rtype: Rectangle
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="78" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1afa5dae387fd6be9f5a032ed83a42cf95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.is_maximized</definition>
        <argsstring>(self)</argsstring>
        <name>is_maximized</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a054543ac6fa58bb2c3eaca54f1d7090b">is_maximized</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the window is currently maximized. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="68" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a500e05ffb305a39b98a7a23e43748bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.is_minimized</definition>
        <argsstring>(self)</argsstring>
        <name>is_minimized</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae82ec1ff8d09bfa29e532d9b6e1836ac">is_minimized</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the window is currently minimized. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="64" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a07a2aeb81996125e5ecbe4f546351ff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.is_visible</definition>
        <argsstring>(self)</argsstring>
        <name>is_visible</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aad542c59bde2625ef31e455d72fc575f">is_visible</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the window is currently visible.

This may be indeterminable for some windows.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="72" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a26607a669377f454babe3385d8e1c653" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.maximize</definition>
        <argsstring>(self)</argsstring>
        <name>maximize</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a2ebbc5e073901c89de326dfc0c76499f">maximize</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Maximize the window (if possible). </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="91" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a889d0463f3b7523946c088b02faf780f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.minimize</definition>
        <argsstring>(self)</argsstring>
        <name>minimize</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae54394ad507ce64f864183d21f799626">minimize</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Minimize the window (if possible). </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="88" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1ab5db70b894bc0653690ec45e44983652" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.restore</definition>
        <argsstring>(self)</argsstring>
        <name>restore</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a4188b2e6ced452189f14043e9e42eb53">restore</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Restore the window if it is minimized or maximized. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="94" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1aa1fbdff7f2a920123d3ed03b0192fceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.set_focus</definition>
        <argsstring>(self)</argsstring>
        <name>set_focus</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a17184bd383bf416ff5165187615b8b10">set_focus</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Set the window as the active window without raising it.

*Note*: this method will behave like :meth:`set_foreground()` in
environments where this isn&apos;t possible.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="103" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a4674fb59c478da6bfaa8056a6cda67c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.set_foreground</definition>
        <argsstring>(self)</argsstring>
        <name>set_foreground</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a8853b8be6978da5ca290e38328c86e31">set_foreground</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Set the window as the foreground (active) window. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="100" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a9aaf261ac9b167c6ba9c8823cff05935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow.set_position</definition>
        <argsstring>(self, rectangle)</argsstring>
        <name>set_position</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae0210d010dc268245814dabdd17b3715">set_position</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>rectangle</type>
          <defname>rectangle</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method to set the window&apos;s position using a :class:`Rectangle`
object.

:param rectangle: window position
:type rectangle: Rectangle
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="81" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="81" bodyend="84"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a7145d9f3eaf55689fc96614901bd9c71" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow._get_class_name</definition>
        <argsstring>(self)</argsstring>
        <name>_get_class_name</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6cf2c04f26483b16c62da6589c5a8b2b">_get_class_name</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="54" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a336bea71be308cc1066703f88e7b6874" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow._get_window_module</definition>
        <argsstring>(self)</argsstring>
        <name>_get_window_module</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a8dd171828bf9d20d782f3e4a09788685">_get_window_module</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="57" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a2455aa19c3f5b12c51d8674bc12b6e7b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow._get_window_pid</definition>
        <argsstring>(self)</argsstring>
        <name>_get_window_pid</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aea79158ee43cebfa2bd3cd32910ba1b9">_get_window_pid</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="60" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1add522145806c0a68c088e892efd9b4d9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.windows.fake_window.FakeWindow._get_window_text</definition>
        <argsstring>(self)</argsstring>
        <name>_get_window_text</name>
        <reimplements refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a7076edafa3d390321a8207b10ca1877b">_get_window_text</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="51" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="51" bodyend="53"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Fake Window class used when no implementation is available. </verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dragonfly.windows.fake_window.FakeWindow</label>
        <link refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dragonfly.windows.base_window.BaseWindow</label>
        <link refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dragonfly.windows.fake_window.FakeWindow</label>
        <link refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>fake_executable</edgelabel>
          <edgelabel>fake_classname</edgelabel>
          <edgelabel>fake_title</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="2">
        <label>dragonfly.windows.base_window.BaseWindow</label>
        <link refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>object</label>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" line="28" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/windows/fake_window.py" bodystart="28" bodyend="105"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a9f18f39da88b0e9a5086c2b191d79e6e" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a3d7dfc6c1540135d3488931af373dd5a" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>__repr__</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a7145d9f3eaf55689fc96614901bd9c71" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_get_class_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6593032dc95a7b4e27d04892631139b6" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_get_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a336bea71be308cc1066703f88e7b6874" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_get_window_module</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a2455aa19c3f5b12c51d8674bc12b6e7b" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_get_window_pid</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1add522145806c0a68c088e892efd9b4d9" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_get_window_text</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a6598c4f857f23d3069a634de4a0149ee" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_handle</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a10fc38af0c7bbe6f9280bfe80cab2d8d" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a15d67b10b96f9aeb2216c50497d62b2c" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_names</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a6c71e4c2d65d580cf9a2cc80fa9e4e5f" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_rectangle</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1adc865e2370736d8530a35d6f5685621c" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_set_id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1acb76f95c3524e7ab4af217fe3503c8a5" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_set_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1af5cb30f0e630414e8de4f9dd02f26d39" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_windows_by_id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a0ad233d03d4e560d508b0736383db477" prot="private" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>_windows_by_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ac94cb76eacb9388cd7be1c9ea68d2c5a" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>classname</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a97cba506a038085d2eab20b5072fa214" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>close</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a84fb1bafed13d3b11bfc81bed9ff322a" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>cls_name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a5e8da6c3a06d69a730966eebc18ae309" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>executable</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a018e1511b64d2a2cd34e7a5116c4a2a6" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>fake_classname</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1aec6c2193c25e11700b1e4408ab36b01b" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>fake_executable</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a0b026b659ce778d66a710bf2be8889c8" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>fake_pid</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1aa9188e4ae995be3d5bb90e6dfbe85b4c" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>fake_title</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a3bba23eacf9ea2f68f05584f9c08698f" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>get_all_windows</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ad8de679f418d9412a06874c1630b6534" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>get_containing_monitor</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1ab0697bd23ffe0f6ae63f19f516f4d517" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>get_foreground</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ae63505f0d06f4f15608559fa3cdacac0" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>get_matching_windows</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1ab0adffc385c1b0ccf78cf6dde5c2b74a" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>get_normalized_position</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a529710fa5751d2749d97865d0dfb972e" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>get_position</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a43e64fdfd70a455a370111b9db11fe48" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>get_window</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a41b1b75df4528228d6a1efb88baf3b82" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>handle</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aafd3621964165a581372cf27740f88d4" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a2f7ff8a1bc21cb8aff7d979f8d40a0b7" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>id</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1afa9b8c8c3a5b8a014c687ae8daa69b19" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>id</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1afa5dae387fd6be9f5a032ed83a42cf95" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>is_maximized</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a500e05ffb305a39b98a7a23e43748bcd" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>is_minimized</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a07a2aeb81996125e5ecbe4f546351ff3" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>is_visible</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a51b031395547a6e6a928b2dba548c816" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>matches</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a26607a669377f454babe3385d8e1c653" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>maximize</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a889d0463f3b7523946c088b02faf780f" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>minimize</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a9c169cac5d5606d14435f4cec535e364" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>move</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1af8151df04e705f0d77e580dee54b0d7e" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>name</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a493027bd096357de25501607bbd66b50" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>pid</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1ab5db70b894bc0653690ec45e44983652" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>restore</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1aa1fbdff7f2a920123d3ed03b0192fceb" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>set_focus</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a4674fb59c478da6bfaa8056a6cda67c6" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>set_foreground</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1a4801ac838456acd27b30cddf4aae609c" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>set_normalized_position</name></member>
      <member refid="classdragonfly_1_1windows_1_1fake__window_1_1FakeWindow_1a9aaf261ac9b167c6ba9c8823cff05935" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>set_position</name></member>
      <member refid="classdragonfly_1_1windows_1_1base__window_1_1BaseWindow_1aa4cccd9b2275816052dbc7b5d96ba438" prot="public" virt="non-virtual"><scope>dragonfly::windows::fake_window::FakeWindow</scope><name>title</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
