<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1rpc_1_1server_1_1RPCServer" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::rpc::server::RPCServer</compoundname>
    <basecompoundref prot="public" virt="non-virtual">object</basecompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a63af5f756749f8e7fe82407946e09880" prot="private" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.rpc.server.RPCServer::_log</definition>
        <argsstring></argsstring>
        <name>_log</name>
        <initializer>=  logging.getLogger(&quot;rpc.server&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="217" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="217" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a421a63a47fd1b3f610221cb39c5fa479" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.rpc.server.RPCServer::_address</definition>
        <argsstring></argsstring>
        <name>_address</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="220" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a1e9e55cf4e27616f419ed2287cddfa34" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.rpc.server.RPCServer::_dispatcher</definition>
        <argsstring></argsstring>
        <name>_dispatcher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="232" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a65aef045e17b5502a563d3e5ad3b263b" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.rpc.server.RPCServer::_port</definition>
        <argsstring></argsstring>
        <name>_port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="221" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1aab705f793805be31b75f3a2156196c71" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.rpc.server.RPCServer::_ssl_context</definition>
        <argsstring></argsstring>
        <name>_ssl_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="222" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a34342184bbc5aa878c484a072bd9c46c" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.rpc.server.RPCServer::_thread</definition>
        <argsstring></argsstring>
        <name>_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="231" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1af14d0ec1b8c2d04de8584c5b3918c132" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.rpc.server.RPCServer::_threaded</definition>
        <argsstring></argsstring>
        <name>_threaded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="223" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="223" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a2d05c48982b8a2995c681b8049b547a5" prot="public" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.rpc.server.RPCServer::security_token</definition>
        <argsstring></argsstring>
        <name>security_token</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="230" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="230" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1ab653f90cf42a03eceddc6d3d1ad26ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.server.RPCServer.__enter__</definition>
        <argsstring>(self)</argsstring>
        <name>__enter__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="394" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="394" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1aa46d8f8e943d3538323c61ce377909d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.server.RPCServer.__exit__</definition>
        <argsstring>(self, exc_type, exc_val, exc_tb)</argsstring>
        <name>__exit__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>exc_type</type>
          <defname>exc_type</defname>
        </param>
        <param>
          <type>exc_val</type>
          <defname>exc_val</defname>
        </param>
        <param>
          <type>exc_tb</type>
          <defname>exc_tb</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="397" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="397" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1ab1988565ca2643d403d6018e63d5832d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.server.RPCServer.__init__</definition>
        <argsstring>(self, address=&quot;127.0.0.1&quot;, port=50051, ssl_context=None, threaded=True, security_token=None)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>address</type>
          <defname>address</defname>
          <defval>&quot;127.0.0.1&quot;</defval>
        </param>
        <param>
          <type>port</type>
          <defname>port</defname>
          <defval>50051</defval>
        </param>
        <param>
          <type>ssl_context</type>
          <defname>ssl_context</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>threaded</type>
          <defname>threaded</defname>
          <defval>True</defval>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a2d05c48982b8a2995c681b8049b547a5" kindref="member">security_token</ref></type>
          <defname>security_token</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="219" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="219" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a303d342cce69a6d651f00866b8f23f7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.server.RPCServer.add_method</definition>
        <argsstring>(self, method, name=None)</argsstring>
        <name>add_method</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>method</type>
          <defname>method</defname>
        </param>
        <param>
          <type>name</type>
          <defname>name</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Add an RPC method to the server.

Restarting the server is *not* required for the new method to be
available.

This can be used to override method implementations if that is
desirable.

This method can also be used as a decorator.

:param method: the implementation of the RPC method to add.
:param name: optional name of the RPC method to add. If this is
    None, then :code:`method.__name__` will be used instead.
:type method: callable
:type name: str
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="354" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="354" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1ade861d1ef706838a5418580e7c71a8f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.server.RPCServer.remove_method</definition>
        <argsstring>(self, name)</argsstring>
        <name>remove_method</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>name</type>
          <defname>name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Remove an RPC method from the server. This will not raise an error
if the method does not exist.

Restarting the server is *not* required for the change to take
effect.

:param name: the name of the RPC method to remove.
:type name: str
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="381" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="381" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a996603e69fa2e2eb1ac5a3adf8376829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.server.RPCServer.send_request</definition>
        <argsstring>(self, method, params, id=0)</argsstring>
        <name>send_request</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>method</type>
          <defname>method</defname>
        </param>
        <param>
          <type>params</type>
          <defname>params</defname>
        </param>
        <param>
          <type>id</type>
          <defname>id</defname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Utility method to send a JSON-RPC request to the server. This will
block the current thread until a response is received.

This method is mostly used for testing. If called from the engine&apos;s
main thread, a deadlock *will* occur.

This will raise an error if the request fails with an error or if
the server is unreachable.

The server&apos;s security token will automatically be added to the
``params`` list/dictionary.

:param method: name of the RPC method to call.
:param params: parameters of the RPC method to call.
:param id: ID of the JSON-RPC request (default: 0).
:type method: str
:type params: list | dict
:type id: int
:returns: JSON-RPC response
:rtype: dict
:raises: RuntimeError
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="264" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="264" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a12e12ed80544f76af1430ccbd678d71f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.server.RPCServer.start</definition>
        <argsstring>(self)</argsstring>
        <name>start</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Start the server.

This method is non-blocking, the RPC server will run on a separate
daemon thread. This way it is not necessary to call :meth:`stop`
before the main thread terminates.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="297" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="297" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a574035b3183ccb337d204bfff0d138c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.server.RPCServer.stop</definition>
        <argsstring>(self)</argsstring>
        <name>stop</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Stop the server if it is running.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="332" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="332" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a588e6a01a7a895a258101f24d6923fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.server.RPCServer.url</definition>
        <argsstring>(self)</argsstring>
        <name>url</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>The URL to send JSON-RPC requests to.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="256" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="256" bodyend="263"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1ae8c62331542164b753ef39082a44c2e3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.rpc.server.RPCServer._application</definition>
        <argsstring>(self, request)</argsstring>
        <name>_application</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>request</type>
          <defname>request</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="240" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="240" bodyend="254"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>RPC server class.

This class will run a local web server on port 50051 by default. The
server expects requests using
`JSON-RPC 2.0 &lt;https://www.jsonrpc.org/specification&gt;`__.

Constructor arguments:

- *address* -- address to use (*str*, default: &quot;127.0.0.1&quot;)
- *port* -- port to use (*int*, default: 50051)
- *ssl_context* -- SSL context object to pass to
  *werkzeug.serving.run_simple* (*SSLContext*, default: None).
- *threaded* -- whether to use a separate thread to process each request
  (*bool*, default: True).
- *security_token* -- security token for authenticating clients
  (*str*, default: None). A new token will be generated and printed if
  this parameter is unspecified.

The *ssl_context* parameter is explained in more detail in Werkzeug&apos;s
`SSL serving documentation
&lt;http://werkzeug.pocoo.org/docs/0.14/serving/#ssl&gt;`__.

Secure connections can also be set up using OpenSSH port forwarding with
a command such as::

    $ ssh -NTf -L 50051:127.0.0.1:50051 &lt;system-with-rpc-server&gt;

*Minor note*: using an IP address instead of a hostname for the
*address* parameter should increase performance somewhat, e.g.
&quot;127.0.0.1&quot; instead of &quot;localhost&quot;.

.. warning::

   Do **not** send requests to the server from the main engine thread;
   thread deadlocks *will* occur if you do this because the main thread
   cannot call timer functions and wait for a response at the same time.
   The RPC framework was designed to be used from *remote* processes.

   Requests will not be processed if the engine is not connected and
   processing speech.</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>dragonfly.rpc.server.RPCServer</label>
        <link refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dragonfly.rpc.server.RPCServer</label>
        <link refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>object</label>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" line="171" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/rpc/server.py" bodystart="171" bodyend="399"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1ab653f90cf42a03eceddc6d3d1ad26ecf" prot="public" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>__enter__</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1aa46d8f8e943d3538323c61ce377909d5" prot="public" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>__exit__</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1ab1988565ca2643d403d6018e63d5832d" prot="public" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a421a63a47fd1b3f610221cb39c5fa479" prot="private" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>_address</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1ae8c62331542164b753ef39082a44c2e3" prot="private" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>_application</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a1e9e55cf4e27616f419ed2287cddfa34" prot="private" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>_dispatcher</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a63af5f756749f8e7fe82407946e09880" prot="private" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>_log</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a65aef045e17b5502a563d3e5ad3b263b" prot="private" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>_port</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1aab705f793805be31b75f3a2156196c71" prot="private" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>_ssl_context</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a34342184bbc5aa878c484a072bd9c46c" prot="private" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>_thread</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1af14d0ec1b8c2d04de8584c5b3918c132" prot="private" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>_threaded</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a303d342cce69a6d651f00866b8f23f7e" prot="public" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>add_method</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1ade861d1ef706838a5418580e7c71a8f2" prot="public" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>remove_method</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a2d05c48982b8a2995c681b8049b547a5" prot="public" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>security_token</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a996603e69fa2e2eb1ac5a3adf8376829" prot="public" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>send_request</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a12e12ed80544f76af1430ccbd678d71f" prot="public" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>start</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a574035b3183ccb337d204bfff0d138c0" prot="public" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>stop</name></member>
      <member refid="classdragonfly_1_1rpc_1_1server_1_1RPCServer_1a588e6a01a7a895a258101f24d6923fd1" prot="public" virt="non-virtual"><scope>dragonfly::rpc::server::RPCServer</scope><name>url</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
