<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::grammar::recobs::RecognitionObserver</compoundname>
    <basecompoundref prot="public" virt="non-virtual">object</basecompoundref>
    <derivedcompoundref refid="class__sphinx__engine__example_1_1Observer" prot="public" virt="non-virtual">_sphinx_engine_example.Observer</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1engines_1_1backend__sapi5_1_1engine_1_1MimicObserver" prot="public" virt="non-virtual">dragonfly.engines.backend_sapi5.engine.MimicObserver</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1misc_1_1WaveRecognitionObserver" prot="public" virt="non-virtual">dragonfly.engines.backend_sphinx.misc.WaveRecognitionObserver</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionHistory" prot="public" virt="non-virtual">dragonfly.grammar.recobs.RecognitionHistory</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1grammar_1_1recobs__callbacks_1_1CallbackRecognitionObserver" prot="public" virt="non-virtual">dragonfly.grammar.recobs_callbacks.CallbackRecognitionObserver</derivedcompoundref>
    <derivedcompoundref refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester" prot="public" virt="non-virtual">dragonfly.test.test_engine_sphinx.RecognitionObserverTester</derivedcompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a3d9c93576eda14bcd6c21bf98a66a6f1" prot="private" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.grammar.recobs.RecognitionObserver::_log</definition>
        <argsstring></argsstring>
        <name>_log</name>
        <initializer>=  logging.getLogger(&quot;grammar&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" line="45" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a14faa497df88d5f57e8dd2b487e145d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs.RecognitionObserver.__del__</definition>
        <argsstring>(self)</argsstring>
        <name>__del__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" line="50" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a8ae66481486c9ed38e0aca5177f8ad33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs.RecognitionObserver.__init__</definition>
        <argsstring>(self)</argsstring>
        <name>__init__</name>
        <reimplementedby refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1ad994621e56ea920cdaa1213f87b5f75a">__init__</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1engines_1_1backend__sapi5_1_1engine_1_1MimicObserver_1ac672e008ead73b2a0ea1011138366a82">__init__</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" line="47" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1aa54fd07ab2d8abab46c63482550bfb0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs.RecognitionObserver.on_begin</definition>
        <argsstring>(self)</argsstring>
        <name>on_begin</name>
        <reimplementedby refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester_1af3d909c38bc8b7b21fdad75f0a057589">on_begin</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1grammar_1_1recobs__callbacks_1_1CallbackRecognitionObserver_1afc44fc7e370e545c447ea59594293b57">on_begin</reimplementedby>
        <reimplementedby refid="class__sphinx__engine__example_1_1Observer_1aac8f1d34576d050f7cbb328a5ca7d708">on_begin</reimplementedby>
        <reimplementedby refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionHistory_1aea387736b90d6bb5faff0b7c8274420b">on_begin</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method called when the observer is registered and speech start is
detected.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" line="70" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" bodystart="70" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a1ed40f7503d6135e20f2358e56739ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs.RecognitionObserver.on_end</definition>
        <argsstring>(self, results)</argsstring>
        <name>on_end</name>
        <reimplementedby refid="classdragonfly_1_1grammar_1_1recobs__callbacks_1_1CallbackRecognitionObserver_1aecc986f8bed9d345efbf4203af37e475">on_end</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>results</type>
          <defname>results</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method called when speech ends, either with a successful
recognition (after ``on_recognition``) or in failure (after
``on_failure``).

:param results: *optional* engine recognition results object
:type results: :ref:`engine-specific type&lt;RefGrammarCallbackResultsTypes&gt;`
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" line="103" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" bodystart="103" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a01c1908efc599d9f98e0510a10066545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs.RecognitionObserver.on_failure</definition>
        <argsstring>(self, results)</argsstring>
        <name>on_failure</name>
        <reimplementedby refid="classdragonfly_1_1grammar_1_1recobs__callbacks_1_1CallbackRecognitionObserver_1a1684a54afa2a2d788ca81847c87b4c46">on_failure</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>results</type>
          <defname>results</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method called when speech failed to decode to a grammar rule or to
dictation.

:param results: *optional* engine recognition results object
:type results: :ref:`engine-specific type&lt;RefGrammarCallbackResultsTypes&gt;`
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" line="94" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" bodystart="94" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1ae5d0780b32f92394f8e7b08378b428a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs.RecognitionObserver.on_post_recognition</definition>
        <argsstring>(self, words, rule, node, results)</argsstring>
        <name>on_post_recognition</name>
        <reimplementedby refid="classdragonfly_1_1grammar_1_1recobs__callbacks_1_1CallbackRecognitionObserver_1a2da3e84ab055b981cb13d4c82e2d870c">on_post_recognition</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>words</type>
          <defname>words</defname>
        </param>
        <param>
          <type>rule</type>
          <defname>rule</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>results</type>
          <defname>results</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method called when speech successfully decoded to a grammar rule or
to dictation.

This is called *after* grammar rule processing (i.e.
``Rule.process_recognition()``).

:param words: recognized words
:type words: tuple
:param rule: *optional* recognized rule
:type rule: Rule
:param node: *optional* parse tree node
:type node: Node
:param results: *optional* engine recognition results object
:type results: :ref:`engine-specific type&lt;RefGrammarCallbackResultsTypes&gt;`
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" line="113" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" bodystart="113" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a5a1756d1eae4c0e1eff01a3301838742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs.RecognitionObserver.on_recognition</definition>
        <argsstring>(self, words, rule, node, results)</argsstring>
        <name>on_recognition</name>
        <reimplementedby refid="classdragonfly_1_1grammar_1_1recobs__callbacks_1_1CallbackRecognitionObserver_1ae457f3030646cc01cea39acbde1ea7d0">on_recognition</reimplementedby>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>words</type>
          <defname>words</defname>
        </param>
        <param>
          <type>rule</type>
          <defname>rule</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>results</type>
          <defname>results</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Method called when speech successfully decoded to a grammar rule or
to dictation.

This is called *before* grammar rule processing (i.e.
``Rule.process_recognition()``).

:param words: recognized words
:type words: tuple
:param rule: *optional* recognized rule
:type rule: Rule
:param node: *optional* parse tree node
:type node: Node
:param results: *optional* engine recognition results object
:type results: :ref:`engine-specific type&lt;RefGrammarCallbackResultsTypes&gt;`
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" line="76" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" bodystart="76" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1af93bd67b35f9e677a04926d513d2f037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs.RecognitionObserver.register</definition>
        <argsstring>(self)</argsstring>
        <name>register</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Register the observer for recognition state events.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" line="56" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" bodystart="56" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a0dfb5e314c19144dc3722fc0ebf35007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.recobs.RecognitionObserver.unregister</definition>
        <argsstring>(self)</argsstring>
        <name>unregister</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Unregister the observer for recognition state events.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" line="63" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" bodystart="63" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Recognition observer base class.

Sub-classes should override one or more of the event methods.
</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="7">
        <label>dragonfly.grammar.recobs.PlaybackHistory</label>
        <link refid="classdragonfly_1_1grammar_1_1recobs_1_1PlaybackHistory"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>dragonfly.test.test_engine_sphinx.RecognitionObserverTester</label>
        <link refid="classdragonfly_1_1test_1_1test__engine__sphinx_1_1RecognitionObserverTester"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>dragonfly.grammar.recobs.RecognitionHistory</label>
        <link refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionHistory"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>dragonfly.engines.backend_sapi5.engine.MimicObserver</label>
        <link refid="classdragonfly_1_1engines_1_1backend__sapi5_1_1engine_1_1MimicObserver"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>_sphinx_engine_example.Observer</label>
        <link refid="class__sphinx__engine__example_1_1Observer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dragonfly.grammar.recobs.RecognitionObserver</label>
        <link refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>dragonfly.engines.backend_sphinx.misc.WaveRecognitionObserver</label>
        <link refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1misc_1_1WaveRecognitionObserver"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>object</label>
      </node>
      <node id="9">
        <label>dragonfly.grammar.recobs_callbacks.CallbackRecognitionObserver</label>
        <link refid="classdragonfly_1_1grammar_1_1recobs__callbacks_1_1CallbackRecognitionObserver"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>dragonfly.rpc.methods.RPCRecognitionHistory</label>
        <link refid="classdragonfly_1_1rpc_1_1methods_1_1RPCRecognitionHistory"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>dragonfly.grammar.recobs.RecognitionObserver</label>
        <link refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>object</label>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" line="38" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/recobs.py" bodystart="38" bodyend="134"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a14faa497df88d5f57e8dd2b487e145d2" prot="public" virt="non-virtual"><scope>dragonfly::grammar::recobs::RecognitionObserver</scope><name>__del__</name></member>
      <member refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a8ae66481486c9ed38e0aca5177f8ad33" prot="public" virt="non-virtual"><scope>dragonfly::grammar::recobs::RecognitionObserver</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a3d9c93576eda14bcd6c21bf98a66a6f1" prot="private" virt="non-virtual"><scope>dragonfly::grammar::recobs::RecognitionObserver</scope><name>_log</name></member>
      <member refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1aa54fd07ab2d8abab46c63482550bfb0c" prot="public" virt="non-virtual"><scope>dragonfly::grammar::recobs::RecognitionObserver</scope><name>on_begin</name></member>
      <member refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a1ed40f7503d6135e20f2358e56739ef7" prot="public" virt="non-virtual"><scope>dragonfly::grammar::recobs::RecognitionObserver</scope><name>on_end</name></member>
      <member refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a01c1908efc599d9f98e0510a10066545" prot="public" virt="non-virtual"><scope>dragonfly::grammar::recobs::RecognitionObserver</scope><name>on_failure</name></member>
      <member refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1ae5d0780b32f92394f8e7b08378b428a9" prot="public" virt="non-virtual"><scope>dragonfly::grammar::recobs::RecognitionObserver</scope><name>on_post_recognition</name></member>
      <member refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a5a1756d1eae4c0e1eff01a3301838742" prot="public" virt="non-virtual"><scope>dragonfly::grammar::recobs::RecognitionObserver</scope><name>on_recognition</name></member>
      <member refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1af93bd67b35f9e677a04926d513d2f037" prot="public" virt="non-virtual"><scope>dragonfly::grammar::recobs::RecognitionObserver</scope><name>register</name></member>
      <member refid="classdragonfly_1_1grammar_1_1recobs_1_1RecognitionObserver_1a0dfb5e314c19144dc3722fc0ebf35007" prot="public" virt="non-virtual"><scope>dragonfly::grammar::recobs::RecognitionObserver</scope><name>unregister</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
