<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::grammar::elements_basic::RuleWrap</compoundname>
    <basecompoundref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef" prot="public" virt="non-virtual">dragonfly.grammar.elements_basic.RuleRef</basecompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap_1a3299d4304f505497a270cfc81b7f7f2c" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int dragonfly.grammar.elements_basic.RuleWrap::_next_id</definition>
        <argsstring></argsstring>
        <name>_next_id</name>
        <initializer>=  0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/elements_basic.py" line="1327" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/elements_basic.py" bodystart="1327" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap_1a043c924cf0cedd0b6edea76b6c44ff14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.grammar.elements_basic.RuleWrap.__init__</definition>
        <argsstring>(self, name, element, default=None)</argsstring>
        <name>__init__</name>
        <reimplements refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ad1b1e5b8d8c1074c9a807d33ad37173b">__init__</reimplements>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a5bd1a9be70f09c0e74b86a888b813aad" kindref="member">name</ref></type>
          <defname>name</defname>
        </param>
        <param>
          <type>element</type>
          <defname>element</defname>
        </param>
        <param>
          <type><ref refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1adcd1378c9523c840349e97a6a775edad" kindref="member">default</ref></type>
          <defname>default</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/elements_basic.py" line="1329" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/elements_basic.py" bodystart="1329" bodyend="1334"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>    Element class to wrap a Dragonfly element into a new private rule
    to be referenced by this element or others.

    :class:`RuleWrap` is a sub-class of :class:`RuleRef`, so
    :class:`RuleWrap` elements can be used in the same way as
    :class:`RuleRef` elements.

    Constructor arguments:
     - *name* (*str*, default: *None*) --
       the name of this element
     - *element* (*Element*) --
       the Dragonfly element to be wrapped
     - *default* (*object*, default: *None*) --
       the default value used if this element is optional and wasn&apos;t
       spoken

    Examples:

    .. code:: python

       # For saying and processing a Choice element two times.
       letter = RuleWrap(&quot;letter1&quot;, Choice(&quot;&quot;, {
           &quot;alpha&quot;: &quot;a&quot;,
           &quot;bravo&quot;: &quot;b&quot;,
           &quot;charlie&quot;: &quot;c&quot;
       }))
       letter_extras = [
           letter,
           RuleRef(letter.rule, &quot;letter2&quot;),
           RuleRef(letter.rule, &quot;letter3&quot;)
       ]</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>object</label>
      </node>
      <node id="3">
        <label>dragonfly.grammar.elements_basic.ElementBase</label>
        <link refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dragonfly.grammar.elements_basic.RuleWrap</label>
        <link refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dragonfly.grammar.elements_basic.RuleRef</label>
        <link refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>string</label>
      </node>
      <node id="4">
        <label>object</label>
      </node>
      <node id="3">
        <label>dragonfly.grammar.elements_basic.ElementBase</label>
        <link refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>dragonfly.grammar.elements_basic.RuleWrap</label>
        <link refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>dragonfly.grammar.elements_basic.RuleRef</label>
        <link refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/elements_basic.py" line="1291" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/grammar/elements_basic.py" bodystart="1291" bodyend="1334"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap_1a043c924cf0cedd0b6edea76b6c44ff14" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a2333eeef7b754f9989301817c7a51901" prot="public" virt="non-virtual" ambiguityscope="dragonfly::grammar::elements_basic::ElementBase."><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a3d579d6172c566fe313247636e975ceb" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>__repr__</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1ac9000520c1ed2cc45e750aa4f58c33e0" prot="private" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>_copy_sequence</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1aa0bbb9c347cc144dc8ec9089b752d1fd" prot="private" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>_default</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a13a76c99b260b6a0150352e039cc818d" prot="private" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>_get_children</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a8b2ae3b4948ab028d4977f19db6ecd01" prot="private" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>_id</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a3bd1a9e8cccf7ad0e8639ad6ea25e569" prot="private" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>_log_decode</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a2a400cba074f562db1cce30ac537ca52" prot="private" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>_log_eval</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleWrap_1a3299d4304f505497a270cfc81b7f7f2c" prot="private" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>_next_id</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ab571b3c0a5174f210991808ce0aaefdf" prot="private" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>_rule</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a474483e51e223868deafb59b6cc9f226" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>children</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1ac7b9be36b4ffdadeca7865612042b8fd" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>decode</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1adcd1378c9523c840349e97a6a775edad" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>default</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a60de345256154be148c5f564160f0983" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>dependencies</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1aa407bc864e150bd0f0c124ae71168e31" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>element_tree_string</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1aaed97cfed575c2928f5764144949e02e" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>gstring</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1acca1fd7cd9fc4bff2d96cdc0855b0ea8" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>has_default</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1a5bd1a9be70f09c0e74b86a888b813aad" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>name</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1ElementBase_1aa84e3c0d7a310f6503836439a83409ab" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>name</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a98066ba6b734f36f6c3418ed75d02e52" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>rule</name></member>
      <member refid="classdragonfly_1_1grammar_1_1elements__basic_1_1RuleRef_1a54646a5c2c92c5d791f0cdd1a29d10aa" prot="public" virt="non-virtual"><scope>dragonfly::grammar::elements_basic::RuleWrap</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
