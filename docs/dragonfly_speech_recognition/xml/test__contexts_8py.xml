<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__contexts_8py" kind="file" language="Python">
    <compoundname>test_contexts.py</compoundname>
    <innerclass refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules" prot="public">dragonfly::test::test_contexts::TestRules</innerclass>
    <innernamespace refid="namespacedragonfly_1_1test_1_1test__contexts">dragonfly::test::test_contexts</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacedragonfly_1_1test_1_1test__contexts" refkind="compound"><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Dragonfly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(c)<sp/>Copyright<sp/>2018<sp/>by<sp/>Dane<sp/>Finlay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>LGPL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>Dragonfly.<sp/><sp/>If<sp/>not,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unittest</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dragonfly<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>CompoundRule,<sp/>MimicFailure,<sp/>Grammar,<sp/>get_engine</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1test" kindref="compound">dragonfly.test</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>(RuleTestCase,<sp/>TestContext,<sp/>RuleTestGrammar)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">#<sp/>==========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules" kindref="compound">TestRules</ref>(<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase" kindref="compound">RuleTestCase</ref>):</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a6ce16aa665680d6290af2288663f2621" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a6ce16aa665680d6290af2288663f2621" kindref="member">setUp</ref>(self):</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RuleTestCase.setUp(self)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine<sp/>=<sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>()</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>engine.name<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;natlink&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Stop<sp/>Dragon<sp/>from<sp/>dictating<sp/>text<sp/>for<sp/>the<sp/>duration<sp/>of<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>tests.<sp/>This<sp/>is<sp/>required<sp/>when<sp/>testing<sp/>for<sp/>mimic<sp/>failures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a81d5a28b951a71ecf03b746b55dc58a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a81d5a28b951a71ecf03b746b55dc58a5" kindref="member">temp_grammar</ref><sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1grammar__base_1_1Grammar" kindref="compound">Grammar</ref>(</highlight><highlight class="stringliteral">&quot;temp&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a81d5a28b951a71ecf03b746b55dc58a5" kindref="member">temp_grammar</ref>.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6264fea87e5ff9d4021d63ee05284c55" kindref="member">add_rule</ref>(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(spec=</highlight><highlight class="stringliteral">&quot;exclusive<sp/>rule&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a81d5a28b951a71ecf03b746b55dc58a5" kindref="member">temp_grammar</ref>.load()</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a81d5a28b951a71ecf03b746b55dc58a5" kindref="member">temp_grammar</ref>.set_exclusiveness(</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a41429534a7d11c96eb427219dac40ead" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a41429534a7d11c96eb427219dac40ead" kindref="member">tearDown</ref>(self):</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RuleTestCase.tearDown(self)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine<sp/>=<sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>()</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>engine.name<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;natlink&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a81d5a28b951a71ecf03b746b55dc58a5" kindref="member">temp_grammar</ref>.set_exclusiveness(</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a81d5a28b951a71ecf03b746b55dc58a5" kindref="member">temp_grammar</ref>.<ref refid="namespace__engine__control__example_1afeb34c7fc76970e7c70159715208e418" kindref="member">unload</ref>()</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1abe3788c377d81788a26e8b1e01e4a418" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1abe3788c377d81788a26e8b1e01e4a418" kindref="member">process_grammars_context</ref>(self):</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine<sp/>=<sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>()</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>engine.name.startswith(</highlight><highlight class="stringliteral">&quot;sapi5&quot;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.process_grammars_context()</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1ad3c8d207f0e712badd9547a79709bd90" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1ad3c8d207f0e712badd9547a79709bd90" kindref="member">test_multiple_rules</ref>(self):</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>the<sp/>engine<sp/>successfully<sp/>mimics<sp/>each<sp/>rule<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar<sp/>with<sp/>multiple<sp/>rules.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6264fea87e5ff9d4021d63ee05284c55" kindref="member">add_rule</ref>(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(name=</highlight><highlight class="stringliteral">&quot;r1&quot;</highlight><highlight class="normal">,<sp/>spec=</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6264fea87e5ff9d4021d63ee05284c55" kindref="member">add_rule</ref>(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(name=</highlight><highlight class="stringliteral">&quot;r2&quot;</highlight><highlight class="normal">,<sp/>spec=</highlight><highlight class="stringliteral">&quot;see<sp/>you&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a56e9001773b834c7db1d51b71c83e950" kindref="member">recognize_node</ref>(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">).<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a783bc28a7ec9241b1a2dcd5355a15297" kindref="member">words</ref>()<sp/>==<sp/>[</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a56e9001773b834c7db1d51b71c83e950" kindref="member">recognize_node</ref>(</highlight><highlight class="stringliteral">&quot;see<sp/>you&quot;</highlight><highlight class="normal">).<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a783bc28a7ec9241b1a2dcd5355a15297" kindref="member">words</ref>()<sp/>==<sp/>[</highlight><highlight class="stringliteral">&quot;see&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;you&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1acbb552c757b32b25f4e70302ba5474e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1acbb552c757b32b25f4e70302ba5474e8" kindref="member">test_rule_context</ref>(self):</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>the<sp/>engine<sp/>works<sp/>correctly<sp/>with<sp/>rule<sp/>contexts.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1infrastructure_1_1TestContext" kindref="compound">TestContext</ref>(</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6264fea87e5ff9d4021d63ee05284c55" kindref="member">add_rule</ref>(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(name=</highlight><highlight class="stringliteral">&quot;r1&quot;</highlight><highlight class="normal">,<sp/>spec=</highlight><highlight class="stringliteral">&quot;test<sp/>context&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context=context))</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>that<sp/>the<sp/>rule<sp/>matches<sp/>when<sp/>in-context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a56e9001773b834c7db1d51b71c83e950" kindref="member">recognize_node</ref>(</highlight><highlight class="stringliteral">&quot;test<sp/>context&quot;</highlight><highlight class="normal">).<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a783bc28a7ec9241b1a2dcd5355a15297" kindref="member">words</ref>()</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results<sp/>==<sp/>[</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;context&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Go<sp/>out<sp/>of<sp/>context<sp/>and<sp/>test<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Use<sp/>the<sp/>engine&apos;s<sp/>mimic<sp/>method<sp/>because<sp/>recognize_node<sp/>won&apos;t<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>RecognitionFailure<sp/>like<sp/>ElementTester.recognize<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context.active<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1abe3788c377d81788a26e8b1e01e4a418" kindref="member">process_grammars_context</ref>()</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1ac0e05486740c77c7cdb372a22a447267" kindref="member">grammar</ref>.load()</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1ac0e05486740c77c7cdb372a22a447267" kindref="member">grammar</ref>.set_exclusiveness(</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(MimicFailure,<sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6965e7fe66c8622880ce04d31d498be7" kindref="member">engine</ref>.mimic,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>context&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1ac0e05486740c77c7cdb372a22a447267" kindref="member">grammar</ref>.set_exclusiveness(</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1ac0e05486740c77c7cdb372a22a447267" kindref="member">grammar</ref>.<ref refid="namespace__engine__control__example_1afeb34c7fc76970e7c70159715208e418" kindref="member">unload</ref>()</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>again<sp/>after<sp/>going<sp/>back<sp/>into<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context.active<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1abe3788c377d81788a26e8b1e01e4a418" kindref="member">process_grammars_context</ref>()</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a56e9001773b834c7db1d51b71c83e950" kindref="member">recognize_node</ref>(</highlight><highlight class="stringliteral">&quot;test<sp/>context&quot;</highlight><highlight class="normal">).<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a783bc28a7ec9241b1a2dcd5355a15297" kindref="member">words</ref>()</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results<sp/>==<sp/>[</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;context&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a94fed0870b062cc8aacfa980a3f1dcef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a94fed0870b062cc8aacfa980a3f1dcef" kindref="member">test_grammar_context</ref>(self):</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>the<sp/>engine<sp/>works<sp/>correctly<sp/>with<sp/>grammar</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contexts.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Recreate<sp/>the<sp/>RuleTestGrammar<sp/>using<sp/>a<sp/>context<sp/>and<sp/>add<sp/>a<sp/>rule.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1infrastructure_1_1TestContext" kindref="compound">TestContext</ref>(</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="97" refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a2bf2d7254bb8153bc027b1d395f1b937" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1ac0e05486740c77c7cdb372a22a447267" kindref="member">grammar</ref><sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1rule__test__grammar_1_1RuleTestGrammar" kindref="compound">RuleTestGrammar</ref>(context=context)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6264fea87e5ff9d4021d63ee05284c55" kindref="member">add_rule</ref>(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(name=</highlight><highlight class="stringliteral">&quot;r1&quot;</highlight><highlight class="normal">,<sp/>spec=</highlight><highlight class="stringliteral">&quot;test<sp/>context&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1ac0e05486740c77c7cdb372a22a447267" kindref="member">grammar</ref>.load()</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>that<sp/>the<sp/>rule<sp/>matches<sp/>when<sp/>in-context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a56e9001773b834c7db1d51b71c83e950" kindref="member">recognize_node</ref>(</highlight><highlight class="stringliteral">&quot;test<sp/>context&quot;</highlight><highlight class="normal">).<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a783bc28a7ec9241b1a2dcd5355a15297" kindref="member">words</ref>()</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results<sp/>==<sp/>[</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;context&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Go<sp/>out<sp/>of<sp/>context<sp/>and<sp/>test<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context.active<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1abe3788c377d81788a26e8b1e01e4a418" kindref="member">process_grammars_context</ref>()</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1ac0e05486740c77c7cdb372a22a447267" kindref="member">grammar</ref>.set_exclusiveness(</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(MimicFailure,<sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6965e7fe66c8622880ce04d31d498be7" kindref="member">engine</ref>.mimic,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>context&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1ac0e05486740c77c7cdb372a22a447267" kindref="member">grammar</ref>.set_exclusiveness(</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>again<sp/>after<sp/>going<sp/>back<sp/>into<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context.active<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1abe3788c377d81788a26e8b1e01e4a418" kindref="member">process_grammars_context</ref>()</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a56e9001773b834c7db1d51b71c83e950" kindref="member">recognize_node</ref>(</highlight><highlight class="stringliteral">&quot;test<sp/>context&quot;</highlight><highlight class="normal">).<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a783bc28a7ec9241b1a2dcd5355a15297" kindref="member">words</ref>()</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>results<sp/>==<sp/>[</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;context&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a8f3e5b43ccaa0a01e3b957d3b03ce986" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a8f3e5b43ccaa0a01e3b957d3b03ce986" kindref="member">test_exclusive_grammars</ref>(self):</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>the<sp/>engine<sp/>supports<sp/>exclusive<sp/>grammars.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>is<sp/>here<sp/>as<sp/>grammar<sp/>exclusivity<sp/>is<sp/>context<sp/>related.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>up<sp/>two<sp/>grammars<sp/>to<sp/>test<sp/>with.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestRule(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>):</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>spec):</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompoundRule.__init__(self,<sp/>spec=spec)</highlight></codeline>
<codeline lineno="127" refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a783bc28a7ec9241b1a2dcd5355a15297" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a783bc28a7ec9241b1a2dcd5355a15297" kindref="member">words</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_process_recognition(self,<sp/>node,<sp/>extras):</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a783bc28a7ec9241b1a2dcd5355a15297" kindref="member">words</ref><sp/>=<sp/>self.spec</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar1<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1grammar__base_1_1Grammar" kindref="compound">Grammar</ref>(name=</highlight><highlight class="stringliteral">&quot;Grammar1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar1.add_rule(TestRule(spec=</highlight><highlight class="stringliteral">&quot;grammar<sp/>one&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar2<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1grammar__base_1_1Grammar" kindref="compound">Grammar</ref>(name=</highlight><highlight class="stringliteral">&quot;Grammar2&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar2.add_rule(TestRule(spec=</highlight><highlight class="stringliteral">&quot;grammar<sp/>two&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar3<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1grammar__base_1_1Grammar" kindref="compound">Grammar</ref>(name=</highlight><highlight class="stringliteral">&quot;Grammar3&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar3.add_rule(TestRule(spec=</highlight><highlight class="stringliteral">&quot;grammar<sp/>three&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar1.load()</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar2.load()</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar3.load()</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>grammar1<sp/>as<sp/>exclusive<sp/>and<sp/>make<sp/>some<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar1.set_exclusiveness(</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6965e7fe66c8622880ce04d31d498be7" kindref="member">engine</ref>.<ref refid="namespacedragonfly_1_1rpc_1_1methods_1a58a3d09336f9390cedca681ea655d06a" kindref="member">mimic</ref>(</highlight><highlight class="stringliteral">&quot;grammar<sp/>one&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>grammar1.rules[0].words<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grammar<sp/>one&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(MimicFailure,<sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6965e7fe66c8622880ce04d31d498be7" kindref="member">engine</ref>.mimic,<sp/></highlight><highlight class="stringliteral">&quot;grammar<sp/>two&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>grammar2<sp/>as<sp/>exclusive<sp/>and<sp/>make<sp/>some<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Both<sp/>exclusive<sp/>grammars<sp/>should<sp/>be<sp/>active.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar2.set_exclusiveness(</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6965e7fe66c8622880ce04d31d498be7" kindref="member">engine</ref>.<ref refid="namespacedragonfly_1_1rpc_1_1methods_1a58a3d09336f9390cedca681ea655d06a" kindref="member">mimic</ref>(</highlight><highlight class="stringliteral">&quot;grammar<sp/>one&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>grammar1.rules[0].words<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grammar<sp/>one&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6965e7fe66c8622880ce04d31d498be7" kindref="member">engine</ref>.<ref refid="namespacedragonfly_1_1rpc_1_1methods_1a58a3d09336f9390cedca681ea655d06a" kindref="member">mimic</ref>(</highlight><highlight class="stringliteral">&quot;grammar<sp/>two&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>grammar2.rules[0].words<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grammar<sp/>two&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Non-exclusive<sp/>grammar<sp/>&apos;grammar3&apos;<sp/>should<sp/>not<sp/>be<sp/>active.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(MimicFailure,<sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6965e7fe66c8622880ce04d31d498be7" kindref="member">engine</ref>.mimic,<sp/></highlight><highlight class="stringliteral">&quot;grammar<sp/>three&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>both<sp/>grammars<sp/>as<sp/>no<sp/>longer<sp/>exclusive<sp/>and<sp/>make<sp/>some<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar1.set_exclusiveness(</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar2.set_exclusiveness(</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>().name<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;natlink&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__contexts_1_1TestRules_1a81d5a28b951a71ecf03b746b55dc58a5" kindref="member">temp_grammar</ref>.set_exclusiveness(</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6965e7fe66c8622880ce04d31d498be7" kindref="member">engine</ref>.<ref refid="namespacedragonfly_1_1rpc_1_1methods_1a58a3d09336f9390cedca681ea655d06a" kindref="member">mimic</ref>(</highlight><highlight class="stringliteral">&quot;grammar<sp/>one&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>grammar1.rules[0].words<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grammar<sp/>one&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6965e7fe66c8622880ce04d31d498be7" kindref="member">engine</ref>.<ref refid="namespacedragonfly_1_1rpc_1_1methods_1a58a3d09336f9390cedca681ea655d06a" kindref="member">mimic</ref>(</highlight><highlight class="stringliteral">&quot;grammar<sp/>two&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>grammar2.rules[0].words<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grammar<sp/>two&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1rule__testcase_1_1RuleTestCase_1a6965e7fe66c8622880ce04d31d498be7" kindref="member">engine</ref>.<ref refid="namespacedragonfly_1_1rpc_1_1methods_1a58a3d09336f9390cedca681ea655d06a" kindref="member">mimic</ref>(</highlight><highlight class="stringliteral">&quot;grammar<sp/>three&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>grammar3.rules[0].words<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;grammar<sp/>three&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">#<sp/>==========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>unittest.main()</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_contexts.py"/>
  </compounddef>
</doxygen>
