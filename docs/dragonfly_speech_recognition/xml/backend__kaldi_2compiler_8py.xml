<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="backend__kaldi_2compiler_8py" kind="file" language="Python">
    <compoundname>backend_kaldi/compiler.py</compoundname>
    <innerclass refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler" prot="public">dragonfly::engines::backend_kaldi::compiler::KaldiCompiler</innerclass>
    <innernamespace refid="namespacedragonfly_1_1engines_1_1backend__kaldi_1_1compiler">dragonfly::engines::backend_kaldi::compiler</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacedragonfly_1_1engines_1_1backend__kaldi_1_1compiler" refkind="compound"><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Dragonfly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(c)<sp/>Copyright<sp/>2019<sp/>by<sp/>David<sp/>Zurow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>LGPL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>Dragonfly.<sp/><sp/>If<sp/>not,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral">Compiler<sp/>classes<sp/>for<sp/>Kaldi<sp/>backend</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>collections,<sp/>types</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>six</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>kaldi_active_grammar<sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>WFST,<sp/>KaldiRule</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>kaldi_active_grammar<sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Compiler<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>KaldiAGCompiler</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>six<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>text_type</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>six.moves<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>map,<sp/>range</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1grammar" kindref="compound">dragonfly.grammar</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>elements<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>elements_</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines_1_1base" kindref="compound">dragonfly.engines.base</ref><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>CompilerBase,<sp/>CompilerError</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1engines_1_1backend__kaldi_1_1dictation" kindref="compound">dragonfly.engines.backend_kaldi.dictation</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>(AlternativeDictation,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefaultDictation,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UserDictation)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Utilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="namespacedragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1a42131a477c635c265f53c12da5badce8" refkind="member"><highlight class="normal">_trace_level=0</highlight></codeline>
<codeline lineno="43" refid="namespacedragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1ab808a716b00bee20722cc92aabaa78bb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacedragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1ab808a716b00bee20722cc92aabaa78bb" kindref="member">trace_compile</ref>(func):</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">dec(self,<sp/>element,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>fst):</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">global</highlight><highlight class="normal"><sp/>_trace_level</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;%s<sp/>%s:<sp/>compiling<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(grammar.name,<sp/></highlight><highlight class="stringliteral">&apos;===&apos;</highlight><highlight class="normal">*_trace_level,<sp/>element)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>140-len(s)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*l<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;|<sp/>%-20s<sp/>%s<sp/>-&gt;<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(id(fst),<sp/>src_state,<sp/>dst_state)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar._log_load.error(s)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_trace_level+=1</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>func(self,<sp/>element,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>fst)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_trace_level-=1</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar._log_load.error(</highlight><highlight class="stringliteral">&apos;%s<sp/>%s:<sp/>compiling<sp/>%s.&apos;</highlight><highlight class="normal"><sp/>%<sp/>(grammar.name,<sp/></highlight><highlight class="stringliteral">&apos;...&apos;</highlight><highlight class="normal">*_trace_level,<sp/>element))</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dec</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="namespacedragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1aff6ec728fd3d7dbb54251b658845553c" refkind="member"><highlight class="normal">InternalGrammar<sp/>=<sp/>collections.namedtuple(</highlight><highlight class="stringliteral">&apos;InternalGrammar&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="59" refid="namespacedragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1afdab6573db23fbb2117f06fb9cdd7ba4" refkind="member"><highlight class="normal">InternalRule<sp/>=<sp/>collections.namedtuple(</highlight><highlight class="stringliteral">&apos;InternalRule&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;name<sp/>gstring&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="namespacedragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1a852c659c8f03ea69113b72b17751aca2" refkind="member"><highlight class="normal">MockLiteral<sp/>=<sp/>collections.namedtuple(</highlight><highlight class="stringliteral">&apos;MockLiteral&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;words&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler" kindref="compound">KaldiCompiler</ref>(CompilerBase,<sp/>KaldiAGCompiler):</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a3d5d0bf402f9239af8c7f26c8e8ad000" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a3d5d0bf402f9239af8c7f26c8e8ad000" kindref="member">__init__</ref>(self,<sp/>model_dir,<sp/>tmp_dir,<sp/>auto_add_to_user_lexicon=None,<sp/>allow_online_pronunciations=None,<sp/>lazy_compilation=None,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompilerBase.__init__(self)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KaldiAGCompiler.__init__(self,<sp/>model_dir=model_dir,<sp/>tmp_dir=tmp_dir,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ae27bf618c654b579993ac1f113a17fd4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ae27bf618c654b579993ac1f113a17fd4" kindref="member">auto_add_to_user_lexicon</ref><sp/>=<sp/>bool(auto_add_to_user_lexicon)</highlight></codeline>
<codeline lineno="73" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a0838ae18534f94775508808dc79181ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a0838ae18534f94775508808dc79181ea" kindref="member">allow_online_pronunciations</ref><sp/>=<sp/>bool(allow_online_pronunciations)</highlight></codeline>
<codeline lineno="74" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a9bd20a95f4d979099f4e09305fa518ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a9bd20a95f4d979099f4e09305fa518ba" kindref="member">lazy_compilation</ref><sp/>=<sp/>bool(lazy_compilation)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ab6d697adcb09fd50fc3c4e9c7155a79e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ab6d697adcb09fd50fc3c4e9c7155a79e" kindref="member">kaldi_rule_by_rule_dict</ref><sp/>=<sp/>collections.OrderedDict()<sp/><sp/></highlight><highlight class="comment">#<sp/>Rule<sp/>-&gt;<sp/>KaldiRule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self._grammar_rule_states_dict<sp/>=<sp/>dict()<sp/><sp/>#<sp/>FIXME:<sp/>disabled!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a80ecc4148d0740fb8e7c693bfdd02e28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a80ecc4148d0740fb8e7c693bfdd02e28" kindref="member">kaldi_rules_by_listreflist_dict</ref><sp/>=<sp/>collections.defaultdict(set)<sp/><sp/></highlight><highlight class="comment">#<sp/>Rule<sp/>-&gt;<sp/>Set[KaldiRule]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1aa57f9554b6c0d3a65e43fd76bef9687e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1aa57f9554b6c0d3a65e43fd76bef9687e" kindref="member">internal_grammar</ref><sp/>=<sp/><ref refid="namespacedragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1aff6ec728fd3d7dbb54251b658845553c" kindref="member">InternalGrammar</ref>(</highlight><highlight class="stringliteral">&apos;!kaldi_engine_internal&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1aa87c280c9e9095717e097711fb12e574" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>impossible_word<sp/>=<sp/>property(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>self:<sp/>self._longest_word.lower())<sp/><sp/></highlight><highlight class="comment">#<sp/>FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6abc7f5a1651cbe41edce61d0ef30773" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>unknown_word<sp/>=<sp/>property(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>self:<sp/>self._oov_word)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>handling<sp/>lexicon<sp/>translation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>FIXME:<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1af44ec2d79eb36572f300567fd71194df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>translation_dict<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>FIXME:<sp/>documentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ae04e1e815caa3dc0eefb404e46497c4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>untranslation_dict<sp/>=<sp/>{<sp/>v:<sp/>k<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>k,<sp/>v<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>translation_dict.items()<sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>translation_dict.update({</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a74c01b5e5920b0f2f24790b59fbe24b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a74c01b5e5920b0f2f24790b59fbe24b0" kindref="member">untranslate_output</ref>(self,<sp/>output):</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>old,<sp/>new<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>six.iteritems(self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ae04e1e815caa3dc0eefb404e46497c4a" kindref="member">untranslation_dict</ref>):</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>output.replace(old,<sp/>new)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a1afcba6a976a05113bab2bc07416bed2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a1afcba6a976a05113bab2bc07416bed2" kindref="member">translate_words</ref>(self,<sp/>words):</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Unused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1af44ec2d79eb36572f300567fd71194df" kindref="member">translation_dict</ref>:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_words<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>word<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>words:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>old,<sp/>new<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>six.iteritems(self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1af44ec2d79eb36572f300567fd71194df" kindref="member">translation_dict</ref>):</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>word.replace(old,<sp/>new)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_words.extend(word.split())</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>new_words</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>[word.lower()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>word<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>words]</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(words)):</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>words[i]<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.lexicon_words:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words[i]<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a518ce401ee0869d53dc4ab1830ccf3e9" kindref="member">handle_oov_word</ref>(words[i])</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>words</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a518ce401ee0869d53dc4ab1830ccf3e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a518ce401ee0869d53dc4ab1830ccf3e9" kindref="member">handle_oov_word</ref>(self,<sp/>word):</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ae27bf618c654b579993ac1f113a17fd4" kindref="member">auto_add_to_user_lexicon</ref>:</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pronunciations<sp/>=<sp/>self.add_word(word,<sp/>lazy_compilation=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>allow_online_pronunciations=self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a0838ae18534f94775508808dc79181ea" kindref="member">allow_online_pronunciations</ref>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.exception(</highlight><highlight class="stringliteral">&quot;%s:<sp/>exception<sp/>automatically<sp/>adding<sp/>word<sp/>%r&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self,<sp/>word))</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>phones<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>pronunciations:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.warning(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Word<sp/>not<sp/>in<sp/>lexicon<sp/>(generated<sp/>automatic<sp/>pronunciation):<sp/>%r<sp/>[%s]&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self,<sp/>word,<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">.join(phones)))</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.warning(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Word<sp/>%r<sp/>not<sp/>in<sp/>lexicon<sp/>(will<sp/>NOT<sp/>be<sp/>recognized;<sp/>see<sp/>documentation<sp/>about<sp/>user<sp/>lexicon<sp/>and<sp/>auto_add_to_user_lexicon)&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self,<sp/>word))</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1aa87c280c9e9095717e097711fb12e574" kindref="member">impossible_word</ref></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>compiling<sp/>grammars.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ac1739407b4be53b240a329c26a4376b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ac1739407b4be53b240a329c26a4376b8" kindref="member">compile_grammar</ref>(self,<sp/>grammar,<sp/>engine):</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.debug(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Compiling<sp/>grammar<sp/>%s.&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self,<sp/>grammar.name))</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kaldi_rule_by_rule_dict<sp/>=<sp/>collections.OrderedDict()<sp/><sp/></highlight><highlight class="comment">#<sp/>Rule<sp/>-&gt;<sp/>KaldiRule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>rule<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>grammar.rules:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>rule.exported:</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>rule.element<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>cannot<sp/>deal<sp/>with<sp/>an<sp/>empty<sp/>rule<sp/>(could<sp/>be<sp/>fixed<sp/>by<sp/>refactoring)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>CompilerError(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>None<sp/>element<sp/>for<sp/>%s<sp/>in<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%<sp/>(rule,<sp/>grammar))</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kaldi_rule<sp/>=<sp/>KaldiRule(self,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name=</highlight><highlight class="stringliteral">&apos;%s::%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(grammar.name,<sp/>rule.name),</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_dictation=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="comment">#<sp/>has_dictation<sp/>is<sp/>set<sp/>to<sp/>True<sp/>during<sp/>compilation<sp/>below<sp/>if<sp/>that<sp/>is<sp/>the<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kaldi_rule.parent_grammar<sp/>=<sp/>grammar</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kaldi_rule.parent_rule<sp/>=<sp/>rule</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kaldi_rule_by_rule_dict[rule]<sp/>=<sp/>kaldi_rule</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1aca7e910d529568d0b5ad0e00f429036d" kindref="member">_compile_rule_root</ref>(rule,<sp/>grammar,<sp/>kaldi_rule)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kaldi_rule.has_dictation<sp/>=<sp/>bool(kaldi_rule.has_dictation)<sp/><sp/></highlight><highlight class="comment">#<sp/>Convert<sp/>None<sp/>to<sp/>False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ac22e8f3e378ff0f593461e6980195ad3" kindref="member">make_compiler_error_for_kaldi_rule</ref>(kaldi_rule)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ab6d697adcb09fd50fc3c4e9c7155a79e" kindref="member">kaldi_rule_by_rule_dict</ref>.update(kaldi_rule_by_rule_dict)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kaldi_rule_by_rule_dict</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1aca7e910d529568d0b5ad0e00f429036d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1aca7e910d529568d0b5ad0e00f429036d" kindref="member">_compile_rule_root</ref>(self,<sp/>rule,<sp/>grammar,<sp/>kaldi_rule):</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_state,<sp/>dst_state<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a85fc3f7f84e345c2fff1217564499b8d" kindref="member">_compile_rule</ref>(rule,<sp/>grammar,<sp/>kaldi_rule,<sp/>kaldi_rule.fst,<sp/>export=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>kaldi_rule.fst.native<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>kaldi_rule.fst.has_path():</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Impossible<sp/>paths<sp/>break<sp/>AGF<sp/>compilation,<sp/>so<sp/>bolt<sp/>on<sp/>an<sp/>Impossible<sp/>element.<sp/>This<sp/>is<sp/>less<sp/>than<sp/>ideal,<sp/>but<sp/>what<sp/>are<sp/>you<sp/>doing<sp/>compiling<sp/>this<sp/>anyway?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1aaa35c3f00b0b1a01c2efd92d9a557343" kindref="member">_compile_impossible</ref>(</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>kaldi_rule.fst)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kaldi_rule.compile(lazy=self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a9bd20a95f4d979099f4e09305fa518ba" kindref="member">lazy_compilation</ref>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a85fc3f7f84e345c2fff1217564499b8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a85fc3f7f84e345c2fff1217564499b8d" kindref="member">_compile_rule</ref>(self,<sp/>rule,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst,<sp/>export):</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>:param<sp/>export:<sp/>whether<sp/>rule<sp/>is<sp/>exported<sp/>(a<sp/>root<sp/>rule)<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>whether<sp/>this<sp/>rule<sp/>has<sp/>already<sp/>been<sp/>compiled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>(grammar.name,<sp/>rule.name)<sp/>in<sp/>self._grammar_rule_states_dict:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>self._log.debug(&quot;%s:<sp/>Already<sp/>compiled<sp/>rule<sp/>%s%s.&quot;<sp/>%<sp/>(self,<sp/>rule.name,<sp/>&apos;<sp/>[EXPORTED]&apos;<sp/>if<sp/>export<sp/>else<sp/>&apos;&apos;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>return<sp/>self._grammar_rule_states_dict[(grammar.name,<sp/>rule.name)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>else:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.debug(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Compiling<sp/>rule<sp/>%s%s.&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self,<sp/>rule.name,<sp/></highlight><highlight class="stringliteral">&apos;<sp/>[EXPORTED]&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>export<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>export:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Root<sp/>rule,<sp/>so<sp/>must<sp/>handle<sp/>grammar&apos;s<sp/>weight,<sp/>in<sp/>addition<sp/>to<sp/>this<sp/>rule&apos;s<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" kindref="member">get_weight</ref>(grammar)<sp/>*<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" kindref="member">get_weight</ref>(rule)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outer_src_state<sp/>=<sp/>fst.add_state(initial=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inner_src_state<sp/>=<sp/>fst.add_state()</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(outer_src_state,<sp/>inner_src_state,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>weight=weight)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_state<sp/>=<sp/>fst.add_state(final=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Only<sp/>handle<sp/>this<sp/>rule&apos;s<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" kindref="member">get_weight</ref>(rule)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outer_src_state<sp/>=<sp/>fst.add_state()</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inner_src_state<sp/>=<sp/>fst.add_state()</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(outer_src_state,<sp/>inner_src_state,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>weight=weight)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_state<sp/>=<sp/>fst.add_state()</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a7ad0a19252a264d5573b8504c1c2a610" kindref="member">compile_element</ref>(rule.element,<sp/>inner_src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self._grammar_rule_states_dict[(grammar.name,<sp/>rule.name)]<sp/>=<sp/>(src_state,<sp/>dst_state)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(outer_src_state,<sp/>dst_state)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ab5afb88d0c3ed9f3d950584e9b619944" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ab5afb88d0c3ed9f3d950584e9b619944" kindref="member">unload_grammar</ref>(self,<sp/>grammar,<sp/>rules,<sp/>engine):</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>rule<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>rules:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kaldi_rule<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ab6d697adcb09fd50fc3c4e9c7155a79e" kindref="member">kaldi_rule_by_rule_dict</ref>[rule]</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Unload<sp/>kaldi_rule:<sp/>destroy()<sp/>handles<sp/>KaldiAGCompiler<sp/>stuff;<sp/>we<sp/>must<sp/>handle<sp/>ours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kaldi_rule.destroy()</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ab6d697adcb09fd50fc3c4e9c7155a79e" kindref="member">kaldi_rule_by_rule_dict</ref>[rule]</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>kaldi_rules_set<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a80ecc4148d0740fb8e7c693bfdd02e28" kindref="member">kaldi_rules_by_listreflist_dict</ref>.values():</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kaldi_rules_set.discard(kaldi_rule)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>NOTE:<sp/>the<sp/>kaldi_rule_by_rule_dict<sp/>we<sp/>returned<sp/>from<sp/>compile_grammar()<sp/>is<sp/>not<sp/>updated,<sp/>but<sp/>it<sp/>should<sp/>be<sp/>dropped<sp/>upon<sp/>unload<sp/>anyway!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a7ddd9bdea3924fb1ca22b341b9e4d049" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a7ddd9bdea3924fb1ca22b341b9e4d049" kindref="member">update_list</ref>(self,<sp/>lst,<sp/>grammar):</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Note:<sp/>we<sp/>update<sp/>all<sp/>rules<sp/>in<sp/>all<sp/>grammars<sp/>that<sp/>reference<sp/>this<sp/>list<sp/>(unlike<sp/>WSR/natlink?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lst_kaldi_rules<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a80ecc4148d0740fb8e7c693bfdd02e28" kindref="member">kaldi_rules_by_listreflist_dict</ref>[id(lst)]</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>kaldi_rule<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lst_kaldi_rules:</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>kaldi_rule.reload():</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1aca7e910d529568d0b5ad0e00f429036d" kindref="member">_compile_rule_root</ref>(kaldi_rule.parent_rule,<sp/>grammar,<sp/>kaldi_rule)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Methods<sp/>for<sp/>compiling<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a1bd855cb91d8534f5b0521e643f86df1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>_eps_like_nonterms<sp/>=<sp/>frozenset()<sp/><sp/></highlight><highlight class="comment">#<sp/>Dictation<sp/>is<sp/>non-empty<sp/>now<sp/>(&apos;#nonterm:dictation&apos;,<sp/>&apos;#nonterm:dictation_cloud&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a7ad0a19252a264d5573b8504c1c2a610" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a7ad0a19252a264d5573b8504c1c2a610" kindref="member">compile_element</ref>(self,<sp/>element,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Compile<sp/>element<sp/>in<sp/>FST<sp/>(from<sp/>src_state<sp/>to<sp/>dst_state)<sp/>and<sp/>return<sp/>result.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Look<sp/>for<sp/>a<sp/>compiler<sp/>method<sp/>to<sp/>handle<sp/>the<sp/>given<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>element_type,<sp/>compiler<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.element_compilers:</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(element,<sp/>element_type):</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compiler(self,<sp/>element,<sp/>*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Didn&apos;t<sp/>find<sp/>a<sp/>compiler<sp/>method<sp/>for<sp/>this<sp/>element<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>NotImplementedError(</highlight><highlight class="stringliteral">&quot;Compiler<sp/>%s<sp/>not<sp/>implemented<sp/>for<sp/>element<sp/>type<sp/>%s.&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self,<sp/>element))</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>@trace_compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ab88f4b05c40c962d22b7d09c2f8867be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ab88f4b05c40c962d22b7d09c2f8867be" kindref="member">_compile_sequence</ref>(self,<sp/>element,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst):</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_state<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a07fde7c1b207c76b042c283bb356ca5a" kindref="member">add_weight_linkage</ref>(src_state,<sp/>dst_state,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" kindref="member">get_weight</ref>(element),<sp/>fst)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children<sp/>=<sp/>element.children</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Optimize<sp/>for<sp/>special<sp/>lengths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(children)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(src_state,<sp/>dst_state,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>len(children)<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a7ad0a19252a264d5573b8504c1c2a610" kindref="member">compile_element</ref>(children[0],<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/><sp/></highlight><highlight class="comment">#<sp/>len(children)<sp/>&gt;=<sp/>2:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Handle<sp/>Repetition<sp/>elements<sp/>differently<sp/>as<sp/>a<sp/>special<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_repetition<sp/>=<sp/>isinstance(element,<sp/>elements_.Repetition)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_repetition<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>element.optimize:</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Repetition...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Insert<sp/>new<sp/>states,<sp/>so<sp/>back<sp/>arc<sp/>only<sp/>affects<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>fst.add_state()</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>fst.add_state()</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(src_state,<sp/>s1,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>NOTE:<sp/>to<sp/>avoid<sp/>creating<sp/>an<sp/>un-decodable<sp/>epsilon<sp/>loop,<sp/>we<sp/>must<sp/>not<sp/>allow<sp/>an<sp/>all-epsilon<sp/>child<sp/>here<sp/>(compile_graph_agf<sp/>should<sp/>check<sp/>this)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a7ad0a19252a264d5573b8504c1c2a610" kindref="member">compile_element</ref>(children[0],<sp/>s1,<sp/>s2,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>fst.has_eps_path(s1,<sp/>s2,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a1bd855cb91d8534f5b0521e643f86df1" kindref="member">_eps_like_nonterms</ref>):</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(s2,<sp/>s1,<sp/>fst.eps_disambig,<sp/>fst.eps)<sp/><sp/></highlight><highlight class="comment">#<sp/>Back<sp/>arc,<sp/>uses<sp/>eps_disambig<sp/>(&apos;#0&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(s2,<sp/>dst_state,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Cannot<sp/>do<sp/>optimize<sp/>path,<sp/>because<sp/>of<sp/>epsilon<sp/>loop,<sp/>so<sp/>finish<sp/>up<sp/>with<sp/>Sequence<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.warning(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Cannot<sp/>optimize<sp/>Repetition<sp/>element,<sp/>because<sp/>its<sp/>child<sp/>element<sp/>can<sp/>match<sp/>empty<sp/>string;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>falling<sp/>back<sp/>to<sp/>inefficient<sp/>non-optimize<sp/>path.<sp/>(this<sp/>is<sp/>not<sp/>that<sp/>bad)&quot;</highlight><highlight class="normal"><sp/>%<sp/>self)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>states<sp/>=<sp/>[src_state,<sp/>s2]<sp/>+<sp/>[fst.add_state()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(children)-2)]<sp/>+<sp/>[dst_state]</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>child<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(children[1:],<sp/>start=1):</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>states[i]</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>states[i<sp/>+<sp/>1]</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a7ad0a19252a264d5573b8504c1c2a610" kindref="member">compile_element</ref>(child,<sp/>s1,<sp/>s2,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Sequence,<sp/>not<sp/>Repetition...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Insert<sp/>new<sp/>states<sp/>for<sp/>individual<sp/>children<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>states<sp/>=<sp/>[src_state]<sp/>+<sp/>[fst.add_state()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(children)-1)]<sp/>+<sp/>[dst_state]</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>child<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(children):</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>states[i]</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2<sp/>=<sp/>states[i<sp/>+<sp/>1]</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a7ad0a19252a264d5573b8504c1c2a610" kindref="member">compile_element</ref>(child,<sp/>s1,<sp/>s2,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>@trace_compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a4db4d120c0b4d3f3b3634071f1903498" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a4db4d120c0b4d3f3b3634071f1903498" kindref="member">_compile_alternative</ref>(self,<sp/>element,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst):</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_state<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a07fde7c1b207c76b042c283bb356ca5a" kindref="member">add_weight_linkage</ref>(src_state,<sp/>dst_state,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" kindref="member">get_weight</ref>(element),<sp/>fst)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>child<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>element.children:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a7ad0a19252a264d5573b8504c1c2a610" kindref="member">compile_element</ref>(child,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>@trace_compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a8c518723d9efd4676ec41f8a24479bf6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a8c518723d9efd4676ec41f8a24479bf6" kindref="member">_compile_optional</ref>(self,<sp/>element,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst):</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_state<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a07fde7c1b207c76b042c283bb356ca5a" kindref="member">add_weight_linkage</ref>(src_state,<sp/>dst_state,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" kindref="member">get_weight</ref>(element),<sp/>fst)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a7ad0a19252a264d5573b8504c1c2a610" kindref="member">compile_element</ref>(element.children[0],<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(src_state,<sp/>dst_state,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>@trace_compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a3aa2cdc4e4434bb3b72e8d808415ffb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a3aa2cdc4e4434bb3b72e8d808415ffb6" kindref="member">_compile_literal</ref>(self,<sp/>element,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst):</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" kindref="member">get_weight</ref>(element)<sp/><sp/></highlight><highlight class="comment">#<sp/>Handle<sp/>weight<sp/>internally<sp/>below,<sp/>without<sp/>adding<sp/>a<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>element.words</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>list(map(text_type,<sp/>words))</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>words<sp/>=<sp/>self.translate_words(words)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Special<sp/>case<sp/>optimize<sp/>single-word<sp/>literal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(words)<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>words[0].lower()</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>word<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.lexicon_words:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a518ce401ee0869d53dc4ab1830ccf3e9" kindref="member">handle_oov_word</ref>(word)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(src_state,<sp/>dst_state,<sp/>word,<sp/>weight=weight)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>[word.lower()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>word<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>words]</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(words)):</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>words[i]<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.lexicon_words:</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words[i]<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a518ce401ee0869d53dc4ab1830ccf3e9" kindref="member">handle_oov_word</ref>(words[i])</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&quot;Insert&quot;<sp/>new<sp/>states<sp/>for<sp/>individual<sp/>words</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>states<sp/>=<sp/>[src_state]<sp/>+<sp/>[fst.add_state()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(words)-1)]<sp/>+<sp/>[dst_state]</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>word<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(words):</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(states[i],<sp/>states[i<sp/>+<sp/>1],<sp/>word,<sp/>weight=weight)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Only<sp/>need<sp/>to<sp/>set<sp/>weight<sp/>on<sp/>first<sp/>arc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>@trace_compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a8a6472a6602f226b96a5009b6ba5bb3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a8a6472a6602f226b96a5009b6ba5bb3b" kindref="member">_compile_rule_ref</ref>(self,<sp/>element,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst):</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" kindref="member">get_weight</ref>(element)<sp/><sp/></highlight><highlight class="comment">#<sp/>Handle<sp/>weight<sp/>internally<sp/>below<sp/>without<sp/>adding<sp/>a<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Compile<sp/>target<sp/>rule<sp/>&quot;inline&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_src_state,<sp/>rule_dst_state<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a85fc3f7f84e345c2fff1217564499b8d" kindref="member">_compile_rule</ref>(element.rule,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst,<sp/>export=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(src_state,<sp/>rule_src_state,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>weight=weight)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(rule_dst_state,<sp/>dst_state,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>@trace_compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a961f414da3a62edae8a884a026f9b484" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a961f414da3a62edae8a884a026f9b484" kindref="member">_compile_list_ref</ref>(self,<sp/>element,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst):</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_state<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a07fde7c1b207c76b042c283bb356ca5a" kindref="member">add_weight_linkage</ref>(src_state,<sp/>dst_state,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" kindref="member">get_weight</ref>(element),<sp/>fst)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>list_rule_name<sp/>=<sp/>&quot;__list_%s&quot;<sp/>%<sp/>element.list.name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>element.list<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>grammar.lists:</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Should<sp/>only<sp/>happen<sp/>during<sp/>initial<sp/>compilation;<sp/>during<sp/>updates,<sp/>we<sp/>must<sp/>skip<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grammar.add_list(element.list)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a80ecc4148d0740fb8e7c693bfdd02e28" kindref="member">kaldi_rules_by_listreflist_dict</ref>[id(element.list)].add(kaldi_rule)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>child_str<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>element.list.get_list_items():</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a3aa2cdc4e4434bb3b72e8d808415ffb6" kindref="member">_compile_literal</ref>(<ref refid="namespacedragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1a852c659c8f03ea69113b72b17751aca2" kindref="member">MockLiteral</ref>(child_str.split()),<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>@trace_compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a5d18aff0a249ad803bcbfd4718b8d80f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a5d18aff0a249ad803bcbfd4718b8d80f" kindref="member">_compile_dictation</ref>(self,<sp/>element,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst):</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kaldi_rule.has_dictation<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_state<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a07fde7c1b207c76b042c283bb356ca5a" kindref="member">add_weight_linkage</ref>(src_state,<sp/>dst_state,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" kindref="member">get_weight</ref>(element),<sp/>fst)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>fst.add_arc(src_state,<sp/>dst_state,<sp/>&apos;#nonterm:dictation&apos;,<sp/>olabel=WFST.eps)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_state<sp/>=<sp/>fst.add_state()</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cloud_dictation<sp/>=<sp/>isinstance(element,<sp/>(AlternativeDictation,<sp/>DefaultDictation))<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>element.cloud</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictation_nonterm<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;#nonterm:dictation_cloud&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>cloud_dictation<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;#nonterm:dictation&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(src_state,<sp/>extra_state,<sp/></highlight><highlight class="stringliteral">&apos;#nonterm:dictation&apos;</highlight><highlight class="normal">,<sp/>dictation_nonterm)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Accepts<sp/>zero<sp/>or<sp/>more<sp/>words</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(extra_state,<sp/>dst_state,<sp/>WFST.eps,<sp/></highlight><highlight class="stringliteral">&apos;#nonterm:end&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>fst.add_arc(extra_state,<sp/>dst_state,<sp/>&apos;!SIL&apos;,<sp/>&apos;#nonterm:end&apos;)<sp/><sp/>#<sp/>Causes<sp/>problems<sp/>with<sp/>lack<sp/>of<sp/>phones<sp/>during<sp/>decoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>@trace_compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1aaa35c3f00b0b1a01c2efd92d9a557343" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1aaa35c3f00b0b1a01c2efd92d9a557343" kindref="member">_compile_impossible</ref>(self,<sp/>element,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst):</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>FIXME:<sp/>not<sp/>impossible<sp/>enough<sp/>(lower<sp/>probability?)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Note:<sp/>setting<sp/>weight=0<sp/>breaks<sp/>compilation!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(src_state,<sp/>dst_state,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1aa87c280c9e9095717e097711fb12e574" kindref="member">impossible_word</ref>,<sp/>weight=1e-10)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>@trace_compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a8c918218c7d2a5ec95dd771aa5a5b1bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a8c918218c7d2a5ec95dd771aa5a5b1bb" kindref="member">_compile_empty</ref>(self,<sp/>element,<sp/>src_state,<sp/>dst_state,<sp/>grammar,<sp/>kaldi_rule,<sp/>fst):</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_state<sp/>=<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a07fde7c1b207c76b042c283bb356ca5a" kindref="member">add_weight_linkage</ref>(src_state,<sp/>dst_state,<sp/>self.<ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" kindref="member">get_weight</ref>(element),<sp/>fst)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(src_state,<sp/>dst_state,<sp/>WFST.eps)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Utility<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a6486af5ce5df70014ae20429f986494b" kindref="member">get_weight</ref>(self,<sp/>obj,<sp/>name=&apos;weight&apos;):</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Gets<sp/>the<sp/>weight<sp/>of<sp/>given<sp/>grammar<sp/>or<sp/>rule,<sp/>checking<sp/>for<sp/>invalid<sp/>values.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>getattr(obj,<sp/>name,<sp/>1)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(obj,<sp/>(elements_.Dictation,<sp/>UserDictation))<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>isinstance(weight,<sp/>types.FunctionType):</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ignore<sp/>crazy<sp/>string<sp/>method<sp/>handling<sp/>on<sp/>Dictation<sp/>elements;<sp/>use<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>float(weight)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>TypeError:</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.error(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Weight<sp/>must<sp/>be<sp/>a<sp/>numeric,<sp/>but<sp/>%s.%s<sp/>is<sp/>%s:<sp/>%r&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self,<sp/>obj,<sp/>name,<sp/><ref refid="namespacetest__grammar_1a2d627203d6cca5b11d2cc4fa9c3e00cd" kindref="member">type</ref>(weight),<sp/>weight))</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>weight<sp/>&lt;=<sp/>0:</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.error(</highlight><highlight class="stringliteral">&quot;%s:<sp/>Weight<sp/>cannot<sp/>be<sp/>negative<sp/>or<sp/>0,<sp/>but<sp/>%s.%s<sp/>is<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%<sp/>(self,<sp/>obj,<sp/>name,<sp/>weight))</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>1e-9</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>weight</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a07fde7c1b207c76b042c283bb356ca5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1a07fde7c1b207c76b042c283bb356ca5a" kindref="member">add_weight_linkage</ref>(self,<sp/>outer_src_state,<sp/>dst_state,<sp/>weight,<sp/>fst):</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Returns<sp/>new<sp/>source<sp/>state,<sp/>to<sp/>be<sp/>used<sp/>by<sp/>the<sp/>caller<sp/>as<sp/>the<sp/>effective<sp/>source<sp/>state.<sp/>Only<sp/>modifies<sp/>if<sp/>weight<sp/>is<sp/>non-default.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(weight<sp/>==<sp/>1):</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>outer_src_state</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>self._log.debug(&quot;%s:<sp/>Adding<sp/>weight<sp/>linkage<sp/>for<sp/>weight=%s&quot;<sp/>%<sp/>(self,<sp/>weight))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inner_src_state<sp/>=<sp/>fst.add_state()</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fst.add_arc(outer_src_state,<sp/>inner_src_state,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">,<sp/>weight=weight)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inner_src_state</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ac22e8f3e378ff0f593461e6980195ad3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1engines_1_1backend__kaldi_1_1compiler_1_1KaldiCompiler_1ac22e8f3e378ff0f593461e6980195ad3" kindref="member">make_compiler_error_for_kaldi_rule</ref>(self,<sp/>kaldi_rule):</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Exception<sp/>while<sp/>compiling<sp/>%s<sp/>in<sp/>%s&quot;</highlight><highlight class="normal"><sp/>%<sp/>(kaldi_rule.parent_rule,<sp/>kaldi_rule.parent_grammar)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>six.PY2:<sp/>self._log.exception(</highlight><highlight class="stringliteral">&quot;%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>self,<sp/>message)<sp/><sp/></highlight><highlight class="comment">#<sp/>Imitate<sp/>PY3&apos;s<sp/>chained<sp/>exceptions<sp/>traceback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_tree<sp/>=<sp/>kaldi_rule.parent_rule.element.element_tree_string()</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Limit<sp/>to<sp/>at<sp/>most<sp/>100<sp/>lines,<sp/>unless<sp/>debug<sp/>logging<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self._log.isEnabledFor(10)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>rule_tree.count(</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>&gt;=<sp/>10:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_tree_lines<sp/>=<sp/>rule_tree.split(</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">)[:10]</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_tree_lines.append(</highlight><highlight class="stringliteral">&quot;----8&lt;----&quot;</highlight><highlight class="normal"><sp/>*<sp/>7)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_tree_lines.append(</highlight><highlight class="stringliteral">&quot;Printout<sp/>truncated<sp/>at<sp/>100<sp/>lines.<sp/>To<sp/>see<sp/>all,<sp/>run<sp/>with:&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_tree_lines.append(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>logging.getLogger(&apos;kaldi.compiler&apos;).setLevel(logging.DEBUG)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rule_tree<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">.join(rule_tree_lines)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._log.error(</highlight><highlight class="stringliteral">&quot;Failed<sp/>rule&apos;s<sp/>elements:\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>rule_tree)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kaldi_rule.destroy()</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CompilerError(message)</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_kaldi/compiler.py"/>
  </compounddef>
</doxygen>
