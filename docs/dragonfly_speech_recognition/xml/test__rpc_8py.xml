<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__rpc_8py" kind="file" language="Python">
    <compoundname>test_rpc.py</compoundname>
    <innerclass refid="classdragonfly_1_1test_1_1test__rpc_1_1CapturingHandler" prot="public">dragonfly::test::test_rpc::CapturingHandler</innerclass>
    <innerclass refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase" prot="public">dragonfly::test::test_rpc::RPCTestCase</innerclass>
    <innernamespace refid="namespacedragonfly_1_1test_1_1test__rpc">dragonfly::test::test_rpc</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacedragonfly_1_1test_1_1test__rpc" refkind="compound"><highlight class="comment">#<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>Dragonfly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(c)<sp/>Copyright<sp/>2007,<sp/>2008<sp/>by<sp/>Christo<sp/>Butcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>LGPL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Dragonfly<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>Dragonfly.<sp/><sp/>If<sp/>not,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logging</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>threading</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>time</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unittest</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dragonfly<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>(ActionBase,<sp/>CompoundRule,<sp/>Grammar,<sp/>Literal,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MappingRule,<sp/>Rule,<sp/>get_engine,<sp/>RPCServer,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>send_rpc_request)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="classdragonfly_1_1test_1_1test__rpc_1_1CapturingHandler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1CapturingHandler" kindref="compound">CapturingHandler</ref>(logging.Handler):</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classdragonfly_1_1test_1_1test__rpc_1_1CapturingHandler_1a3f9e9c659543a9a0065161299290c77c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1CapturingHandler_1a3f9e9c659543a9a0065161299290c77c" kindref="member">__init__</ref>(self):</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging.Handler.__init__(self)</highlight></codeline>
<codeline lineno="34" refid="classdragonfly_1_1test_1_1test__rpc_1_1CapturingHandler_1aaf79b568cb89b74ce6d96ae3ce7d733c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1CapturingHandler_1aaf79b568cb89b74ce6d96ae3ce7d733c" kindref="member">records</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classdragonfly_1_1test_1_1test__rpc_1_1CapturingHandler_1a5c9de116d15085ca09d2e31d3a77aae9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1CapturingHandler_1a5c9de116d15085ca09d2e31d3a77aae9" kindref="member">emit</ref>(self,<sp/>record):</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1CapturingHandler_1aaf79b568cb89b74ce6d96ae3ce7d733c" kindref="member">records</ref>.append(record)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase" kindref="compound">RPCTestCase</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Tests<sp/>for<sp/>RPC<sp/>server<sp/>methods.</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>@classmethod</highlight></codeline>
<codeline lineno="46" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1af1d67d1bd4f24112b1f83f6a8f56ebce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1af1d67d1bd4f24112b1f83f6a8f56ebce" kindref="member">setUpClass</ref>(cls):</highlight></codeline>
<codeline lineno="47" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a88c4b9dd8d263d33662edc77eaf4a873" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a88c4b9dd8d263d33662edc77eaf4a873" kindref="member">current_response</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Start<sp/>the<sp/>server<sp/>on<sp/>a<sp/>different<sp/>port<sp/>for<sp/>the<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref><sp/>=<sp/>RPCServer(port=50052)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.start()</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>@classmethod</highlight></codeline>
<codeline lineno="54" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1ad0cb8638f6b46e0167e6281216bdefe1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1ad0cb8638f6b46e0167e6281216bdefe1" kindref="member">tearDownClass</ref>(cls):</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cls.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.stop()</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a1978820532f8ce08ecac15a89e9869e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a1978820532f8ce08ecac15a89e9869e4" kindref="member">_send_request</ref>(self,<sp/>request_function):</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Send<sp/>requests<sp/>to<sp/>the<sp/>server<sp/>using<sp/>new<sp/>threads<sp/>to<sp/>emulate<sp/>requests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>from<sp/>a<sp/>different<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>request_thread<sp/>=<sp/>threading.Thread(target=request_function)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>request_thread.start()</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Manually<sp/>process<sp/>server<sp/>requests<sp/>by<sp/>calling<sp/>the<sp/>timer<sp/>manager&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>main<sp/>callback<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>request_thread.is_alive():</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>()._timer_manager.main_callback()</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time.sleep(0.05)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Handle<sp/>errors<sp/>and<sp/>results<sp/>from<sp/>the<sp/>request.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a88c4b9dd8d263d33662edc77eaf4a873" kindref="member">current_response</ref>,<sp/>Exception):</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a88c4b9dd8d263d33662edc77eaf4a873" kindref="member">current_response</ref></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a88c4b9dd8d263d33662edc77eaf4a873" kindref="member">current_response</ref></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(self,<sp/>method,<sp/>params,<sp/>id=0):</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">request():</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a88c4b9dd8d263d33662edc77eaf4a873" kindref="member">current_response</ref><sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method,<sp/>params,<sp/>id</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a88c4b9dd8d263d33662edc77eaf4a873" kindref="member">current_response</ref><sp/>=<sp/>e</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a1978820532f8ce08ecac15a89e9869e4" kindref="member">_send_request</ref>(request)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a7c21a59899d808e2e358b183a799f57a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a7c21a59899d808e2e358b183a799f57a" kindref="member">test_add_method</ref>(self):</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>RPC<sp/>methods<sp/>can<sp/>be<sp/>added<sp/>and<sp/>replaced.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.add_method(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(response,<sp/>{</highlight><highlight class="stringliteral">&apos;jsonrpc&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;2.0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;result&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;bar&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">:<sp/>0})</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.add_method(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(response,<sp/>{</highlight><highlight class="stringliteral">&apos;jsonrpc&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;2.0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;result&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;foo&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">:<sp/>0})</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1acfb31242e885f2bb11c8e1e2af4eb6cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1acfb31242e885f2bb11c8e1e2af4eb6cf" kindref="member">test_remove_method</ref>(self):</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>RPC<sp/>methods<sp/>can<sp/>be<sp/>removed.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>following<sp/>should<sp/>not<sp/>raise<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.remove_method(</highlight><highlight class="stringliteral">&quot;non_existent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>a<sp/>&apos;bar&apos;<sp/>method,<sp/>check<sp/>that<sp/>it<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.add_method(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(response,<sp/>{</highlight><highlight class="stringliteral">&apos;jsonrpc&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;2.0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;result&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;foo&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">:<sp/>0})</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Remove<sp/>it<sp/>and<sp/>check<sp/>that<sp/>an<sp/>error<sp/>is<sp/>returned<sp/>by<sp/>the<sp/>server.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&apos;send_request&apos;<sp/>will<sp/>raise<sp/>a<sp/>RuntimeError<sp/>if<sp/>the<sp/>server<sp/>returns<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.remove_method(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(RuntimeError,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal">:<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>[]))</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a76c54a507a16a7798e858f2e17fcde01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a76c54a507a16a7798e858f2e17fcde01" kindref="member">test_errors</ref>(self):</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>the<sp/>server<sp/>handles<sp/>errors<sp/>from<sp/>RPC<sp/>methods.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_capture<sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1CapturingHandler" kindref="compound">CapturingHandler</ref>()</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger<sp/>=<sp/>logging.getLogger(</highlight><highlight class="stringliteral">&quot;rpc.methods&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.addHandler(log_capture)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>a<sp/>new<sp/>RPC<sp/>method<sp/>and<sp/>check<sp/>if<sp/>an<sp/>error<sp/>is<sp/>logged<sp/>and<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">error():</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>RuntimeError(</highlight><highlight class="stringliteral">&quot;error<sp/>message&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.add_method(error,<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(RuntimeError,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal">:<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,<sp/>[]))</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(len(log_capture.records),<sp/>1)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_message<sp/>=<sp/>log_capture.records[0].msg</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(</highlight><highlight class="stringliteral">&quot;Exception<sp/>occurred<sp/>during<sp/>RPC<sp/>method&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>log_message)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(</highlight><highlight class="stringliteral">&quot;error<sp/>message&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>log_message)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.removeHandler(log_capture)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a87946f915aa562ce1e6b41c08eea35f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a87946f915aa562ce1e6b41c08eea35f6" kindref="member">test_security_tokens</ref>(self):</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>security<sp/>tokens<sp/>must<sp/>match<sp/>for<sp/>RPC<sp/>execution<sp/>to<sp/>occur.</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger<sp/>=<sp/>logging.getLogger(</highlight><highlight class="stringliteral">&quot;rpc.methods&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>an<sp/>RPC<sp/>method<sp/>for<sp/>testing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">security_check():</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.info(</highlight><highlight class="stringliteral">&quot;security<sp/>check<sp/>method<sp/>called.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.add_method(security_check)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>&apos;send_request&apos;<sp/>method<sp/>of<sp/>this<sp/>test<sp/>class<sp/>will<sp/>always<sp/>send<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>server&apos;s<sp/>security<sp/>token.<sp/>So<sp/>define<sp/>a<sp/>special<sp/>function<sp/>for<sp/>sending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>requests<sp/>via<sp/>&apos;_send_request&apos;<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">do_check_request(params):</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">request():</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a88c4b9dd8d263d33662edc77eaf4a873" kindref="member">current_response</ref><sp/>=<sp/><ref refid="namespacedragonfly_1_1rpc_1_1util_1ac57f43e55f3ae555ebd67017105c720d" kindref="member">send_rpc_request</ref>(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.url,<sp/></highlight><highlight class="stringliteral">&quot;security_check&quot;</highlight><highlight class="normal">,<sp/>params,<sp/>0</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a88c4b9dd8d263d33662edc77eaf4a873" kindref="member">current_response</ref><sp/>=<sp/>e</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a1978820532f8ce08ecac15a89e9869e4" kindref="member">_send_request</ref>(request)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Log<sp/>errors<sp/>for<sp/>the<sp/>&apos;rpc.methods&apos;<sp/>logger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_capture<sp/>=<sp/><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1CapturingHandler" kindref="compound">CapturingHandler</ref>()</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.addHandler(log_capture)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_length<sp/>=<sp/>[0]</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">next_log_msg():</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>records<sp/>=<sp/>log_capture.records</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>len(records)<sp/>&gt;<sp/>last_length[0],<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>next<sp/>log<sp/>message&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_length[0]<sp/>=<sp/>len(records)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>records[len(records)<sp/>-<sp/>1].msg</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>with<sp/>no<sp/>security<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(RuntimeError,<sp/>do_check_request,<sp/>())</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(next_log_msg(),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;client<sp/>did<sp/>not<sp/>send<sp/>the<sp/>required<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;security_token&apos;<sp/>argument&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>with<sp/>an<sp/>invalid<sp/>security<sp/>token<sp/>using<sp/>positional<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>keyword<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalid_token<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;NotTheTokenYou&apos;reLookingFor&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalid_msg<sp/>=<sp/>(</highlight><highlight class="stringliteral">&quot;Client<sp/>sent<sp/>a<sp/>security<sp/>token<sp/>that<sp/>did<sp/>not<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;match<sp/>the<sp/>server\&apos;s&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(RuntimeError,<sp/>do_check_request,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[invalid_token])</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(next_log_msg(),<sp/>invalid_msg)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(RuntimeError,<sp/>do_check_request,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;security_token&quot;</highlight><highlight class="normal">:<sp/>invalid_token})</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(next_log_msg(),<sp/>invalid_msg)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>with<sp/>the<sp/>correct<sp/>security<sp/>token.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;security<sp/>check<sp/>method<sp/>called.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(do_check_request([self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.security_token]))</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(next_log_msg(),<sp/>valid_msg)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(do_check_request({</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;security_token&quot;</highlight><highlight class="normal">:<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a314b075f910ecdbf0f0d8d625f908b20" kindref="member">server</ref>.security_token}))</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(next_log_msg(),<sp/>valid_msg)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Also<sp/>check<sp/>using<sp/>the<sp/>normal<sp/>send_request<sp/>method<sp/>that<sp/>adds<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>security<sp/>token<sp/>automatically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;security_check&quot;</highlight><highlight class="normal">,<sp/>[]))</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(next_log_msg(),<sp/>valid_msg)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger.removeHandler(log_capture)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a7ea857eab4a98bc0dcb05d9b6f1c90a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a7ea857eab4a98bc0dcb05d9b6f1c90a6" kindref="member">test_list_grammars</ref>(self):</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>the<sp/>&apos;list_grammars&apos;<sp/>RPC<sp/>method<sp/>works<sp/>correctly.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Load<sp/>a<sp/>Grammar<sp/>with<sp/>three<sp/>rules<sp/>and<sp/>check<sp/>that<sp/>the<sp/>RPC<sp/>returns<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>correct<sp/>data<sp/>for<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1grammar__base_1_1Grammar" kindref="compound">Grammar</ref>(</highlight><highlight class="stringliteral">&quot;list_grammars_test&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.add_rule(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(name=</highlight><highlight class="stringliteral">&quot;compound&quot;</highlight><highlight class="normal">,<sp/>spec=</highlight><highlight class="stringliteral">&quot;testing&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exported=</highlight><highlight class="keyword">True</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.add_rule(<ref refid="classdragonfly_1_1grammar_1_1rule__mapping_1_1MappingRule" kindref="compound">MappingRule</ref>(name=</highlight><highlight class="stringliteral">&quot;mapping&quot;</highlight><highlight class="normal">,<sp/>mapping={</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;command<sp/>a&quot;</highlight><highlight class="normal">:<sp/>ActionBase(),</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;command<sp/>b&quot;</highlight><highlight class="normal">:<sp/>ActionBase()</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}))</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.add_rule(<ref refid="classdragonfly_1_1grammar_1_1rule__base_1_1Rule" kindref="compound">Rule</ref>(name=</highlight><highlight class="stringliteral">&quot;base&quot;</highlight><highlight class="normal">,<sp/>element=<ref refid="namespacedragonfly_1_1grammar_1_1elements_1a012cfe2ca8a31508c1262048051c398c" kindref="member">Literal</ref>(</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exported=</highlight><highlight class="keyword">False</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.load()</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;list_grammars&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_grammar_data<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">:<sp/>g.name,<sp/></highlight><highlight class="stringliteral">&quot;enabled&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;rules&quot;</highlight><highlight class="normal">:<sp/>[</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;compound&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;specs&quot;</highlight><highlight class="normal">:<sp/>[</highlight><highlight class="stringliteral">&quot;testing&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exported&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;mapping&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;specs&quot;</highlight><highlight class="normal">:<sp/>[</highlight><highlight class="stringliteral">&quot;command<sp/>a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;command<sp/>b&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exported&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&quot;base&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;specs&quot;</highlight><highlight class="normal">:<sp/>[</highlight><highlight class="stringliteral">&quot;hello<sp/>world&quot;</highlight><highlight class="normal">],</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exported&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;active&quot;</highlight><highlight class="normal">:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>the<sp/>loaded<sp/>grammar<sp/>appears<sp/>in<sp/>the<sp/>result.<sp/>It<sp/>might<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>be<sp/>the<sp/>only<sp/>grammar<sp/>and<sp/>that<sp/>is<sp/>acceptable<sp/>because<sp/>dragonfly&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>tests<sp/>can<sp/>be<sp/>run<sp/>while<sp/>user<sp/>grammars<sp/>are<sp/>loaded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">,<sp/>response)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(expected_grammar_data,<sp/>response[</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.unload()</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1af37a48bfb56e7e90cc34e6163a7f5d7d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1af37a48bfb56e7e90cc34e6163a7f5d7d" kindref="member">test_mimic</ref>(self):</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>the<sp/>&apos;mimic&apos;<sp/>RPC<sp/>method<sp/>works<sp/>correctly.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1grammar__base_1_1Grammar" kindref="compound">Grammar</ref>(</highlight><highlight class="stringliteral">&quot;mimic_test&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.add_rule(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(name=</highlight><highlight class="stringliteral">&quot;compound&quot;</highlight><highlight class="normal">,<sp/>spec=</highlight><highlight class="stringliteral">&quot;testing<sp/>mimicry&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exported=</highlight><highlight class="keyword">True</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.load()</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>the<sp/>grammar<sp/>as<sp/>exclusive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>sapi5shared<sp/>engine<sp/>apparently<sp/>requires<sp/>this<sp/>for<sp/>mimic()<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>work,<sp/>making<sp/>the<sp/>method<sp/>kind<sp/>of<sp/>useless.<sp/>This<sp/>does<sp/>not<sp/>apply<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>sapi5inproc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.set_exclusiveness(</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;mimic&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;testing<sp/>mimicry&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">,<sp/>response)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(response[</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">],<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.set_exclusiveness(</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.unload()</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a8d8ae86980ba317c65f19cb185a06de2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a8d8ae86980ba317c65f19cb185a06de2" kindref="member">test_speak</ref>(self):</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;speak&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;testing<sp/>speak&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">,<sp/>response)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(response[</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">],<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a229eeab0c85a2a5b1b7aa8e66cd65843" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a229eeab0c85a2a5b1b7aa8e66cd65843" kindref="member">test_get_engine_language</ref>(self):</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>the<sp/>&apos;speak&apos;<sp/>RPC<sp/>method<sp/>works<sp/>correctly.<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;get_engine_language&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">,<sp/>response)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(response[</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">],<sp/></highlight><highlight class="stringliteral">&quot;en&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a745ec24d6c6bcbd4c63c734aa6328923" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1a745ec24d6c6bcbd4c63c734aa6328923" kindref="member">test_recognition_history_methods</ref>(self):</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>Verify<sp/>that<sp/>the<sp/>recognition<sp/>history<sp/>RPC<sp/>methods<sp/>work<sp/>correctly.</highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Load<sp/>a<sp/>grammar<sp/>for<sp/>testing<sp/>that<sp/>recognitions<sp/>are<sp/>saved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g<sp/>=<sp/><ref refid="classdragonfly_1_1grammar_1_1grammar__base_1_1Grammar" kindref="compound">Grammar</ref>(</highlight><highlight class="stringliteral">&quot;history_test&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.add_rule(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>(name=</highlight><highlight class="stringliteral">&quot;compound&quot;</highlight><highlight class="normal">,<sp/>spec=</highlight><highlight class="stringliteral">&quot;test<sp/>history&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exported=</highlight><highlight class="keyword">True</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.load()</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.set_exclusiveness(</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>&apos;register_history()&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;register_history&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">,<sp/>response)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>that<sp/>the<sp/>method<sp/>raises<sp/>an<sp/>error<sp/>if<sp/>used<sp/>when<sp/>the<sp/>observer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>is<sp/>already<sp/>registered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(RuntimeError,<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;register_history&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Send<sp/>a<sp/>mimic<sp/>and<sp/>check<sp/>that<sp/>it<sp/>is<sp/>returned<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&apos;get_recognition_history()&apos;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;mimic&quot;</highlight><highlight class="normal">,<sp/>[</highlight><highlight class="stringliteral">&quot;test<sp/>history&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;get_recognition_history&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">,<sp/>response)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertListEqual(response[</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">],<sp/>[[</highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;history&quot;</highlight><highlight class="normal">]])</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>&apos;unregister_observer()&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>(</highlight><highlight class="stringliteral">&quot;unregister_history&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIn(</highlight><highlight class="stringliteral">&quot;result&quot;</highlight><highlight class="normal">,<sp/>response)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Test<sp/>that<sp/>the<sp/>method<sp/>raises<sp/>an<sp/>error<sp/>if<sp/>used<sp/>when<sp/>the<sp/>observer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>is<sp/>not<sp/>registered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertRaises(RuntimeError,<sp/>self.<ref refid="classdragonfly_1_1test_1_1test__rpc_1_1RPCTestCase_1aa309f8cc1f4b45df9328052e7313e25a" kindref="member">send_request</ref>,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unregister_history&quot;</highlight><highlight class="normal">,<sp/>[])</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.set_exclusiveness(</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.unload()</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Use<sp/>the<sp/>&quot;text&quot;<sp/>engine<sp/>by<sp/>default<sp/>and<sp/>disable<sp/>timer<sp/>manager<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>to<sp/>avoid<sp/>race<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>(</highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">)._timer_manager.disable()</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1log" kindref="compound">dragonfly.log</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>setup_log</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1log_1a63ebb656a7eac0e092eaf67bebccd865" kindref="member">setup_log</ref>()<sp/><sp/></highlight><highlight class="comment">#<sp/>tests<sp/>require<sp/>sane<sp/>logging<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>unittest.main()</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/test/test_rpc.py"/>
  </compounddef>
</doxygen>
