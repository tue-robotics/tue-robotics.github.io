<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__multiple__dictation_8py" kind="file" language="Python">
    <compoundname>test_multiple_dictation.py</compoundname>
    <innerclass refid="classtest__multiple__dictation_1_1ConsecutiveDictationRule" prot="public">test_multiple_dictation::ConsecutiveDictationRule</innerclass>
    <innerclass refid="classtest__multiple__dictation_1_1MixedDictationRule" prot="public">test_multiple_dictation::MixedDictationRule</innerclass>
    <innerclass refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule" prot="public">test_multiple_dictation::RecognitionAnalysisRule</innerclass>
    <innerclass refid="classtest__multiple__dictation_1_1RepeatedDictationRule" prot="public">test_multiple_dictation::RepeatedDictationRule</innerclass>
    <innernamespace refid="namespacetest__multiple__dictation">test_multiple_dictation</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacetest__multiple__dictation" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">Multiple<sp/>dictation<sp/>constructs</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">===============================================================================</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">This<sp/>file<sp/>is<sp/>a<sp/>showcase<sp/>investigating<sp/>the<sp/>use<sp/>and<sp/>functionality<sp/>of<sp/>multiple</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">dictation<sp/>elements<sp/>within<sp/>Dragonfly<sp/>speech<sp/>recognition<sp/>grammars.</highlight></codeline>
<codeline lineno="7"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral">The<sp/>first<sp/>part<sp/>of<sp/>this<sp/>file<sp/>(i.e.<sp/>the<sp/>module&apos;s<sp/>doc<sp/>string)<sp/>contains<sp/>a<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral">description<sp/>of<sp/>the<sp/>functionality<sp/>being<sp/>investigated<sp/>along<sp/>with<sp/>test<sp/>code<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral">and<sp/>actual<sp/>output<sp/>in<sp/>doctest<sp/>format.<sp/>This<sp/>allows<sp/>the<sp/>reader<sp/>to<sp/>see<sp/>what<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral">really<sp/>would<sp/>happen,<sp/>without<sp/>needing<sp/>to<sp/>load<sp/>the<sp/>file<sp/>into<sp/>a<sp/>speech<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral">recognition<sp/>engine<sp/>and<sp/>put<sp/>effort<sp/>into<sp/>speaking<sp/>all<sp/>the<sp/>showcased<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral">commands.</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral">The<sp/>test<sp/>code<sp/>below<sp/>makes<sp/>use<sp/>of<sp/>Dragonfly&apos;s<sp/>built-in<sp/>element<sp/>testing<sp/>tool.</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral">When<sp/>run,<sp/>it<sp/>will<sp/>connect<sp/>to<sp/>the<sp/>speech<sp/>recognition<sp/>engine,<sp/>load<sp/>the<sp/>element</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral">being<sp/>tested,<sp/>mimic<sp/>recognitions,<sp/>and<sp/>process<sp/>the<sp/>recognized<sp/>value.</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral">Multiple<sp/>consecutive<sp/>dictation<sp/>elements</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral">-------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">&gt;&gt;&gt;<sp/>tester<sp/>=<sp/>ElementTester(RuleRef(ConsecutiveDictationRule()))</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral">&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;consecutive<sp/>Alice<sp/>Bob<sp/>Charlie&quot;))</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">Recognition:<sp/>&quot;consecutive<sp/>Alice<sp/>Bob<sp/>Charlie&quot;</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral">Word<sp/>and<sp/>rule<sp/>pairs:<sp/>(&quot;1000000&quot;<sp/>is<sp/>&quot;dgndictation&quot;)</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"><sp/>-<sp/>consecutive<sp/>(1)</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral"><sp/>-<sp/>Alice<sp/>(1000000)</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral"><sp/>-<sp/>Bob<sp/>(1000000)</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"><sp/>-<sp/>Charlie<sp/>(1000000)</highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral">Extras:</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral"><sp/>-<sp/>dictation1:<sp/>Alice</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/>-<sp/>dictation2:<sp/>Bob</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"><sp/>-<sp/>dictation3:<sp/>Charlie</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral">&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;consecutive<sp/>Alice<sp/>Bob&quot;))</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">RecognitionFailure</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">Mixed<sp/>literal<sp/>and<sp/>dictation<sp/>elements</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral">-------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral">Here<sp/>we<sp/>will<sp/>investigate<sp/>mixed,<sp/>i.e.<sp/>interspersed,<sp/>fixed<sp/>literal<sp/>command</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">words<sp/>and<sp/>dynamic<sp/>dictation<sp/>elements.<sp/>We<sp/>will<sp/>use<sp/>the<sp/>&quot;MixedDictationRule&quot;</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">class<sp/>which<sp/>has<sp/>a<sp/>spec<sp/>of</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral">&quot;mixed<sp/>[&lt;dictation1&gt;]<sp/>&lt;dictation2&gt;<sp/>command<sp/>&lt;dictation3&gt;&quot;.</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral">Note<sp/>that<sp/>&quot;&lt;dictation1&gt;&quot;<sp/>was<sp/>made<sp/>optional<sp/>instead<sp/>of<sp/>&quot;&lt;dictation2&gt;&quot;<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral">because<sp/>otherwise<sp/>the<sp/>first<sp/>dictation<sp/>elements<sp/>would<sp/>always<sp/>gobble<sp/>up<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral">all<sp/>dictated<sp/>words.<sp/>There<sp/>would<sp/>(by<sp/>definition)<sp/>be<sp/>no<sp/>way<sp/>to<sp/>distinguish<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral">which<sp/>words<sp/>correspond<sp/>with<sp/>which<sp/>dictation<sp/>elements.<sp/>Such<sp/>consecutive<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral">dictation<sp/>elements<sp/>should<sp/>for<sp/>that<sp/>reason<sp/>be<sp/>avoided<sp/>in<sp/>real<sp/>command<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral">grammars.<sp/>The<sp/>way<sp/>the<sp/>spec<sp/>is<sp/>defined<sp/>now,<sp/>adds<sp/>some<sp/>interesting<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral">dynamics,<sp/>because<sp/>of<sp/>the<sp/>order<sp/>in<sp/>which<sp/>they<sp/>dictation<sp/>elements<sp/>parse<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral">the<sp/>recognized<sp/>words.<sp/>However,<sp/>do<sp/>note<sp/>that<sp/>that<sp/>order<sp/>is<sp/>well<sp/>defined<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral">but<sp/>arbitrarily<sp/>chosen.<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral">&gt;&gt;&gt;<sp/>tester<sp/>=<sp/>ElementTester(RuleRef(MixedDictationRule()))</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral">&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;mixed<sp/>Alice<sp/>Bob<sp/>command<sp/>Charlie&quot;))</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral">Recognition:<sp/>&quot;mixed<sp/>Alice<sp/>Bob<sp/>command<sp/>Charlie&quot;</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral">Word<sp/>and<sp/>rule<sp/>pairs:<sp/>(&quot;1000000&quot;<sp/>is<sp/>&quot;dgndictation&quot;)</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/>-<sp/>mixed<sp/>(1)</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/>-<sp/>Alice<sp/>(1000000)</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/>-<sp/>Bob<sp/>(1000000)</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/>-<sp/>command<sp/>(1)</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/>-<sp/>Charlie<sp/>(1000000)</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral">Extras:</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/>-<sp/>dictation1:<sp/>Alice</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/>-<sp/>dictation2:<sp/>Bob</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/>-<sp/>dictation3:<sp/>Charlie</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral">&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;mixed<sp/>Alice<sp/>command<sp/>Charlie&quot;))</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral">Recognition:<sp/>&quot;mixed<sp/>Alice<sp/>command<sp/>Charlie&quot;</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral">Word<sp/>and<sp/>rule<sp/>pairs:<sp/>(&quot;1000000&quot;<sp/>is<sp/>&quot;dgndictation&quot;)</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/>-<sp/>mixed<sp/>(1)</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/>-<sp/>Alice<sp/>(1000000)</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/>-<sp/>command<sp/>(1)</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/>-<sp/>Charlie<sp/>(1000000)</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral">Extras:</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/>-<sp/>dictation2:<sp/>Alice</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/>-<sp/>dictation3:<sp/>Charlie</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral">&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;mixed<sp/>Alice<sp/>Bob<sp/>command&quot;))</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral">RecognitionFailure</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral">&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;mixed<sp/>command<sp/>Charlie&quot;))</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral">RecognitionFailure</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral">Repetition<sp/>of<sp/>dictation<sp/>elements</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral">-------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral">Now<sp/>let&apos;s<sp/>take<sp/>a<sp/>look<sp/>at<sp/>repetition<sp/>of<sp/>dictation<sp/>elements.<sp/>For<sp/>this</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral">we<sp/>will<sp/>use<sp/>the<sp/>&quot;RepeatedDictationRule&quot;<sp/>class,<sp/>which<sp/>defines<sp/>its<sp/>spec</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral">as<sp/>a<sp/>repetition<sp/>of<sp/>&quot;command<sp/>&lt;dictation&gt;&quot;.<sp/>I.e.<sp/>&quot;command<sp/>Alice&quot;<sp/>will</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral">match,<sp/>and<sp/>&quot;command<sp/>Alice<sp/>command<sp/>Bob&quot;<sp/>will<sp/>also<sp/>match.</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral">Note<sp/>that<sp/>this<sp/>rule<sp/>is<sp/>inherently<sp/>ambiguous,<sp/>given<sp/>the<sp/>lack<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral">clear<sp/>definition<sp/>of<sp/>grouping<sp/>or<sp/>precedence<sp/>rules<sp/>for<sp/>fixed<sp/>literal</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral">words<sp/>in<sp/>commands,<sp/>and<sp/>dynamic<sp/>dictation<sp/>elements.<sp/>As<sp/>an<sp/>example,</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral">&quot;command<sp/>Alice<sp/>command<sp/>Bob&quot;<sp/>could<sp/>either<sp/>match<sp/>2<sp/>repetitions<sp/>with</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral">&quot;Alice&quot;<sp/>and<sp/>&quot;Bob&quot;<sp/>as<sp/>dictation<sp/>values,<sp/>or<sp/>a<sp/>single<sp/>repetition<sp/>with</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral">&quot;Alice<sp/>command<sp/>Bob&quot;<sp/>as<sp/>its<sp/>only<sp/>dictation<sp/>value.<sp/>The<sp/>tests<sp/>below</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral">the<sp/>show<sp/>which<sp/>of<sp/>these<sp/>actually<sp/>occurs.</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral">&gt;&gt;&gt;<sp/>tester<sp/>=<sp/>ElementTester(RuleRef(RepeatedDictationRule()))</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral">&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;command<sp/>Alice&quot;))</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral">Recognition:<sp/>&quot;command<sp/>Alice&quot;</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral">Word<sp/>and<sp/>rule<sp/>pairs:<sp/>(&quot;1000000&quot;<sp/>is<sp/>&quot;dgndictation&quot;)</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"><sp/>-<sp/>command<sp/>(1)</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral"><sp/>-<sp/>Alice<sp/>(1000000)</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral">Extras:</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral"><sp/>-<sp/>repetition:<sp/>[[u&apos;command&apos;,<sp/>NatlinkDictationContainer(Alice)]]</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral">&gt;&gt;&gt;<sp/>print(tester.recognize(&quot;command<sp/>Alice<sp/>command<sp/>Bob&quot;))</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral">Recognition:<sp/>&quot;command<sp/>Alice<sp/>command<sp/>Bob&quot;</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral">Word<sp/>and<sp/>rule<sp/>pairs:<sp/>(&quot;1000000&quot;<sp/>is<sp/>&quot;dgndictation&quot;)</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/>-<sp/>command<sp/>(1)</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/>-<sp/>Alice<sp/>(1000000)</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/>-<sp/>command<sp/>(1000000)</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/>-<sp/>Bob<sp/>(1000000)</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral">Extras:</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral"><sp/>-<sp/>repetition:<sp/>[[u&apos;command&apos;,<sp/>NatlinkDictationContainer(Alice,<sp/>command,<sp/>Bob)]]</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>doctest</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dragonfly<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1test_1_1infrastructure" kindref="compound">dragonfly.test.infrastructure</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>RecognitionFailure</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1test_1_1element__testcase" kindref="compound">dragonfly.test.element_testcase</ref><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ElementTestCase</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedragonfly_1_1test_1_1element__tester" kindref="compound">dragonfly.test.element_tester</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ElementTester</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule" kindref="compound">RecognitionAnalysisRule</ref>(<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule" kindref="compound">CompoundRule</ref>):</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base<sp/>class<sp/>that<sp/>implements<sp/>reporting<sp/>in<sp/>human-readable<sp/>format</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>details<sp/>about<sp/>the<sp/>recognized<sp/>phrase.<sp/>It<sp/>is<sp/>used<sp/>by<sp/>the<sp/>actual</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing<sp/>rules<sp/>below,<sp/>and<sp/>allows<sp/>the<sp/>doctests<sp/>above<sp/>to<sp/>be<sp/>easily</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readable<sp/>and<sp/>informative.</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule_1a786b7da8cc26db2abdc20410d191d6f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule_1a786b7da8cc26db2abdc20410d191d6f3" kindref="member">_process_recognition</ref>(self,<sp/>node,<sp/>extras):</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Paste(text).execute()</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule_1acf2847fefd4e2eaba493e0a323dcad2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule_1acf2847fefd4e2eaba493e0a323dcad2f" kindref="member">value</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule_1a23b977af0152c24deb9e439fd278d493" kindref="member">get_recognition_info</ref>(node)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule_1a23b977af0152c24deb9e439fd278d493" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule_1a23b977af0152c24deb9e439fd278d493" kindref="member">get_recognition_info</ref>(self,<sp/>node):</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(</highlight><highlight class="stringliteral">&apos;Recognition:<sp/>&quot;{0}&quot;&apos;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">.join(node.words())))</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(</highlight><highlight class="stringliteral">&apos;Word<sp/>and<sp/>rule<sp/>pairs:<sp/>(&quot;1000000&quot;<sp/>is<sp/>&quot;dgndictation&quot;)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>word,<sp/>rule<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>node.full_results():</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(</highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>{0}<sp/>({1})&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(word,<sp/>rule))</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(</highlight><highlight class="stringliteral">&quot;Extras:&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sorted(extra.name<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>extra<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdragonfly_1_1grammar_1_1rule__compound_1_1CompoundRule_1a838562ca8c0f3553d1071d3e4091566f" kindref="member">extras</ref>):</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_node<sp/>=<sp/>node.get_child_by_name(key)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>extra_node:</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.append(</highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>{0}:<sp/>{1}&quot;</highlight><highlight class="normal">.<ref refid="namespacedragonfly__speech__recognition_1_1dragonfly__client_1a5c5aeb1fdc09eb0375a6080813d84cd5" kindref="member">format</ref>(key,<sp/>extra_node.value()))</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">.join(output)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="classtest__multiple__dictation_1_1ConsecutiveDictationRule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__multiple__dictation_1_1ConsecutiveDictationRule" kindref="compound">ConsecutiveDictationRule</ref>(<ref refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule" kindref="compound">RecognitionAnalysisRule</ref>):</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="classtest__multiple__dictation_1_1ConsecutiveDictationRule_1a50f74219b73db86211d15ab76fe2e891" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>spec<sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;consecutive<sp/>&lt;dictation1&gt;<sp/>&lt;dictation2&gt;<sp/>&lt;dictation3&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="classtest__multiple__dictation_1_1ConsecutiveDictationRule_1a3f7ade840f729ed6088e60a8c2cf7663" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>extras<sp/>=<sp/>[<ref refid="namespacedragonfly_1_1grammar_1_1elements_1a56a36e895956f6e50060b69fbdbdcee8" kindref="member">Dictation</ref>(</highlight><highlight class="stringliteral">&quot;dictation1&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1a56a36e895956f6e50060b69fbdbdcee8" kindref="member">Dictation</ref>(</highlight><highlight class="stringliteral">&quot;dictation2&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1a56a36e895956f6e50060b69fbdbdcee8" kindref="member">Dictation</ref>(</highlight><highlight class="stringliteral">&quot;dictation3&quot;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="classtest__multiple__dictation_1_1MixedDictationRule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__multiple__dictation_1_1MixedDictationRule" kindref="compound">MixedDictationRule</ref>(<ref refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule" kindref="compound">RecognitionAnalysisRule</ref>):</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="classtest__multiple__dictation_1_1MixedDictationRule_1a150f68542c94893b1ccdfc3c47130686" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>spec<sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;mixed<sp/>[&lt;dictation1&gt;]<sp/>&lt;dictation2&gt;<sp/>command<sp/>&lt;dictation3&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classtest__multiple__dictation_1_1MixedDictationRule_1a1986ff8283831d4461fbc38c7d3f74ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>extras<sp/>=<sp/>[<ref refid="namespacedragonfly_1_1grammar_1_1elements_1a56a36e895956f6e50060b69fbdbdcee8" kindref="member">Dictation</ref>(</highlight><highlight class="stringliteral">&quot;dictation1&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1a56a36e895956f6e50060b69fbdbdcee8" kindref="member">Dictation</ref>(</highlight><highlight class="stringliteral">&quot;dictation2&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1a56a36e895956f6e50060b69fbdbdcee8" kindref="member">Dictation</ref>(</highlight><highlight class="stringliteral">&quot;dictation3&quot;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="classtest__multiple__dictation_1_1RepeatedDictationRule" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest__multiple__dictation_1_1RepeatedDictationRule" kindref="compound">RepeatedDictationRule</ref>(<ref refid="classtest__multiple__dictation_1_1RecognitionAnalysisRule" kindref="compound">RecognitionAnalysisRule</ref>):</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="classtest__multiple__dictation_1_1RepeatedDictationRule_1aa676c79f0990a1b1ccfe3fb303c67ee3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>spec<sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;repetition&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="classtest__multiple__dictation_1_1RepeatedDictationRule_1ada035e50ada1f0a551fe55e626a90aa7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>extras<sp/>=<sp/>[<ref refid="namespacedragonfly_1_1grammar_1_1elements_1ae5ca132f0f9ddff970a697aab8b29c25" kindref="member">Repetition</ref>(name=</highlight><highlight class="stringliteral">&quot;repetition&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child=<ref refid="namespacedragonfly_1_1grammar_1_1elements_1afd0c0c3012ffdebee3500092a27713e7" kindref="member">Sequence</ref>([<ref refid="namespacedragonfly_1_1grammar_1_1elements_1a012cfe2ca8a31508c1262048051c398c" kindref="member">Literal</ref>(</highlight><highlight class="stringliteral">&quot;command&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedragonfly_1_1grammar_1_1elements_1a56a36e895956f6e50060b69fbdbdcee8" kindref="member">Dictation</ref>()]))]</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">#---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="namespacetest__multiple__dictation_1ab6886f7ebe16c680f9bcd68a1e7063b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacetest__multiple__dictation_1ab6886f7ebe16c680f9bcd68a1e7063b1" kindref="member">main</ref>():</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>engine<sp/>=<sp/><ref refid="namespacedragonfly_1_1engines_1a54a7132d79612abdb29fac07276b5681" kindref="member">get_engine</ref>()</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>engine.connect()</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doctest.testmod(verbose=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">finally</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engine.disconnect()</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;__main__&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetest__multiple__dictation_1ab6886f7ebe16c680f9bcd68a1e7063b1" kindref="member">main</ref>()</highlight></codeline>
    </programlisting>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/examples/test_multiple_dictation.py"/>
  </compounddef>
</doxygen>
