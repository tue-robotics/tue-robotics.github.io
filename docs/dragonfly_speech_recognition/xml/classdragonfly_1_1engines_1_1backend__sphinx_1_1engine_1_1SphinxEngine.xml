<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine" kind="class" language="Python" prot="public">
    <compoundname>dragonfly::engines::backend_sphinx::engine::SphinxEngine</compoundname>
    <basecompoundref prot="public" virt="non-virtual">EngineBase</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">DelegateTimerManagerInterface</basecompoundref>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ae7f5c348da7bf0d14aae57a3ccd63d51" prot="private" static="yes" mutable="no">
        <type>string</type>
        <definition>string dragonfly.engines.backend_sphinx.engine.SphinxEngine::_name</definition>
        <argsstring></argsstring>
        <name>_name</name>
        <initializer>=  &quot;sphinx&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="70" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="70" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aae9078ea264deceb5fc5e8b5723f8a14" prot="public" static="yes" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::DictationContainer</definition>
        <argsstring></argsstring>
        <name>DictationContainer</name>
        <initializer>=  DictationContainerBase</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="71" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a80ec054478385d8b1cd95d577e65c551" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_audio_buffers</definition>
        <argsstring></argsstring>
        <name>_audio_buffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="90" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ad2a6370373399a39704479421ed53713" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_cancel_recognition_next_time</definition>
        <argsstring></argsstring>
        <name>_cancel_recognition_next_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="108" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aada22f6db21a155be76c610584532137" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_config</definition>
        <argsstring></argsstring>
        <name>_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="85" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a62f29602738696637c516c9b61584009" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_decoder</definition>
        <argsstring></argsstring>
        <name>_decoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="89" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a980422bae7b4d6cd8e84e56329245e47" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_default_search_result</definition>
        <argsstring></argsstring>
        <name>_default_search_result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="96" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a224a023299a42d7cb10451925d96c160" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_grammar_count</definition>
        <argsstring></argsstring>
        <name>_grammar_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="97" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ad6e17dd4716a745a141c7ba4a3cccde0" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_keyphrase_functions</definition>
        <argsstring></argsstring>
        <name>_keyphrase_functions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="94" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a3b3651cc3fd9391e4af634ec9a0fd46c" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_keyphrase_search_names</definition>
        <argsstring></argsstring>
        <name>_keyphrase_search_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="103" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a8b5a9a69597149d8ca87b9d7dcabbca1" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_keyphrase_thresholds</definition>
        <argsstring></argsstring>
        <name>_keyphrase_thresholds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="93" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1afc92ca8b53d2b32f2bb0f82d02f05b4d" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_recognising</definition>
        <argsstring></argsstring>
        <name>_recognising</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="109" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ab0807d207d382b8da16c829f7a4f1c5f" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_recognition_observer_manager</definition>
        <argsstring></argsstring>
        <name>_recognition_observer_manager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="92" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a3ab17d4982109b8ddd8154be4289cbb8" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_recognition_paused</definition>
        <argsstring></argsstring>
        <name>_recognition_paused</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="110" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1adc9f5aece051e3898ce093e5b7f59179" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_recorder</definition>
        <argsstring></argsstring>
        <name>_recorder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="107" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ae75e0db02fc9b856083c0b93fbf2f260" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_timer_manager</definition>
        <argsstring></argsstring>
        <name>_timer_manager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="100" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a332562e17073cb22d6875c3b7dc54370" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_training_session_active</definition>
        <argsstring></argsstring>
        <name>_training_session_active</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="95" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a89e7dc2460cc94187041acff6af65ce7" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::_valid_searches</definition>
        <argsstring></argsstring>
        <name>_valid_searches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="104" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a8ba9da5dd33e312a5779bc53207fa850" prot="public" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::compiler</definition>
        <argsstring></argsstring>
        <name>compiler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="91" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a63b1748e141b4ba63b215582b49605ed" prot="public" static="no" mutable="no">
        <type></type>
        <definition>dragonfly.engines.backend_sphinx.engine.SphinxEngine::config</definition>
        <argsstring></argsstring>
        <name>config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="86" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a5b794c4672ba87890ba7beeea01c0d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.__init__</definition>
        <argsstring>(self)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="73" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="73" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aed290c61eb58de8fbba4c9d8e0b96d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.activate_grammar</definition>
        <argsstring>(self, grammar)</argsstring>
        <name>activate_grammar</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>grammar</type>
          <defname>grammar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="500" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="500" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ae96db84de28e388eed36cffb698ab884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.activate_rule</definition>
        <argsstring>(self, rule, grammar)</argsstring>
        <name>activate_rule</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>rule</type>
          <defname>rule</defname>
        </param>
        <param>
          <type>grammar</type>
          <defname>grammar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="506" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="506" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a56599808a5c629c0db3645f57b33530d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.cancel_recognition</definition>
        <argsstring>(self)</argsstring>
        <name>cancel_recognition</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>If a recognition was in progress, cancel it before processing the
next audio buffer.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1219" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1219" bodyend="1225"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a6b0ccaa21efb588e13e931807c3127aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.check_valid_word</definition>
        <argsstring>(self, word)</argsstring>
        <name>check_valid_word</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>word</type>
          <defname>word</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Check if a word is in the current Sphinx pronunciation dictionary.

:rtype: bool
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="310" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="310" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a287ec4023cba0183922c98235b94658d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.config</definition>
        <argsstring>(self)</argsstring>
        <name>config</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Python module/object containing engine configuration.

You will need to restart the engine with :meth:`disconnect` and
:meth:`connect` if the configuration has been changed after
:meth:`connect` has been called.

:returns: config module/object
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="113" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="113" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ab6864a395b74cb062100c80cdc96ac8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.config</definition>
        <argsstring>(self, value)</argsstring>
        <name>config</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>value</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="126" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a7359f8cf1ae84adfedd84c135d1104bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.connect</definition>
        <argsstring>(self)</argsstring>
        <name>connect</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Set up the CMU Pocket Sphinx decoder.

This method does nothing if the engine is already connected.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="173" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="173" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1af2a8260bcbff8cd5dfce720b9f32edfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.create_timer</definition>
        <argsstring>(self, callback, interval, repeating=True)</argsstring>
        <name>create_timer</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>callback</type>
          <defname>callback</defname>
        </param>
        <param>
          <type>interval</type>
          <defname>interval</defname>
        </param>
        <param>
          <type>repeating</type>
          <defname>repeating</defname>
          <defval>True</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Create and return a timer using the specified callback and repeat
interval.

**Note**: Timers will not run unless the engine is recognising
audio. Normal threads can be used instead with no downsides.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="292" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="292" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ac790129d1bf0340a676d58dacef633b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.deactivate_grammar</definition>
        <argsstring>(self, grammar)</argsstring>
        <name>deactivate_grammar</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>grammar</type>
          <defname>grammar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="503" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="503" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1afa5cfd6740a53ed524cb03b09e0c1725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.deactivate_rule</definition>
        <argsstring>(self, rule, grammar)</argsstring>
        <name>deactivate_rule</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>rule</type>
          <defname>rule</defname>
        </param>
        <param>
          <type>grammar</type>
          <defname>grammar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="519" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="519" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a4145c8cf91224a1ba69de616449f9488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.default_search_result</definition>
        <argsstring>(self)</argsstring>
        <name>default_search_result</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>The last hypothesis object of the default search.

This does not currently reach recognition observers because it is
intended to be used for dictation results, which are currently
disabled. Nevertheless this object can be useful sometimes.

:returns: Sphinx Hypothesis object | None
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="571" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="571" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a2a0907dd7df8727fc9e34e20d1e0eeac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.disconnect</definition>
        <argsstring>(self)</argsstring>
        <name>disconnect</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Deallocate the CMU Sphinx decoder and any other resources used by
it.

This method effectively unloads all loaded grammars and key
phrases.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="272" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="272" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a9560dc29069e538c968010fcddd51227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.end_training_session</definition>
        <argsstring>(self)</argsstring>
        <name>end_training_session</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>End the training if one is in progress. This will allow recognition
processing once again.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1126" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1126" bodyend="1136"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ae1a35394d2d40b1adfe9e412939085be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.mimic</definition>
        <argsstring>(self, words)</argsstring>
        <name>mimic</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>words</type>
          <defname>words</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Mimic a recognition of the given *words* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1018" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1018" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a47d85e2696471eb33da9c0390b37e7b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.mimic_phrases</definition>
        <argsstring>(self, *phrases)</argsstring>
        <name>mimic_phrases</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>*</type>
          <declname>phrases</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Mimic a recognition of the given *phrases*.

This method accepts variable phrases instead of a list of words.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1047" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1047" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a11f6bcc4feb1f8c72a806e632b18404b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.pause_recognition</definition>
        <argsstring>(self)</argsstring>
        <name>pause_recognition</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Pause recognition and wait for :meth:`resume_recognition` to be
called or for the wake keyphrase to be spoken.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1151" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1151" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aa34f95c5c458d9a9c3efa81adbd410ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.process_buffer</definition>
        <argsstring>(self, buf)</argsstring>
        <name>process_buffer</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>buf</type>
          <defname>buf</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Recognise speech from an audio buffer.

This method is meant to be called in sequence for multiple audio
buffers. It will do nothing if :meth:`connect` hasn&apos;t been called.

:param buf: audio buffer
:type buf: str
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="869" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="869" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a43fafdfe4dcf7e8679283749c07372d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.process_wave_file</definition>
        <argsstring>(self, path)</argsstring>
        <name>process_wave_file</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>path</type>
          <defname>path</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Recognise speech from a wave file and return the recognition results.

This method checks that the wave file is valid. It raises an error
if the file doesn&apos;t exist, if it can&apos;t be read or if the WAV header
values do not match those in the engine configuration.

If recognition is paused (sleep mode), this method will call
:meth:`resume_recognition`.

The wave file must use the same sample width, sample rate and number
of channels that the acoustic model uses.

If the file is valid, :meth:`process_buffer` is then used to process
the audio.

Multiple utterances are supported.

:param path: wave file path
:raises: IOError | OSError | ValueError
:returns: recognition results
:rtype: generator
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="902" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="902" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a37e5d35d7b1d4c6aea249dc12f1ada59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.recognising</definition>
        <argsstring>(self)</argsstring>
        <name>recognising</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the engine is currently recognising speech.

To stop recognition, use :meth:`disconnect`.

:rtype: bool
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="560" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="560" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a0aaa8b03116fa1cec12e13b2c66cf105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.recognition_paused</definition>
        <argsstring>(self)</argsstring>
        <name>recognition_paused</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether the engine is waiting for the wake phrase to be heard or for
:meth:`resume_recognition` to be called.

:rtype: bool
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1142" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1142" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a208b419fd71f2055b28caad34983ee0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.resume_recognition</definition>
        <argsstring>(self, notify=True)</argsstring>
        <name>resume_recognition</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>notify</type>
          <defname>notify</defname>
          <defval>True</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Resume listening for grammar rules and key phrases.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1186" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1186" bodyend="1218"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a2dda20a6060c61921cfd426fc6c5b717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.set_exclusiveness</definition>
        <argsstring>(self, grammar, exclusive)</argsstring>
        <name>set_exclusiveness</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>grammar</type>
          <defname>grammar</defname>
        </param>
        <param>
          <type>exclusive</type>
          <defname>exclusive</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="549" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="549" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aabc92b25e63d1740c031ce1858288e87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.set_keyphrase</definition>
        <argsstring>(self, keyphrase, threshold, func)</argsstring>
        <name>set_keyphrase</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>keyphrase</type>
          <defname>keyphrase</defname>
        </param>
        <param>
          <type>threshold</type>
          <defname>threshold</defname>
        </param>
        <param>
          <type>func</type>
          <defname>func</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Add a keyphrase to listen for.

Key phrases take precedence over grammars as they are processed first.
They cannot be set for specific contexts (yet).

:param keyphrase: keyphrase to add.
:param threshold: keyphrase threshold value to use.
:param func: function or method to call when the keyphrase is heard.
:type keyphrase: str
:type threshold: float
:type func: callable
:raises: UnknownWordError
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="410" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="410" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a4d242cf450b8c35abe2c0362dff2f089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.speak</definition>
        <argsstring>(self, text)</argsstring>
        <name>speak</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>text</type>
          <defname>text</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Speak the given *text* using text-to-speech. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1068" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1068" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1af8de4b86e34c6926d8274022dbe0783e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.start_training_session</definition>
        <argsstring>(self)</argsstring>
        <name>start_training_session</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Start the training session. This will stop recognition processing
until either :meth:`end_training_session` is called or the end
training keyphrase is heard.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1108" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1108" bodyend="1125"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a95905e4a51b7cdd93f2b73e3f452e917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.training_session_active</definition>
        <argsstring>(self)</argsstring>
        <name>training_session_active</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Whether a training session is in progress.

:rtype: bool
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1100" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1100" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a15bff86c12dddcb61917e09e4995a3be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.unset_keyphrase</definition>
        <argsstring>(self, keyphrase)</argsstring>
        <name>unset_keyphrase</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>keyphrase</type>
          <defname>keyphrase</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Remove a set keyphrase so that the engine no longer listens for it.

:param keyphrase: keyphrase to remove.
:type keyphrase: str
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="441" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="441" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a9152ecc2a943be085ce5eade64374e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.update_list</definition>
        <argsstring>(self, lst, grammar)</argsstring>
        <name>update_list</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>lst</type>
          <defname>lst</defname>
        </param>
        <param>
          <type>grammar</type>
          <defname>grammar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="532" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="532" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a7fd682d0c37f62bc176fd200982fb411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.validate_config</definition>
        <argsstring>(cls, engine_config)</argsstring>
        <name>validate_config</name>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>engine_config</type>
          <defname>engine_config</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="132" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="132" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ac09aea8a8c92b0cee32de370b06a3935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine.write_transcript_files</definition>
        <argsstring>(self, fileids_path, transcription_path)</argsstring>
        <name>write_transcript_files</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>fileids_path</type>
          <defname>fileids_path</defname>
        </param>
        <param>
          <type>transcription_path</type>
          <defname>transcription_path</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Write .fileids and .transcription files for files in the training
data directory and write them to the specified file paths.

This method will raise an error if the ``TRAINING_DATA_DIR``
configuration option is not set to an existing directory.

:param fileids_path: path to .fileids file to create.
:param transcription_path: path to .transcription file to create.
:type fileids_path: str
:type transcription_path: str
:raises: IOError | OSError
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1081" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1081" bodyend="1098"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a8c63636384355f2d4df2b7c4fa5d7a32" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._build_grammar_wrapper</definition>
        <argsstring>(self, grammar)</argsstring>
        <name>_build_grammar_wrapper</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>grammar</type>
          <defname>grammar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="338" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="338" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a16db6b562fcc10cb81b7b8a962adf715" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._default_search_name</definition>
        <argsstring>(self)</argsstring>
        <name>_default_search_name</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="584" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="584" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a71ab469c3bf5dff4110c966f1d50c32e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._do_recognition</definition>
        <argsstring>(self)</argsstring>
        <name>_do_recognition</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Start recognising from the default recording device until
:meth:`disconnect` is called.

Recognition can be paused and resumed using either the sleep/wake
key phrases or by calling :meth:`pause_recognition` or
:meth:`resume_recognition`.

To configure audio input settings, modify the engine&apos;s ``CHANNELS``,
``RATE``, ``SAMPLE_WIDTH`` and/or ``FRAMES_PER_BUFFER``
configuration options.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="992" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="992" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aafaddebd988d203b3c37a55f444f981b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._free_engine_resources</definition>
        <argsstring>(self)</argsstring>
        <name>_free_engine_resources</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Internal method for freeing the resources used by the engine.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="248" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="248" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a3d0da567793a03190336a1864bcd09cd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._get_best_hypothesis</definition>
        <argsstring>(self, hypotheses)</argsstring>
        <name>_get_best_hypothesis</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>hypotheses</type>
          <defname>hypotheses</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Take a list of speech hypotheses and return the most likely one.

:type hypotheses: iterable
:return: str | None
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="589" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="589" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a9948c2e9bc4f6d05e03e7f502917866d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._get_language</definition>
        <argsstring>(self)</argsstring>
        <name>_get_language</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1072" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1072" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ad05a6b1c1b3b9712f7f93f0fd3ead927" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._has_quoted_words_support</definition>
        <argsstring>(self)</argsstring>
        <name>_has_quoted_words_support</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="1075" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="1075" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1af74fdd30355d43054d68f3a364e990fa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._hypothesis_callback</definition>
        <argsstring>(self, speech, mimicking)</argsstring>
        <name>_hypothesis_callback</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>speech</type>
          <defname>speech</defname>
        </param>
        <param>
          <type>mimicking</type>
          <defname>mimicking</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Internal Pocket Sphinx hypothesis callback method. Calls _process_hypothesis
and does post-processing afterwards.
:param speech: speech hypothesis
:type speech: str | None
:param mimicking:  whether to treat speech as mimicked speech.
:rtype: bool
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="663" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="663" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a78d811e4319842e00bdbc5387aa28d88" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._load_grammar</definition>
        <argsstring>(self, grammar)</argsstring>
        <name>_load_grammar</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>grammar</type>
          <defname>grammar</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Load the given *grammar* and return a wrapper. </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="472" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="472" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aeb19eb3785684b5869df897984645713" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._process_hypotheses</definition>
        <argsstring>(self, speech, mimicking)</argsstring>
        <name>_process_hypotheses</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>speech</type>
          <defname>speech</defname>
        </param>
        <param>
          <type>mimicking</type>
          <defname>mimicking</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Internal method to process speech hypotheses. This should only be called
from &apos;SphinxEngine._hypothesis_callback&apos; because that method does important
post processing.

:param speech: speech
:param mimicking: whether to treat speech as mimicked speech.
:rtype: tuple
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="778" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="778" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1af510c7072fbb10868390b2d0be55034c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._process_key_phrases</definition>
        <argsstring>(self, speech, mimicking)</argsstring>
        <name>_process_key_phrases</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>speech</type>
          <defname>speech</defname>
        </param>
        <param>
          <type>mimicking</type>
          <defname>mimicking</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Processing key phrase searches and return the matched keyphrase
(if any).

:type speech: str
:param mimicking: whether to treat speech as mimicked speech.
:rtype: str
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="708" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="708" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a9fd9aa65dffc13717771e3d978d1ad5e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._set_default_search</definition>
        <argsstring>(self)</argsstring>
        <name>_set_default_search</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="457" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="457" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aedd0871a3111e7e647f50930d06dc4e7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._set_grammar</definition>
        <argsstring>(self, wrapper, activate, partial=False)</argsstring>
        <name>_set_grammar</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>wrapper</type>
          <defname>wrapper</defname>
        </param>
        <param>
          <type>activate</type>
          <defname>activate</defname>
        </param>
        <param>
          <type>partial</type>
          <defname>partial</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="345" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="345" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a2e41e57d307d991327b12897ac46578f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._speech_start_callback</definition>
        <argsstring>(self, mimicking)</argsstring>
        <name>_speech_start_callback</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>mimicking</type>
          <defname>mimicking</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="636" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="636" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a47ad144ef8003cb7153c91aff00d038b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._unload_grammar</definition>
        <argsstring>(self, grammar, wrapper)</argsstring>
        <name>_unload_grammar</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>grammar</type>
          <defname>grammar</defname>
        </param>
        <param>
          <type>wrapper</type>
          <defname>wrapper</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="492" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="492" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a2bf8fd80c44c9c4ceecd4c7124f334a5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._unset_search</definition>
        <argsstring>(self, name)</argsstring>
        <name>_unset_search</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>name</type>
          <defname>name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="389" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="389" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a822c6dc4c46dbd0bab722f67ef503875" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dragonfly.engines.backend_sphinx.engine.SphinxEngine._validate_words</definition>
        <argsstring>(self, words, search_type)</argsstring>
        <name>_validate_words</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>words</type>
          <defname>words</defname>
        </param>
        <param>
          <type>search_type</type>
          <defname>search_type</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="322" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="322" bodyend="337"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Speech recognition engine back-end for CMU Pocket Sphinx. </verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>DelegateTimerManagerInterface</label>
      </node>
      <node id="2">
        <label>EngineBase</label>
      </node>
      <node id="1">
        <label>dragonfly.engines.backend_sphinx.engine.SphinxEngine</label>
        <link refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>string</label>
      </node>
      <node id="3">
        <label>DelegateTimerManagerInterface</label>
      </node>
      <node id="2">
        <label>EngineBase</label>
      </node>
      <node id="1">
        <label>dragonfly.engines.backend_sphinx.engine.SphinxEngine</label>
        <link refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>_name</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" line="67" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/engines/backend_sphinx/engine.py" bodystart="67" bodyend="1225"/>
    <listofallmembers>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a5b794c4672ba87890ba7beeea01c0d91" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>__init__</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a80ec054478385d8b1cd95d577e65c551" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_audio_buffers</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a8c63636384355f2d4df2b7c4fa5d7a32" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_build_grammar_wrapper</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ad2a6370373399a39704479421ed53713" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_cancel_recognition_next_time</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aada22f6db21a155be76c610584532137" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_config</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a62f29602738696637c516c9b61584009" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_decoder</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a16db6b562fcc10cb81b7b8a962adf715" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_default_search_name</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a980422bae7b4d6cd8e84e56329245e47" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_default_search_result</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a71ab469c3bf5dff4110c966f1d50c32e" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_do_recognition</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aafaddebd988d203b3c37a55f444f981b" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_free_engine_resources</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a3d0da567793a03190336a1864bcd09cd" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_get_best_hypothesis</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a9948c2e9bc4f6d05e03e7f502917866d" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_get_language</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a224a023299a42d7cb10451925d96c160" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_grammar_count</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ad05a6b1c1b3b9712f7f93f0fd3ead927" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_has_quoted_words_support</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1af74fdd30355d43054d68f3a364e990fa" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_hypothesis_callback</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ad6e17dd4716a745a141c7ba4a3cccde0" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_keyphrase_functions</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a3b3651cc3fd9391e4af634ec9a0fd46c" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_keyphrase_search_names</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a8b5a9a69597149d8ca87b9d7dcabbca1" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_keyphrase_thresholds</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a78d811e4319842e00bdbc5387aa28d88" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_load_grammar</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ae7f5c348da7bf0d14aae57a3ccd63d51" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_name</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aeb19eb3785684b5869df897984645713" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_process_hypotheses</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1af510c7072fbb10868390b2d0be55034c" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_process_key_phrases</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1afc92ca8b53d2b32f2bb0f82d02f05b4d" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_recognising</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ab0807d207d382b8da16c829f7a4f1c5f" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_recognition_observer_manager</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a3ab17d4982109b8ddd8154be4289cbb8" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_recognition_paused</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1adc9f5aece051e3898ce093e5b7f59179" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_recorder</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a9fd9aa65dffc13717771e3d978d1ad5e" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_set_default_search</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aedd0871a3111e7e647f50930d06dc4e7" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_set_grammar</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a2e41e57d307d991327b12897ac46578f" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_speech_start_callback</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ae75e0db02fc9b856083c0b93fbf2f260" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_timer_manager</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a332562e17073cb22d6875c3b7dc54370" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_training_session_active</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a47ad144ef8003cb7153c91aff00d038b" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_unload_grammar</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a2bf8fd80c44c9c4ceecd4c7124f334a5" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_unset_search</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a89e7dc2460cc94187041acff6af65ce7" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_valid_searches</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a822c6dc4c46dbd0bab722f67ef503875" prot="private" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>_validate_words</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aed290c61eb58de8fbba4c9d8e0b96d7a" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>activate_grammar</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ae96db84de28e388eed36cffb698ab884" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>activate_rule</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a56599808a5c629c0db3645f57b33530d" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>cancel_recognition</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a6b0ccaa21efb588e13e931807c3127aa" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>check_valid_word</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a8ba9da5dd33e312a5779bc53207fa850" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>compiler</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a63b1748e141b4ba63b215582b49605ed" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>config</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a287ec4023cba0183922c98235b94658d" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>config</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ab6864a395b74cb062100c80cdc96ac8c" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>config</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a7359f8cf1ae84adfedd84c135d1104bf" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>connect</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1af2a8260bcbff8cd5dfce720b9f32edfa" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>create_timer</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ac790129d1bf0340a676d58dacef633b7" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>deactivate_grammar</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1afa5cfd6740a53ed524cb03b09e0c1725" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>deactivate_rule</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a4145c8cf91224a1ba69de616449f9488" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>default_search_result</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aae9078ea264deceb5fc5e8b5723f8a14" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>DictationContainer</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a2a0907dd7df8727fc9e34e20d1e0eeac" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>disconnect</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a9560dc29069e538c968010fcddd51227" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>end_training_session</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ae1a35394d2d40b1adfe9e412939085be" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>mimic</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a47d85e2696471eb33da9c0390b37e7b6" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>mimic_phrases</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a11f6bcc4feb1f8c72a806e632b18404b" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>pause_recognition</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aa34f95c5c458d9a9c3efa81adbd410ca" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>process_buffer</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a43fafdfe4dcf7e8679283749c07372d0" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>process_wave_file</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a37e5d35d7b1d4c6aea249dc12f1ada59" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>recognising</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a0aaa8b03116fa1cec12e13b2c66cf105" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>recognition_paused</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a208b419fd71f2055b28caad34983ee0c" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>resume_recognition</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a2dda20a6060c61921cfd426fc6c5b717" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>set_exclusiveness</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1aabc92b25e63d1740c031ce1858288e87" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>set_keyphrase</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a4d242cf450b8c35abe2c0362dff2f089" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>speak</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1af8de4b86e34c6926d8274022dbe0783e" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>start_training_session</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a95905e4a51b7cdd93f2b73e3f452e917" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>training_session_active</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a15bff86c12dddcb61917e09e4995a3be" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>unset_keyphrase</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a9152ecc2a943be085ce5eade64374e2a" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>update_list</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1a7fd682d0c37f62bc176fd200982fb411" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>validate_config</name></member>
      <member refid="classdragonfly_1_1engines_1_1backend__sphinx_1_1engine_1_1SphinxEngine_1ac09aea8a8c92b0cee32de370b06a3935" prot="public" virt="non-virtual"><scope>dragonfly::engines::backend_sphinx::engine::SphinxEngine</scope><name>write_transcript_files</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
