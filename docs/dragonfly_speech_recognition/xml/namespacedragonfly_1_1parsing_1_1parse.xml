<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacedragonfly_1_1parsing_1_1parse" kind="namespace" language="Python">
    <compoundname>dragonfly::parsing::parse</compoundname>
    <innerclass refid="classdragonfly_1_1parsing_1_1parse_1_1CompoundTransformer" prot="public">dragonfly::parsing::parse::CompoundTransformer</innerclass>
    <innerclass refid="classdragonfly_1_1parsing_1_1parse_1_1ParseError" prot="public">dragonfly::parsing::parse::ParseError</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacedragonfly_1_1parsing_1_1parse_1a0114ac964441d6c1cf56ea282f0ba3a5" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string dragonfly::parsing::parse.grammar_string</definition>
        <argsstring></argsstring>
        <name>grammar_string</name>
        <initializer>=  r&quot;&quot;&quot;
?start: alternative

// ? means that the rule will be inlined iff there is a single child
?alternative: sequence (&quot;|&quot; sequence)*
?sequence: single*
         | sequence &quot;{&quot; WORD &quot;}&quot;  -&gt; special

?single: WORD+               -&gt; literal
      | &quot;&lt;&quot; WORD &quot;&gt;&quot;         -&gt; reference
      | &quot;[&quot; alternative &quot;]&quot;  -&gt; optional
      | &quot;(&quot; alternative &quot;)&quot;

// Match anything which is not whitespace or a control character,
// we will let the engine handle invalid words
WORD: /[^\s\[\]&lt;&gt;|(){}]+/

%import common.WS_INLINE
%ignore WS_INLINE
&quot;&quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/parsing/parse.py" line="6" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/parsing/parse.py" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedragonfly_1_1parsing_1_1parse_1ad218d117401de79879312e39a40148f0" prot="public" static="no" mutable="no">
        <type></type>
        <definition>dragonfly::parsing::parse.spec_parser</definition>
        <argsstring></argsstring>
        <name>spec_parser</name>
        <initializer>=  Lark(
    <ref refid="namespacedragonfly_1_1parsing_1_1parse_1a0114ac964441d6c1cf56ea282f0ba3a5" kindref="member">grammar_string</ref>,
    parser=&quot;lalr&quot;
)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/parsing/parse.py" line="27" column="1" bodyfile="src/dragonfly_speech_recognition/dragonfly/dragonfly/parsing/parse.py" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/dragonfly_speech_recognition/dragonfly/dragonfly/parsing/parse.py" line="1" column="1"/>
  </compounddef>
</doxygen>
