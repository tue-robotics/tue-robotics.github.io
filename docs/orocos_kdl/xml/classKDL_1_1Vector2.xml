<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classKDL_1_1Vector2" kind="class" language="C++" prot="public">
    <compoundname>KDL::Vector2</compoundname>
    <includes refid="frames_8hpp" local="no">frames.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double KDL::Vector2::data[2]</definition>
        <argsstring>[2]</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="962" column="12" bodyfile="src/frames.hpp" bodystart="962" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classKDL_1_1Vector2_1ac2a4e8efcac69ef3a6a040b02a7de214" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const Vector2 &amp;a, const Vector2 &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1038" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector2_1a03fc91b62c31dc6b5c99956b8e76b62e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Vector2 &amp;a, const Vector2 &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The literal inequality <ref refid="classKDL_1_1Vector2_1a03fc91b62c31dc6b5c99956b8e76b62e" kindref="member">operator!=()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1043" column="20"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector2_1aa9b8ef35e3a946a280975941be5ddd6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator*</definition>
        <argsstring>(const Vector2 &amp;lhs, const Vector2 &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1004" column="28"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector2_1a1ef3d0cc8e3dd6cefa95547833663ae5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator*</definition>
        <argsstring>(const Vector2 &amp;lhs, double rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="999" column="28"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector2_1af22f271f2b701d51f44af41cbf2302d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator*</definition>
        <argsstring>(double lhs, const Vector2 &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1000" column="28"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector2_1aaebb3c4810741b93b24774477e9f6df1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator+</definition>
        <argsstring>(const Vector2 &amp;lhs, const Vector2 &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1002" column="28"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector2_1a08a32eda7d30cd9e54881485f0c0cf6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator-</definition>
        <argsstring>(const Vector2 &amp;arg)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1005" column="28"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector2_1a15d6c1a731e630639da3fe879b06d995" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator-</definition>
        <argsstring>(const Vector2 &amp;lhs, const Vector2 &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1003" column="28"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector2_1a7495f460f356a1ce0578eca886d9f4a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref></type>
        <definition>Vector2 operator/</definition>
        <argsstring>(const Vector2 &amp;lhs, double rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1001" column="28"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector2_1a2a345fcc6cd429f920e382803125977c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Vector2 &amp;a, const Vector2 &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The literal equality <ref refid="classKDL_1_1Vector2_1a2a345fcc6cd429f920e382803125977c" kindref="member">operator==()</ref>, also identical. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1041" column="20"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector2_1a87923ee3b2646a8c3e7afb670fffdfc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Rotation2</definition>
        <argsstring></argsstring>
        <name>Rotation2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1045" column="5" bodyfile="src/frames.hpp" bodystart="1045" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector2_1a94411312136a13e94e0d4741becfca2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend void</type>
        <definition>void SetToZero</definition>
        <argsstring>(Vector2 &amp;v)</argsstring>
        <name>SetToZero</name>
        <param>
          <type><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1006" column="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKDL_1_1Vector2_1ac94ac7bcbb534395ead55de5c71dbdba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::Vector2::Norm</definition>
        <argsstring>(double eps=epsilon) const</argsstring>
        <name>Norm</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the norm of the vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1019" column="13" bodyfile="src/frames.cpp" bodystart="112" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a40f74420af6ffb178f7a8550a07508c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::Vector2::Normalize</definition>
        <argsstring>(double eps=epsilon)</argsstring>
        <name>Normalize</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Normalizes this vector and returns it norm makes v a unitvector and returns the norm of v. if v is smaller than eps, Vector(1,0,0) is returned with norm 0. if this is not good, check the return value of this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1016" column="13" bodyfile="src/frames.cpp" bodystart="129" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a5b6a7898dbaeda3e1cb01e46a984528c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>IMETHOD double &amp; Vector2::operator()</definition>
        <argsstring>(int index)</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Access to elements, range checked when NDEBUG is not set, from 0..1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="975" column="20" bodyfile="src/frames.inl" bodystart="793" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1adc0127710b5feb3d9125408230805c79" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>IMETHOD double Vector2::operator()</definition>
        <argsstring>(int index) const</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Access to elements, range checked when NDEBUG is not set, from 0..1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="972" column="20" bodyfile="src/frames.inl" bodystart="788" bodyend="791"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a8826f328a3f6a7384422015bd2accbe6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
        <definition>IMETHOD Vector2 &amp; Vector2::operator+=</definition>
        <argsstring>(const Vector2 &amp;arg)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="996" column="21" bodyfile="src/frames.inl" bodystart="770" bodyend="775"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1abd79d1ba9dc9216ca25dd6084252672c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
        <definition>IMETHOD Vector2 &amp; Vector2::operator-=</definition>
        <argsstring>(const Vector2 &amp;arg)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="995" column="21" bodyfile="src/frames.inl" bodystart="777" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a2c95e2dcd894593c8ada80d82002cd63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
        <definition>IMETHOD Vector2 &amp; Vector2::operator=</definition>
        <argsstring>(const Vector2 &amp;arg)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="969" column="21" bodyfile="src/frames.inl" bodystart="737" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a6730420b6a720acf420af6fa43e09b0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; KDL::Vector2::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Equivalent to double&amp; <ref refid="classKDL_1_1Vector2_1a5b6a7898dbaeda3e1cb01e46a984528c" kindref="member">operator()(int index)</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="984" column="8" bodyfile="src/frames.hpp" bodystart="984" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a3734a36ad91a26249178b6524fcf823f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::Vector2::operator[]</definition>
        <argsstring>(int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Equivalent to double <ref refid="classKDL_1_1Vector2_1adc0127710b5feb3d9125408230805c79" kindref="member">operator()(int index) const</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="978" column="8" bodyfile="src/frames.hpp" bodystart="978" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a17a8dca236c36d4439e4ac23e44d1267" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>IMETHOD void Vector2::ReverseSign</definition>
        <argsstring>()</argsstring>
        <name>ReverseSign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="994" column="18" bodyfile="src/frames.inl" bodystart="806" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1ae78a8356c4eeaa405467305a663f8c58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>IMETHOD void Vector2::Set3DPlane</definition>
        <argsstring>(const Frame &amp;F_someframe_XY, const Vector &amp;v_someframe)</argsstring>
        <name>Set3DPlane</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>F_someframe_XY</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v_someframe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>projects v_someframe in the XY plane of F_someframe_XY, and sets *this to these values expressed wrt someframe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1033" column="18" bodyfile="src/frames.inl" bodystart="838" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a4afdc0ed3f56cb909bfadb8aedfce821" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>IMETHOD void Vector2::Set3DXY</definition>
        <argsstring>(const Vector &amp;v)</argsstring>
        <name>Set3DXY</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>projects v in its XY plane, and sets *this to these values </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1022" column="18" bodyfile="src/frames.inl" bodystart="819" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a8e6163f1b083033a7811e6f91ac48231" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>IMETHOD void Vector2::Set3DYZ</definition>
        <argsstring>(const Vector &amp;v)</argsstring>
        <name>Set3DYZ</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>projects v in its YZ plane, and sets *this to these values </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1025" column="18" bodyfile="src/frames.inl" bodystart="825" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a2ab51d98ce92821f3a14695d19eb506e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>IMETHOD void Vector2::Set3DZX</definition>
        <argsstring>(const Vector &amp;v)</argsstring>
        <name>Set3DZX</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>projects v in its ZX plane, and sets *this to these values </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1028" column="18" bodyfile="src/frames.inl" bodystart="831" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a61947284267a38dcf7bec4ef2e3c27e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::Vector2::Vector2</definition>
        <argsstring>()</argsstring>
        <name>Vector2</name>
        <briefdescription>
<para>Does not initialise to <ref refid="classKDL_1_1Vector2_1a0674450ce292d200c8f5f42a02d8640b" kindref="member">Zero()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="965" column="6" bodyfile="src/frames.hpp" bodystart="965" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a4d5aec0791020652d9ad88d7af9e4d49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>IMETHOD Vector2::Vector2</definition>
        <argsstring>(const Vector2 &amp;arg)</argsstring>
        <name>Vector2</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="967" column="13" bodyfile="src/frames.inl" bodystart="725" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a3a10b552eeb77bbddd7ee91d88347be0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>IMETHOD Vector2::Vector2</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>Vector2</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="966" column="13" bodyfile="src/frames.inl" bodystart="731" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a2a764bf9b8a955f73b2ab4fe9afb73ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>IMETHOD double Vector2::x</definition>
        <argsstring>() const</argsstring>
        <name>x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="989" column="15" bodyfile="src/frames.inl" bodystart="799" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a39c5146865b97a441e34c81c0179019d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Vector2::x</definition>
        <argsstring>(double)</argsstring>
        <name>x</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="991" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1ae294c39e8513564475e25364fa5e73a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>IMETHOD double Vector2::y</definition>
        <argsstring>() const</argsstring>
        <name>y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="990" column="15" bodyfile="src/frames.inl" bodystart="800" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector2_1a45000577dcbac214548ef00324127732" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Vector2::y</definition>
        <argsstring>(double)</argsstring>
        <name>y</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="992" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classKDL_1_1Vector2_1a0674450ce292d200c8f5f42a02d8640b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref></type>
        <definition>IMETHOD Vector2 Vector2::Zero</definition>
        <argsstring>()</argsstring>
        <name>Zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a zero 2D vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1009" column="28" bodyfile="src/frames.inl" bodystart="784" bodyend="786"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>2D version of <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/frames.hpp" line="961" column="1" bodyfile="src/frames.hpp" bodystart="960" bodyend="1046"/>
    <listofallmembers>
      <member refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" prot="private" virt="non-virtual"><scope>KDL::Vector2</scope><name>data</name></member>
      <member refid="classKDL_1_1Vector2_1ac2a4e8efcac69ef3a6a040b02a7de214" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>Equal</name></member>
      <member refid="classKDL_1_1Vector2_1ac94ac7bcbb534395ead55de5c71dbdba" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>Norm</name></member>
      <member refid="classKDL_1_1Vector2_1a40f74420af6ffb178f7a8550a07508c1" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>Normalize</name></member>
      <member refid="classKDL_1_1Vector2_1a03fc91b62c31dc6b5c99956b8e76b62e" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator!=</name></member>
      <member refid="classKDL_1_1Vector2_1adc0127710b5feb3d9125408230805c79" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator()</name></member>
      <member refid="classKDL_1_1Vector2_1a5b6a7898dbaeda3e1cb01e46a984528c" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator()</name></member>
      <member refid="classKDL_1_1Vector2_1a1ef3d0cc8e3dd6cefa95547833663ae5" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Vector2_1af22f271f2b701d51f44af41cbf2302d6" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Vector2_1aa9b8ef35e3a946a280975941be5ddd6f" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Vector2_1aaebb3c4810741b93b24774477e9f6df1" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator+</name></member>
      <member refid="classKDL_1_1Vector2_1a8826f328a3f6a7384422015bd2accbe6" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator+=</name></member>
      <member refid="classKDL_1_1Vector2_1a15d6c1a731e630639da3fe879b06d995" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator-</name></member>
      <member refid="classKDL_1_1Vector2_1a08a32eda7d30cd9e54881485f0c0cf6a" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator-</name></member>
      <member refid="classKDL_1_1Vector2_1abd79d1ba9dc9216ca25dd6084252672c" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator-=</name></member>
      <member refid="classKDL_1_1Vector2_1a7495f460f356a1ce0578eca886d9f4a0" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator/</name></member>
      <member refid="classKDL_1_1Vector2_1a2c95e2dcd894593c8ada80d82002cd63" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator=</name></member>
      <member refid="classKDL_1_1Vector2_1a2a345fcc6cd429f920e382803125977c" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator==</name></member>
      <member refid="classKDL_1_1Vector2_1a3734a36ad91a26249178b6524fcf823f" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator[]</name></member>
      <member refid="classKDL_1_1Vector2_1a6730420b6a720acf420af6fa43e09b0b" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>operator[]</name></member>
      <member refid="classKDL_1_1Vector2_1a17a8dca236c36d4439e4ac23e44d1267" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>ReverseSign</name></member>
      <member refid="classKDL_1_1Vector2_1a87923ee3b2646a8c3e7afb670fffdfc7" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>Rotation2</name></member>
      <member refid="classKDL_1_1Vector2_1ae78a8356c4eeaa405467305a663f8c58" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>Set3DPlane</name></member>
      <member refid="classKDL_1_1Vector2_1a4afdc0ed3f56cb909bfadb8aedfce821" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>Set3DXY</name></member>
      <member refid="classKDL_1_1Vector2_1a8e6163f1b083033a7811e6f91ac48231" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>Set3DYZ</name></member>
      <member refid="classKDL_1_1Vector2_1a2ab51d98ce92821f3a14695d19eb506e" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>Set3DZX</name></member>
      <member refid="classKDL_1_1Vector2_1a94411312136a13e94e0d4741becfca2f" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>SetToZero</name></member>
      <member refid="classKDL_1_1Vector2_1a61947284267a38dcf7bec4ef2e3c27e4" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>Vector2</name></member>
      <member refid="classKDL_1_1Vector2_1a3a10b552eeb77bbddd7ee91d88347be0" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>Vector2</name></member>
      <member refid="classKDL_1_1Vector2_1a4d5aec0791020652d9ad88d7af9e4d49" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>Vector2</name></member>
      <member refid="classKDL_1_1Vector2_1a2a764bf9b8a955f73b2ab4fe9afb73ea" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>x</name></member>
      <member refid="classKDL_1_1Vector2_1a39c5146865b97a441e34c81c0179019d" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>x</name></member>
      <member refid="classKDL_1_1Vector2_1ae294c39e8513564475e25364fa5e73a2" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>y</name></member>
      <member refid="classKDL_1_1Vector2_1a45000577dcbac214548ef00324127732" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>y</name></member>
      <member refid="classKDL_1_1Vector2_1a0674450ce292d200c8f5f42a02d8640b" prot="public" virt="non-virtual"><scope>KDL::Vector2</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
