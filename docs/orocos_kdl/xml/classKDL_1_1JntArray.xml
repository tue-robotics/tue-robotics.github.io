<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classKDL_1_1JntArray" kind="class" language="C++" prot="public">
    <compoundname>KDL::JntArray</compoundname>
    <includes refid="jntarray_8hpp" local="no">jntarray.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classKDL_1_1JntArray_1a59dff4a2f3fa4adedb55c3384238dc74" prot="public" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd KDL::JntArray::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="72" column="25" bodyfile="src/jntarray.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKDL_1_1JntArray_1aeeeb3fde6ed6188d96a4f0afe517d644" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int KDL::JntArray::columns</definition>
        <argsstring>() const</argsstring>
        <name>columns</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of columns of the array, always 1. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="137" column="22" bodyfile="src/jntarray.cpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1JntArray_1a6dd1e5a2252a36eb48b386c8bc6224b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KDL::JntArray::JntArray</definition>
        <argsstring>()</argsstring>
        <name>JntArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct with <emphasis>no</emphasis> data array <simplesect kind="post"><para>NULL == data </para>
</simplesect>
<simplesect kind="post"><para>0 == <ref refid="classKDL_1_1JntArray_1a3176b3c2ebbeeca6e45a3e8d4d692e5b" kindref="member">rows()</ref> </para>
</simplesect>
<simplesect kind="warning"><para>use of an object constructed like this, without a <ref refid="classKDL_1_1JntArray_1a4ea82246fd0aa8badff28deb24c2e629" kindref="member">resize()</ref> first, may result in program exit! See class documentation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="81" column="9" bodyfile="src/jntarray.cpp" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1JntArray_1aeed3edc383df36b8cbd68090893cb029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KDL::JntArray::JntArray</definition>
        <argsstring>(const JntArray &amp;arg)</argsstring>
        <name>JntArray</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor <simplesect kind="note"><para>Will correctly copy an empty object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="97" column="9" bodyfile="src/jntarray.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1JntArray_1a39f6e6a9780ad92d97cc42a425805b7a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KDL::JntArray::JntArray</definition>
        <argsstring>(unsigned int size)</argsstring>
        <name>JntArray</name>
        <param>
          <type>unsigned int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor of the joint array</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the array, this cannot be changed afterwards. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>0 &lt; size </para>
</simplesect>
<simplesect kind="post"><para>NULL != data </para>
</simplesect>
<simplesect kind="post"><para>0 &lt; <ref refid="classKDL_1_1JntArray_1a3176b3c2ebbeeca6e45a3e8d4d692e5b" kindref="member">rows()</ref> </para>
</simplesect>
<simplesect kind="post"><para>all elements in data have 0 value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="92" column="18" bodyfile="src/jntarray.cpp" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1JntArray_1af528b93031f53438df622c214fcf1b07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double &amp; KDL::JntArray::operator()</definition>
        <argsstring>(unsigned int i, unsigned int j=0)</argsstring>
        <name>operator()</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set_item operator, again if a second value is given it should be zero.</para>
<para><simplesect kind="return"><para>reference to the joint value at position i,starting from zero. </para>
</simplesect>
<simplesect kind="pre"><para>0 != size (ie non-default constructor or <ref refid="classKDL_1_1JntArray_1a4ea82246fd0aa8badff28deb24c2e629" kindref="member">resize()</ref> called) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="128" column="16" bodyfile="src/jntarray.cpp" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1JntArray_1a250bd634d127c6aceb1b9c73e372b129" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::JntArray::operator()</definition>
        <argsstring>(unsigned int i, unsigned int j=0) const</argsstring>
        <name>operator()</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get_item operator for the joint array, if a second value is given it should be zero, since a <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> resembles a column.</para>
<para><simplesect kind="return"><para>the joint value at position i, starting from 0 </para>
</simplesect>
<simplesect kind="pre"><para>0 != size (ie non-default constructor or <ref refid="classKDL_1_1JntArray_1a4ea82246fd0aa8badff28deb24c2e629" kindref="member">resize()</ref> called) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="119" column="16" bodyfile="src/jntarray.cpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1JntArray_1a40261a60987c77724f1e18247bee6eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
        <definition>JntArray &amp; KDL::JntArray::operator=</definition>
        <argsstring>(const JntArray &amp;arg)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="110" column="18" bodyfile="src/jntarray.cpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1JntArray_1a4ea82246fd0aa8badff28deb24c2e629" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::JntArray::resize</definition>
        <argsstring>(unsigned int newSize)</argsstring>
        <name>resize</name>
        <param>
          <type>unsigned int</type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the array <simplesect kind="warning"><para>This causes a dynamic allocation (and potentially <linebreak/>
 also a dynamic deallocation). This <emphasis>will</emphasis> negatively affect real-time performance!</para>
</simplesect>
<simplesect kind="post"><para>newSize == <ref refid="classKDL_1_1JntArray_1a3176b3c2ebbeeca6e45a3e8d4d692e5b" kindref="member">rows()</ref> </para>
</simplesect>
<simplesect kind="post"><para>NULL != data </para>
</simplesect>
<simplesect kind="post"><para>all elements in data have 0 value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="108" column="14" bodyfile="src/jntarray.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1JntArray_1a3176b3c2ebbeeca6e45a3e8d4d692e5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int KDL::JntArray::rows</definition>
        <argsstring>() const</argsstring>
        <name>rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of rows (size) of the array </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="133" column="22" bodyfile="src/jntarray.cpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1JntArray_1ad0d4d930850828925df8cd6cbb5cc31d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KDL::JntArray::~JntArray</definition>
        <argsstring>()</argsstring>
        <name>~JntArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="98" column="9" bodyfile="src/jntarray.cpp" bodystart="49" bodyend="51"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classKDL_1_1JntArray_1ab1c08f03ff6f9abe10eacd1164cfbddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void Add</definition>
        <argsstring>(const JntArray &amp;src1, const JntArray &amp;src2, JntArray &amp;dest)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to add two joint arrays, all the arguments must have the same size: A + B = C. This function is aliasing-safe, A or B can be the same array as C.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src1</parametername>
</parameternamelist>
<parameterdescription>
<para>A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src2</parametername>
</parameternamelist>
<parameterdescription>
<para>B </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>C </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="139" column="21" bodyfile="src/jntarray.cpp" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1JntArray_1a8814ef73b965e185b0b36fba5e15a886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void Divide</definition>
        <argsstring>(const JntArray &amp;src, const double &amp;factor, JntArray &amp;dest)</argsstring>
        <name>Divide</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to divide all the array values with a scalar factor: A/b=C. This function is aliasing-safe, A can be the same array as C.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>b </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>C </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="142" column="21" bodyfile="src/jntarray.cpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1JntArray_1aad5dfe5f81cdc68b34e2552b742811f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const JntArray &amp;src1, const JntArray &amp;src2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to check if two arrays are the same with a precision of eps</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eps</parametername>
</parameternamelist>
<parameterdescription>
<para>default: epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if each element of src1 is within eps of the same element in src2, or if both src1 and src2 have no data (ie 0==<ref refid="classKDL_1_1JntArray_1a3176b3c2ebbeeca6e45a3e8d4d692e5b" kindref="member">rows()</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="145" column="21" bodyfile="src/jntarray.cpp" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1JntArray_1a6956918c0e57ed9be52d5d16d82abc55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void Multiply</definition>
        <argsstring>(const JntArray &amp;src, const double &amp;factor, JntArray &amp;dest)</argsstring>
        <name>Multiply</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to multiply all the array values with a scalar factor: A*b=C. This function is aliasing-safe, A can be the same array as C.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>b </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>C </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="141" column="21" bodyfile="src/jntarray.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1JntArray_1a548bc4404c259688a4132ff430feb989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void MultiplyJacobian</definition>
        <argsstring>(const Jacobian &amp;jac, const JntArray &amp;src, Twist &amp;dest)</argsstring>
        <name>MultiplyJacobian</name>
        <param>
          <type>const <ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>jac</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to multiply a <ref refid="classKDL_1_1Jacobian" kindref="compound">KDL::Jacobian</ref> with a <ref refid="classKDL_1_1JntArray" kindref="compound">KDL::JntArray</ref> to get a <ref refid="classKDL_1_1Twist" kindref="compound">KDL::Twist</ref>, it should not be used to calculate the forward velocity kinematics, the solver classes are built for this purpose. J*q = t</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jac</parametername>
</parameternamelist>
<parameterdescription>
<para>J </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>q </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>dest==<ref refid="classKDL_1_1Twist_1aeb2250f1de9e0c6f9fe738dc8c083bc9" kindref="member">Twist::Zero()</ref> if 0==src.rows() (ie src is empty) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="143" column="21" bodyfile="src/jntarray.cpp" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1JntArray_1a38b0c4bb6970ad5ba73aab199afbb4fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const JntArray &amp;src1, const JntArray &amp;src2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="147" column="21" bodyfile="src/jntarray.cpp" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1JntArray_1a37bc48b9845e8d493ffd247c0e5f19f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void SetToZero</definition>
        <argsstring>(JntArray &amp;array)</argsstring>
        <name>SetToZero</name>
        <param>
          <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to set all the values of the array to 0</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="144" column="21" bodyfile="src/jntarray.cpp" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1JntArray_1a54d78f9a555efd3dcbdb7833ed855ac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void Subtract</definition>
        <argsstring>(const JntArray &amp;src1, const JntArray &amp;src2, JntArray &amp;dest)</argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to subtract two joint arrays, all the arguments must have the same size: A - B = C. This function is aliasing-safe, A or B can be the same array as C.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src1</parametername>
</parameternamelist>
<parameterdescription>
<para>A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src2</parametername>
</parameternamelist>
<parameterdescription>
<para>B </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>C </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.hpp" line="140" column="21" bodyfile="src/jntarray.cpp" bodystart="85" bodyend="88"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>   @brief This class represents an fixed size array containing
   joint values of a KDL::Chain.

   \warning An object constructed with the default constructor provides
   a valid, but inert, object. Many of the member functions will do
   the correct thing and have no affect on this object, but some 
   member functions can _NOT_ deal with an inert/empty object. These 
   functions will assert() and exit the program instead. The intended use 
   case for the default constructor (in an RTT/OCL setting) is outlined in
   code below - the default constructor plus the resize() function allow
   use of JntArray objects whose size is set within a configureHook() call
   (typically based on a size determined from a property).
</verbatim></para>
<para><programlisting><codeline><highlight class="normal">class<sp/>MyTask<sp/>:<sp/>public<sp/>RTT::TaskContext</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>JntArray<sp/><sp/><sp/><sp/><sp/>j;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>MyTask()<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>invokes<sp/>j&apos;s<sp/>default<sp/>constructor</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bool<sp/>configureHook()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>size<sp/>=<sp/>some_property.rvalue();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j.resize(size)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>void<sp/>updateHook()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>use<sp/>j<sp/>here</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="src/jntarray.hpp" line="70" column="1" bodyfile="src/jntarray.hpp" bodystart="69" bodyend="149"/>
    <listofallmembers>
      <member refid="classKDL_1_1JntArray_1ab1c08f03ff6f9abe10eacd1164cfbddc" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>Add</name></member>
      <member refid="classKDL_1_1JntArray_1aeeeb3fde6ed6188d96a4f0afe517d644" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>columns</name></member>
      <member refid="classKDL_1_1JntArray_1a59dff4a2f3fa4adedb55c3384238dc74" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>data</name></member>
      <member refid="classKDL_1_1JntArray_1a8814ef73b965e185b0b36fba5e15a886" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>Divide</name></member>
      <member refid="classKDL_1_1JntArray_1aad5dfe5f81cdc68b34e2552b742811f2" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>Equal</name></member>
      <member refid="classKDL_1_1JntArray_1a6dd1e5a2252a36eb48b386c8bc6224b5" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>JntArray</name></member>
      <member refid="classKDL_1_1JntArray_1a39f6e6a9780ad92d97cc42a425805b7a" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>JntArray</name></member>
      <member refid="classKDL_1_1JntArray_1aeed3edc383df36b8cbd68090893cb029" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>JntArray</name></member>
      <member refid="classKDL_1_1JntArray_1a6956918c0e57ed9be52d5d16d82abc55" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>Multiply</name></member>
      <member refid="classKDL_1_1JntArray_1a548bc4404c259688a4132ff430feb989" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>MultiplyJacobian</name></member>
      <member refid="classKDL_1_1JntArray_1a250bd634d127c6aceb1b9c73e372b129" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>operator()</name></member>
      <member refid="classKDL_1_1JntArray_1af528b93031f53438df622c214fcf1b07" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>operator()</name></member>
      <member refid="classKDL_1_1JntArray_1a40261a60987c77724f1e18247bee6eae" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>operator=</name></member>
      <member refid="classKDL_1_1JntArray_1a38b0c4bb6970ad5ba73aab199afbb4fb" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>operator==</name></member>
      <member refid="classKDL_1_1JntArray_1a4ea82246fd0aa8badff28deb24c2e629" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>resize</name></member>
      <member refid="classKDL_1_1JntArray_1a3176b3c2ebbeeca6e45a3e8d4d692e5b" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>rows</name></member>
      <member refid="classKDL_1_1JntArray_1a37bc48b9845e8d493ffd247c0e5f19f0" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>SetToZero</name></member>
      <member refid="classKDL_1_1JntArray_1a54d78f9a555efd3dcbdb7833ed855ac9" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>Subtract</name></member>
      <member refid="classKDL_1_1JntArray_1ad0d4d930850828925df8cd6cbb5cc31d" prot="public" virt="non-virtual"><scope>KDL::JntArray</scope><name>~JntArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
