<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="frames_8inl" kind="file" language="C++">
    <compoundname>frames.inl</compoundname>
    <includedby refid="frames_8hpp" local="yes">frames.hpp</includedby>
    <invincdepgraph>
      <node id="76">
        <label>treeiksolver.hpp</label>
        <link refid="treeiksolver_8hpp"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>kukaLWR_DHnew.cpp</label>
        <link refid="kukaLWR__DHnew_8cpp"/>
      </node>
      <node id="56">
        <label>chainiksolverpos_nr.cpp</label>
        <link refid="chainiksolverpos__nr_8cpp"/>
      </node>
      <node id="31">
        <label>chainidsolver_recursive_newton_euler.hpp</label>
        <link refid="chainidsolver__recursive__newton__euler_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>kukaLWRtestHCG.cpp</label>
        <link refid="kukaLWRtestHCG_8cpp"/>
      </node>
      <node id="131">
        <label>jntarray.cpp</label>
        <link refid="jntarray_8cpp"/>
      </node>
      <node id="69">
        <label>treeiksolverpos_nr_jl.hpp</label>
        <link refid="treeiksolverpos__nr__jl_8hpp"/>
        <childnode refid="70" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>inertiatest.cpp</label>
        <link refid="inertiatest_8cpp"/>
      </node>
      <node id="128">
        <label>velocityprofiletest.cpp</label>
        <link refid="velocityprofiletest_8cpp"/>
      </node>
      <node id="3">
        <label>geometry.cpp</label>
        <link refid="geometry_8cpp"/>
      </node>
      <node id="29">
        <label>chain.cpp</label>
        <link refid="chain_8cpp"/>
      </node>
      <node id="44">
        <label>chainjnttojacdotsolver.cpp</label>
        <link refid="chainjnttojacdotsolver_8cpp"/>
      </node>
      <node id="98">
        <label>frameacc_io.hpp</label>
        <link refid="frameacc__io_8hpp"/>
      </node>
      <node id="81">
        <label>treeinvdyntest.hpp</label>
        <link refid="treeinvdyntest_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>chainfdsolver_recursive_newton_euler.hpp</label>
        <link refid="chainfdsolver__recursive__newton__euler_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>rotationalinertia.cpp</label>
        <link refid="rotationalinertia_8cpp"/>
      </node>
      <node id="54">
        <label>chainfksolvervel_recursive.cpp</label>
        <link refid="chainfksolvervel__recursive_8cpp"/>
      </node>
      <node id="27">
        <label>puma560.cpp</label>
        <link refid="puma560_8cpp"/>
      </node>
      <node id="36">
        <label>chainiksolvervel_pinv.cpp</label>
        <link refid="chainiksolvervel__pinv_8cpp"/>
      </node>
      <node id="16">
        <label>chainhdsolver_vereshchagin.hpp</label>
        <link refid="chainhdsolver__vereshchagin_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>chainidsolver.hpp</label>
        <link refid="chainidsolver_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>jacobian.cpp</label>
        <link refid="jacobian_8cpp"/>
      </node>
      <node id="77">
        <label>treeiksolvervel_wdls.hpp</label>
        <link refid="treeiksolvervel__wdls_8hpp"/>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="139">
        <label>frameacc.cpp</label>
        <link refid="frameacc_8cpp"/>
      </node>
      <node id="73">
        <label>treeidsolver.hpp</label>
        <link refid="treeidsolver_8hpp"/>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>joint.hpp</label>
        <link refid="joint_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="135">
        <label>jacobiantest.hpp</label>
        <link refid="jacobiantest_8hpp"/>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>trajectory_composite.cpp</label>
        <link refid="trajectory__composite_8cpp"/>
      </node>
      <node id="12">
        <label>solvertest.hpp</label>
        <link refid="solvertest_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>chainiksolvervel_wdls.cpp</label>
        <link refid="chainiksolvervel__wdls_8cpp"/>
      </node>
      <node id="93">
        <label>jntarrayvel.hpp</label>
        <link refid="jntarrayvel_8hpp"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="107">
        <label>path_point.cpp</label>
        <link refid="path__point_8cpp"/>
      </node>
      <node id="28">
        <label>puma560test.cpp</label>
        <link refid="puma560test_8cpp"/>
      </node>
      <node id="126">
        <label>rotational_interpolation_sa.hpp</label>
        <link refid="rotational__interpolation__sa_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>treeiksolverpos_online.cpp</label>
        <link refid="treeiksolverpos__online_8cpp"/>
      </node>
      <node id="61">
        <label>kinfam_io.cpp</label>
        <link refid="kinfam__io_8cpp"/>
      </node>
      <node id="101">
        <label>path.hpp</label>
        <link refid="path_8hpp"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>chainiksolverpos_lma.cpp</label>
        <link refid="chainiksolverpos__lma_8cpp"/>
      </node>
      <node id="40">
        <label>chainiksolvervel_pinv_nso.cpp</label>
        <link refid="chainiksolvervel__pinv__nso_8cpp"/>
      </node>
      <node id="122">
        <label>trajectory_stationary.hpp</label>
        <link refid="trajectory__stationary_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>path_cyclic_closed.cpp</label>
        <link refid="path__cyclic__closed_8cpp"/>
      </node>
      <node id="22">
        <label>rigidbodyinertia.hpp</label>
        <link refid="rigidbodyinertia_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>chainjnttojacsolver.cpp</label>
        <link refid="chainjnttojacsolver_8cpp"/>
      </node>
      <node id="97">
        <label>frames_io.hpp</label>
        <link refid="frames__io_8hpp"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
      </node>
      <node id="132">
        <label>framestest.hpp</label>
        <link refid="framestest_8hpp"/>
        <childnode refid="127" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>path_roundedcomposite.cpp</label>
        <link refid="path__roundedcomposite_8cpp"/>
      </node>
      <node id="100">
        <label>framevel_io.hpp</label>
        <link refid="framevel__io_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>chainiksolverpos_nr.hpp</label>
        <link refid="chainiksolverpos__nr_8hpp"/>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>chainidsolver_recursive_newton_euler.cpp</label>
        <link refid="chainidsolver__recursive__newton__euler_8cpp"/>
      </node>
      <node id="49">
        <label>chainfksolverpos_recursive.hpp</label>
        <link refid="chainfksolverpos__recursive_8hpp"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>chainfksolvervel_recursive.hpp</label>
        <link refid="chainfksolvervel__recursive_8hpp"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>treeinvdyntest.cpp</label>
        <link refid="treeinvdyntest_8cpp"/>
      </node>
      <node id="15">
        <label>chainfdsolver_recursive_newton_euler.cpp</label>
        <link refid="chainfdsolver__recursive__newton__euler_8cpp"/>
      </node>
      <node id="17">
        <label>chainhdsolver_vereshchagin.cpp</label>
        <link refid="chainhdsolver__vereshchagin_8cpp"/>
      </node>
      <node id="89">
        <label>joint.cpp</label>
        <link refid="joint_8cpp"/>
      </node>
      <node id="112">
        <label>path_composite.cpp</label>
        <link refid="path__composite_8cpp"/>
      </node>
      <node id="62">
        <label>treejnttojacsolver.cpp</label>
        <link refid="treejnttojacsolver_8cpp"/>
      </node>
      <node id="2">
        <label>frames.hpp</label>
        <link refid="frames_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="133">
        <label>jacobian.hpp</label>
        <link refid="jacobian_8hpp"/>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>treeiksolvervel_wdls.cpp</label>
        <link refid="treeiksolvervel__wdls_8cpp"/>
      </node>
      <node id="74">
        <label>treeidsolver_recursive_newton_euler.hpp</label>
        <link refid="treeidsolver__recursive__newton__euler_8hpp"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="118">
        <label>rotational_interpolation_sa.cpp</label>
        <link refid="rotational__interpolation__sa_8cpp"/>
      </node>
      <node id="71">
        <label>treeiksolverpos_online.hpp</label>
        <link refid="treeiksolverpos__online_8hpp"/>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>chainiksolvervel_pinv_nso.hpp</label>
        <link refid="chainiksolvervel__pinv__nso_8hpp"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>chainiksolvervel_pinv_givens.hpp</label>
        <link refid="chainiksolvervel__pinv__givens_8hpp"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>tree.cpp</label>
        <link refid="tree_8cpp"/>
      </node>
      <node id="86">
        <label>rigidbodyinertia.cpp</label>
        <link refid="rigidbodyinertia_8cpp"/>
      </node>
      <node id="60">
        <label>kinfam_io.hpp</label>
        <link refid="kinfam__io_8hpp"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>chainiksolverpos_lma.hpp</label>
        <link refid="chainiksolverpos__lma_8hpp"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>frames_io.cpp</label>
        <link refid="frames__io_8cpp"/>
      </node>
      <node id="115">
        <label>path_cyclic_closed.hpp</label>
        <link refid="path__cyclic__closed_8hpp"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>kinfamtest.hpp</label>
        <link refid="kinfamtest_8hpp"/>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>trajectory_segment.hpp</label>
        <link refid="trajectory__segment_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
      </node>
      <node id="111">
        <label>path_roundedcomposite.hpp</label>
        <link refid="path__roundedcomposite_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>path_line.hpp</label>
        <link refid="path__line_8hpp"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>chainfksolverpos_recursive.cpp</label>
        <link refid="chainfksolverpos__recursive_8cpp"/>
      </node>
      <node id="26">
        <label>kukaLWRtestDHnew.cpp</label>
        <link refid="kukaLWRtestDHnew_8cpp"/>
      </node>
      <node id="92">
        <label>jntspaceinertiamatrix.cpp</label>
        <link refid="jntspaceinertiamatrix_8cpp"/>
      </node>
      <node id="9">
        <label>chaindynparam.cpp</label>
        <link refid="chaindynparam_8cpp"/>
      </node>
      <node id="119">
        <label>trajectory.cpp</label>
        <link refid="trajectory_8cpp"/>
      </node>
      <node id="110">
        <label>path_composite.hpp</label>
        <link refid="path__composite_8hpp"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>treejnttojacsolver.hpp</label>
        <link refid="treejnttojacsolver_8hpp"/>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>treefksolverpos_recursive.hpp</label>
        <link refid="treefksolverpos__recursive_8hpp"/>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>frames.inl</label>
        <link refid="frames_8inl"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>jacobiandottest.hpp</label>
        <link refid="jacobiandottest_8hpp"/>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="140">
        <label>frames.cpp</label>
        <link refid="frames_8cpp"/>
      </node>
      <node id="124">
        <label>rotational_interpolation.hpp</label>
        <link refid="rotational__interpolation_8hpp"/>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>chainiksolverpos_nr_jl.cpp</label>
        <link refid="chainiksolverpos__nr__jl_8cpp"/>
      </node>
      <node id="18">
        <label>chainidsolver_vereshchagin.hpp</label>
        <link refid="chainidsolver__vereshchagin_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>treeidsolver_recursive_newton_euler.cpp</label>
        <link refid="treeidsolver__recursive__newton__euler_8cpp"/>
      </node>
      <node id="130">
        <label>svd_HH.cpp</label>
        <link refid="svd__HH_8cpp"/>
      </node>
      <node id="38">
        <label>chainiksolvervel_pinv_givens.cpp</label>
        <link refid="chainiksolvervel__pinv__givens_8cpp"/>
      </node>
      <node id="109">
        <label>path_circle.cpp</label>
        <link refid="path__circle_8cpp"/>
      </node>
      <node id="64">
        <label>tree.hpp</label>
        <link refid="tree_8hpp"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>chainexternalwrenchestimator.hpp</label>
        <link refid="chainexternalwrenchestimator_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>articulatedbodyinertia.cpp</label>
        <link refid="articulatedbodyinertia_8cpp"/>
      </node>
      <node id="23">
        <label>segment.hpp</label>
        <link refid="segment_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="136">
        <label>framevel.hpp</label>
        <link refid="framevel_8hpp"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>chainiksolverpos_lma_demo.cpp</label>
        <link refid="chainiksolverpos__lma__demo_8cpp"/>
      </node>
      <node id="4">
        <label>trajectory_example.cpp</label>
        <link refid="trajectory__example_8cpp"/>
      </node>
      <node id="90">
        <label>jntarray.hpp</label>
        <link refid="jntarray_8hpp"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>treeiksolverpos_nr_jl.cpp</label>
        <link refid="treeiksolverpos__nr__jl_8cpp"/>
      </node>
      <node id="94">
        <label>jntarrayacc.hpp</label>
        <link refid="jntarrayacc_8hpp"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>path_line.cpp</label>
        <link refid="path__line_8cpp"/>
      </node>
      <node id="52">
        <label>kinfamtest.cpp</label>
        <link refid="kinfamtest_8cpp"/>
      </node>
      <node id="59">
        <label>chainfdsolver.hpp</label>
        <link refid="chainfdsolver_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>trajectory_segment.cpp</label>
        <link refid="trajectory__segment_8cpp"/>
      </node>
      <node id="48">
        <label>chainfksolver.hpp</label>
        <link refid="chainfksolver_8hpp"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>chain.hpp</label>
        <link refid="chain_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>chainjnttojacdotsolver.hpp</label>
        <link refid="chainjnttojacdotsolver_8hpp"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>rotationalinertia.hpp</label>
        <link refid="rotationalinertia_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>chaindynparam.hpp</label>
        <link refid="chaindynparam_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="117">
        <label>trajectory.hpp</label>
        <link refid="trajectory_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>jntspaceinertiamatrix.hpp</label>
        <link refid="jntspaceinertiamatrix_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="138">
        <label>frameacc.hpp</label>
        <link refid="frameacc_8hpp"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>chainiksolvervel_pinv.hpp</label>
        <link refid="chainiksolvervel__pinv_8hpp"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>treefksolverpos_recursive.cpp</label>
        <link refid="treefksolverpos__recursive_8cpp"/>
      </node>
      <node id="63">
        <label>jacobiantest.cpp</label>
        <link refid="jacobiantest_8cpp"/>
      </node>
      <node id="113">
        <label>trajectory_composite.hpp</label>
        <link refid="trajectory__composite_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>solvertest.cpp</label>
        <link refid="solvertest_8cpp"/>
      </node>
      <node id="96">
        <label>jntarrayvel.cpp</label>
        <link refid="jntarrayvel_8cpp"/>
      </node>
      <node id="66">
        <label>treefksolver.hpp</label>
        <link refid="treefksolver_8hpp"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>chainiksolver.hpp</label>
        <link refid="chainiksolver_8hpp"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>chainiksolvervel_wdls.hpp</label>
        <link refid="chainiksolvervel__wdls_8hpp"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>jacobiandottest.cpp</label>
        <link refid="jacobiandottest_8cpp"/>
      </node>
      <node id="125">
        <label>rotational_interpolation.cpp</label>
        <link refid="rotational__interpolation_8cpp"/>
      </node>
      <node id="108">
        <label>path_circle.hpp</label>
        <link refid="path__circle_8hpp"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="106">
        <label>path_point.hpp</label>
        <link refid="path__point_8hpp"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>chainiksolverpos_nr_jl.hpp</label>
        <link refid="chainiksolverpos__nr__jl_8hpp"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>chainidsolver_vereshchagin.cpp</label>
        <link refid="chainidsolver__vereshchagin_8cpp"/>
      </node>
      <node id="123">
        <label>trajectory_stationary.cpp</label>
        <link refid="trajectory__stationary_8cpp"/>
      </node>
      <node id="129">
        <label>svd_HH.hpp</label>
        <link refid="svd__HH_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>segment.cpp</label>
        <link refid="segment_8cpp"/>
      </node>
      <node id="34">
        <label>chainjnttojacsolver.hpp</label>
        <link refid="chainjnttojacsolver_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>path.cpp</label>
        <link refid="path_8cpp"/>
      </node>
      <node id="141">
        <label>stiffness.hpp</label>
        <link refid="stiffness_8hpp"/>
      </node>
      <node id="11">
        <label>chainexternalwrenchestimator.cpp</label>
        <link refid="chainexternalwrenchestimator_8cpp"/>
      </node>
      <node id="5">
        <label>articulatedbodyinertia.hpp</label>
        <link refid="articulatedbodyinertia_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="137">
        <label>framevel.cpp</label>
        <link refid="framevel_8cpp"/>
      </node>
      <node id="127">
        <label>framestest.cpp</label>
        <link refid="framestest_8cpp"/>
      </node>
      <node id="95">
        <label>jntarrayacc.cpp</label>
        <link refid="jntarrayacc_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="frames_8inl_1ab9f866e7d04e843d4b6d3a4eee6d929a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Frame</type>
        <definition>IMETHOD Frame addDelta</definition>
        <argsstring>(const Frame &amp;a, const Twist &amp;da, double dt)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const Frame &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1163" column="15" bodyfile="src/frames.inl" bodystart="1163" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1adc8f82f1370f89d7a03690acbc77b4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Rotation</type>
        <definition>IMETHOD Rotation addDelta</definition>
        <argsstring>(const Rotation &amp;a, const Vector &amp;da, double dt)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const Rotation &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1160" column="18" bodyfile="src/frames.inl" bodystart="1160" bodyend="1162"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a58566d06df4915e96ff21005095b704b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Twist</type>
        <definition>IMETHOD Twist addDelta</definition>
        <argsstring>(const Twist &amp;a, const Twist &amp;da, double dt)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1169" column="15" bodyfile="src/frames.inl" bodystart="1169" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a781532f5147ffb631ae4a916de9153e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Vector</type>
        <definition>IMETHOD Vector addDelta</definition>
        <argsstring>(const Vector &amp;a, const Vector &amp;da, double dt)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1156" column="16" bodyfile="src/frames.inl" bodystart="1156" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a3c8ecf3827cea0e27f27a4c9f77c2813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Wrench</type>
        <definition>IMETHOD Wrench addDelta</definition>
        <argsstring>(const Wrench &amp;a, const Wrench &amp;da, double dt)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const Wrench &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Wrench &amp;</type>
          <declname>da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1172" column="16" bodyfile="src/frames.inl" bodystart="1172" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a06a4a9d54c828d628f398e94a5020d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Twist</type>
        <definition>IMETHOD Twist diff</definition>
        <argsstring>(const Frame &amp;F_a_b1, const Frame &amp;F_a_b2, double dt)</argsstring>
        <name>diff</name>
        <param>
          <type>const Frame &amp;</type>
          <declname>F_a_b1</declname>
        </param>
        <param>
          <type>const Frame &amp;</type>
          <declname>F_a_b2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1138" column="15" bodyfile="src/frames.inl" bodystart="1138" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a1dfb0c9924a9ec26905dfb0dbc835cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Vector</type>
        <definition>IMETHOD Vector diff</definition>
        <argsstring>(const Rotation &amp;R_a_b1, const Rotation &amp;R_a_b2, double dt)</argsstring>
        <name>diff</name>
        <param>
          <type>const Rotation &amp;</type>
          <declname>R_a_b1</declname>
        </param>
        <param>
          <type>const Rotation &amp;</type>
          <declname>R_a_b2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1133" column="16" bodyfile="src/frames.inl" bodystart="1133" bodyend="1136"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1ade209c48252e1842b3c7fb1ab83d8fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Twist</type>
        <definition>IMETHOD Twist diff</definition>
        <argsstring>(const Twist &amp;a, const Twist &amp;b, double dt)</argsstring>
        <name>diff</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1144" column="15" bodyfile="src/frames.inl" bodystart="1144" bodyend="1146"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a28b09ca6433ffe847b24cb2ac0f4ab6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Vector</type>
        <definition>IMETHOD Vector diff</definition>
        <argsstring>(const Vector &amp;a, const Vector &amp;b, double dt)</argsstring>
        <name>diff</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1129" column="16" bodyfile="src/frames.inl" bodystart="1129" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1aacc179b18d4f8937203b559c831d3e01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Wrench</type>
        <definition>IMETHOD Wrench diff</definition>
        <argsstring>(const Wrench &amp;a, const Wrench &amp;b, double dt)</argsstring>
        <name>diff</name>
        <param>
          <type>const Wrench &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Wrench &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1148" column="16" bodyfile="src/frames.inl" bodystart="1148" bodyend="1153"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a6e701fe8737cc7427c205e27dc57796e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> double</type>
        <definition>IMETHOD double dot</definition>
        <argsstring>(const Twist &amp;lhs, const Wrench &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Wrench &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1016" column="16" bodyfile="src/frames.inl" bodystart="1016" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a838952d8ea25fd9b6543ad08bb9b1479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> double</type>
        <definition>IMETHOD double dot</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1012" column="16" bodyfile="src/frames.inl" bodystart="1012" bodyend="1014"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1aebb8f00a811e38a6a69746bef24097f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> double</type>
        <definition>IMETHOD double dot</definition>
        <argsstring>(const Wrench &amp;rhs, const Twist &amp;lhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const Wrench &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1020" column="16" bodyfile="src/frames.inl" bodystart="1020" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a1c67741199b736f7308a0e6f5633c4e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool Equal</definition>
        <argsstring>(const Frame &amp;a, const Frame &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const Frame &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Frame &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1039" column="14" bodyfile="src/frames.inl" bodystart="1039" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1ad088204124856b8a92cb7f58e674302e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool Equal</definition>
        <argsstring>(const Frame2 &amp;a, const Frame2 &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const Frame2 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Frame2 &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1063" column="14" bodyfile="src/frames.inl" bodystart="1063" bodyend="1066"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a34b5b4d5624e408a0b3dd64b055e1f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool Equal</definition>
        <argsstring>(const Rotation2 &amp;a, const Rotation2 &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const Rotation2 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Rotation2 &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1059" column="14" bodyfile="src/frames.inl" bodystart="1059" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a6a19f9532a0494bccc0cddb832e5894b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool Equal</definition>
        <argsstring>(const Twist &amp;a, const Twist &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1049" column="14" bodyfile="src/frames.inl" bodystart="1049" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a51ec5cca8075b5fc8449f0ddd65cce11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool Equal</definition>
        <argsstring>(const Vector &amp;a, const Vector &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1032" column="14" bodyfile="src/frames.inl" bodystart="1032" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1ab17cb601b66b7044844f9073f05881f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool Equal</definition>
        <argsstring>(const Vector2 &amp;a, const Vector2 &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1054" column="14" bodyfile="src/frames.inl" bodystart="1054" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a694ad9cc77b7efc98c1578f6aef6cfbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool Equal</definition>
        <argsstring>(const Wrench &amp;a, const Wrench &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const Wrench &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Wrench &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1044" column="14" bodyfile="src/frames.inl" bodystart="1044" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a8006f466dfb798c4865bbf99732315c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool operator!=</definition>
        <argsstring>(const Frame &amp;a, const Frame &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Frame &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Frame &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1284" column="14" bodyfile="src/frames.inl" bodystart="1284" bodyend="1286"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a7d2da91476413979f41854765fcb285e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool operator!=</definition>
        <argsstring>(const Rotation &amp;a, const Rotation &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Rotation &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Rotation &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1327" column="14" bodyfile="src/frames.inl" bodystart="1327" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1ab89ee6b759e8671de97cf38b3de791fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool operator!=</definition>
        <argsstring>(const Twist &amp;a, const Twist &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1311" column="14" bodyfile="src/frames.inl" bodystart="1311" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a670300ca0ce9065eab7e2a5e6c70b58a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool operator!=</definition>
        <argsstring>(const Vector &amp;a, const Vector &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1298" column="14" bodyfile="src/frames.inl" bodystart="1298" bodyend="1300"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a6a6390d093f97246c58eb01ca0e57963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool operator!=</definition>
        <argsstring>(const Vector2 &amp;a, const Vector2 &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1340" column="14" bodyfile="src/frames.inl" bodystart="1340" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a8b26dec0f28798c84e0663e70b28c79b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool operator!=</definition>
        <argsstring>(const Wrench &amp;a, const Wrench &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Wrench &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Wrench &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1324" column="14" bodyfile="src/frames.inl" bodystart="1324" bodyend="1326"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1adb5d8e64590ce61d0ea8fb91a24f674c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Frame</type>
        <definition>Frame operator*</definition>
        <argsstring>(const Frame &amp;lhs, const Frame &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Frame &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Frame &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="406" column="8" bodyfile="src/frames.inl" bodystart="406" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a505ef08a05a356a972184776b2de4279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Frame2</type>
        <definition>IMETHOD Frame2 operator*</definition>
        <argsstring>(const Frame2 &amp;lhs, const Frame2 &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Frame2 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Frame2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="930" column="16" bodyfile="src/frames.inl" bodystart="930" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a716aecb37fa17be1323ac9d471d740e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Rotation2</type>
        <definition>IMETHOD Rotation2 operator*</definition>
        <argsstring>(const Rotation2 &amp;lhs, const Rotation2 &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Rotation2 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Rotation2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="870" column="19" bodyfile="src/frames.inl" bodystart="870" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a969cd47ef10751021ada52c678503ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Twist</type>
        <definition>Twist operator*</definition>
        <argsstring>(const Twist &amp;lhs, const Twist &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="379" column="7" bodyfile="src/frames.inl" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a10f7a1660ecf13906fc0808f9d264d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Wrench</type>
        <definition>Wrench operator*</definition>
        <argsstring>(const Twist &amp;lhs, const Wrench &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Wrench &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="383" column="8" bodyfile="src/frames.inl" bodystart="383" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a04b73370fb4ad857f2b4cb720f3c9113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Twist</type>
        <definition>Twist operator*</definition>
        <argsstring>(const Twist &amp;lhs, double rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="345" column="7" bodyfile="src/frames.inl" bodystart="345" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a7cf9d5b6086b4ece4eeeb6ca333906ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Vector</type>
        <definition>Vector operator*</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="110" column="8" bodyfile="src/frames.inl" bodystart="110" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Vector</type>
        <definition>Vector operator*</definition>
        <argsstring>(const Vector &amp;lhs, double rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="83" column="8" bodyfile="src/frames.inl" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a009647d43a87c207cf3db14ae2c0d594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Vector2</type>
        <definition>IMETHOD Vector2 operator*</definition>
        <argsstring>(const Vector2 &amp;lhs, double rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="755" column="17" bodyfile="src/frames.inl" bodystart="755" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1accbdf521d6fc163bb229914dfa3e2c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Wrench</type>
        <definition>Wrench operator*</definition>
        <argsstring>(const Wrench &amp;lhs, double rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Wrench &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="242" column="8" bodyfile="src/frames.inl" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1ac7e5ad8e49d4f92b49b5d6b16e606158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Twist</type>
        <definition>Twist operator*</definition>
        <argsstring>(double lhs, const Twist &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="350" column="7" bodyfile="src/frames.inl" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1af1b7f920324ab230c303c352421c799a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Vector</type>
        <definition>Vector operator*</definition>
        <argsstring>(double lhs, const Vector &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="92" column="8" bodyfile="src/frames.inl" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a6d344b6cf3f746f3b955630bcb486ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Vector2</type>
        <definition>IMETHOD Vector2 operator*</definition>
        <argsstring>(double lhs, const Vector2 &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="760" column="17" bodyfile="src/frames.inl" bodystart="760" bodyend="763"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1ad9270132aa4084d7d61b007374a81883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Wrench</type>
        <definition>Wrench operator*</definition>
        <argsstring>(double lhs, const Wrench &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Wrench &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="247" column="8" bodyfile="src/frames.inl" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1ad0f34bc2ed48c3caa688b8e405466985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Twist</type>
        <definition>Twist operator+</definition>
        <argsstring>(const Twist &amp;lhs, const Twist &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="361" column="7" bodyfile="src/frames.inl" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a97406eb9ba738a2c68b4374a86ee6cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Vector</type>
        <definition>IMETHOD Vector operator+</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="57" column="16" bodyfile="src/frames.inl" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1ade97f4b94b51acf2c903119245cc9460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Vector2</type>
        <definition>IMETHOD Vector2 operator+</definition>
        <argsstring>(const Vector2 &amp;lhs, const Vector2 &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="745" column="17" bodyfile="src/frames.inl" bodystart="745" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a17d4fccb33a2736468d0645862956cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Wrench</type>
        <definition>Wrench operator+</definition>
        <argsstring>(const Wrench &amp;lhs, const Wrench &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const Wrench &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Wrench &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="258" column="8" bodyfile="src/frames.inl" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1aa659300da279e4d00b44489a755d4be9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Twist</type>
        <definition>Twist operator-</definition>
        <argsstring>(const Twist &amp;arg)</argsstring>
        <name>operator-</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="372" column="7" bodyfile="src/frames.inl" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a6c7c88bf859de28239ded2fdbcd848bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Twist</type>
        <definition>Twist operator-</definition>
        <argsstring>(const Twist &amp;lhs, const Twist &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="366" column="7" bodyfile="src/frames.inl" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a5eff5e8fcf678ef559ff40f236865596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Vector</type>
        <definition>Vector operator-</definition>
        <argsstring>(const Vector &amp;arg)</argsstring>
        <name>operator-</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="449" column="8" bodyfile="src/frames.inl" bodystart="449" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a3c5faab88483ef8376d30d451b2a423b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Vector</type>
        <definition>IMETHOD Vector operator-</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="66" column="16" bodyfile="src/frames.inl" bodystart="66" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a36673b1ba385b6b71fdb241be1a4a908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Vector2</type>
        <definition>IMETHOD Vector2 operator-</definition>
        <argsstring>(const Vector2 &amp;arg)</argsstring>
        <name>operator-</name>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="813" column="17" bodyfile="src/frames.inl" bodystart="813" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a57612f12d1b3243f58c380934cd8e8ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Vector2</type>
        <definition>IMETHOD Vector2 operator-</definition>
        <argsstring>(const Vector2 &amp;lhs, const Vector2 &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="750" column="17" bodyfile="src/frames.inl" bodystart="750" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1aaa88a5af82234547897ea220ef3cd173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Wrench</type>
        <definition>Wrench operator-</definition>
        <argsstring>(const Wrench &amp;arg)</argsstring>
        <name>operator-</name>
        <param>
          <type>const Wrench &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="269" column="8" bodyfile="src/frames.inl" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1aa81947bb6d31729915fc66d59fdf84e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Wrench</type>
        <definition>Wrench operator-</definition>
        <argsstring>(const Wrench &amp;lhs, const Wrench &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const Wrench &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Wrench &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="263" column="8" bodyfile="src/frames.inl" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a939e42c12cc59ac6eb8f8152c4461ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Twist</type>
        <definition>Twist operator/</definition>
        <argsstring>(const Twist &amp;lhs, double rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="355" column="7" bodyfile="src/frames.inl" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a25d9bb5f010ee074e6ae3f1ade146927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Vector</type>
        <definition>Vector operator/</definition>
        <argsstring>(const Vector &amp;lhs, double rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="101" column="8" bodyfile="src/frames.inl" bodystart="101" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a2c44743ba880da24e916d63364996e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Vector2</type>
        <definition>IMETHOD Vector2 operator/</definition>
        <argsstring>(const Vector2 &amp;lhs, double rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="765" column="17" bodyfile="src/frames.inl" bodystart="765" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a4c875b04aa468b3494b427e3007bb9e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Wrench</type>
        <definition>Wrench operator/</definition>
        <argsstring>(const Wrench &amp;lhs, double rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const Wrench &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="252" column="8" bodyfile="src/frames.inl" bodystart="252" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a5a19fb0fca38c4c44ab227cc7e491c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool operator==</definition>
        <argsstring>(const Frame &amp;a, const Frame &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const Frame &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Frame &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1275" column="14" bodyfile="src/frames.inl" bodystart="1275" bodyend="1282"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a3a35a33e086efdf284e378f461a71cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool operator==</definition>
        <argsstring>(const Twist &amp;a, const Twist &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1302" column="14" bodyfile="src/frames.inl" bodystart="1302" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a41442bbd88293936a321db1b7ad4b2c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool operator==</definition>
        <argsstring>(const Vector &amp;a, const Vector &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1288" column="14" bodyfile="src/frames.inl" bodystart="1288" bodyend="1296"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a4fd2a87ee06692b114a108dd3946e994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool operator==</definition>
        <argsstring>(const Vector2 &amp;a, const Vector2 &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Vector2 &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1331" column="14" bodyfile="src/frames.inl" bodystart="1331" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1ad17f03f1acf55ced7634ab2f348a6263" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool operator==</definition>
        <argsstring>(const Wrench &amp;a, const Wrench &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const Wrench &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Wrench &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1315" column="14" bodyfile="src/frames.inl" bodystart="1315" bodyend="1322"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a5d7e69524a22c9627a4d4c9ef6199573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void posrandom</definition>
        <argsstring>(Frame &amp;F)</argsstring>
        <name>posrandom</name>
        <param>
          <type>Frame &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1267" column="14" bodyfile="src/frames.inl" bodystart="1267" bodyend="1270"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1ab0114bb2d980453c0c2ff95c4b5d7e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void posrandom</definition>
        <argsstring>(Rotation &amp;R)</argsstring>
        <name>posrandom</name>
        <param>
          <type>Rotation &amp;</type>
          <declname>R</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1257" column="14" bodyfile="src/frames.inl" bodystart="1257" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a195bd544341e9ae9d5c280c522898afe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void posrandom</definition>
        <argsstring>(Twist &amp;a)</argsstring>
        <name>posrandom</name>
        <param>
          <type>Twist &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1248" column="14" bodyfile="src/frames.inl" bodystart="1248" bodyend="1251"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a9a2df7414a816c2cddbc3651c2a038a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void posrandom</definition>
        <argsstring>(Vector &amp;a)</argsstring>
        <name>posrandom</name>
        <param>
          <type>Vector &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1243" column="14" bodyfile="src/frames.inl" bodystart="1243" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a5a5e3f2020f49b3aae2ced72957279cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void posrandom</definition>
        <argsstring>(Wrench &amp;a)</argsstring>
        <name>posrandom</name>
        <param>
          <type>Wrench &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1252" column="14" bodyfile="src/frames.inl" bodystart="1252" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a5b17d79b3fa55cd41d50dd43ecff704b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void random</definition>
        <argsstring>(Frame &amp;F)</argsstring>
        <name>random</name>
        <param>
          <type>Frame &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1238" column="14" bodyfile="src/frames.inl" bodystart="1238" bodyend="1241"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a832718cf1ee64bccc3e8488bbeeba6a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void random</definition>
        <argsstring>(Rotation &amp;R)</argsstring>
        <name>random</name>
        <param>
          <type>Rotation &amp;</type>
          <declname>R</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1228" column="14" bodyfile="src/frames.inl" bodystart="1228" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a8132445ff5f3895ee3c6c351f0dd81c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void random</definition>
        <argsstring>(Twist &amp;a)</argsstring>
        <name>random</name>
        <param>
          <type>Twist &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1219" column="14" bodyfile="src/frames.inl" bodystart="1219" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a9f76654728449cbb330e854b25f77ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void random</definition>
        <argsstring>(Vector &amp;a)</argsstring>
        <name>random</name>
        <param>
          <type>Vector &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>addDelta operator for displacement rotational velocity. </para>
        </briefdescription>
        <detaileddescription>
<para>The Vector arguments here represent a displacement rotational velocity. i.e. a rotation around a fixed axis for a certain angle. For this representation you cannot use <ref refid="frames_8inl_1a28b09ca6433ffe847b24cb2ac0f4ab6b" kindref="member">diff()</ref> but have to use diff_displ().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>: displacement rotational velocity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>da</parametername>
</parameternamelist>
<parameterdescription>
<para>: rotational velocity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>displacement rotational velocity</para>
</simplesect>
<simplesect kind="warning"><para>do not confuse displacement rotational velocities and velocities </para>
</simplesect>
<simplesect kind="warning"><para>do not confuse displacement twist and twist.</para>
</simplesect>
IMETHOD Vector addDelta_displ(const Vector&amp; a,const Vector&amp;da,double dt) { return getRot(addDelta(Rot(a),da,dt)); }</para>
<para>addDelta operator for displacement twist.</para>
<para>The Vector arguments here represent a displacement rotational velocity. i.e. a rotation around a fixed axis for a certain angle. For this representation you cannot use <ref refid="frames_8inl_1a28b09ca6433ffe847b24cb2ac0f4ab6b" kindref="member">diff()</ref> but have to use diff_displ().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>: displacement twist </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>da</parametername>
</parameternamelist>
<parameterdescription>
<para>: twist </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>displacement twist</para>
</simplesect>
<simplesect kind="warning"><para>do not confuse displacement rotational velocities and velocities </para>
</simplesect>
<simplesect kind="warning"><para>do not confuse displacement twist and twist.</para>
</simplesect>
IMETHOD Twist addDelta_displ(const Twist&amp; a,const Twist&amp;da,double dt) { return Twist(addDelta(a.vel,da.vel,dt),addDelta_displ(a.rot,da.rot,dt)); } </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1214" column="14" bodyfile="src/frames.inl" bodystart="1214" bodyend="1218"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a1d4fb8b8dab175821ea1081156a7877a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void random</definition>
        <argsstring>(Wrench &amp;a)</argsstring>
        <name>random</name>
        <param>
          <type>Wrench &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1223" column="14" bodyfile="src/frames.inl" bodystart="1223" bodyend="1226"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1ae6d17b27737370d8ce326fdac8e1756a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> Rotation</type>
        <definition>IMETHOD Rotation Rot</definition>
        <argsstring>(const Vector &amp;axis_a_b)</argsstring>
        <name>Rot</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>axis_a_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>axis_a_b is a rotation vector, its norm is a rotation angle axis_a_b rotates the a frame towards the b frame. This routine returns the rotation matrix R_a_b </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1107" column="18" bodyfile="src/frames.inl" bodystart="1107" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a023498d76788ecf4ef547d9920ed730c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void SetToZero</definition>
        <argsstring>(Twist &amp;v)</argsstring>
        <name>SetToZero</name>
        <param>
          <type>Twist &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1071" column="14" bodyfile="src/frames.inl" bodystart="1071" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a73e913de2016bccf9ec44e18dce273b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void SetToZero</definition>
        <argsstring>(Vector &amp;v)</argsstring>
        <name>SetToZero</name>
        <param>
          <type>Vector &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1068" column="14" bodyfile="src/frames.inl" bodystart="1068" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a9ee4d4cbcc1cf3c7cdaff7199489cfa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void SetToZero</definition>
        <argsstring>(Vector2 &amp;v)</argsstring>
        <name>SetToZero</name>
        <param>
          <type>Vector2 &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1080" column="14" bodyfile="src/frames.inl" bodystart="1080" bodyend="1082"/>
      </memberdef>
      <memberdef kind="function" id="frames_8inl_1a5421ae642b787f650f47b751c2bb9ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void SetToZero</definition>
        <argsstring>(Wrench &amp;v)</argsstring>
        <name>SetToZero</name>
        <param>
          <type>Wrench &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.inl" line="1075" column="14" bodyfile="src/frames.inl" bodystart="1075" bodyend="1078"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Inlined member functions and global functions that relate to the classes in <ref refid="frames_8cpp" kindref="compound">frames.cpp</ref> </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frames.inl<sp/>-<sp/><sp/>description</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-------------------------</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>begin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>June<sp/>2006</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/><sp/>copyright<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(C)<sp/>2006<sp/>Erwin<sp/>Aertbelien</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/><sp/>email<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>firstname.lastname@mech.kuleuven.ac.be</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>History<sp/>(only<sp/>major<sp/>changes)(<sp/>AUTHOR-Description<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>***************************************************************************</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/><sp/>02111-1307<sp/><sp/>USA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classKDL_1_1Vector_1a25eb8c0bef6d3a3fb521fc13b7b0415e" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector::Vector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>arg.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>data[1]<sp/>=<sp/>arg.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>data[2]<sp/>=<sp/>arg.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2];</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classKDL_1_1Vector_1a05d50ffeedd10ed4758fa102a047f085" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector::Vector(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[0]=x;data[1]=y;data[2]=z;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classKDL_1_1Vector_1a7de07a01933c474bba6406d9392a6839" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>Vector::operator<sp/>=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>data[0]<sp/>=<sp/>arg.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>data[1]<sp/>=<sp/>arg.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>data[2]<sp/>=<sp/>arg.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="frames_8inl_1a97406eb9ba738a2c68b4374a86ee6cd0" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector<sp/><ref refid="frames_8inl_1a97406eb9ba738a2c68b4374a86ee6cd0" kindref="member">operator +</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector<sp/>&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector<sp/>tmp;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[0]<sp/>=<sp/>lhs.data[0]+rhs.data[0];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[1]<sp/>=<sp/>lhs.data[1]+rhs.data[1];</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[2]<sp/>=<sp/>lhs.data[2]+rhs.data[2];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="frames_8inl_1a3c5faab88483ef8376d30d451b2a423b" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector<sp/><ref refid="frames_8inl_1a3c5faab88483ef8376d30d451b2a423b" kindref="member">operator -</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector<sp/>&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector<sp/>tmp;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[0]<sp/>=<sp/>lhs.data[0]-rhs.data[0];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[1]<sp/>=<sp/>lhs.data[1]-rhs.data[1];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[2]<sp/>=<sp/>lhs.data[2]-rhs.data[2];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classKDL_1_1Vector_1a9a07c1943fa9132a95ab98069d976c80" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Vector::x()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[0];<sp/>}</highlight></codeline>
<codeline lineno="76" refid="classKDL_1_1Vector_1a5177abd2f89d6f3bc891306083e62075" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Vector::y()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[1];<sp/>}</highlight></codeline>
<codeline lineno="77" refid="classKDL_1_1Vector_1a443e864c08b2cbd2b48b1d85b1da8ea5" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Vector::z()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[2];<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Vector::x(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_x<sp/>)<sp/>{<sp/>data[0]<sp/>=<sp/>_x;<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Vector::y(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_y<sp/>)<sp/>{<sp/>data[1]<sp/>=<sp/>_y;<sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Vector::z(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_z<sp/>)<sp/>{<sp/><ref refid="cpp/iterator/data" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">data</ref>[2]<sp/>=<sp/>_z;<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" refkind="member"><highlight class="normal">Vector<sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>lhs,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector<sp/>tmp;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[0]<sp/>=<sp/>lhs.data[0]*rhs;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[1]<sp/>=<sp/>lhs.data[1]*rhs;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[2]<sp/>=<sp/>lhs.data[2]*rhs;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="frames_8inl_1af1b7f920324ab230c303c352421c799a" refkind="member"><highlight class="normal">Vector<sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">operator *</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>rhs)<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector<sp/>tmp;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[0]<sp/>=<sp/>lhs*rhs.data[0];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[1]<sp/>=<sp/>lhs*rhs.data[1];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[2]<sp/>=<sp/>lhs*rhs.data[2];</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="frames_8inl_1a25d9bb5f010ee074e6ae3f1ade146927" refkind="member"><highlight class="normal">Vector<sp/><ref refid="frames_8inl_1a25d9bb5f010ee074e6ae3f1ade146927" kindref="member">operator /</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>lhs,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector<sp/>tmp;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[0]<sp/>=<sp/>lhs.data[0]/rhs;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[1]<sp/>=<sp/>lhs.data[1]/rhs;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[2]<sp/>=<sp/>lhs.data[2]/rhs;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="frames_8inl_1a7cf9d5b6086b4ece4eeeb6ca333906ea" refkind="member"><highlight class="normal">Vector<sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector<sp/>&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complexity<sp/>:<sp/>6M+3A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector<sp/>tmp;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[0]<sp/>=<sp/>lhs.data[1]*rhs.data[2]-lhs.data[2]*rhs.data[1];</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[1]<sp/>=<sp/>lhs.data[2]*rhs.data[0]-lhs.data[0]*rhs.data[2];</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[2]<sp/>=<sp/>lhs.data[0]*rhs.data[1]-lhs.data[1]*rhs.data[0];</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="classKDL_1_1Vector_1a6e70ce6aa6a38df00e518857b3aa4115" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>Vector::operator<sp/>+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complexity<sp/>:<sp/>3A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>data[0]+=arg.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0];</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>data[1]+=arg.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>data[2]+=arg.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="classKDL_1_1Vector_1a20668af899021cbd59dc92211a32a2c8" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>Vector::operator<sp/>-=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complexity<sp/>:<sp/>3A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>data[0]-=arg.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>data[1]-=arg.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>data[2]-=arg.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="classKDL_1_1Vector_1aac50a5f60447f9cb7b4a510c4695ab89" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>Vector::Zero()</highlight></codeline>
<codeline lineno="139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>(0,0,0);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="classKDL_1_1Vector_1ab2446f1e1c0a1ec8fc42f29259f43b23" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Vector::operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utility_8h_1a40520a99aa348467ec29eb5b562588dc" kindref="member">FRAMES_CHECKI</ref>((0&lt;=index)&amp;&amp;(index&lt;=2));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[index];</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classKDL_1_1Vector_1a3897f8e1b819ac710918030f70db0c12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>Vector::operator<sp/>()<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utility_8h_1a40520a99aa348467ec29eb5b562588dc" kindref="member">FRAMES_CHECKI</ref>((0&lt;=index)&amp;&amp;(index&lt;=2));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data[index];</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="classKDL_1_1Frame_1a021bab736839bc1c655619beb209cc66" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref><sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">Frame::operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>&amp;<sp/>arg)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complexity<sp/>:<sp/>24M+18A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1Wrench_1a3f8bee8b5afd64870bf187fa6a4ea3fc" kindref="member">force</ref><sp/><sp/>=<sp/>M*arg.force;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1Wrench_1ab725bbdf755cadd4a6718ea1f2ed1c1e" kindref="member">torque</ref><sp/>=<sp/>M*arg.torque<sp/>+<sp/>p*tmp.<ref refid="classKDL_1_1Wrench_1a3f8bee8b5afd64870bf187fa6a4ea3fc" kindref="member">force</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="classKDL_1_1Frame_1ae9eeb43943d237da3116b142d209d9ec" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref><sp/>Frame::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="166"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1Wrench_1a3f8bee8b5afd64870bf187fa6a4ea3fc" kindref="member">force</ref><sp/>=<sp/><sp/>M.Inverse(arg.<ref refid="classKDL_1_1Wrench_1a3f8bee8b5afd64870bf187fa6a4ea3fc" kindref="member">force</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1Wrench_1ab725bbdf755cadd4a6718ea1f2ed1c1e" kindref="member">torque</ref><sp/>=<sp/>M.Inverse(arg.<ref refid="classKDL_1_1Wrench_1ab725bbdf755cadd4a6718ea1f2ed1c1e" kindref="member">torque</ref>-p*arg.<ref refid="classKDL_1_1Wrench_1a3f8bee8b5afd64870bf187fa6a4ea3fc" kindref="member">force</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="classKDL_1_1Rotation_1a139ee9c400685a75c4f6fd3acc1ef8ec" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref><sp/>Rotation::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="176"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>(Inverse(arg.<ref refid="classKDL_1_1Wrench_1a3f8bee8b5afd64870bf187fa6a4ea3fc" kindref="member">force</ref>),Inverse(arg.<ref refid="classKDL_1_1Wrench_1ab725bbdf755cadd4a6718ea1f2ed1c1e" kindref="member">torque</ref>));</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="classKDL_1_1Rotation_1a1e229277228e2a0c0f3e3faea9dbb79a" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/>Rotation::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="181"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>(Inverse(arg.<ref refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" kindref="member">vel</ref>),Inverse(arg.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>));</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="classKDL_1_1Wrench_1a5f331d9253cdfe634a8df55dfd158730" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref><sp/>Wrench::Zero()</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>(Vector::Zero(),Vector::Zero());</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="classKDL_1_1Wrench_1af38ab9d4d4e87cfa3505118351b1ed26" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Wrench::ReverseSign()</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>torque.ReverseSign();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>force.ReverseSign();</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="classKDL_1_1Wrench_1ac84fd36d8238a48b750de87ec16ff01a" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref><sp/>Wrench::RefPoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>v_base_AB)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Changes<sp/>the<sp/>reference<sp/>point<sp/>of<sp/>the<sp/>Wrench.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>v_base_AB<sp/>is<sp/>expressed<sp/>in<sp/>the<sp/>same<sp/>base<sp/>as<sp/>the<sp/>twist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>v_base_AB<sp/>is<sp/>a<sp/>vector<sp/>from<sp/>the<sp/>old<sp/>point<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>(this-&gt;force,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;torque+this-&gt;force*v_base_AB</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="classKDL_1_1Wrench_1a3d53d5f8ae0a7ea995b33d525152b55e" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>&amp;<sp/>Wrench::operator-=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>torque-=arg.<ref refid="classKDL_1_1Wrench_1ab725bbdf755cadd4a6718ea1f2ed1c1e" kindref="member">torque</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>force<sp/>-=arg.<ref refid="classKDL_1_1Wrench_1a3f8bee8b5afd64870bf187fa6a4ea3fc" kindref="member">force</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="classKDL_1_1Wrench_1a133c392f51dbc8f368f15255833e71cb" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>&amp;<sp/>Wrench::operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>torque+=arg.<ref refid="classKDL_1_1Wrench_1ab725bbdf755cadd4a6718ea1f2ed1c1e" kindref="member">torque</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>force<sp/>+=arg.<ref refid="classKDL_1_1Wrench_1a3f8bee8b5afd64870bf187fa6a4ea3fc" kindref="member">force</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="classKDL_1_1Wrench_1a976ba92ead3f1a91cec72a5c4268fb2c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>Wrench::operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert((0&lt;=i)&amp;&amp;(i&lt;6));<sp/>done<sp/>by<sp/>underlying<sp/>routines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&lt;3)<sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>force(i);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torque(i-3);</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="classKDL_1_1Wrench_1a0014bc437c99886888122f8343f287d8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Wrench::operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="233"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert((0&lt;=i)&amp;&amp;(i&lt;6));<sp/>done<sp/>by<sp/>underlying<sp/>routines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&lt;3)<sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>force(i);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torque(i-3);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="frames_8inl_1accbdf521d6fc163bb229914dfa3e2c20" refkind="member"><highlight class="normal">Wrench<sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>lhs,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Wrench(lhs.force*rhs,lhs.torque*rhs);</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="frames_8inl_1ad9270132aa4084d7d61b007374a81883" refkind="member"><highlight class="normal">Wrench<sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">operator*</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Wrench(lhs*rhs.force,lhs*rhs.torque);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="frames_8inl_1a4c875b04aa468b3494b427e3007bb9e6" refkind="member"><highlight class="normal">Wrench<sp/><ref refid="frames_8inl_1a25d9bb5f010ee074e6ae3f1ade146927" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>lhs,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Wrench(lhs.force/rhs,lhs.torque/rhs);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>addition<sp/>of<sp/>Wrench&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="frames_8inl_1a17d4fccb33a2736468d0645862956cb5" refkind="member"><highlight class="normal">Wrench<sp/><ref refid="frames_8inl_1a97406eb9ba738a2c68b4374a86ee6cd0" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Wrench(lhs.force+rhs.force,lhs.torque+rhs.torque);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="frames_8inl_1aa81947bb6d31729915fc66d59fdf84e6" refkind="member"><highlight class="normal">Wrench<sp/><ref refid="frames_8inl_1a3c5faab88483ef8376d30d451b2a423b" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Wrench(lhs.force-rhs.force,lhs.torque-rhs.torque);</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unary<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="frames_8inl_1aaa88a5af82234547897ea220ef3cd173" refkind="member"><highlight class="normal">Wrench<sp/><ref refid="frames_8inl_1a3c5faab88483ef8376d30d451b2a423b" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>arg)<sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Wrench(-arg.force,-arg.torque);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="classKDL_1_1Frame_1a402eea637834d2643c67da1a5f1fe495" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">Frame::operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>arg)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complexity<sp/>:<sp/>24M+18A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref><sp/>=<sp/>M*arg.rot;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" kindref="member">vel</ref><sp/>=<sp/>M*arg.vel+p*tmp.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282" refid="classKDL_1_1Frame_1abf87d299d64beaa06e2903ee9983d244" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/>Frame::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="283"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref><sp/>=<sp/><sp/>M.Inverse(arg.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" kindref="member">vel</ref><sp/>=<sp/>M.Inverse(arg.<ref refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" kindref="member">vel</ref>-p*arg.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="classKDL_1_1Twist_1aeb2250f1de9e0c6f9fe738dc8c083bc9" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/>Twist::Zero()</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>(Vector::Zero(),Vector::Zero());</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="classKDL_1_1Twist_1aaa84dee400c40843546885ee6d7f8ec7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Twist::ReverseSign()</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>vel.ReverseSign();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>rot.ReverseSign();</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="classKDL_1_1Twist_1abd257927af744c4b6e985edc22f0b667" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/>Twist::RefPoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>v_base_AB)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Changes<sp/>the<sp/>reference<sp/>point<sp/>of<sp/>the<sp/>twist.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>v_base_AB<sp/>is<sp/>expressed<sp/>in<sp/>the<sp/>same<sp/>base<sp/>as<sp/>the<sp/>twist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>vector<sp/>v_base_AB<sp/>is<sp/>a<sp/>vector<sp/>from<sp/>the<sp/>old<sp/>point<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Complexity<sp/>:<sp/>6M+6A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>(this-&gt;vel+this-&gt;rot*v_base_AB,this-&gt;rot);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="classKDL_1_1Twist_1ad357a06d42137c4973ac6b368fd6be74" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>Twist::operator-=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>vel-=arg.<ref refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" kindref="member">vel</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>rot<sp/>-=arg.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="classKDL_1_1Twist_1a34b35ebb6c8e2ac3b19ca7d0aac5f467" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>Twist::operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>vel+=arg.<ref refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" kindref="member">vel</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>rot<sp/>+=arg.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="classKDL_1_1Twist_1a35ff2697b863859d0c1d63b48120b406" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>Twist::operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert((0&lt;=i)&amp;&amp;(i&lt;6));<sp/>done<sp/>by<sp/>underlying<sp/>routines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&lt;3)<sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vel(i);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rot(i-3);</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="classKDL_1_1Twist_1a8b509ec22cf6bfbf46f533882d923409" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Twist::operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="336"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assert((0&lt;=i)&amp;&amp;(i&lt;6));<sp/>done<sp/>by<sp/>underlying<sp/>routines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i&lt;3)<sp/></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vel(i);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rot(i-3);</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="frames_8inl_1a04b73370fb4ad857f2b4cb720f3c9113" refkind="member"><highlight class="normal">Twist<sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>lhs,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Twist(lhs.vel*rhs,lhs.rot*rhs);</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="frames_8inl_1ac7e5ad8e49d4f92b49b5d6b16e606158" refkind="member"><highlight class="normal">Twist<sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">operator*</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Twist(lhs*rhs.vel,lhs*rhs.rot);</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="frames_8inl_1a939e42c12cc59ac6eb8f8152c4461ea1" refkind="member"><highlight class="normal">Twist<sp/><ref refid="frames_8inl_1a25d9bb5f010ee074e6ae3f1ade146927" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>lhs,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Twist(lhs.vel/rhs,lhs.rot/rhs);</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>addition<sp/>of<sp/>Twist&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="frames_8inl_1ad0f34bc2ed48c3caa688b8e405466985" refkind="member"><highlight class="normal">Twist<sp/><ref refid="frames_8inl_1a97406eb9ba738a2c68b4374a86ee6cd0" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Twist(lhs.vel+rhs.vel,lhs.rot+rhs.rot);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="frames_8inl_1a6c7c88bf859de28239ded2fdbcd848bf" refkind="member"><highlight class="normal">Twist<sp/><ref refid="frames_8inl_1a3c5faab88483ef8376d30d451b2a423b" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Twist(lhs.vel-rhs.vel,lhs.rot-rhs.rot);</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unary<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="frames_8inl_1aa659300da279e4d00b44489a755d4be9" refkind="member"><highlight class="normal">Twist<sp/><ref refid="frames_8inl_1a3c5faab88483ef8376d30d451b2a423b" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>arg)<sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Twist(-arg.vel,-arg.rot);</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//Spatial<sp/>products<sp/>for<sp/>twists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="frames_8inl_1a969cd47ef10751021ada52c678503ce7" refkind="member"><highlight class="normal">Twist<sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Twist(lhs.rot*rhs.vel+lhs.vel*rhs.rot,lhs.rot*rhs.rot);</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383" refid="frames_8inl_1a10f7a1660ecf13906fc0808f9d264d33" refkind="member"><highlight class="normal">Wrench<sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Wrench(lhs.rot*rhs.force,lhs.rot*rhs.torque+lhs.vel*rhs.force);</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="classKDL_1_1Frame_1aba40e19275ca4ddd13bd8e05eadc8320" refkind="member"><highlight class="normal">Frame::Frame(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref><sp/>&amp;<sp/>R)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>M=R;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>p=Vector::Zero();</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="classKDL_1_1Frame_1afb8da9aa2cc86a2082cbd469067bbcca" refkind="member"><highlight class="normal">Frame::Frame(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/>V)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>M<sp/>=<sp/>Rotation::Identity();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>V;</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="classKDL_1_1Frame_1a7583694e3ea56e0edecbd9d02aa4a3e0" refkind="member"><highlight class="normal">Frame::Frame(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref><sp/>&amp;<sp/>R,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/>V)</highlight></codeline>
<codeline lineno="401"><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>M<sp/>=<sp/>R;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>V;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="frames_8inl_1adb5d8e64590ce61d0ea8fb91a24f674c" refkind="member"><highlight class="normal"><sp/>Frame<sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complexity<sp/>:<sp/>36M+36A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Frame(lhs.M*rhs.M,lhs.M*rhs.p+lhs.p);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="classKDL_1_1Frame_1aa5bf6ef398b04a482ac5fdbbd35c7c06" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="frames_8inl_1abe5f3e3747654906e6e2b506947675cd" kindref="member">Frame::operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="413"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M*arg+p;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="classKDL_1_1Frame_1adcf60bbe39270e84a8fe664e3e17f73a" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>Frame::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="418"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M.Inverse(arg-p);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="classKDL_1_1Frame_1ac508fa4e7c59527f8f377a3c6c225d12" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref><sp/>Frame::Inverse()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="423"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref>(M.Inverse(),-M.Inverse(p));</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="classKDL_1_1Frame_1a68eeae7af154df2a649ed09b6043f663" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref>&amp;<sp/>Frame::operator<sp/>=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref><sp/>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>M<sp/>=<sp/>arg.<ref refid="classKDL_1_1Frame_1a367668b3344ccfd50410ccc1ed30fa6f" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>arg.<ref refid="classKDL_1_1Frame_1abc00c3817f7baa985b67077479617866" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="classKDL_1_1Frame_1a290d44405783f7854611ac082a63bdd4" refkind="member"><highlight class="normal">Frame::Frame(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref><sp/>&amp;<sp/>arg)<sp/>:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>p(arg.p),M(arg.M)</highlight></codeline>
<codeline lineno="437"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="classKDL_1_1Vector_1a18b996436214594500892b6cfd5e1aad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector_1a18b996436214594500892b6cfd5e1aad" kindref="member">Vector::ReverseSign</ref>()</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0]<sp/>=<sp/>-<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0];</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1]<sp/>=<sp/>-<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1];</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2]<sp/>=<sp/>-<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2];</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="frames_8inl_1a5eff5e8fcf678ef559ff40f236865596" refkind="member"><highlight class="normal">Vector<sp/><ref refid="namespaceKDL_1a148a5015338fa55d58b91dc7b9bb9983" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector<sp/>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector<sp/>tmp;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[0]=-arg.data[0];</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[1]=-arg.data[1];</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.data[2]=-arg.data[2];</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458" refid="classKDL_1_1Vector_1aaf4b99e0da51be7806ac5aaeb8c353aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector_1aaf4b99e0da51be7806ac5aaeb8c353aa" kindref="member">Vector::Set2DXY</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>3D<sp/>vector<sp/>where<sp/>the<sp/>2D<sp/>vector<sp/>v<sp/>is<sp/>put<sp/>in<sp/>the<sp/>XY<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0]=v(0);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1]=v(1);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2]=0;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466" refid="classKDL_1_1Vector_1aee5feebe23a0f950dcb24e3c9e158879" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector_1aee5feebe23a0f950dcb24e3c9e158879" kindref="member">Vector::Set2DYZ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>3D<sp/>vector<sp/>where<sp/>the<sp/>2D<sp/>vector<sp/>v<sp/>is<sp/>put<sp/>in<sp/>the<sp/>YZ<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1]=v(0);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2]=v(1);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0]=0;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="classKDL_1_1Vector_1a6d695cbbecbb108ba01d34ac26429960" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector_1a6d695cbbecbb108ba01d34ac26429960" kindref="member">Vector::Set2DZX</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>3D<sp/>vector<sp/>where<sp/>the<sp/>2D<sp/>vector<sp/>v<sp/>is<sp/>put<sp/>in<sp/>the<sp/>ZX<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2]=v(0);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0]=v(1);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1]=0;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="classKDL_1_1Rotation_1af1b1952b99b4cb13e36f465f57a55c46" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classKDL_1_1Rotation_1af1b1952b99b4cb13e36f465f57a55c46" kindref="member">Rotation::operator()</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utility_8h_1a40520a99aa348467ec29eb5b562588dc" kindref="member">FRAMES_CHECKI</ref>((0&lt;=i)&amp;&amp;(i&lt;=2)&amp;&amp;(0&lt;=j)&amp;&amp;(j&lt;=2));</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[i*3+j];</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493" refid="classKDL_1_1Rotation_1a546f32a66fbd57273f226569ccebc8f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation_1af1b1952b99b4cb13e36f465f57a55c46" kindref="member">Rotation::operator()</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utility_8h_1a40520a99aa348467ec29eb5b562588dc" kindref="member">FRAMES_CHECKI</ref>((0&lt;=i)&amp;&amp;(i&lt;=2)&amp;&amp;(0&lt;=j)&amp;&amp;(j&lt;=2));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[i*3+j];</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="classKDL_1_1Rotation_1ad059305eb21561628f4c1a172b30e24c" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Rotation_1a2e2696a35bc3bdce4db0d9ed958966d9" kindref="member">Rotation::Rotation</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Xx,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Yx,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Zx,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Xy,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Yy,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Zy,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Xz,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Yz,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Zz)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[0]<sp/>=<sp/>Xx;<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[1]=Yx;<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[2]=Zx;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[3]<sp/>=<sp/>Xy;<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[4]=Yy;<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[5]=Zy;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[6]<sp/>=<sp/>Xz;<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[7]=Yz;<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[8]=Zz;</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="classKDL_1_1Rotation_1acabb1e35f448ce9377c2e3e164f287db" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Rotation_1a2e2696a35bc3bdce4db0d9ed958966d9" kindref="member">Rotation::Rotation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>x,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>y,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>z)<sp/></highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[0]<sp/>=<sp/>x.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0];<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[3]<sp/>=<sp/>x.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1];<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[6]<sp/>=<sp/>x.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2];</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[1]<sp/>=<sp/>y.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0];<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[4]<sp/>=<sp/>y.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1];<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[7]<sp/>=<sp/>y.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[2]<sp/>=<sp/>z.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0];<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[5]<sp/>=<sp/>z.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1];<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[8]<sp/>=<sp/>z.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2];</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="classKDL_1_1Rotation_1a4862d8604c2766dd7393dcf26a18280e" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Rotation_1a2e2696a35bc3bdce4db0d9ed958966d9" kindref="member">Rotation::Rotation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref>&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=9;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count--)<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[count]<sp/>=<sp/>arg.<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[count];</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520" refid="classKDL_1_1Rotation_1a111886c82b66d6425d24fb7dbb276e92" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref>&amp;<sp/><ref refid="classKDL_1_1Rotation_1a111886c82b66d6425d24fb7dbb276e92" kindref="member">Rotation::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref>&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count=9;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count--)<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[count]<sp/>=<sp/>arg.<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[count];</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526" refid="classKDL_1_1Rotation_1a130a3edf5e37a9d2b9817093a7c02deb" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="classKDL_1_1Rotation_1a130a3edf5e37a9d2b9817093a7c02deb" kindref="member">Rotation::operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complexity<sp/>:<sp/>9M+6A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>(</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[0]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0]<sp/>+<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[1]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1]<sp/>+<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[2]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2],</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[3]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0]<sp/>+<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[4]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1]<sp/>+<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[5]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2],</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[6]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0]<sp/>+<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[7]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1]<sp/>+<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[8]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2]<sp/></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535" refid="classKDL_1_1Rotation_1ac9062a29beb152edd602121a7fac6558" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/><ref refid="classKDL_1_1Rotation_1a130a3edf5e37a9d2b9817093a7c02deb" kindref="member">Rotation::operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>arg)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transformation<sp/>of<sp/>the<sp/>base<sp/>to<sp/>which<sp/>the<sp/>twist<sp/>is<sp/>expressed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>at<sp/>Frame*Twist<sp/>for<sp/>a<sp/>transformation<sp/>that<sp/>also<sp/>transforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>velocity<sp/>reference<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Complexity<sp/>:<sp/>18M+12A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)*arg.vel,(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)*arg.rot);</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="classKDL_1_1Rotation_1adf64f458e61f28f18fb37e5a963ff8aa" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref><sp/><ref refid="classKDL_1_1Rotation_1a130a3edf5e37a9d2b9817093a7c02deb" kindref="member">Rotation::operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>&amp;<sp/>arg)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transformation<sp/>of<sp/>the<sp/>base<sp/>to<sp/>which<sp/>the<sp/>wrench<sp/>is<sp/>expressed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>at<sp/>Frame*Twist<sp/>for<sp/>a<sp/>transformation<sp/>that<sp/>also<sp/>transforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>force<sp/>reference<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)*arg.force,(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)*arg.torque);</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="classKDL_1_1Rotation_1a5a5d40d8e6cf179cac35bc378c83017c" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref><sp/><ref refid="classKDL_1_1Rotation_1a5a5d40d8e6cf179cac35bc378c83017c" kindref="member">Rotation::Identity</ref>()<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation_1a2e2696a35bc3bdce4db0d9ed958966d9" kindref="member">Rotation</ref>(1,0,0,0,1,0,0,0,1);</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*this<sp/>=<sp/>*this<sp/>*<sp/>ROT(X,angle)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="classKDL_1_1Rotation_1aa1a0ca08f29877875e3c78127266354e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation_1aa1a0ca08f29877875e3c78127266354e" kindref="member">Rotation::DoRotX</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle)</highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cs<sp/>=<sp/><ref refid="namespaceKDL_1a28fb39c2d77d3050aebc60d3fcb67797" kindref="member">cos</ref>(angle);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sn<sp/>=<sp/><ref refid="namespaceKDL_1ad75e917c4141823627a64b5cfc912eda" kindref="member">sin</ref>(angle);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,x2,x3;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/><sp/>=<sp/>cs*<sp/>(*this)(0,1)<sp/>+<sp/>sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(0,2);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/><sp/>=<sp/>cs*<sp/>(*this)(1,1)<sp/>+<sp/>sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(1,2);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>x3<sp/><sp/>=<sp/>cs*<sp/>(*this)(2,1)<sp/>+<sp/>sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(2,2);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(0,2)<sp/>=<sp/>-sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(0,1)<sp/>+<sp/>cs*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(0,2);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(1,2)<sp/>=<sp/>-sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(1,1)<sp/>+<sp/>cs*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(1,2);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(2,2)<sp/>=<sp/>-sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(2,1)<sp/>+<sp/>cs*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(2,2);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(0,1)<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(1,1)<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(2,1)<sp/>=<sp/>x3;</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572" refid="classKDL_1_1Rotation_1af6b09f3f066b67e03d17cd2cb3c74b73" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation_1af6b09f3f066b67e03d17cd2cb3c74b73" kindref="member">Rotation::DoRotY</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle)</highlight></codeline>
<codeline lineno="573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cs<sp/>=<sp/><ref refid="namespaceKDL_1a28fb39c2d77d3050aebc60d3fcb67797" kindref="member">cos</ref>(angle);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sn<sp/>=<sp/><ref refid="namespaceKDL_1ad75e917c4141823627a64b5cfc912eda" kindref="member">sin</ref>(angle);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,x2,x3;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/><sp/>=<sp/>cs*<sp/>(*this)(0,0)<sp/>-<sp/>sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(0,2);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/><sp/>=<sp/>cs*<sp/>(*this)(1,0)<sp/>-<sp/>sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(1,2);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>x3<sp/><sp/>=<sp/>cs*<sp/>(*this)(2,0)<sp/>-<sp/>sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(2,2);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(0,2)<sp/>=<sp/>sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(0,0)<sp/>+<sp/>cs*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(0,2);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(1,2)<sp/>=<sp/>sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(1,0)<sp/>+<sp/>cs*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(1,2);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(2,2)<sp/>=<sp/>sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(2,0)<sp/>+<sp/>cs*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(2,2);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(0,0)<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(1,0)<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(2,0)<sp/>=<sp/>x3;</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588" refid="classKDL_1_1Rotation_1a08fa60d7a860a6f7077ed5adf428ded4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation_1a08fa60d7a860a6f7077ed5adf428ded4" kindref="member">Rotation::DoRotZ</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle)</highlight></codeline>
<codeline lineno="589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cs<sp/>=<sp/><ref refid="namespaceKDL_1a28fb39c2d77d3050aebc60d3fcb67797" kindref="member">cos</ref>(angle);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sn<sp/>=<sp/><ref refid="namespaceKDL_1ad75e917c4141823627a64b5cfc912eda" kindref="member">sin</ref>(angle);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x1,x2,x3;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/><sp/>=<sp/>cs*<sp/>(*this)(0,0)<sp/>+<sp/>sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(0,1);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/><sp/>=<sp/>cs*<sp/>(*this)(1,0)<sp/>+<sp/>sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(1,1);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>x3<sp/><sp/>=<sp/>cs*<sp/>(*this)(2,0)<sp/>+<sp/>sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(2,1);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(0,1)<sp/>=<sp/>-sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(0,0)<sp/>+<sp/>cs*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(0,1);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(1,1)<sp/>=<sp/>-sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(1,0)<sp/>+<sp/>cs*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(1,1);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(2,1)<sp/>=<sp/>-sn*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(2,0)<sp/>+<sp/>cs*<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(2,1);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(0,0)<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(1,0)<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>(*this)(2,0)<sp/>=<sp/>x3;</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605" refid="classKDL_1_1Rotation_1a60d5c0a5b439a0c2413e94aa45db8cc1" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref><sp/><ref refid="classKDL_1_1Rotation_1a60d5c0a5b439a0c2413e94aa45db8cc1" kindref="member">Rotation::RotX</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cs=<ref refid="namespaceKDL_1a28fb39c2d77d3050aebc60d3fcb67797" kindref="member">cos</ref>(angle);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sn=<ref refid="namespaceKDL_1ad75e917c4141823627a64b5cfc912eda" kindref="member">sin</ref>(angle);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation_1a2e2696a35bc3bdce4db0d9ed958966d9" kindref="member">Rotation</ref>(1,0,0,0,cs,-sn,0,sn,cs);</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610" refid="classKDL_1_1Rotation_1ac37c940f7c95f8e2ee84c5f66e7b648e" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref><sp/><ref refid="classKDL_1_1Rotation_1ac37c940f7c95f8e2ee84c5f66e7b648e" kindref="member">Rotation::RotY</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cs=<ref refid="namespaceKDL_1a28fb39c2d77d3050aebc60d3fcb67797" kindref="member">cos</ref>(angle);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sn=<ref refid="namespaceKDL_1ad75e917c4141823627a64b5cfc912eda" kindref="member">sin</ref>(angle);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation_1a2e2696a35bc3bdce4db0d9ed958966d9" kindref="member">Rotation</ref>(cs,0,sn,0,1,0,-sn,0,cs);</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615" refid="classKDL_1_1Rotation_1aeaa7d2485bb79c3a5be0046eed71c9ce" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref><sp/><ref refid="classKDL_1_1Rotation_1aeaa7d2485bb79c3a5be0046eed71c9ce" kindref="member">Rotation::RotZ</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cs=<ref refid="namespaceKDL_1a28fb39c2d77d3050aebc60d3fcb67797" kindref="member">cos</ref>(angle);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sn=<ref refid="namespaceKDL_1ad75e917c4141823627a64b5cfc912eda" kindref="member">sin</ref>(angle);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation_1a2e2696a35bc3bdce4db0d9ed958966d9" kindref="member">Rotation</ref>(cs,-sn,0,sn,cs,0,0,0,1);</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624" refid="classKDL_1_1Frame_1a67ad926d5d8cc58d6feace213708de5f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame_1a67ad926d5d8cc58d6feace213708de5f" kindref="member">Frame::Integrate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>t_this,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samplefrequency)</highlight></codeline>
<codeline lineno="625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>t_this.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>.<ref refid="classKDL_1_1Vector_1ade3f16bb567c5f4ab314346605c66056" kindref="member">Norm</ref>()/samplefrequency;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n&lt;<ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref>)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame_1abc00c3817f7baa985b67077479617866" kindref="member">p</ref><sp/>+=<sp/><ref refid="classKDL_1_1Frame_1a367668b3344ccfd50410ccc1ed30fa6f" kindref="member">M</ref>*(t_this.<ref refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" kindref="member">vel</ref>/samplefrequency);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)<sp/>=<sp/>(*this)<sp/>*<sp/></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame_1af2f3fe6d30be4717eb0a4a74bc4bb444" kindref="member">Frame</ref><sp/>(<sp/><ref refid="classKDL_1_1Rotation_1ad05c91ff1d5bab2c51b92e349ff9bebb" kindref="member">Rotation::Rot</ref>(<sp/>t_this.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>,<sp/>n<sp/>),</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t_this.<ref refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" kindref="member">vel</ref>/samplefrequency</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637" refid="classKDL_1_1Rotation_1a09a2ee554e814222ef86a8d1ce3267b1" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref><sp/><ref refid="classKDL_1_1Rotation_1a09a2ee554e814222ef86a8d1ce3267b1" kindref="member">Rotation::Inverse</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="638"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref><sp/>tmp(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1Rotation_1aca0b79dafe708d4623d16c15c239854f" kindref="member">SetInverse</ref>();</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644" refid="classKDL_1_1Rotation_1a4e7028b1ed3ded74761155a00bbd7222" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="classKDL_1_1Rotation_1a09a2ee554e814222ef86a8d1ce3267b1" kindref="member">Rotation::Inverse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>(</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[0]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0]<sp/>+<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[3]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1]<sp/>+<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[6]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2],</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[1]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0]<sp/>+<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[4]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1]<sp/>+<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[7]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2],</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[2]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[0]<sp/>+<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[5]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[1]<sp/>+<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[8]*v.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>[2]<sp/></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653" refid="classKDL_1_1Rotation_1aca0b79dafe708d4623d16c15c239854f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation_1aca0b79dafe708d4623d16c15c239854f" kindref="member">Rotation::SetInverse</ref>()</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[1];<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[1]=<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[3];<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[3]=tmp;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[2];<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[2]=<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[6];<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[6]=tmp;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/><ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[5];<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[5]=<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[7];<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>[7]=tmp;</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667" refid="classKDL_1_1Frame_1ade9b0946226f7cea4aa0e30650119b79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame_1ade9b0946226f7cea4aa0e30650119b79" kindref="member">Frame::operator()</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utility_8h_1a40520a99aa348467ec29eb5b562588dc" kindref="member">FRAMES_CHECKI</ref>((0&lt;=i)&amp;&amp;(i&lt;=3)&amp;&amp;(0&lt;=j)&amp;&amp;(j&lt;=3));</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==3)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j==3)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j==3)<sp/></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame_1abc00c3817f7baa985b67077479617866" kindref="member">p</ref>(i);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame_1a367668b3344ccfd50410ccc1ed30fa6f" kindref="member">M</ref>(i,j);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683" refid="classKDL_1_1Frame_1afdea2b0e23f712757d2e7fbad95e3440" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame_1ade9b0946226f7cea4aa0e30650119b79" kindref="member">Frame::operator()</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utility_8h_1a40520a99aa348467ec29eb5b562588dc" kindref="member">FRAMES_CHECKI</ref>((0&lt;=i)&amp;&amp;(i&lt;=3)&amp;&amp;(0&lt;=j)&amp;&amp;(j&lt;=3));</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==3)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j==3)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j==3)<sp/></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame_1abc00c3817f7baa985b67077479617866" kindref="member">p</ref>(i);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame_1a367668b3344ccfd50410ccc1ed30fa6f" kindref="member">M</ref>(i,j);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700" refid="classKDL_1_1Frame_1a21cc8438f71b522154d2ef4cd6933d69" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref><sp/><ref refid="classKDL_1_1Frame_1a21cc8438f71b522154d2ef4cd6933d69" kindref="member">Frame::Identity</ref>()<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame_1af2f3fe6d30be4717eb0a4a74bc4bb444" kindref="member">Frame</ref>(<ref refid="classKDL_1_1Rotation_1a5a5d40d8e6cf179cac35bc378c83017c" kindref="member">Rotation::Identity</ref>(),<ref refid="classKDL_1_1Vector_1aac50a5f60447f9cb7b4a510c4695ab89" kindref="member">Vector::Zero</ref>());</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="classKDL_1_1Vector_1a005f4c09544fbe00f8fd59e9793d07e0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector_1a005f4c09544fbe00f8fd59e9793d07e0" kindref="member">Vector::Set2DPlane</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref>&amp;<sp/>F_someframe_XY,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref>&amp;<sp/>v_XY)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>3D<sp/>vector<sp/>where<sp/>the<sp/>2D<sp/>vector<sp/>v<sp/>is<sp/>put<sp/>in<sp/>the<sp/>XY<sp/>plane<sp/>of<sp/>the<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>F_someframe_XY.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal">{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>tmp_XY;</highlight></codeline>
<codeline lineno="712"><highlight class="normal">tmp_XY.<ref refid="classKDL_1_1Vector_1aaf4b99e0da51be7806ac5aaeb8c353aa" kindref="member">Set2DXY</ref>(v_XY);</highlight></codeline>
<codeline lineno="713"><highlight class="normal">tmp_XY<sp/>=<sp/>F_someframe_XY*(tmp_XY);</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">//============<sp/>2<sp/>dimensional<sp/>version<sp/>of<sp/>the<sp/>frames<sp/>objects<sp/>=============</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725" refid="classKDL_1_1Vector2_1a4d5aec0791020652d9ad88d7af9e4d49" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Vector2_1a61947284267a38dcf7bec4ef2e3c27e4" kindref="member">Vector2::Vector2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref><sp/>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]<sp/>=<sp/>arg.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]<sp/>=<sp/>arg.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1];</highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731" refid="classKDL_1_1Vector2_1a3a10b552eeb77bbddd7ee91d88347be0" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Vector2_1a61947284267a38dcf7bec4ef2e3c27e4" kindref="member">Vector2::Vector2</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="732"><highlight class="normal">{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]=<ref refid="classKDL_1_1Vector2_1a2a764bf9b8a955f73b2ab4fe9afb73ea" kindref="member">x</ref>;<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]=<ref refid="classKDL_1_1Vector2_1ae294c39e8513564475e25364fa5e73a2" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737" refid="classKDL_1_1Vector2_1a2c95e2dcd894593c8ada80d82002cd63" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref>&amp;<sp/><ref refid="classKDL_1_1Vector2_1a2c95e2dcd894593c8ada80d82002cd63" kindref="member">Vector2::operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref><sp/>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="738"><highlight class="normal">{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]<sp/>=<sp/>arg.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0];</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]<sp/>=<sp/>arg.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1];</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745" refid="frames_8inl_1ade97f4b94b51acf2c903119245cc9460" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector2<sp/><ref refid="namespaceKDL_1a3bc91024ee0a8b23fa94b74fa7c952f0" kindref="member">operator +</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2<sp/>&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector2(lhs.data[0]+rhs.data[0],lhs.data[1]+rhs.data[1]);</highlight></codeline>
<codeline lineno="748"><highlight class="normal">}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750" refid="frames_8inl_1a57612f12d1b3243f58c380934cd8e8ba" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector2<sp/><ref refid="namespaceKDL_1a148a5015338fa55d58b91dc7b9bb9983" kindref="member">operator -</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2<sp/>&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="751"><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector2(lhs.data[0]-rhs.data[0],lhs.data[1]-rhs.data[1]);</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755" refid="frames_8inl_1a009647d43a87c207cf3db14ae2c0d594" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector2<sp/><ref refid="namespaceKDL_1aa7100a66f621fadcd96168a97d27784d" kindref="member">operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>lhs,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)<sp/></highlight></codeline>
<codeline lineno="756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector2(lhs.data[0]*rhs,lhs.data[1]*rhs);</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760" refid="frames_8inl_1a6d344b6cf3f746f3b955630bcb486ce8" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector2<sp/><ref refid="namespaceKDL_1aa7100a66f621fadcd96168a97d27784d" kindref="member">operator *</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>rhs)<sp/></highlight></codeline>
<codeline lineno="761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector2(lhs*rhs.data[0],lhs*rhs.data[1]);</highlight></codeline>
<codeline lineno="763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765" refid="frames_8inl_1a2c44743ba880da24e916d63364996e7c" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector2<sp/><ref refid="namespaceKDL_1acc761e20a4b8939e7b1fc19509fed229" kindref="member">operator /</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>lhs,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)<sp/></highlight></codeline>
<codeline lineno="766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector2(lhs.data[0]/rhs,lhs.data[1]/rhs);</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770" refid="classKDL_1_1Vector2_1a8826f328a3f6a7384422015bd2accbe6" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref>&amp;<sp/><ref refid="classKDL_1_1Vector2_1a8826f328a3f6a7384422015bd2accbe6" kindref="member">Vector2::operator +=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref><sp/>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]+=arg.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0];</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]+=arg.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1];</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777" refid="classKDL_1_1Vector2_1abd79d1ba9dc9216ca25dd6084252672c" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref>&amp;<sp/><ref refid="classKDL_1_1Vector2_1abd79d1ba9dc9216ca25dd6084252672c" kindref="member">Vector2::operator -=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref><sp/>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="778"><highlight class="normal">{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]-=arg.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0];</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]-=arg.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1];</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784" refid="classKDL_1_1Vector2_1a0674450ce292d200c8f5f42a02d8640b" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref><sp/><ref refid="classKDL_1_1Vector2_1a0674450ce292d200c8f5f42a02d8640b" kindref="member">Vector2::Zero</ref>()<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1a61947284267a38dcf7bec4ef2e3c27e4" kindref="member">Vector2</ref>(0,0);</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="classKDL_1_1Vector2_1adc0127710b5feb3d9125408230805c79" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1adc0127710b5feb3d9125408230805c79" kindref="member">Vector2::operator()</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utility_8h_1a40520a99aa348467ec29eb5b562588dc" kindref="member">FRAMES_CHECKI</ref>((0&lt;=index)&amp;&amp;(index&lt;=1));</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[index];</highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793" refid="classKDL_1_1Vector2_1a5b6a7898dbaeda3e1cb01e46a984528c" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classKDL_1_1Vector2_1adc0127710b5feb3d9125408230805c79" kindref="member">Vector2::operator () </ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utility_8h_1a40520a99aa348467ec29eb5b562588dc" kindref="member">FRAMES_CHECKI</ref>((0&lt;=index)&amp;&amp;(index&lt;=1));</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[index];</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799" refid="classKDL_1_1Vector2_1a2a764bf9b8a955f73b2ab4fe9afb73ea" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1a2a764bf9b8a955f73b2ab4fe9afb73ea" kindref="member">Vector2::x</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0];<sp/>}</highlight></codeline>
<codeline lineno="800" refid="classKDL_1_1Vector2_1ae294c39e8513564475e25364fa5e73a2" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1ae294c39e8513564475e25364fa5e73a2" kindref="member">Vector2::y</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1];<sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1a2a764bf9b8a955f73b2ab4fe9afb73ea" kindref="member">Vector2::x</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_x<sp/>)<sp/>{<sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]<sp/>=<sp/>_x;<sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1ae294c39e8513564475e25364fa5e73a2" kindref="member">Vector2::y</ref>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_y<sp/>)<sp/>{<sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]<sp/>=<sp/>_y;<sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806" refid="classKDL_1_1Vector2_1a17a8dca236c36d4439e4ac23e44d1267" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1a17a8dca236c36d4439e4ac23e44d1267" kindref="member">Vector2::ReverseSign</ref>()</highlight></codeline>
<codeline lineno="807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]<sp/>=<sp/>-<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0];</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]<sp/>=<sp/>-<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1];</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813" refid="frames_8inl_1a36673b1ba385b6b71fdb241be1a4a908" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector2<sp/><ref refid="namespaceKDL_1a148a5015338fa55d58b91dc7b9bb9983" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2<sp/>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="814"><highlight class="normal">{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector2(-arg.data[0],-arg.data[1]);</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819" refid="classKDL_1_1Vector2_1a4afdc0ed3f56cb909bfadb8aedfce821" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1a4afdc0ed3f56cb909bfadb8aedfce821" kindref="member">Vector2::Set3DXY</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>projects<sp/>v<sp/>in<sp/>its<sp/>XY<sp/>plane,<sp/>and<sp/>sets<sp/>*this<sp/>to<sp/>these<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal">{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]=v(0);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]=v(1);</highlight></codeline>
<codeline lineno="824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="825" refid="classKDL_1_1Vector2_1a8e6163f1b083033a7811e6f91ac48231" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1a8e6163f1b083033a7811e6f91ac48231" kindref="member">Vector2::Set3DYZ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>projects<sp/>v<sp/>in<sp/>its<sp/>XY<sp/>plane,<sp/>and<sp/>sets<sp/>*this<sp/>to<sp/>these<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal">{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]=v(1);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]=v(2);</highlight></codeline>
<codeline lineno="830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="831" refid="classKDL_1_1Vector2_1a2ab51d98ce92821f3a14695d19eb506e" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1a2ab51d98ce92821f3a14695d19eb506e" kindref="member">Vector2::Set3DZX</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>projects<sp/>v<sp/>in<sp/>its<sp/>XY<sp/>plane,<sp/>and<sp/>sets<sp/>*this<sp/>to<sp/>these<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal">{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]=v(2);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]=v(0);</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838" refid="classKDL_1_1Vector2_1ae78a8356c4eeaa405467305a663f8c58" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2_1ae78a8356c4eeaa405467305a663f8c58" kindref="member">Vector2::Set3DPlane</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref>&amp;<sp/>F_someframe_XY,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>v_someframe)<sp/></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>projects<sp/>v<sp/>in<sp/>the<sp/>XY<sp/>plane<sp/>of<sp/>F_someframe_XY,<sp/>and<sp/>sets<sp/>*this<sp/>to<sp/>these<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expressed<sp/>wrt<sp/>someframe.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal">{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>tmp<sp/>=<sp/>F_someframe_XY.<ref refid="classKDL_1_1Frame_1ac508fa4e7c59527f8f377a3c6c225d12" kindref="member">Inverse</ref>(v_someframe);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]=tmp(0);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]=tmp(1);</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847" refid="classKDL_1_1Rotation2_1a0db98f9f643bfee889d1c70ce72b06bd" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Rotation2_1a890b05669eacd0f9779d66e636a74d61" kindref="member">Rotation2::Rotation2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref>&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref>=arg.<ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref>;<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>=arg.<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851" refid="classKDL_1_1Rotation2_1afde0136496eee42795baf646a373009a" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref>&amp;<sp/><ref refid="classKDL_1_1Rotation2_1afde0136496eee42795baf646a373009a" kindref="member">Rotation2::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref>&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref>=arg.<ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref>;<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>=arg.<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856" refid="classKDL_1_1Rotation2_1a395f1086334ca19bb771e0e605895a9d" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref><sp/><ref refid="classKDL_1_1Rotation2_1a395f1086334ca19bb771e0e605895a9d" kindref="member">Rotation2::operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref>(v.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]*<ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref>-v.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]*<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>,v.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]*<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>+v.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]*<ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860" refid="classKDL_1_1Rotation2_1a3a5339ae85aadda3a2c2f6dd922f1fe8" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2_1a3a5339ae85aadda3a2c2f6dd922f1fe8" kindref="member">Rotation2::operator()</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utility_8h_1a40520a99aa348467ec29eb5b562588dc" kindref="member">FRAMES_CHECKI</ref>((0&lt;=i)&amp;&amp;(i&lt;=1)&amp;&amp;(0&lt;=j)&amp;&amp;(j&lt;=1));</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==j)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==0)<sp/></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870" refid="frames_8inl_1a716aecb37fa17be1323ac9d471d740e4" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Rotation2<sp/><ref refid="namespaceKDL_1aa7100a66f621fadcd96168a97d27784d" kindref="member">operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation2&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation2&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Rotation2(lhs.c*rhs.c-lhs.s*rhs.s,lhs.s*rhs.c+lhs.c*rhs.s);</highlight></codeline>
<codeline lineno="872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874" refid="classKDL_1_1Rotation2_1a75aa830c61b9a1174df5c4db7d662c61" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2_1a75aa830c61b9a1174df5c4db7d662c61" kindref="member">Rotation2::SetInverse</ref>()<sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>=-<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878" refid="classKDL_1_1Rotation2_1af69ef92755dab0e10609a069645977cf" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref><sp/><ref refid="classKDL_1_1Rotation2_1af69ef92755dab0e10609a069645977cf" kindref="member">Rotation2::Inverse</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2_1a890b05669eacd0f9779d66e636a74d61" kindref="member">Rotation2</ref>(<ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref>,-<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>);</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882" refid="classKDL_1_1Rotation2_1a663e69fa1597aa2e14459a2881c16ac3" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref><sp/><ref refid="classKDL_1_1Rotation2_1af69ef92755dab0e10609a069645977cf" kindref="member">Rotation2::Inverse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref>(v.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]*<ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref>+v.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]*<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>,-v.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[0]*<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>+v.<ref refid="classKDL_1_1Vector2_1afbc4d03121bf64ef1ba33c4dbe9a4b2e" kindref="member">data</ref>[1]*<ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886" refid="classKDL_1_1Rotation2_1a9574a771c52178e733c431c9b58ea835" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref><sp/><ref refid="classKDL_1_1Rotation2_1a9574a771c52178e733c431c9b58ea835" kindref="member">Rotation2::Identity</ref>()<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2_1a890b05669eacd0f9779d66e636a74d61" kindref="member">Rotation2</ref>(1,0);</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="890" refid="classKDL_1_1Rotation2_1ae780b003b6e5a040fb98cba32aecc1ae" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2_1ae780b003b6e5a040fb98cba32aecc1ae" kindref="member">Rotation2::SetIdentity</ref>()</highlight></codeline>
<codeline lineno="891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896" refid="classKDL_1_1Rotation2_1afafdf07b32fd44aaab3ad3854502f4de" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2_1afafdf07b32fd44aaab3ad3854502f4de" kindref="member">Rotation2::SetRot</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref>=<ref refid="namespaceKDL_1a28fb39c2d77d3050aebc60d3fcb67797" kindref="member">cos</ref>(angle);<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>=<ref refid="namespaceKDL_1ad75e917c4141823627a64b5cfc912eda" kindref="member">sin</ref>(angle);</highlight></codeline>
<codeline lineno="898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900" refid="classKDL_1_1Rotation2_1a6a0561775350b56e5f57a87b9274cc65" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref><sp/><ref refid="classKDL_1_1Rotation2_1a6a0561775350b56e5f57a87b9274cc65" kindref="member">Rotation2::Rot</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2_1a890b05669eacd0f9779d66e636a74d61" kindref="member">Rotation2</ref>(<ref refid="namespaceKDL_1a28fb39c2d77d3050aebc60d3fcb67797" kindref="member">cos</ref>(angle),<ref refid="namespaceKDL_1ad75e917c4141823627a64b5cfc912eda" kindref="member">sin</ref>(angle));</highlight></codeline>
<codeline lineno="902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904" refid="classKDL_1_1Rotation2_1a29eefa76dec3acabc4ed3d99612e1b7f" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2_1a29eefa76dec3acabc4ed3d99612e1b7f" kindref="member">Rotation2::GetRot</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1aeaea5afce42aa1a21d7fbce3d75969d1" kindref="member">atan2</ref>(<ref refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" kindref="member">s</ref>,<ref refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Frame2_1ab9fac731a64cd211f937f687669a9e16" kindref="member">Frame2::Frame2</ref>()<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912" refid="classKDL_1_1Frame2_1aabf1e7b7243dcdd66c1a38a55ff39d9d" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Frame2_1ab9fac731a64cd211f937f687669a9e16" kindref="member">Frame2::Frame2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref><sp/>&amp;<sp/>R)</highlight></codeline>
<codeline lineno="913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ab77981911496a659b7fa878886dbe40b" kindref="member">M</ref>=R;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref>=<ref refid="classKDL_1_1Vector2_1a0674450ce292d200c8f5f42a02d8640b" kindref="member">Vector2::Zero</ref>();</highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918" refid="classKDL_1_1Frame2_1a715a2d3497e2bedc6c4117613bce297e" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Frame2_1ab9fac731a64cd211f937f687669a9e16" kindref="member">Frame2::Frame2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref><sp/>&amp;<sp/>V)</highlight></codeline>
<codeline lineno="919"><highlight class="normal">{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ab77981911496a659b7fa878886dbe40b" kindref="member">M</ref><sp/>=<sp/><ref refid="classKDL_1_1Rotation2_1a9574a771c52178e733c431c9b58ea835" kindref="member">Rotation2::Identity</ref>();</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref><sp/>=<sp/>V;</highlight></codeline>
<codeline lineno="922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924" refid="classKDL_1_1Frame2_1a6c00703a027780ab480b73292ed2d594" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Frame2_1ab9fac731a64cd211f937f687669a9e16" kindref="member">Frame2::Frame2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref><sp/>&amp;<sp/>R,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref><sp/>&amp;<sp/>V)</highlight></codeline>
<codeline lineno="925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ab77981911496a659b7fa878886dbe40b" kindref="member">M</ref><sp/>=<sp/>R;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref><sp/>=<sp/>V;</highlight></codeline>
<codeline lineno="928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930" refid="frames_8inl_1a505ef08a05a356a972184776b2de4279" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Frame2<sp/><ref refid="namespaceKDL_1aa7100a66f621fadcd96168a97d27784d" kindref="member">operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame2&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame2&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Frame2(lhs.M*rhs.M,lhs.M*rhs.p+lhs.p);</highlight></codeline>
<codeline lineno="933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935" refid="classKDL_1_1Frame2_1a4bd2f662b762feedc4869c3fc7167e7b" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref><sp/><ref refid="classKDL_1_1Frame2_1a4bd2f662b762feedc4869c3fc7167e7b" kindref="member">Frame2::operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref><sp/>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="936"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame2_1ab77981911496a659b7fa878886dbe40b" kindref="member">M</ref>*arg+<ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940" refid="classKDL_1_1Frame2_1a4ed60a07cda019ce7fdb90c3daffedd8" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref><sp/><ref refid="classKDL_1_1Frame2_1af9db6979bec9cc9b2ae889e65e95cd8a" kindref="member">Frame2::Inverse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="941"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame2_1ab77981911496a659b7fa878886dbe40b" kindref="member">M</ref>.<ref refid="classKDL_1_1Rotation2_1af69ef92755dab0e10609a069645977cf" kindref="member">Inverse</ref>(arg-<ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945" refid="classKDL_1_1Frame2_1a37809903d37cf549d110ce10e71b3ee9" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame2_1a37809903d37cf549d110ce10e71b3ee9" kindref="member">Frame2::SetIdentity</ref>()</highlight></codeline>
<codeline lineno="946"><highlight class="normal">{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ab77981911496a659b7fa878886dbe40b" kindref="member">M</ref>.<ref refid="classKDL_1_1Rotation2_1ae780b003b6e5a040fb98cba32aecc1ae" kindref="member">SetIdentity</ref>();</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref><sp/>=<sp/><ref refid="classKDL_1_1Vector2_1a0674450ce292d200c8f5f42a02d8640b" kindref="member">Vector2::Zero</ref>();</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951" refid="classKDL_1_1Frame2_1ac59dfa60bfd38d03a49343ce068b6ddb" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame2_1ac59dfa60bfd38d03a49343ce068b6ddb" kindref="member">Frame2::SetInverse</ref>()</highlight></codeline>
<codeline lineno="952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ab77981911496a659b7fa878886dbe40b" kindref="member">M</ref>.<ref refid="classKDL_1_1Rotation2_1a75aa830c61b9a1174df5c4db7d662c61" kindref="member">SetInverse</ref>();</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref><sp/>=<sp/><ref refid="classKDL_1_1Frame2_1ab77981911496a659b7fa878886dbe40b" kindref="member">M</ref>*<ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref>.<ref refid="classKDL_1_1Vector2_1a17a8dca236c36d4439e4ac23e44d1267" kindref="member">ReverseSign</ref>();</highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959" refid="classKDL_1_1Frame2_1af9db6979bec9cc9b2ae889e65e95cd8a" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Frame2" kindref="compound">Frame2</ref><sp/><ref refid="classKDL_1_1Frame2_1af9db6979bec9cc9b2ae889e65e95cd8a" kindref="member">Frame2::Inverse</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="960"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2" kindref="compound">Frame2</ref><sp/>tmp(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1Frame2_1ac59dfa60bfd38d03a49343ce068b6ddb" kindref="member">SetInverse</ref>();</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966" refid="classKDL_1_1Frame2_1a899a0738adfe9342fc3a2d6110a6730c" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Frame2" kindref="compound">Frame2</ref>&amp;<sp/><ref refid="classKDL_1_1Frame2_1a899a0738adfe9342fc3a2d6110a6730c" kindref="member">Frame2::operator =</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame2" kindref="compound">Frame2</ref><sp/>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="967"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ab77981911496a659b7fa878886dbe40b" kindref="member">M</ref><sp/>=<sp/>arg.<ref refid="classKDL_1_1Frame2_1ab77981911496a659b7fa878886dbe40b" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref><sp/>=<sp/>arg.<ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973" refid="classKDL_1_1Frame2_1a528fc3652c18efe3f89eaf7ce4724129" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="classKDL_1_1Frame2_1ab9fac731a64cd211f937f687669a9e16" kindref="member">Frame2::Frame2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame2" kindref="compound">Frame2</ref><sp/>&amp;<sp/>arg)<sp/>:</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>p(arg.p),<sp/>M(arg.M)</highlight></codeline>
<codeline lineno="975"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978" refid="classKDL_1_1Frame2_1a60dcde9c649b001f9a56526ee6f793fa" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame2_1a60dcde9c649b001f9a56526ee6f793fa" kindref="member">Frame2::operator()</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utility_8h_1a40520a99aa348467ec29eb5b562588dc" kindref="member">FRAMES_CHECKI</ref>((0&lt;=i)&amp;&amp;(i&lt;=2)&amp;&amp;(0&lt;=j)&amp;&amp;(j&lt;=2));</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==2)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j==2)</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j==2)<sp/></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref>(i);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame2_1ab77981911496a659b7fa878886dbe40b" kindref="member">M</ref>(i,j);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994" refid="classKDL_1_1Frame2_1a4c8a0be6804d748370e5d77cbe601990" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame2_1a60dcde9c649b001f9a56526ee6f793fa" kindref="member">Frame2::operator()</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utility_8h_1a40520a99aa348467ec29eb5b562588dc" kindref="member">FRAMES_CHECKI</ref>((0&lt;=i)&amp;&amp;(i&lt;=2)&amp;&amp;(0&lt;=j)&amp;&amp;(j&lt;=2));</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i==2)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j==2)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j==2)<sp/></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame2_1ac53f050e83f8fa87267bdc194cb68d7a" kindref="member">p</ref>(i);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame2_1ab77981911496a659b7fa878886dbe40b" kindref="member">M</ref>(i,j);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Scalar<sp/>products.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012" refid="frames_8inl_1a838952d8ea25fd9b6543ad08bb9b1479" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="frames_8inl_1a838952d8ea25fd9b6543ad08bb9b1479" kindref="member">dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs(0)*lhs(0)+rhs(1)*lhs(1)+rhs(2)*lhs(2);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016" refid="frames_8inl_1a6e701fe8737cc7427c205e27dc57796e" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="frames_8inl_1a838952d8ea25fd9b6543ad08bb9b1479" kindref="member">dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="frames_8inl_1a838952d8ea25fd9b6543ad08bb9b1479" kindref="member">dot</ref>(lhs.vel,rhs.force)+<ref refid="frames_8inl_1a838952d8ea25fd9b6543ad08bb9b1479" kindref="member">dot</ref>(lhs.rot,rhs.torque);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020" refid="frames_8inl_1aebb8f00a811e38a6a69746bef24097f2" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="frames_8inl_1a838952d8ea25fd9b6543ad08bb9b1479" kindref="member">dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>rhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>lhs)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="frames_8inl_1a838952d8ea25fd9b6543ad08bb9b1479" kindref="member">dot</ref>(lhs.vel,rhs.force)+<ref refid="frames_8inl_1a838952d8ea25fd9b6543ad08bb9b1479" kindref="member">dot</ref>(lhs.rot,rhs.torque);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Equality<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032" refid="frames_8inl_1a51ec5cca8075b5fc8449f0ddd65cce11" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.data[0],b.data[0],eps)&amp;&amp;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.data[1],b.data[1],eps)&amp;&amp;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.data[2],b.data[2],eps)<sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039" refid="frames_8inl_1a1c67741199b736f7308a0e6f5633c4e6" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.p,b.p,eps)&amp;&amp;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.M,b.M,eps)<sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044" refid="frames_8inl_1a694ad9cc77b7efc98c1578f6aef6cfbf" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.force,b.force,eps)&amp;&amp;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.torque,b.torque,eps)<sp/><sp/>);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049" refid="frames_8inl_1a6a19f9532a0494bccc0cddb832e5894b" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.rot,b.rot,eps)&amp;&amp;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.vel,b.vel,eps)<sp/><sp/>);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054" refid="frames_8inl_1ab17cb601b66b7044844f9073f05881f6" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.data[0],b.data[0],eps)&amp;&amp;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.data[1],b.data[1],eps)<sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1059" refid="frames_8inl_1a34b5b4d5624e408a0b3dd64b055e1f7d" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation2&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation2&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.c,b.c,eps)<sp/>&amp;&amp;<sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.s,b.s,eps)<sp/>);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063" refid="frames_8inl_1ad088204124856b8a92cb7f58e674302e" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame2&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame2&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.p,b.p,eps)&amp;&amp;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a.M,b.M,eps)<sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068" refid="frames_8inl_1a73e913de2016bccf9ec44e18dce273b1" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1aa2015ef4bf3ebb5f6defaf8bc1cf5184" kindref="member">SetToZero</ref>(Vector&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>v=<ref refid="classKDL_1_1Vector_1aac50a5f60447f9cb7b4a510c4695ab89" kindref="member">Vector::Zero</ref>();</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1071" refid="frames_8inl_1a023498d76788ecf4ef547d9920ed730c" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1aa2015ef4bf3ebb5f6defaf8bc1cf5184" kindref="member">SetToZero</ref>(Twist&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1aa2015ef4bf3ebb5f6defaf8bc1cf5184" kindref="member">SetToZero</ref>(v.rot);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1aa2015ef4bf3ebb5f6defaf8bc1cf5184" kindref="member">SetToZero</ref>(v.vel);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075" refid="frames_8inl_1a5421ae642b787f650f47b751c2bb9ab2" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1aa2015ef4bf3ebb5f6defaf8bc1cf5184" kindref="member">SetToZero</ref>(Wrench&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1aa2015ef4bf3ebb5f6defaf8bc1cf5184" kindref="member">SetToZero</ref>(v.force);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1aa2015ef4bf3ebb5f6defaf8bc1cf5184" kindref="member">SetToZero</ref>(v.torque);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080" refid="frames_8inl_1a9ee4d4cbcc1cf3c7cdaff7199489cfa2" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1aa2015ef4bf3ebb5f6defaf8bc1cf5184" kindref="member">SetToZero</ref>(Vector2&amp;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/><ref refid="classKDL_1_1Vector2_1a0674450ce292d200c8f5f42a02d8640b" kindref="member">Vector2::Zero</ref>();</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="comment">//<sp/>The<sp/>following<sp/>defines<sp/>the<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>diff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>addDelta</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>random</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>posrandom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>all<sp/>the<sp/>types<sp/>defined<sp/>in<sp/>this<sp/>library.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(mostly<sp/>for<sp/>uniform<sp/>integration,<sp/>differentiation<sp/>and<sp/>testing).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defined<sp/>as<sp/>functions<sp/>because<sp/>double<sp/>is<sp/>not<sp/>a<sp/>class<sp/>and<sp/>a<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>brake<sp/>uniformity<sp/>when<sp/>defined<sp/>for<sp/>a<sp/>double.</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107" refid="frames_8inl_1ae6d17b27737370d8ce326fdac8e1756a" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Rotation<sp/><ref refid="frames_8inl_1ae6d17b27737370d8ce326fdac8e1756a" kindref="member">Rot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>axis_a_b)<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>formula<sp/>is<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>V.(V.tr)<sp/>+<sp/>st*[V<sp/>x]<sp/>+<sp/>ct*(I-V.(V.tr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>found<sp/>by<sp/>multiplying<sp/>it<sp/>with<sp/>an<sp/>arbitrary<sp/>vector<sp/>p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>noting<sp/>that<sp/>this<sp/>vector<sp/>is<sp/>rotated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector<sp/>rotvec<sp/>=<sp/>axis_a_b;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/>rotvec.Normalize(1E-10);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ct<sp/>=<sp/><ref refid="namespaceKDL_1a28fb39c2d77d3050aebc60d3fcb67797" kindref="member">::cos</ref>(angle);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>st<sp/>=<sp/><ref refid="namespaceKDL_1ad75e917c4141823627a64b5cfc912eda" kindref="member">::sin</ref>(angle);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vt<sp/>=<sp/>1-ct;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Rotation(</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><sp/>vt*rotvec(0)*rotvec(0),<sp/></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-rotvec(2)*st<sp/>+<sp/><sp/>vt*rotvec(0)*rotvec(1),<sp/></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotvec(1)*st<sp/><sp/>+<sp/><sp/>vt*rotvec(0)*rotvec(2),</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotvec(2)*st<sp/><sp/>+<sp/><sp/>vt*rotvec(1)*rotvec(0),</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><sp/>vt*rotvec(1)*rotvec(1),</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-rotvec(0)*st<sp/>+<sp/><sp/>vt*rotvec(1)*rotvec(2),</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-rotvec(1)*st<sp/>+<sp/><sp/>vt*rotvec(2)*rotvec(0),</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotvec(0)*st<sp/><sp/>+<sp/><sp/>vt*rotvec(2)*rotvec(1),</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ct<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><sp/>vt*rotvec(2)*rotvec(2)</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129" refid="frames_8inl_1a28b09ca6433ffe847b24cb2ac0f4ab6b" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector<sp/><ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(b-a)/dt;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133" refid="frames_8inl_1a1dfb0c9924a9ec26905dfb0dbc835cf4" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector<sp/><ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>R_a_b1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>R_a_b2,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>Rotation<sp/>R_b1_b2(R_a_b1.Inverse()*R_a_b2);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>R_a_b1<sp/>*<sp/>R_b1_b2.GetRot()<sp/>/<sp/>dt;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138" refid="frames_8inl_1a06a4a9d54c828d628f398e94a5020d36" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Twist<sp/><ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>F_a_b1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>F_a_b2,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Twist(</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff</ref>(F_a_b1.p,F_a_b2.p,dt),</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff</ref>(F_a_b1.M,F_a_b2.M,dt)</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1144" refid="frames_8inl_1ade209c48252e1842b3c7fb1ab83d8fca" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Twist<sp/><ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Twist(<ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff</ref>(a.vel,b.vel,dt),<ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff</ref>(a.rot,b.rot,dt));</highlight></codeline>
<codeline lineno="1146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148" refid="frames_8inl_1aacc179b18d4f8937203b559c831d3e01" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Wrench<sp/><ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Wrench(</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff</ref>(a.force,b.force,dt),</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff</ref>(a.torque,b.torque,dt)</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156" refid="frames_8inl_1a781532f5147ffb631ae4a916de9153e3" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Vector<sp/><ref refid="namespaceKDL_1ac90990ec8c80f1c7a411052f6b1f322b" kindref="member">addDelta</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;da,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a+da*dt;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160" refid="frames_8inl_1adc8f82f1370f89d7a03690acbc77b4c1" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Rotation<sp/><ref refid="namespaceKDL_1ac90990ec8c80f1c7a411052f6b1f322b" kindref="member">addDelta</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;da,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="frames_8inl_1ae6d17b27737370d8ce326fdac8e1756a" kindref="member">Rot</ref>(da*dt)*a;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1163" refid="frames_8inl_1ab9f866e7d04e843d4b6d3a4eee6d929a" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Frame<sp/><ref refid="namespaceKDL_1ac90990ec8c80f1c7a411052f6b1f322b" kindref="member">addDelta</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>da,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Frame(</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1ac90990ec8c80f1c7a411052f6b1f322b" kindref="member">addDelta</ref>(a.M,da.rot,dt),</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1ac90990ec8c80f1c7a411052f6b1f322b" kindref="member">addDelta</ref>(a.p,da.vel,dt)</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1169" refid="frames_8inl_1a58566d06df4915e96ff21005095b704b" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Twist<sp/><ref refid="namespaceKDL_1ac90990ec8c80f1c7a411052f6b1f322b" kindref="member">addDelta</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;da,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Twist(<ref refid="namespaceKDL_1ac90990ec8c80f1c7a411052f6b1f322b" kindref="member">addDelta</ref>(a.vel,da.vel,dt),<ref refid="namespaceKDL_1ac90990ec8c80f1c7a411052f6b1f322b" kindref="member">addDelta</ref>(a.rot,da.rot,dt));</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1172" refid="frames_8inl_1a3c8ecf3827cea0e27f27a4c9f77c2813" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/>Wrench<sp/><ref refid="namespaceKDL_1ac90990ec8c80f1c7a411052f6b1f322b" kindref="member">addDelta</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;da,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Wrench(<ref refid="namespaceKDL_1ac90990ec8c80f1c7a411052f6b1f322b" kindref="member">addDelta</ref>(a.force,da.force,dt),<ref refid="namespaceKDL_1ac90990ec8c80f1c7a411052f6b1f322b" kindref="member">addDelta</ref>(a.torque,da.torque,dt));</highlight></codeline>
<codeline lineno="1174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214" refid="frames_8inl_1a9f76654728449cbb330e854b25f77ec3" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(Vector&amp;<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(a[0]);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(a[1]);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(a[2]);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1219" refid="frames_8inl_1a8132445ff5f3895ee3c6c351f0dd81c1" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(Twist&amp;<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(a.rot);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(a.vel);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1223" refid="frames_8inl_1a1d4fb8b8dab175821ea1081156a7877a" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(Wrench&amp;<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(a.torque);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(a.force);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228" refid="frames_8inl_1a832718cf1ee64bccc3e8488bbeeba6a1" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(Rotation&amp;<sp/>R)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alfa;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(alfa);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(beta);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(gamma);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>R<sp/>=<sp/><ref refid="classKDL_1_1Rotation_1a39de86d0df854dda05aa9d8516b8e119" kindref="member">Rotation::EulerZYX</ref>(alfa,beta,gamma);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238" refid="frames_8inl_1a5b17d79b3fa55cd41d50dd43ecff704b" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(Frame&amp;<sp/>F)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(F.M);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(F.p);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243" refid="frames_8inl_1a9a2df7414a816c2cddbc3651c2a038a9" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(Vector&amp;<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(a[0]);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(a[1]);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(a[2]);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1248" refid="frames_8inl_1a195bd544341e9ae9d5c280c522898afe" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(Twist&amp;<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(a.rot);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(a.vel);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1252" refid="frames_8inl_1a5a5e3f2020f49b3aae2ced72957279cf" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(Wrench&amp;<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(a.torque);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(a.force);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257" refid="frames_8inl_1ab0114bb2d980453c0c2ff95c4b5d7e07" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(Rotation&amp;<sp/>R)<sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alfa;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(alfa);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(beta);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(gamma);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>R<sp/>=<sp/><ref refid="classKDL_1_1Rotation_1a39de86d0df854dda05aa9d8516b8e119" kindref="member">Rotation::EulerZYX</ref>(alfa,beta,gamma);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267" refid="frames_8inl_1a5d7e69524a22c9627a4d4c9ef6199573" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" kindref="member">posrandom</ref>(Frame&amp;<sp/>F)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(F.M);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(F.p);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275" refid="frames_8inl_1a5a19fb0fca38c4c44ab227cc7e491c84" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a1d076f4eec84df192b9bcfa5740f2ebf" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>b<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a,b);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a.p<sp/>==<sp/>b.p<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.M<sp/>==<sp/>b.M<sp/>);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284" refid="frames_8inl_1a8006f466dfb798c4865bbf99732315c6" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a38341cc30e5b13d0e90de01b69378c2e" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="namespaceKDL_1a1d076f4eec84df192b9bcfa5740f2ebf" kindref="member">operator==</ref>(a,b);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288" refid="frames_8inl_1a41442bbd88293936a321db1b7ad4b2c2" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a1d076f4eec84df192b9bcfa5740f2ebf" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a,b);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a.data[0]==b.data[0]&amp;&amp;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.data[1]==b.data[1]&amp;&amp;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.data[2]==b.data[2]<sp/>);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298" refid="frames_8inl_1a670300ca0ce9065eab7e2a5e6c70b58a" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a38341cc30e5b13d0e90de01b69378c2e" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="namespaceKDL_1a1d076f4eec84df192b9bcfa5740f2ebf" kindref="member">operator==</ref>(a,b);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302" refid="frames_8inl_1a3a35a33e086efdf284e378f461a71cab" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a1d076f4eec84df192b9bcfa5740f2ebf" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a,b);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a.rot==b.rot<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.vel==b.vel<sp/><sp/>);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311" refid="frames_8inl_1ab89ee6b759e8671de97cf38b3de791fd" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a38341cc30e5b13d0e90de01b69378c2e" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="namespaceKDL_1a1d076f4eec84df192b9bcfa5740f2ebf" kindref="member">operator==</ref>(a,b);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315" refid="frames_8inl_1ad17f03f1acf55ced7634ab2f348a6263" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a1d076f4eec84df192b9bcfa5740f2ebf" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>b<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a,b);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a.force==b.force<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.torque==b.torque<sp/>);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324" refid="frames_8inl_1a8b26dec0f28798c84e0663e70b28c79b" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a38341cc30e5b13d0e90de01b69378c2e" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Wrench&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="namespaceKDL_1a1d076f4eec84df192b9bcfa5740f2ebf" kindref="member">operator==</ref>(a,b);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1327" refid="frames_8inl_1a7d2da91476413979f41854765fcb285e" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a38341cc30e5b13d0e90de01b69378c2e" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="namespaceKDL_1a1d076f4eec84df192b9bcfa5740f2ebf" kindref="member">operator==</ref>(a,b);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331" refid="frames_8inl_1a4fd2a87ee06692b114a108dd3946e994" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a1d076f4eec84df192b9bcfa5740f2ebf" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" kindref="member">Equal</ref>(a,b);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a.data[0]==b.data[0]&amp;&amp;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.data[1]==b.data[1]<sp/>);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340" refid="frames_8inl_1a6a6390d093f97246c58eb01ca0e57963" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a38341cc30e5b13d0e90de01b69378c2e" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector2&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="namespaceKDL_1a1d076f4eec84df192b9bcfa5740f2ebf" kindref="member">operator==</ref>(a,b);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/frames.inl"/>
  </compounddef>
</doxygen>
