<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classKDL_1_1Frame" kind="class" language="C++" prot="public">
    <compoundname>KDL::Frame</compoundname>
    <includes refid="frames_8hpp" local="no">frames.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classKDL_1_1Frame_1a367668b3344ccfd50410ccc1ed30fa6f" prot="public" static="no" mutable="no">
        <type><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref></type>
        <definition>Rotation KDL::Frame::M</definition>
        <argsstring></argsstring>
        <name>M</name>
        <briefdescription>
<para>Orientation of the <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="575" column="14" bodyfile="src/frames.hpp" bodystart="575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKDL_1_1Frame_1abc00c3817f7baa985b67077479617866" prot="public" static="no" mutable="no">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector KDL::Frame::p</definition>
        <argsstring></argsstring>
        <name>p</name>
        <briefdescription>
<para>origine of the <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="574" column="12" bodyfile="src/frames.hpp" bodystart="574" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKDL_1_1Frame_1af2f3fe6d30be4717eb0a4a74bc4bb444" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::Frame::Frame</definition>
        <argsstring>()</argsstring>
        <name>Frame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="586" column="13" bodyfile="src/frames.hpp" bodystart="586" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1a290d44405783f7854611ac082a63bdd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Frame::Frame</definition>
        <argsstring>(const Frame &amp;arg)</argsstring>
        <name>Frame</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>The copy constructor. Normal copy by value semantics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="588" column="13" bodyfile="src/frames.inl" bodystart="435" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1aba40e19275ca4ddd13bd8e05eadc8320" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Frame::Frame</definition>
        <argsstring>(const Rotation &amp;R)</argsstring>
        <name>Frame</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <briefdescription>
<para>The position matrix defaults to zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="584" column="22" bodyfile="src/frames.inl" bodystart="388" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1a7583694e3ea56e0edecbd9d02aa4a3e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Frame::Frame</definition>
        <argsstring>(const Rotation &amp;R, const Vector &amp;V)</argsstring>
        <name>Frame</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="579" column="13" bodyfile="src/frames.inl" bodystart="400" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1afb8da9aa2cc86a2082cbd469067bbcca" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Frame::Frame</definition>
        <argsstring>(const Vector &amp;V)</argsstring>
        <name>Frame</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>V</declname>
        </param>
        <briefdescription>
<para>The rotation matrix defaults to identity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="582" column="22" bodyfile="src/frames.inl" bodystart="394" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1a67ad926d5d8cc58d6feace213708de5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Frame::Integrate</definition>
        <argsstring>(const Twist &amp;t_this, double frequency)</argsstring>
        <name>Integrate</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>t_this</declname>
        </param>
        <param>
          <type>double</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The twist &lt;t_this&gt; is expressed wrt the current frame. This frame is integrated into an updated frame with &lt;samplefrequency&gt;. Very simple first order integration rule. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="647" column="18" bodyfile="src/frames.inl" bodystart="624" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1ac508fa4e7c59527f8f377a3c6c225d12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref></type>
        <definition>Frame Frame::Inverse</definition>
        <argsstring>() const</argsstring>
        <name>Inverse</name>
        <briefdescription>
<para>Gives back inverse transformation of a <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="604" column="19" bodyfile="src/frames.inl" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1abf87d299d64beaa06e2903ee9983d244" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist Frame::Inverse</definition>
        <argsstring>(const Twist &amp;arg) const</argsstring>
        <name>Inverse</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>The same as p2=R.Inverse()*p but more efficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="613" column="20" bodyfile="src/frames.inl" bodystart="282" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1adcf60bbe39270e84a8fe664e3e17f73a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector Frame::Inverse</definition>
        <argsstring>(const Vector &amp;arg) const</argsstring>
        <name>Inverse</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>The same as p2=R.Inverse()*p but more efficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="607" column="20" bodyfile="src/frames.inl" bodystart="417" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1ae9eeb43943d237da3116b142d209d9ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench Frame::Inverse</definition>
        <argsstring>(const Wrench &amp;arg) const</argsstring>
        <name>Inverse</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>The same as p2=R.Inverse()*p but more efficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="610" column="20" bodyfile="src/frames.inl" bodystart="165" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1a4109f8e1cd1e48bb957de4ef6796bea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Frame::Make4x4</definition>
        <argsstring>(double *d)</argsstring>
        <name>Make4x4</name>
        <param>
          <type>double *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Reads data from an double array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="592" column="11" bodyfile="src/frames.cpp" bodystart="64" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1ade9b0946226f7cea4aa0e30650119b79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Frame::operator()</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Treats a frame as a 4x4 matrix and returns element i,j Access to elements 0..3,0..3, bounds are checked when NDEBUG is not set </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="596" column="20" bodyfile="src/frames.inl" bodystart="667" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1afdea2b0e23f712757d2e7fbad95e3440" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Frame::operator()</definition>
        <argsstring>(int i, int j) const</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Treats a frame as a 4x4 matrix and returns element i,j Access to elements 0..3,0..3, bounds are checked when NDEBUG is not set </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="600" column="20" bodyfile="src/frames.inl" bodystart="683" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1a402eea637834d2643c67da1a5f1fe495" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist Frame::operator*</definition>
        <argsstring>(const Twist &amp;arg) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transformation of both the velocity reference point and of the base to which the twist is expressed. look at Rotation*Twist for a transformation of only the base to which the twist is expressed.</para>
<para>Complexity : 24M+18A </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="636" column="19" bodyfile="src/frames.inl" bodystart="274" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1aa5bf6ef398b04a482ac5fdbbd35c7c06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector Frame::operator*</definition>
        <argsstring>(const Vector &amp;arg) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transformation of the base to which the vector is expressed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="620" column="20" bodyfile="src/frames.inl" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1a021bab736839bc1c655619beb209cc66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench Frame::operator*</definition>
        <argsstring>(const Wrench &amp;arg) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transformation of both the force reference point and of the base to which the wrench is expressed. look at Rotation*Wrench operator for a transformation of only the base to which the twist is expressed.</para>
<para>Complexity : 24M+18A </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="628" column="20" bodyfile="src/frames.inl" bodystart="156" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1a68eeae7af154df2a649ed09b6043f663" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
        <definition>Frame &amp; Frame::operator=</definition>
        <argsstring>(const Frame &amp;arg)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Normal copy-by-value semantics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="616" column="19" bodyfile="src/frames.inl" bodystart="428" bodyend="433"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classKDL_1_1Frame_1aae3c1055b58bbe6a9c6c64eea6a11552" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const Frame &amp;a, const Frame &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="708" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Frame_1af66428b996121af486bf990048360ebf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Frame &amp;a, const Frame &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The literal inequality <ref refid="classKDL_1_1Frame_1af66428b996121af486bf990048360ebf" kindref="member">operator!=()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="713" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Frame_1adb5d8e64590ce61d0ea8fb91a24f674c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref></type>
        <definition>Frame operator*</definition>
        <argsstring>(const Frame &amp;lhs, const Frame &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Composition of two frames. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="639" column="26"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Frame_1a98b80cd709a822855103e3a621bd885a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Frame &amp;a, const Frame &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The literal equality <ref refid="classKDL_1_1Frame_1a98b80cd709a822855103e3a621bd885a" kindref="member">operator==()</ref>, also identical. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="711" column="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classKDL_1_1Frame_1a80ee82a53ab3ceb0aa79b7b5892a14eb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref></type>
        <definition>Frame KDL::Frame::DH</definition>
        <argsstring>(double a, double alpha, double d, double theta)</argsstring>
        <name>DH</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="703" column="19" bodyfile="src/frames.cpp" bodystart="95" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1a0185c3081fd5459ae0a6081bf6fd5474" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref></type>
        <definition>Frame KDL::Frame::DH_Craig1989</definition>
        <argsstring>(double a, double alpha, double d, double theta)</argsstring>
        <name>DH_Craig1989</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="695" column="19" bodyfile="src/frames.cpp" bodystart="78" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Frame_1a21cc8438f71b522154d2ef4cd6933d69" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref></type>
        <definition>Frame Frame::Identity</definition>
        <argsstring>()</argsstring>
        <name>Identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the identity transformation <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref>(<ref refid="classKDL_1_1Rotation_1a5a5d40d8e6cf179cac35bc378c83017c" kindref="member">Rotation::Identity()</ref>,<ref refid="classKDL_1_1Vector_1aac50a5f60447f9cb7b4a510c4695ab89" kindref="member">Vector::Zero()</ref>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="642" column="26" bodyfile="src/frames.inl" bodystart="700" bodyend="702"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>represents a frame transformation in 3D space (rotation + translation) </para>
    </briefdescription>
    <detaileddescription>
<para>if V2 = Frame*V1 (V2 expressed in frame A, V1 expressed in frame B) then V2 = <ref refid="classKDL_1_1Frame_1a367668b3344ccfd50410ccc1ed30fa6f" kindref="member">Frame.M</ref>*V1+Frame.p</para>
<para><ref refid="classKDL_1_1Frame_1a367668b3344ccfd50410ccc1ed30fa6f" kindref="member">Frame.M</ref> contains columns that represent the axes of frame B wrt frame A <ref refid="classKDL_1_1Frame_1abc00c3817f7baa985b67077479617866" kindref="member">Frame.p</ref> contains the origin of frame B expressed in frame A. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>KDL::Rotation</label>
        <link refid="classKDL_1_1Rotation"/>
      </node>
      <node id="1">
        <label>KDL::Frame</label>
        <link refid="classKDL_1_1Frame"/>
        <childnode refid="2" relation="usage">
          <edgelabel>p</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>M</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>KDL::Vector</label>
        <link refid="classKDL_1_1Vector"/>
      </node>
    </collaborationgraph>
    <location file="src/frames.hpp" line="572" column="12" bodyfile="src/frames.hpp" bodystart="572" bodyend="714"/>
    <listofallmembers>
      <member refid="classKDL_1_1Frame_1a80ee82a53ab3ceb0aa79b7b5892a14eb" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>DH</name></member>
      <member refid="classKDL_1_1Frame_1a0185c3081fd5459ae0a6081bf6fd5474" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>DH_Craig1989</name></member>
      <member refid="classKDL_1_1Frame_1aae3c1055b58bbe6a9c6c64eea6a11552" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Equal</name></member>
      <member refid="classKDL_1_1Frame_1a7583694e3ea56e0edecbd9d02aa4a3e0" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Frame</name></member>
      <member refid="classKDL_1_1Frame_1afb8da9aa2cc86a2082cbd469067bbcca" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Frame</name></member>
      <member refid="classKDL_1_1Frame_1aba40e19275ca4ddd13bd8e05eadc8320" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Frame</name></member>
      <member refid="classKDL_1_1Frame_1af2f3fe6d30be4717eb0a4a74bc4bb444" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Frame</name></member>
      <member refid="classKDL_1_1Frame_1a290d44405783f7854611ac082a63bdd4" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Frame</name></member>
      <member refid="classKDL_1_1Frame_1a21cc8438f71b522154d2ef4cd6933d69" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Identity</name></member>
      <member refid="classKDL_1_1Frame_1a67ad926d5d8cc58d6feace213708de5f" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Integrate</name></member>
      <member refid="classKDL_1_1Frame_1ac508fa4e7c59527f8f377a3c6c225d12" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Inverse</name></member>
      <member refid="classKDL_1_1Frame_1adcf60bbe39270e84a8fe664e3e17f73a" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Inverse</name></member>
      <member refid="classKDL_1_1Frame_1ae9eeb43943d237da3116b142d209d9ec" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Inverse</name></member>
      <member refid="classKDL_1_1Frame_1abf87d299d64beaa06e2903ee9983d244" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Inverse</name></member>
      <member refid="classKDL_1_1Frame_1a367668b3344ccfd50410ccc1ed30fa6f" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>M</name></member>
      <member refid="classKDL_1_1Frame_1a4109f8e1cd1e48bb957de4ef6796bea2" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>Make4x4</name></member>
      <member refid="classKDL_1_1Frame_1af66428b996121af486bf990048360ebf" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>operator!=</name></member>
      <member refid="classKDL_1_1Frame_1ade9b0946226f7cea4aa0e30650119b79" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>operator()</name></member>
      <member refid="classKDL_1_1Frame_1afdea2b0e23f712757d2e7fbad95e3440" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>operator()</name></member>
      <member refid="classKDL_1_1Frame_1aa5bf6ef398b04a482ac5fdbbd35c7c06" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Frame_1a021bab736839bc1c655619beb209cc66" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Frame_1a402eea637834d2643c67da1a5f1fe495" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Frame_1adb5d8e64590ce61d0ea8fb91a24f674c" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Frame_1a68eeae7af154df2a649ed09b6043f663" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>operator=</name></member>
      <member refid="classKDL_1_1Frame_1a98b80cd709a822855103e3a621bd885a" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>operator==</name></member>
      <member refid="classKDL_1_1Frame_1abc00c3817f7baa985b67077479617866" prot="public" virt="non-virtual"><scope>KDL::Frame</scope><name>p</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
