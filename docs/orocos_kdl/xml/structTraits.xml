<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structTraits" kind="struct" language="C++" prot="public">
    <compoundname>Traits</compoundname>
    <includes refid="traits_8h" local="no">traits.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structTraits_1af892e9ce98f3d0e616fe318b6f4c8f41" prot="public" static="no">
        <type>T</type>
        <definition>typedef T Traits&lt; T &gt;::derivType</definition>
        <argsstring></argsstring>
        <name>derivType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/traits.h" line="40" column="11" bodyfile="src/utilities/traits.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structTraits_1afa2a88b2498ae320ea94f6821acb7453" prot="public" static="no">
        <type>T</type>
        <definition>typedef T Traits&lt; T &gt;::valueType</definition>
        <argsstring></argsstring>
        <name>valueType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/traits.h" line="39" column="11" bodyfile="src/utilities/traits.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="structTraits" kindref="compound">Traits</ref> are traits classes to determine the type of a derivative of another type. </para>
    </briefdescription>
    <detaileddescription>
<para>For geometric objects the &quot;geometric&quot; derivative is chosen. For example the derivative of a Rotation matrix is NOT a 3x3 matrix containing the derivative of the elements of a rotation matrix. The derivative of the rotation matrix is a Vector corresponding the rotational velocity. Mostly used in template classes and routines to derive a correct type when needed.</para>
<para>You can see this as a compile-time lookuptable to find the type of the derivative.</para>
<para>Example <verbatim> Rotation R;
 Traits&lt;Rotation&gt; dR;
</verbatim> </para>
    </detaileddescription>
    <location file="src/utilities/traits.h" line="38" column="13" bodyfile="src/utilities/traits.h" bodystart="38" bodyend="41"/>
    <listofallmembers>
      <member refid="structTraits_1af892e9ce98f3d0e616fe318b6f4c8f41" prot="public" virt="non-virtual"><scope>Traits</scope><name>derivType</name></member>
      <member refid="structTraits_1afa2a88b2498ae320ea94f6821acb7453" prot="public" virt="non-virtual"><scope>Traits</scope><name>valueType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
