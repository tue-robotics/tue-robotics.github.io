<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classKDL_1_1RigidBodyInertia" kind="class" language="C++" prot="public">
    <compoundname>KDL::RigidBodyInertia</compoundname>
    <includes refid="rigidbodyinertia_8hpp" local="no">rigidbodyinertia.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classKDL_1_1RigidBodyInertia_1a8fb1c9e2b6d45f87c533046f1e742716" prot="private" static="no" mutable="no">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector KDL::RigidBodyInertia::h</definition>
        <argsstring></argsstring>
        <name>h</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="101" column="16" bodyfile="src/rigidbodyinertia.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKDL_1_1RigidBodyInertia_1ade2ddec821af54bff08b6061ab46472a" prot="private" static="no" mutable="no">
        <type><ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref></type>
        <definition>RotationalInertia KDL::RigidBodyInertia::I</definition>
        <argsstring></argsstring>
        <name>I</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="102" column="27" bodyfile="src/rigidbodyinertia.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKDL_1_1RigidBodyInertia_1a8feefa9f3bfbbfd4bf163c05081a8438" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double KDL::RigidBodyInertia::m</definition>
        <argsstring></argsstring>
        <name>m</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="100" column="16" bodyfile="src/rigidbodyinertia.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classKDL_1_1RigidBodyInertia_1a26a8b6cf42ab0d7a17909656a9ff16b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ArticulatedBodyInertia</definition>
        <argsstring></argsstring>
        <name>ArticulatedBodyInertia</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="104" column="9" bodyfile="src/rigidbodyinertia.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1RigidBodyInertia_1a356b6345fac27c647f94eed62265a4e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia operator*</definition>
        <argsstring>(const Frame &amp;T, const RigidBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Coordinate system transform Ia = T_a_b*Ib with T_a_b the frame from a to b. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="59" column="33" bodyfile="src/rigidbodyinertia.cpp" bodystart="54" bodyend="70"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1RigidBodyInertia_1a053fe8890d6c3a5fafd5dc7fa65b1b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench operator*</definition>
        <argsstring>(const RigidBodyInertia &amp;I, const Twist &amp;t)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculate spatial momentum: h = I*v make sure that the twist v and the inertia are expressed in the same reference frame/point </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="58" column="23" bodyfile="src/rigidbodyinertia.cpp" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1RigidBodyInertia_1a8299aeb0c4514205697a571004ece305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia operator*</definition>
        <argsstring>(const Rotation &amp;R, const RigidBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference frame orientation change Ia = R_a_b*Ib with R_a_b the rotation of b expressed in a </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="60" column="33" bodyfile="src/rigidbodyinertia.cpp" bodystart="72" bodyend="81"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1RigidBodyInertia_1a04507a0c6bfbd2fabd4178be65989a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia operator*</definition>
        <argsstring>(double a, const RigidBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scalar product: I_new = double * I_old </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="56" column="33" bodyfile="src/rigidbodyinertia.cpp" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1RigidBodyInertia_1a81525c4002e3725a67dd0f730b7e35b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia operator+</definition>
        <argsstring>(const RigidBodyInertia &amp;Ia, const RigidBodyInertia &amp;Ib)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>addition I: I_new = I_old1 + I_old2, make sure that I_old1 and I_old2 are expressed in the same reference frame/point, otherwise the result is worth nothing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="57" column="33" bodyfile="src/rigidbodyinertia.cpp" bodystart="46" bodyend="48"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKDL_1_1RigidBodyInertia_1a89c5adb42c867ac824d39a248fb7345a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector KDL::RigidBodyInertia::getCOG</definition>
        <argsstring>() const</argsstring>
        <name>getCOG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the center of gravity of the rigid body </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="86" column="16" bodyfile="src/rigidbodyinertia.hpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RigidBodyInertia_1ae1c13abc7c9cf39b8767f6f6a076f10e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::RigidBodyInertia::getMass</definition>
        <argsstring>() const</argsstring>
        <name>getMass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the mass of the rigid body </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="71" column="16" bodyfile="src/rigidbodyinertia.hpp" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RigidBodyInertia_1a0b1e6ebb0d63dd66c9079683f11f277b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref></type>
        <definition>RotationalInertia KDL::RigidBodyInertia::getRotationalInertia</definition>
        <argsstring>() const</argsstring>
        <name>getRotationalInertia</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the rotational inertia expressed in the reference frame (not the cog) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="94" column="27" bodyfile="src/rigidbodyinertia.hpp" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RigidBodyInertia_1a9af3f55e24ab3aae55508b3e8a14a066" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>const Vector&amp; KDL::RigidBodyInertia::getSpatialMomentum</definition>
        <argsstring>() const</argsstring>
        <name>getSpatialMomentum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the spatial momentum of the rigid body </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="78" column="22" bodyfile="src/rigidbodyinertia.hpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RigidBodyInertia_1a4349dc26f4e538e7630fd5de18484d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia KDL::RigidBodyInertia::RefPoint</definition>
        <argsstring>(const Vector &amp;p)</argsstring>
        <name>RefPoint</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference point change with v the vector from the old to the new point expressed in the current reference frame </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="66" column="26" bodyfile="src/rigidbodyinertia.cpp" bodystart="83" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RigidBodyInertia_1a1b7ca1ec61df504f4db07cb5f98bdabe" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KDL::RigidBodyInertia::RigidBodyInertia</definition>
        <argsstring>(double m=0, const Vector &amp;oc=Vector::Zero(), const RotationalInertia &amp;Ic=RotationalInertia::Zero())</argsstring>
        <name>RigidBodyInertia</name>
        <param>
          <type>double</type>
          <declname>m</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>oc</declname>
          <defval><ref refid="classKDL_1_1Vector_1aac50a5f60447f9cb7b4a510c4695ab89" kindref="member">Vector::Zero</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref> &amp;</type>
          <declname>Ic</declname>
          <defval><ref refid="classKDL_1_1RotationalInertia_1a50fbe96830ed0c31a9de7528c859ae32" kindref="member">RotationalInertia::Zero</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This constructor creates a cartesian space inertia matrix, the arguments are the mass, the vector from the reference point to cog and the rotational inertia in the cog. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="44" column="18" bodyfile="src/rigidbodyinertia.cpp" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RigidBodyInertia_1a728ff068183282ac4c2774db64f6eb45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::RigidBodyInertia::~RigidBodyInertia</definition>
        <argsstring>()</argsstring>
        <name>~RigidBodyInertia</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="54" column="9" bodyfile="src/rigidbodyinertia.hpp" bodystart="54" bodyend="54"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classKDL_1_1RigidBodyInertia_1a6684b59d8359f9e4c305b709188049f8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>static RigidBodyInertia KDL::RigidBodyInertia::Zero</definition>
        <argsstring>()</argsstring>
        <name>Zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an inertia with zero mass, and zero <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="49" column="40" bodyfile="src/rigidbodyinertia.hpp" bodystart="49" bodyend="51"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classKDL_1_1RigidBodyInertia_1ace6c0fdeccce132891735ed23dfd92c1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KDL::RigidBodyInertia::RigidBodyInertia</definition>
        <argsstring>(double m, const Vector &amp;h, const RotationalInertia &amp;I, bool mhi)</argsstring>
        <name>RigidBodyInertia</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>h</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.hpp" line="99" column="9" bodyfile="src/rigidbodyinertia.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>6D Inertia of a rigid body </para>
    </briefdescription>
    <detaileddescription>
<para>The inertia is defined in a certain reference point and a certain reference base. The reference point does not have to coincide with the origin of the reference frame. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>KDL::RigidBodyInertia</label>
        <link refid="classKDL_1_1RigidBodyInertia"/>
        <childnode refid="2" relation="usage">
          <edgelabel>h</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>I</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>KDL::RotationalInertia</label>
        <link refid="classKDL_1_1RotationalInertia"/>
      </node>
      <node id="2">
        <label>KDL::Vector</label>
        <link refid="classKDL_1_1Vector"/>
      </node>
    </collaborationgraph>
    <location file="src/rigidbodyinertia.hpp" line="37" column="27" bodyfile="src/rigidbodyinertia.hpp" bodystart="37" bodyend="106"/>
    <listofallmembers>
      <member refid="classKDL_1_1RigidBodyInertia_1a26a8b6cf42ab0d7a17909656a9ff16b6" prot="private" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>ArticulatedBodyInertia</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a89c5adb42c867ac824d39a248fb7345a" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>getCOG</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1ae1c13abc7c9cf39b8767f6f6a076f10e" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>getMass</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a0b1e6ebb0d63dd66c9079683f11f277b" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>getRotationalInertia</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a9af3f55e24ab3aae55508b3e8a14a066" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>getSpatialMomentum</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a8fb1c9e2b6d45f87c533046f1e742716" prot="private" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>h</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1ade2ddec821af54bff08b6061ab46472a" prot="private" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>I</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a8feefa9f3bfbbfd4bf163c05081a8438" prot="private" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>m</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a04507a0c6bfbd2fabd4178be65989a42" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a053fe8890d6c3a5fafd5dc7fa65b1b9a" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a356b6345fac27c647f94eed62265a4e3" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a8299aeb0c4514205697a571004ece305" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a81525c4002e3725a67dd0f730b7e35b4" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>operator+</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a4349dc26f4e538e7630fd5de18484d83" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>RefPoint</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a1b7ca1ec61df504f4db07cb5f98bdabe" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>RigidBodyInertia</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1ace6c0fdeccce132891735ed23dfd92c1" prot="private" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>RigidBodyInertia</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a6684b59d8359f9e4c305b709188049f8" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>Zero</name></member>
      <member refid="classKDL_1_1RigidBodyInertia_1a728ff068183282ac4c2774db64f6eb45" prot="public" virt="non-virtual"><scope>KDL::RigidBodyInertia</scope><name>~RigidBodyInertia</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
