<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classKDL_1_1RotationalInterpolation" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>KDL::RotationalInterpolation</compoundname>
    <derivedcompoundref refid="classKDL_1_1RotationalInterpolation__SingleAxis" prot="public" virt="non-virtual">KDL::RotationalInterpolation_SingleAxis</derivedcompoundref>
    <includes refid="rotational__interpolation_8hpp" local="no">rotational_interpolation.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKDL_1_1RotationalInterpolation_1ae251ab468aa089bddf6fec758d154dc5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>virtual Vector KDL::RotationalInterpolation::Acc</definition>
        <argsstring>(double theta, double thetad, double thetadd) const =0</argsstring>
        <name>Acc</name>
        <reimplementedby refid="classKDL_1_1RotationalInterpolation__SingleAxis_1a0b38f1fe0f36855b5c06e750b2c47314">Acc</reimplementedby>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>thetad</declname>
        </param>
        <param>
          <type>double</type>
          <declname>thetadd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the rotational acceleration at angle theta and with derivative of theta == thetad, and 2nd derivative of theta == thdd </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotational_interpolation.hpp" line="170" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RotationalInterpolation_1a7dbf969c071c5b414e84386ac9967963" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double KDL::RotationalInterpolation::Angle</definition>
        <argsstring>()=0</argsstring>
        <name>Angle</name>
        <reimplementedby refid="classKDL_1_1RotationalInterpolation__SingleAxis_1a8d85deaf915c30d7f1bec7af0530cb7f">Angle</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>Returns the angle value to move from start to end. This should have units radians,</para>
</listitem><listitem><para>With Single Axis interp corresponds to the angle rotation</para>
</listitem><listitem><para>With Three Axis interp corresponds to the slowest of the three rotations. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotational_interpolation.hpp" line="153" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RotationalInterpolation_1a22c768e89a2c79c3fefec5a9600fa90f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classKDL_1_1RotationalInterpolation" kindref="compound">RotationalInterpolation</ref> *</type>
        <definition>virtual RotationalInterpolation* KDL::RotationalInterpolation::Clone</definition>
        <argsstring>() const =0</argsstring>
        <name>Clone</name>
        <reimplementedby refid="classKDL_1_1RotationalInterpolation__SingleAxis_1a63ad631bb62bd3e2609aa93dbe296da1">Clone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>virtual constructor, construction by copying .. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotational_interpolation.hpp" line="186" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RotationalInterpolation_1a62d9494047e32abc8e8cf8e389c75eb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref></type>
        <definition>virtual Rotation KDL::RotationalInterpolation::Pos</definition>
        <argsstring>(double theta) const =0</argsstring>
        <name>Pos</name>
        <reimplementedby refid="classKDL_1_1RotationalInterpolation__SingleAxis_1ad9e8466ea20d2fb43850853dd2e0ecfc">Pos</reimplementedby>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the rotation matrix at angle theta </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotational_interpolation.hpp" line="158" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RotationalInterpolation_1af6ce679181c35f721b88a289dc9b2e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KDL::RotationalInterpolation::SetStartEnd</definition>
        <argsstring>(Rotation start, Rotation end)=0</argsstring>
        <name>SetStartEnd</name>
        <reimplementedby refid="classKDL_1_1RotationalInterpolation__SingleAxis_1a90fadf08e5a6a242713e2ef62a998e25">SetStartEnd</reimplementedby>
        <param>
          <type><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the start and end rotational_interpolation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotational_interpolation.hpp" line="144" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RotationalInterpolation_1a1fcf542f02ab4308b4d71b130f5c5bd3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>virtual Vector KDL::RotationalInterpolation::Vel</definition>
        <argsstring>(double theta, double thetad) const =0</argsstring>
        <name>Vel</name>
        <reimplementedby refid="classKDL_1_1RotationalInterpolation__SingleAxis_1a0ff831fe3ac847ae0ec42775dad73f27">Vel</reimplementedby>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>thetad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the rotational velocity at angle theta and with derivative of theta == thetad </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotational_interpolation.hpp" line="164" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RotationalInterpolation_1a2ca5fd8005512f180fd12a49806bca06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void KDL::RotationalInterpolation::Write</definition>
        <argsstring>(std::ostream &amp;os) const =0</argsstring>
        <name>Write</name>
        <reimplementedby refid="classKDL_1_1RotationalInterpolation__SingleAxis_1a74141103bbe01d3fb16695f5eba3dd27">Write</reimplementedby>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes one of the derived objects to the stream </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotational_interpolation.hpp" line="175" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RotationalInterpolation_1a561bad750afa7f214aa6805109f4ecff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual KDL::RotationalInterpolation::~RotationalInterpolation</definition>
        <argsstring>()</argsstring>
        <name>~RotationalInterpolation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotational_interpolation.hpp" line="188" column="9" bodyfile="src/rotational_interpolation.hpp" bodystart="188" bodyend="188"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classKDL_1_1RotationalInterpolation_1aecafc8b2ee40b8c2f6624711c0df34d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1RotationalInterpolation" kindref="compound">RotationalInterpolation</ref> *</type>
        <definition>RotationalInterpolation * KDL::RotationalInterpolation::Read</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>Read</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads one of the derived objects from the stream and returns a pointer (factory method) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotational_interpolation.hpp" line="181" column="32" bodyfile="src/rotational_interpolation.cpp" bodystart="89" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classKDL_1_1RotationalInterpolation" kindref="compound">RotationalInterpolation</ref> specifies the rotational part of a geometric trajectory<itemizedlist>
<listitem><para>The different derived objects specify different methods for interpolating rotations.</para>
</listitem><listitem><para>SetStartEnd should be called before using the other methods</para>
</listitem><listitem><para>The start and end position do NOT belong to the persistent state ! The owner of this object is responsible for setting these each time </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>KDL::RotationalInterpolation</label>
        <link refid="classKDL_1_1RotationalInterpolation"/>
      </node>
      <node id="2">
        <label>KDL::RotationalInterpolation_SingleAxis</label>
        <link refid="classKDL_1_1RotationalInterpolation__SingleAxis"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="src/rotational_interpolation.hpp" line="101" column="1" bodyfile="src/rotational_interpolation.hpp" bodystart="100" bodyend="151"/>
    <listofallmembers>
      <member refid="classKDL_1_1RotationalInterpolation_1ae251ab468aa089bddf6fec758d154dc5" prot="public" virt="pure-virtual"><scope>KDL::RotationalInterpolation</scope><name>Acc</name></member>
      <member refid="classKDL_1_1RotationalInterpolation_1a7dbf969c071c5b414e84386ac9967963" prot="public" virt="pure-virtual"><scope>KDL::RotationalInterpolation</scope><name>Angle</name></member>
      <member refid="classKDL_1_1RotationalInterpolation_1a22c768e89a2c79c3fefec5a9600fa90f" prot="public" virt="pure-virtual"><scope>KDL::RotationalInterpolation</scope><name>Clone</name></member>
      <member refid="classKDL_1_1RotationalInterpolation_1a62d9494047e32abc8e8cf8e389c75eb1" prot="public" virt="pure-virtual"><scope>KDL::RotationalInterpolation</scope><name>Pos</name></member>
      <member refid="classKDL_1_1RotationalInterpolation_1aecafc8b2ee40b8c2f6624711c0df34d3" prot="public" virt="non-virtual"><scope>KDL::RotationalInterpolation</scope><name>Read</name></member>
      <member refid="classKDL_1_1RotationalInterpolation_1af6ce679181c35f721b88a289dc9b2e52" prot="public" virt="pure-virtual"><scope>KDL::RotationalInterpolation</scope><name>SetStartEnd</name></member>
      <member refid="classKDL_1_1RotationalInterpolation_1a1fcf542f02ab4308b4d71b130f5c5bd3" prot="public" virt="pure-virtual"><scope>KDL::RotationalInterpolation</scope><name>Vel</name></member>
      <member refid="classKDL_1_1RotationalInterpolation_1a2ca5fd8005512f180fd12a49806bca06" prot="public" virt="pure-virtual"><scope>KDL::RotationalInterpolation</scope><name>Write</name></member>
      <member refid="classKDL_1_1RotationalInterpolation_1a561bad750afa7f214aa6805109f4ecff" prot="public" virt="virtual"><scope>KDL::RotationalInterpolation</scope><name>~RotationalInterpolation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
