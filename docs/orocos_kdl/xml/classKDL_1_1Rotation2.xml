<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classKDL_1_1Rotation2" kind="class" language="C++" prot="public">
    <compoundname>KDL::Rotation2</compoundname>
    <includes refid="frames_8hpp" local="no">frames.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double KDL::Rotation2::c</definition>
        <argsstring></argsstring>
        <name>c</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1053" column="13" bodyfile="src/frames.hpp" bodystart="1053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double KDL::Rotation2::s</definition>
        <argsstring></argsstring>
        <name>s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1053" column="12" bodyfile="src/frames.hpp" bodystart="1053" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKDL_1_1Rotation2_1a29eefa76dec3acabc4ed3d99612e1b7f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>IMETHOD double Rotation2::GetRot</definition>
        <argsstring>() const</argsstring>
        <name>GetRot</name>
        <briefdescription>
<para>Gets the angle (in radians) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1088" column="20" bodyfile="src/frames.inl" bodystart="904" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1af69ef92755dab0e10609a069645977cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref></type>
        <definition>IMETHOD Rotation2 Rotation2::Inverse</definition>
        <argsstring>() const</argsstring>
        <name>Inverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1074" column="23" bodyfile="src/frames.inl" bodystart="878" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1a663e69fa1597aa2e14459a2881c16ac3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref></type>
        <definition>IMETHOD Vector2 Rotation2::Inverse</definition>
        <argsstring>(const Vector2 &amp;v) const</argsstring>
        <name>Inverse</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1075" column="21" bodyfile="src/frames.inl" bodystart="882" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1a3a5339ae85aadda3a2c2f6dd922f1fe8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>IMETHOD double Rotation2::operator()</definition>
        <argsstring>(int i, int j) const</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Access to elements 0..1,0..1, bounds are checked when NDEBUG is not set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1069" column="20" bodyfile="src/frames.inl" bodystart="860" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1a395f1086334ca19bb771e0e605895a9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref></type>
        <definition>IMETHOD Vector2 Rotation2::operator*</definition>
        <argsstring>(const Vector2 &amp;v) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1067" column="21" bodyfile="src/frames.inl" bodystart="856" bodyend="858"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1afde0136496eee42795baf646a373009a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref> &amp;</type>
        <definition>IMETHOD Rotation2 &amp; Rotation2::operator=</definition>
        <argsstring>(const Rotation2 &amp;arg)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1066" column="23" bodyfile="src/frames.inl" bodystart="851" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1a890b05669eacd0f9779d66e636a74d61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::Rotation2::Rotation2</definition>
        <argsstring>()</argsstring>
        <name>Rotation2</name>
        <briefdescription>
<para>Default constructor does NOT initialise to Zero(). </para>
        </briefdescription>
        <detaileddescription>
<para>c,s represent cos(angle), sin(angle), this also represents first col. of rot matrix from outside, this class behaves as if it would store the complete 2x2 matrix. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1058" column="5" bodyfile="src/frames.hpp" bodystart="1058" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1a0db98f9f643bfee889d1c70ce72b06bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IMETHOD Rotation2::Rotation2</definition>
        <argsstring>(const Rotation2 &amp;arg)</argsstring>
        <name>Rotation2</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1064" column="5" bodyfile="src/frames.inl" bodystart="847" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1af13f975f4bfc4701eb62f933e7e11d61" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::Rotation2::Rotation2</definition>
        <argsstring>(double angle_rad)</argsstring>
        <name>Rotation2</name>
        <param>
          <type>double</type>
          <declname>angle_rad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1060" column="14" bodyfile="src/frames.hpp" bodystart="1060" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1a3f24f9401b3dd67b827cb7308bd6f556" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::Rotation2::Rotation2</definition>
        <argsstring>(double ca, double sa)</argsstring>
        <name>Rotation2</name>
        <param>
          <type>double</type>
          <declname>ca</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1062" column="5" bodyfile="src/frames.hpp" bodystart="1062" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1ae780b003b6e5a040fb98cba32aecc1ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>IMETHOD void Rotation2::SetIdentity</definition>
        <argsstring>()</argsstring>
        <name>SetIdentity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1077" column="18" bodyfile="src/frames.inl" bodystart="890" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1a75aa830c61b9a1174df5c4db7d662c61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>IMETHOD void Rotation2::SetInverse</definition>
        <argsstring>()</argsstring>
        <name>SetInverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1073" column="18" bodyfile="src/frames.inl" bodystart="874" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1afafdf07b32fd44aaab3ad3854502f4de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>IMETHOD void Rotation2::SetRot</definition>
        <argsstring>(double angle)</argsstring>
        <name>SetRot</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>The SetRot.. functions set the value of *this to the appropriate rotation matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1082" column="18" bodyfile="src/frames.inl" bodystart="896" bodyend="898"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classKDL_1_1Rotation2_1a9d12bcb79fbef1f1efe3bca4ebe1eceb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const Rotation2 &amp;a, const Rotation2 &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1092" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Rotation2_1ac3360a43a99f9c17949a7703662c7534" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref></type>
        <definition>Rotation2 operator*</definition>
        <argsstring>(const Rotation2 &amp;lhs, const Rotation2 &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1071" column="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classKDL_1_1Rotation2_1a9574a771c52178e733c431c9b58ea835" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref></type>
        <definition>IMETHOD Rotation2 Rotation2::Identity</definition>
        <argsstring>()</argsstring>
        <name>Identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1078" column="30" bodyfile="src/frames.inl" bodystart="886" bodyend="888"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Rotation2_1a6a0561775350b56e5f57a87b9274cc65" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref></type>
        <definition>IMETHOD Rotation2 Rotation2::Rot</definition>
        <argsstring>(double angle)</argsstring>
        <name>Rot</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>The Rot... static functions give the value of the appropriate rotation matrix bac. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1085" column="30" bodyfile="src/frames.inl" bodystart="900" bodyend="902"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A 2D <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> class, for conventions see <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref>. For further documentation of the methods see <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> class. </para>
    </detaileddescription>
    <location file="src/frames.hpp" line="1052" column="1" bodyfile="src/frames.hpp" bodystart="1051" bodyend="1093"/>
    <listofallmembers>
      <member refid="classKDL_1_1Rotation2_1ade7b905e59ed018da75357bec8207b66" prot="private" virt="non-virtual"><scope>KDL::Rotation2</scope><name>c</name></member>
      <member refid="classKDL_1_1Rotation2_1a9d12bcb79fbef1f1efe3bca4ebe1eceb" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>Equal</name></member>
      <member refid="classKDL_1_1Rotation2_1a29eefa76dec3acabc4ed3d99612e1b7f" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>GetRot</name></member>
      <member refid="classKDL_1_1Rotation2_1a9574a771c52178e733c431c9b58ea835" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>Identity</name></member>
      <member refid="classKDL_1_1Rotation2_1af69ef92755dab0e10609a069645977cf" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>Inverse</name></member>
      <member refid="classKDL_1_1Rotation2_1a663e69fa1597aa2e14459a2881c16ac3" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>Inverse</name></member>
      <member refid="classKDL_1_1Rotation2_1a3a5339ae85aadda3a2c2f6dd922f1fe8" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>operator()</name></member>
      <member refid="classKDL_1_1Rotation2_1a395f1086334ca19bb771e0e605895a9d" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Rotation2_1ac3360a43a99f9c17949a7703662c7534" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Rotation2_1afde0136496eee42795baf646a373009a" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>operator=</name></member>
      <member refid="classKDL_1_1Rotation2_1a6a0561775350b56e5f57a87b9274cc65" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>Rot</name></member>
      <member refid="classKDL_1_1Rotation2_1a890b05669eacd0f9779d66e636a74d61" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>Rotation2</name></member>
      <member refid="classKDL_1_1Rotation2_1af13f975f4bfc4701eb62f933e7e11d61" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>Rotation2</name></member>
      <member refid="classKDL_1_1Rotation2_1a3f24f9401b3dd67b827cb7308bd6f556" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>Rotation2</name></member>
      <member refid="classKDL_1_1Rotation2_1a0db98f9f643bfee889d1c70ce72b06bd" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>Rotation2</name></member>
      <member refid="classKDL_1_1Rotation2_1ad4496f5010eeaf68ad1fa50820146809" prot="private" virt="non-virtual"><scope>KDL::Rotation2</scope><name>s</name></member>
      <member refid="classKDL_1_1Rotation2_1ae780b003b6e5a040fb98cba32aecc1ae" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>SetIdentity</name></member>
      <member refid="classKDL_1_1Rotation2_1a75aa830c61b9a1174df5c4db7d662c61" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>SetInverse</name></member>
      <member refid="classKDL_1_1Rotation2_1afafdf07b32fd44aaab3ad3854502f4de" prot="public" virt="non-virtual"><scope>KDL::Rotation2</scope><name>SetRot</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
