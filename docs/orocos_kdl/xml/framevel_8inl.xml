<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="framevel_8inl" kind="file" language="C++">
    <compoundname>framevel.inl</compoundname>
    <includedby refid="framevel_8hpp" local="yes">framevel.hpp</includedby>
    <invincdepgraph>
      <node id="22">
        <label>chainiksolverpos_nr.cpp</label>
        <link refid="chainiksolverpos__nr_8cpp"/>
      </node>
      <node id="7">
        <label>kukaLWRtestHCG.cpp</label>
        <link refid="kukaLWRtestHCG_8cpp"/>
      </node>
      <node id="1">
        <label>framevel.inl</label>
        <link refid="framevel_8inl"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>chainjnttojacdotsolver.cpp</label>
        <link refid="chainjnttojacdotsolver_8cpp"/>
      </node>
      <node id="20">
        <label>chainfksolvervel_recursive.cpp</label>
        <link refid="chainfksolvervel__recursive_8cpp"/>
      </node>
      <node id="31">
        <label>chainiksolvervel_pinv.cpp</label>
        <link refid="chainiksolvervel__pinv_8cpp"/>
      </node>
      <node id="11">
        <label>solvertest.hpp</label>
        <link refid="solvertest_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>chainiksolvervel_wdls.cpp</label>
        <link refid="chainiksolvervel__wdls_8cpp"/>
      </node>
      <node id="25">
        <label>jntarrayvel.hpp</label>
        <link refid="jntarrayvel_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>puma560test.cpp</label>
        <link refid="puma560test_8cpp"/>
      </node>
      <node id="29">
        <label>chainiksolverpos_lma.cpp</label>
        <link refid="chainiksolverpos__lma_8cpp"/>
      </node>
      <node id="35">
        <label>chainiksolvervel_pinv_nso.cpp</label>
        <link refid="chainiksolvervel__pinv__nso_8cpp"/>
      </node>
      <node id="21">
        <label>chainiksolverpos_nr.hpp</label>
        <link refid="chainiksolverpos__nr_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>chainfksolverpos_recursive.hpp</label>
        <link refid="chainfksolverpos__recursive_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>chainfksolvervel_recursive.hpp</label>
        <link refid="chainfksolvervel__recursive_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>chainiksolvervel_pinv_nso.hpp</label>
        <link refid="chainiksolvervel__pinv__nso_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>chainiksolvervel_pinv_givens.hpp</label>
        <link refid="chainiksolvervel__pinv__givens_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>chainiksolverpos_lma.hpp</label>
        <link refid="chainiksolverpos__lma_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>chainfksolverpos_recursive.cpp</label>
        <link refid="chainfksolverpos__recursive_8cpp"/>
      </node>
      <node id="6">
        <label>kukaLWRtestDHnew.cpp</label>
        <link refid="kukaLWRtestDHnew_8cpp"/>
      </node>
      <node id="16">
        <label>jacobiandottest.hpp</label>
        <link refid="jacobiandottest_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>chainiksolverpos_nr_jl.cpp</label>
        <link refid="chainiksolverpos__nr__jl_8cpp"/>
      </node>
      <node id="33">
        <label>chainiksolvervel_pinv_givens.cpp</label>
        <link refid="chainiksolvervel__pinv__givens_8cpp"/>
      </node>
      <node id="9">
        <label>chainexternalwrenchestimator.hpp</label>
        <link refid="chainexternalwrenchestimator_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>framevel.hpp</label>
        <link refid="framevel_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>chainiksolverpos_lma_demo.cpp</label>
        <link refid="chainiksolverpos__lma__demo_8cpp"/>
      </node>
      <node id="26">
        <label>jntarrayacc.hpp</label>
        <link refid="jntarrayacc_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>kinfamtest.cpp</label>
        <link refid="kinfamtest_8cpp"/>
      </node>
      <node id="3">
        <label>chainfksolver.hpp</label>
        <link refid="chainfksolver_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>chainjnttojacdotsolver.hpp</label>
        <link refid="chainjnttojacdotsolver_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>chainiksolvervel_pinv.hpp</label>
        <link refid="chainiksolvervel__pinv_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>solvertest.cpp</label>
        <link refid="solvertest_8cpp"/>
      </node>
      <node id="39">
        <label>jntarrayvel.cpp</label>
        <link refid="jntarrayvel_8cpp"/>
      </node>
      <node id="27">
        <label>chainiksolver.hpp</label>
        <link refid="chainiksolver_8hpp"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>chainiksolvervel_wdls.hpp</label>
        <link refid="chainiksolvervel__wdls_8hpp"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>jacobiandottest.cpp</label>
        <link refid="jacobiandottest_8cpp"/>
      </node>
      <node id="23">
        <label>chainiksolverpos_nr_jl.hpp</label>
        <link refid="chainiksolverpos__nr__jl_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>chainexternalwrenchestimator.cpp</label>
        <link refid="chainexternalwrenchestimator_8cpp"/>
      </node>
      <node id="40">
        <label>framevel.cpp</label>
        <link refid="framevel_8cpp"/>
      </node>
      <node id="38">
        <label>jntarrayacc.cpp</label>
        <link refid="jntarrayacc_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="framevel_8inl_1ac9390fd1e22ca2364e2d7bc045f5b419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> doubleVel</type>
        <definition>IMETHOD doubleVel dot</definition>
        <argsstring>(const Vector &amp;lhs, const VectorVel &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="501" column="19" bodyfile="src/framevel.inl" bodystart="501" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1adacd080306299b8680f1bf2b7bff1030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> doubleVel</type>
        <definition>IMETHOD doubleVel dot</definition>
        <argsstring>(const VectorVel &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="498" column="19" bodyfile="src/framevel.inl" bodystart="498" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> doubleVel</type>
        <definition>IMETHOD doubleVel dot</definition>
        <argsstring>(const VectorVel &amp;lhs, const VectorVel &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="495" column="19" bodyfile="src/framevel.inl" bodystart="495" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a9082cc405026060c8b553430544a2cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const Frame &amp;r1, const FrameVel &amp;r2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const Frame &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="78" column="6" bodyfile="src/framevel.inl" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1abbcf61eb209092f2a7447a4d5a2bfdf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const FrameVel &amp;r1, const Frame &amp;r2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Frame &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="81" column="6" bodyfile="src/framevel.inl" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const FrameVel &amp;r1, const FrameVel &amp;r2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="75" column="6" bodyfile="src/framevel.inl" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1aeda05130347a56cc656854a26d9ce2a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const Rotation &amp;r1, const RotationVel &amp;r2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const Rotation &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="407" column="6" bodyfile="src/framevel.inl" bodystart="407" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a932d340abdc249f667fc6583516db76f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const RotationVel &amp;r1, const Rotation &amp;r2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Rotation &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="410" column="6" bodyfile="src/framevel.inl" bodystart="410" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1af1f0492ef92bcd6a5061e287867356de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const RotationVel &amp;r1, const RotationVel &amp;r2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="404" column="6" bodyfile="src/framevel.inl" bodystart="404" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a4a4f0a2a411dfee26a2a8b3829064251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const Twist &amp;a, const TwistVel &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="452" column="6" bodyfile="src/framevel.inl" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a92aa0809085c114632767a176f80e999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const TwistVel &amp;a, const Twist &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="456" column="6" bodyfile="src/framevel.inl" bodystart="456" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a4148591885417fd3088c9ea376327aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const TwistVel &amp;a, const TwistVel &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="448" column="6" bodyfile="src/framevel.inl" bodystart="448" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a0e57cc06661c81464f1d3453484b19c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const Vector &amp;r1, const VectorVel &amp;r2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="363" column="6" bodyfile="src/framevel.inl" bodystart="363" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a255cde0e7fc0d2a66c26e5ea9a75eb63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const VectorVel &amp;r1, const Vector &amp;r2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="366" column="6" bodyfile="src/framevel.inl" bodystart="366" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a65db533288824ff8b59bac2486fb81ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const VectorVel &amp;r1, const VectorVel &amp;r2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="360" column="6" bodyfile="src/framevel.inl" bodystart="360" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a9b422bec85757298be35b8ee8412f937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Frame &amp;r1, const FrameVel &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Frame &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="103" column="6" bodyfile="src/framevel.inl" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a5e2722f7d2da29a9c6956dd230d6950a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const FrameVel &amp;r1, const Frame &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Frame &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="114" column="6" bodyfile="src/framevel.inl" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const FrameVel &amp;r1, const FrameVel &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="92" column="6" bodyfile="src/framevel.inl" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a284b31ffd824c5e7025496a9c0e9bdb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Rotation &amp;r1, const RotationVel &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Rotation &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="432" column="6" bodyfile="src/framevel.inl" bodystart="432" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a596e653ce001a8283afc835aad69a282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const RotationVel &amp;r1, const Rotation &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Rotation &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="443" column="6" bodyfile="src/framevel.inl" bodystart="443" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a75a2974b5c90121e0a98747f83493fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const RotationVel &amp;r1, const RotationVel &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="421" column="6" bodyfile="src/framevel.inl" bodystart="421" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1aee0c9994ee9606a97790249ae57130f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Twist &amp;r1, const TwistVel &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="479" column="6" bodyfile="src/framevel.inl" bodystart="479" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a9b7d6e43a7fa83de3e7256bd0a5504a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const TwistVel &amp;a, const TwistVel &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="468" column="6" bodyfile="src/framevel.inl" bodystart="468" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a106b050c78a0ccc92c5f742e5506e50c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const TwistVel &amp;r1, const Twist &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="490" column="6" bodyfile="src/framevel.inl" bodystart="490" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1ad052081b751a0f63443d3923cb2e1ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Vector &amp;r1, const VectorVel &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="388" column="6" bodyfile="src/framevel.inl" bodystart="388" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1abfcd577e4bec35dc2f1a197760d79d80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const VectorVel &amp;r1, const Vector &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="399" column="6" bodyfile="src/framevel.inl" bodystart="399" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a7b607236d8ad8f512fdfcbaf834d5e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const VectorVel &amp;r1, const VectorVel &amp;r2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="377" column="6" bodyfile="src/framevel.inl" bodystart="377" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1ac4966917e36119bbc17d79e8b369a7d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TwistVel</type>
        <definition>TwistVel operator*</definition>
        <argsstring>(const doubleVel &amp;lhs, const TwistVel &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const doubleVel &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="563" column="10" bodyfile="src/framevel.inl" bodystart="563" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1ae4d1f168669646c284266973e7d196af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator*</definition>
        <argsstring>(const doubleVel &amp;r1, const VectorVel &amp;r2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const doubleVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="305" column="11" bodyfile="src/framevel.inl" bodystart="305" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1aaafede3e557ae5a4fa67e2d3629f47ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FrameVel</type>
        <definition>FrameVel operator*</definition>
        <argsstring>(const Frame &amp;lhs, const FrameVel &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Frame &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="41" column="10" bodyfile="src/framevel.inl" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a885aa2f165dc9a4ed15aa667942f4528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FrameVel</type>
        <definition>FrameVel operator*</definition>
        <argsstring>(const FrameVel &amp;lhs, const Frame &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Frame &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="37" column="10" bodyfile="src/framevel.inl" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FrameVel</type>
        <definition>FrameVel operator*</definition>
        <argsstring>(const FrameVel &amp;lhs, const FrameVel &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="33" column="10" bodyfile="src/framevel.inl" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1afaa2bb35e56cf49ca16850fa85ded1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator*</definition>
        <argsstring>(const Rotation &amp;R, const VectorVel &amp;x)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Rotation &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="321" column="11" bodyfile="src/framevel.inl" bodystart="321" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a4c35aa3b5e14b4509ccf84d2927ea5cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RotationVel</type>
        <definition>RotationVel operator*</definition>
        <argsstring>(const Rotation &amp;r1, const RotationVel &amp;r2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Rotation &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="133" column="13" bodyfile="src/framevel.inl" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a5079a683a52fe350d3c3dcebd93e59b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RotationVel</type>
        <definition>RotationVel operator*</definition>
        <argsstring>(const RotationVel &amp;r1, const Rotation &amp;r2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Rotation &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="137" column="13" bodyfile="src/framevel.inl" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1ab953df776c9fa0df68eb6f42e9fc1bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RotationVel</type>
        <definition>RotationVel operator*</definition>
        <argsstring>(const RotationVel &amp;r1, const RotationVel &amp;r2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="129" column="13" bodyfile="src/framevel.inl" bodystart="129" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a49bf02a2bf61674395e8fee267c1a867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TwistVel</type>
        <definition>TwistVel operator*</definition>
        <argsstring>(const TwistVel &amp;lhs, const doubleVel &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const doubleVel &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="558" column="10" bodyfile="src/framevel.inl" bodystart="558" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1adde1e133f2008c1cc6636c47ca1213f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TwistVel</type>
        <definition>TwistVel operator*</definition>
        <argsstring>(const TwistVel &amp;lhs, double rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="542" column="10" bodyfile="src/framevel.inl" bodystart="542" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1ac0284c801afbdce611ba0f4bf01e87c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator*</definition>
        <argsstring>(const Vector &amp;r1, const VectorVel &amp;r2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="288" column="11" bodyfile="src/framevel.inl" bodystart="288" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a2b2d801e05b04a5ff7a289d64898806f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator*</definition>
        <argsstring>(const VectorVel &amp;r1, const Vector &amp;r2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="284" column="11" bodyfile="src/framevel.inl" bodystart="284" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a60a05c4c14a243f9705bf559e1d43b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator*</definition>
        <argsstring>(const VectorVel &amp;r1, const VectorVel &amp;r2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="280" column="11" bodyfile="src/framevel.inl" bodystart="280" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a8f7604b31d0992f031f223bd72a9f536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator*</definition>
        <argsstring>(const VectorVel &amp;r1, double r2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="299" column="11" bodyfile="src/framevel.inl" bodystart="299" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a0baa3c7a18a93d3f623c570f7dbbe4b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator*</definition>
        <argsstring>(const VectorVel &amp;r2, const doubleVel &amp;r1)</argsstring>
        <name>operator*</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>const doubleVel &amp;</type>
          <declname>r1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="309" column="11" bodyfile="src/framevel.inl" bodystart="309" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a4b1ea516875d4889c28be34b71833194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TwistVel</type>
        <definition>TwistVel operator*</definition>
        <argsstring>(double lhs, const TwistVel &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="547" column="10" bodyfile="src/framevel.inl" bodystart="547" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a4e53cebef732328c7649408f1cda01e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator*</definition>
        <argsstring>(double r1, const VectorVel &amp;r2)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="295" column="11" bodyfile="src/framevel.inl" bodystart="295" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a4e64c3d4d6ee2a921edb11cac89ea65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TwistVel</type>
        <definition>TwistVel operator+</definition>
        <argsstring>(const TwistVel &amp;lhs, const TwistVel &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="576" column="10" bodyfile="src/framevel.inl" bodystart="576" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a98791d684da6186f76635356860d8566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator+</definition>
        <argsstring>(const Vector &amp;r1, const VectorVel &amp;r2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="261" column="11" bodyfile="src/framevel.inl" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1aebbd5c8d4349f582119c589a086eddc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator+</definition>
        <argsstring>(const VectorVel &amp;r1, const Vector &amp;r2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="253" column="11" bodyfile="src/framevel.inl" bodystart="253" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a742c31bc54c7b0935eaaa644953285b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator+</definition>
        <argsstring>(const VectorVel &amp;r1, const VectorVel &amp;r2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="245" column="11" bodyfile="src/framevel.inl" bodystart="245" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a808e063a233100f6f926c2eb5365fb8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TwistVel</type>
        <definition>TwistVel operator-</definition>
        <argsstring>(const TwistVel &amp;arg)</argsstring>
        <name>operator-</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="587" column="10" bodyfile="src/framevel.inl" bodystart="587" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a25c9136cb151bff132f5518dd378c028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TwistVel</type>
        <definition>TwistVel operator-</definition>
        <argsstring>(const TwistVel &amp;lhs, const TwistVel &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="581" column="10" bodyfile="src/framevel.inl" bodystart="581" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a14461b135063182a52dccea5f93e2a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator-</definition>
        <argsstring>(const Vector &amp;r1, const VectorVel &amp;r2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="265" column="11" bodyfile="src/framevel.inl" bodystart="265" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1abc3f7b2e4ff3289d0b8ac3678c4b4744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator-</definition>
        <argsstring>(const VectorVel &amp;r)</argsstring>
        <name>operator-</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="270" column="11" bodyfile="src/framevel.inl" bodystart="270" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a0e1ac37993478e0d456c3eede8a2405e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator-</definition>
        <argsstring>(const VectorVel &amp;r1, const Vector &amp;r2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="257" column="11" bodyfile="src/framevel.inl" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a388e3cceebf6356ac0be4ab004f967e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator-</definition>
        <argsstring>(const VectorVel &amp;r1, const VectorVel &amp;r2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="249" column="11" bodyfile="src/framevel.inl" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a851a9366c8edf5d2408acb8b23213a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TwistVel</type>
        <definition>TwistVel operator/</definition>
        <argsstring>(const TwistVel &amp;lhs, const doubleVel &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const doubleVel &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="568" column="10" bodyfile="src/framevel.inl" bodystart="568" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a74969b2abf09079d49d8b5c4a5f315f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>TwistVel</type>
        <definition>TwistVel operator/</definition>
        <argsstring>(const TwistVel &amp;lhs, double rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="552" column="10" bodyfile="src/framevel.inl" bodystart="552" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a2999e16d0ab35872ea5ab31e02288df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator/</definition>
        <argsstring>(const VectorVel &amp;r1, double r2)</argsstring>
        <name>operator/</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="313" column="11" bodyfile="src/framevel.inl" bodystart="313" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a39917427f4058e722ae43db23556970e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VectorVel</type>
        <definition>VectorVel operator/</definition>
        <argsstring>(const VectorVel &amp;r2, const doubleVel &amp;r1)</argsstring>
        <name>operator/</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>const doubleVel &amp;</type>
          <declname>r1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="317" column="11" bodyfile="src/framevel.inl" bodystart="317" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a32b5cfd2afecf0a521bd54baf59cd447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Frame &amp;r1, const FrameVel &amp;r2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const Frame &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="95" column="6" bodyfile="src/framevel.inl" bodystart="95" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1aa5a7142ba3421402c0ac5e93472710b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const FrameVel &amp;r1, const Frame &amp;r2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Frame &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="106" column="6" bodyfile="src/framevel.inl" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const FrameVel &amp;r1, const FrameVel &amp;r2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const FrameVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="84" column="6" bodyfile="src/framevel.inl" bodystart="84" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1acebb3ede907321a775d68122dd1a40a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Rotation &amp;r1, const RotationVel &amp;r2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const Rotation &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="424" column="6" bodyfile="src/framevel.inl" bodystart="424" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a7a9ee0e5006279864eb5b678e6d044e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const RotationVel &amp;r1, const Rotation &amp;r2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Rotation &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="435" column="6" bodyfile="src/framevel.inl" bodystart="435" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a152d12f624b6be15cedf1556510f5eb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const RotationVel &amp;r1, const RotationVel &amp;r2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const RotationVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="413" column="6" bodyfile="src/framevel.inl" bodystart="413" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1ad48f356f94ae241b01967ed496eff092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Twist &amp;a, const TwistVel &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const Twist &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="471" column="6" bodyfile="src/framevel.inl" bodystart="471" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1ab27d55e1029536b86f970d66c85a6dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const TwistVel &amp;a, const TwistVel &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="460" column="6" bodyfile="src/framevel.inl" bodystart="460" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a243550519ca17e63431afda81480c0e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const TwistVel &amp;r1, const Twist &amp;r2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const TwistVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Twist &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="482" column="6" bodyfile="src/framevel.inl" bodystart="482" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a8140686eeba5a07d9bda1df1d630658c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Vector &amp;r1, const VectorVel &amp;r2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="380" column="6" bodyfile="src/framevel.inl" bodystart="380" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1abf669d09bce84107e0ba06542a89cb6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const VectorVel &amp;r1, const Vector &amp;r2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const Vector &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="391" column="6" bodyfile="src/framevel.inl" bodystart="391" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a0edc115976f17c2b43c65887a60f3e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const VectorVel &amp;r1, const VectorVel &amp;r2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const VectorVel &amp;</type>
          <declname>r2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="369" column="6" bodyfile="src/framevel.inl" bodystart="369" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a1c39182fffa2e50952d2969f2125032e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetToZero</definition>
        <argsstring>(TwistVel &amp;v)</argsstring>
        <name>SetToZero</name>
        <param>
          <type>TwistVel &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="592" column="6" bodyfile="src/framevel.inl" bodystart="592" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="framevel_8inl_1a16056f24ee86efdc98656138808e16e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetToZero</definition>
        <argsstring>(VectorVel &amp;v)</argsstring>
        <name>SetToZero</name>
        <param>
          <type>VectorVel &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.inl" line="274" column="6" bodyfile="src/framevel.inl" bodystart="274" bodyend="277"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>\file<sp/><sp/></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>provides<sp/>inline<sp/>functions<sp/>of<sp/>rframes.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>\author<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Erwin<sp/>Aertbelien,<sp/>Div.<sp/>PMA,<sp/>Dep.<sp/>of<sp/>Mech.<sp/>Eng.,<sp/>K.U.Leuven</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>\version<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>ORO_Geometry<sp/>V0.2</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/>\par<sp/>History</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>$log$</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>\par<sp/>Release</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>$Id:<sp/>rframes.inl,v<sp/>1.1.1.1<sp/>2002/08/26<sp/>14:14:21<sp/>rmoreas<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>$Name:<sp/><sp/>$<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Methods<sp/>and<sp/>operators<sp/>related<sp/>to<sp/>FrameVelVel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>They<sp/>all<sp/>delegate<sp/>most<sp/>of<sp/>the<sp/>work<sp/>to<sp/>RotationVelVel<sp/>and<sp/>VectorVelVel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classKDL_1_1FrameVel_1a156f686cb031938448d1c017b9efeb9b" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref>&amp;<sp/>FrameVel::operator<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref>&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>M=arg.<ref refid="classKDL_1_1FrameVel_1ade8978389940d4c483fad35d9146f3ac" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>p=arg.<ref refid="classKDL_1_1FrameVel_1a6f35dccc9d7716199e75c9cef0125af2" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="classKDL_1_1FrameVel_1ae07b0ea4771ae617f84ba0cc3a5a5941" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref><sp/>FrameVel::Identity()<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref>(RotationVel::Identity(),VectorVel::Zero());</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" refkind="member"><highlight class="normal">FrameVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FrameVel(lhs.M*rhs.M,lhs.M*rhs.p+lhs.p);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37" refid="framevel_8inl_1a885aa2f165dc9a4ed15aa667942f4528" refkind="member"><highlight class="normal">FrameVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FrameVel(lhs.M*rhs.M,lhs.M*rhs.p+lhs.p);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41" refid="framevel_8inl_1aaafede3e557ae5a4fa67e2d3629f47ea" refkind="member"><highlight class="normal">FrameVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FrameVel(lhs.M*rhs.M<sp/>,<sp/>lhs.M*rhs.p+lhs.p<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classKDL_1_1FrameVel_1ad1aa4559b85572a34dc732bfe8a90736" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">FrameVel::operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="47"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M*arg+p;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50" refid="classKDL_1_1FrameVel_1a1b628bbb6a810c492366fe919bb26b82" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">FrameVel::operator *</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="51"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M*arg+p;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classKDL_1_1FrameVel_1a9b1aed44efabc0ee3837770f5a2ba375" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/>FrameVel::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="56"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M.Inverse(arg-p);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="classKDL_1_1FrameVel_1a4bbf37d0509a66dbb133a5fb0390ef4b" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/>FrameVel::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="61"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M.Inverse(arg-p);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classKDL_1_1FrameVel_1adddccc935a2c110febf266ad7803af73" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref><sp/>FrameVel::Inverse()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="66"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref>(M.Inverse(),-M.Inverse(p));</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="classKDL_1_1FrameVel_1a4be56391f662d0f2fce3eb8cb357d786" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref>&amp;<sp/>FrameVel::operator<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref>&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>M<sp/>=<sp/>arg.<ref refid="classKDL_1_1Frame_1a367668b3344ccfd50410ccc1ed30fa6f" kindref="member">M</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>arg.<ref refid="classKDL_1_1Frame_1abc00c3817f7baa985b67077479617866" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75" refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>r2,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.M,r2.M,eps)<sp/>&amp;&amp;<sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.p,r2.p,eps));</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78" refid="framevel_8inl_1a9082cc405026060c8b553430544a2cd0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>r2,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.M,r2.M,eps)<sp/>&amp;&amp;<sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.p,r2.p,eps));</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81" refid="framevel_8inl_1abbcf61eb209092f2a7447a4d5a2bfdf2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>r2,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.M,r2.M,eps)<sp/>&amp;&amp;<sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.p,r2.p,eps));</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84" refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1,<sp/>r2);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(r1.p<sp/>==<sp/>r2.p<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.M<sp/>==<sp/>r2.M<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92" refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(r1,r2);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95" refid="framevel_8inl_1a32b5cfd2afecf0a521bd54baf59cd447" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1,<sp/>r2);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(r1.p<sp/>==<sp/>r2.p<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.M<sp/>==<sp/>r2.M<sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103" refid="framevel_8inl_1a9b422bec85757298be35b8ee8412f937" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(r1,r2);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106" refid="framevel_8inl_1aa5a7142ba3421402c0ac5e93472710b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1,<sp/>r2);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(r1.p<sp/>==<sp/>r2.p<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.M<sp/>==<sp/>r2.M<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114" refid="framevel_8inl_1a5e2722f7d2da29a9c6956dd230d6950a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FrameVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Frame&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(r1,r2);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="classKDL_1_1FrameVel_1a869e1673f01b4f03bceab27383a47dc1" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref><sp/>FrameVel::GetFrame()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref>(M.R,p.p);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classKDL_1_1FrameVel_1a51b70e2a7dc3199bd9ab63606963f36a" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/>FrameVel::GetTwist()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>(p.v,M.w);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="framevel_8inl_1ab953df776c9fa0df68eb6f42e9fc1bb2" refkind="member"><highlight class="normal">RotationVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator* </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RotationVel(<sp/>r1.R*r2.R,<sp/>r1.w<sp/>+<sp/>r1.R*r2.w<sp/>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="framevel_8inl_1a4c35aa3b5e14b4509ccf84d2927ea5cb" refkind="member"><highlight class="normal">RotationVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator* </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RotationVel(<sp/>r1*r2.R,<sp/>r1*r2.w<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="framevel_8inl_1a5079a683a52fe350d3c3dcebd93e59b5" refkind="member"><highlight class="normal">RotationVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator* </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RotationVel(<sp/>r1.R*r2,<sp/>r1.w<sp/>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="classKDL_1_1RotationVel_1a36978b5fbc14047fdba3f10ea7d78daf" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref>&amp;<sp/>RotationVel::operator<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref>&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R=arg.<ref refid="classKDL_1_1RotationVel_1abedea5aebf8b52c940c2fe0d31888fda" kindref="member">R</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w=arg.<ref refid="classKDL_1_1RotationVel_1abb9af995b6b6e823d84f730c85d337e5" kindref="member">w</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146" refid="classKDL_1_1RotationVel_1a6b913e295aac5a439995d99f6a04b627" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref>&amp;<sp/>RotationVel::operator<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref>&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>R=arg;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>w=Vector::Zero();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="classKDL_1_1RotationVel_1a460c61bcf94b9782695f7adc3324376a" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/><sp/><sp/>RotationVel::UnitX()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>(R.UnitX(),w*R.UnitX());<sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="classKDL_1_1RotationVel_1a1185bac322af677712a8cec6e3070557" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/><sp/><sp/>RotationVel::UnitY()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>(R.UnitY(),w*R.UnitY());<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="classKDL_1_1RotationVel_1a8f5b07d6f26e9cebacfea5ef0305c3e6" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/><sp/><sp/>RotationVel::UnitZ()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>(R.UnitZ(),w*R.UnitZ());<sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="classKDL_1_1RotationVel_1a4f04b2e1f5b6bc15f75cc3430644324e" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref><sp/>RotationVel::Identity()<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref>(Rotation::Identity(),Vector::Zero());</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="classKDL_1_1RotationVel_1a3b08ee648757e2cebc6a19fdd508ce9f" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref><sp/>RotationVel::Inverse()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref>(R.Inverse(),-R.Inverse(w));</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="classKDL_1_1RotationVel_1a90f8b6dc2b81e7ffd888b8fc0926d5d9" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/>RotationVel::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>tmp=R.Inverse(arg.<ref refid="classKDL_1_1VectorVel_1a34b253c5a762fe8c4f8c8718578156d1" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>(tmp,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R.Inverse(arg.<ref refid="classKDL_1_1VectorVel_1a3c4ed9d12d84f39153b5be985436214e" kindref="member">v</ref>-w*arg.<ref refid="classKDL_1_1VectorVel_1a34b253c5a762fe8c4f8c8718578156d1" kindref="member">p</ref>)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="classKDL_1_1RotationVel_1a59526e654b12f2aebeb6a28687f03e12" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/>RotationVel::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>tmp=R.Inverse(arg);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>(tmp,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R.Inverse(-w*arg)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="classKDL_1_1RotationVel_1ae6b986c0c33460438978b786ffb18867" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">RotationVel::operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>tmp=R*arg.<ref refid="classKDL_1_1VectorVel_1a34b253c5a762fe8c4f8c8718578156d1" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>(tmp,w*tmp+R*arg.<ref refid="classKDL_1_1VectorVel_1a3c4ed9d12d84f39153b5be985436214e" kindref="member">v</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="classKDL_1_1RotationVel_1a0f0a14113b94df7371adc7010b98c3d7" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">RotationVel::operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>tmp=R*arg;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>(tmp,w*tmp);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=<sp/>Rotations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Rot...<sp/>static<sp/>functions<sp/>give<sp/>the<sp/>value<sp/>of<sp/>the<sp/>appropriate<sp/>rotation<sp/>matrix<sp/>back.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>DoRot...<sp/>functions<sp/>apply<sp/>a<sp/>rotation<sp/>R<sp/>to<sp/>*this,such<sp/>that<sp/>*this<sp/>=<sp/>*this<sp/>*<sp/>R.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="classKDL_1_1RotationVel_1ab46bacd9316fbce13fed525c1e6c8223" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RotationVel::DoRotX(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rall1d" kindref="compound">doubleVel</ref>&amp;<sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>w+=R*<ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>(angle.<ref refid="classKDL_1_1Rall1d_1a297cab318803ef445225ecf2b828f297" kindref="member">grad</ref>,0,0);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>R.DoRotX(angle.<ref refid="classKDL_1_1Rall1d_1ab541a04f815b080f3fca5b7d8afdd7c1" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208" refid="classKDL_1_1RotationVel_1a5093811dbac9b5dbbd717bb241376f24" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref><sp/>RotationVel::RotX(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rall1d" kindref="compound">doubleVel</ref>&amp;<sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref>(Rotation::RotX(angle.<ref refid="classKDL_1_1Rall1d_1ab541a04f815b080f3fca5b7d8afdd7c1" kindref="member">t</ref>),<ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>(angle.<ref refid="classKDL_1_1Rall1d_1a297cab318803ef445225ecf2b828f297" kindref="member">grad</ref>,0,0));</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="classKDL_1_1RotationVel_1ab65743af4d6caa11f500b5aa2023d410" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RotationVel::DoRotY(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rall1d" kindref="compound">doubleVel</ref>&amp;<sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>w+=R*<ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>(0,angle.<ref refid="classKDL_1_1Rall1d_1a297cab318803ef445225ecf2b828f297" kindref="member">grad</ref>,0);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>R.DoRotY(angle.<ref refid="classKDL_1_1Rall1d_1ab541a04f815b080f3fca5b7d8afdd7c1" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216" refid="classKDL_1_1RotationVel_1ace38098fd10b8a8ccbe5abbb3198d5e9" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref><sp/>RotationVel::RotY(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rall1d" kindref="compound">doubleVel</ref>&amp;<sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref>(Rotation::RotX(angle.<ref refid="classKDL_1_1Rall1d_1ab541a04f815b080f3fca5b7d8afdd7c1" kindref="member">t</ref>),<ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>(0,angle.<ref refid="classKDL_1_1Rall1d_1a297cab318803ef445225ecf2b828f297" kindref="member">grad</ref>,0));</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="classKDL_1_1RotationVel_1ac37639bf292a7076025dfb382f1ee874" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RotationVel::DoRotZ(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rall1d" kindref="compound">doubleVel</ref>&amp;<sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>w+=R*<ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>(0,0,angle.<ref refid="classKDL_1_1Rall1d_1a297cab318803ef445225ecf2b828f297" kindref="member">grad</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>R.DoRotZ(angle.<ref refid="classKDL_1_1Rall1d_1ab541a04f815b080f3fca5b7d8afdd7c1" kindref="member">t</ref>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224" refid="classKDL_1_1RotationVel_1a22630379ffe864673bb003adf85a4483" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref><sp/>RotationVel::RotZ(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rall1d" kindref="compound">doubleVel</ref>&amp;<sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref>(Rotation::RotZ(angle.<ref refid="classKDL_1_1Rall1d_1ab541a04f815b080f3fca5b7d8afdd7c1" kindref="member">t</ref>),<ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>(0,0,angle.<ref refid="classKDL_1_1Rall1d_1a297cab318803ef445225ecf2b828f297" kindref="member">grad</ref>));</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="classKDL_1_1RotationVel_1a656cd1c47442d72f3c2fc9be017558f8" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref><sp/><ref refid="frames_8inl_1ae6d17b27737370d8ce326fdac8e1756a" kindref="member">RotationVel::Rot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>rotvec,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rall1d" kindref="compound">doubleVel</ref>&amp;<sp/>angle)<sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rotvec<sp/>has<sp/>arbitrary<sp/>norm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rotation<sp/>around<sp/>a<sp/>constant<sp/>vector<sp/>!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>v(rotvec);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>v.<ref refid="classKDL_1_1Vector_1a82226cbbe86665615c3548cad5d8855f" kindref="member">Normalize</ref>();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref>(Rotation::Rot2(v,angle.<ref refid="classKDL_1_1Rall1d_1ab541a04f815b080f3fca5b7d8afdd7c1" kindref="member">t</ref>),v*angle.<ref refid="classKDL_1_1Rall1d_1a297cab318803ef445225ecf2b828f297" kindref="member">grad</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="classKDL_1_1RotationVel_1abea45a6dabc8afd7bce83055cf5265f5" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref><sp/>RotationVel::Rot2(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>rotvec,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Rall1d" kindref="compound">doubleVel</ref>&amp;<sp/>angle)<sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rotvec<sp/>is<sp/>normalized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref>(Rotation::Rot2(rotvec,angle.<ref refid="classKDL_1_1Rall1d_1ab541a04f815b080f3fca5b7d8afdd7c1" kindref="member">t</ref>),rotvec*angle.<ref refid="classKDL_1_1Rall1d_1a297cab318803ef445225ecf2b828f297" kindref="member">grad</ref>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="framevel_8inl_1a742c31bc54c7b0935eaaa644953285b0" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a742c31bc54c7b0935eaaa644953285b0" kindref="member">operator + </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1.p+r2.p,r1.v+r2.v);</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="framevel_8inl_1a388e3cceebf6356ac0be4ab004f967e3" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a388e3cceebf6356ac0be4ab004f967e3" kindref="member">operator - </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1.p-r2.p,r1.v-r2.v);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="framevel_8inl_1aebbd5c8d4349f582119c589a086eddc8" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a742c31bc54c7b0935eaaa644953285b0" kindref="member">operator + </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1.p+r2,r1.v);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="framevel_8inl_1a0e1ac37993478e0d456c3eede8a2405e" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a388e3cceebf6356ac0be4ab004f967e3" kindref="member">operator - </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1.p-r2,r1.v);</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="framevel_8inl_1a98791d684da6186f76635356860d8566" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a742c31bc54c7b0935eaaa644953285b0" kindref="member">operator + </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1+r2.p,r2.v);</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="framevel_8inl_1a14461b135063182a52dccea5f93e2a27" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a388e3cceebf6356ac0be4ab004f967e3" kindref="member">operator - </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1-r2.p,-r2.v);</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unary<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="framevel_8inl_1abc3f7b2e4ff3289d0b8ac3678c4b4744" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a388e3cceebf6356ac0be4ab004f967e3" kindref="member">operator - </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(-r.p,-r.v);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="framevel_8inl_1a16056f24ee86efdc98656138808e16e8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a16056f24ee86efdc98656138808e16e8" kindref="member">SetToZero</ref>(VectorVel&amp;<sp/>v){</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="framevel_8inl_1a16056f24ee86efdc98656138808e16e8" kindref="member">SetToZero</ref>(v.p);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="framevel_8inl_1a16056f24ee86efdc98656138808e16e8" kindref="member">SetToZero</ref>(v.v);</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cross<sp/>prod.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="framevel_8inl_1a60a05c4c14a243f9705bf559e1d43b58" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1.p*r2.p,<sp/>r1.p*r2.v+r1.v*r2.p);</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="framevel_8inl_1a2b2d801e05b04a5ff7a289d64898806f" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1.p*r2,<sp/>r1.v*r2);</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="framevel_8inl_1ac0284c801afbdce611ba0f4bf01e87c5" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1*r2.p,<sp/>r1*r2.v);</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>scalar<sp/>mult.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="framevel_8inl_1a4e53cebef732328c7649408f1cda01e2" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator * </ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1*r2.p,<sp/>r1*r2.v);</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="framevel_8inl_1a8f7604b31d0992f031f223bd72a9f536" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1.p*r2,<sp/>r1.v*r2);</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="framevel_8inl_1ae4d1f168669646c284266973e7d196af" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref>&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1.t*r2.p,<sp/>r1.t*r2.v<sp/>+<sp/>r1.grad*r2.p);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="framevel_8inl_1a0baa3c7a18a93d3f623c570f7dbbe4b0" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref>&amp;<sp/>r1)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1.t*r2.p,<sp/>r1.t*r2.v<sp/>+<sp/>r1.grad*r2.p);</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="framevel_8inl_1a2999e16d0ab35872ea5ab31e02288df8" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a2999e16d0ab35872ea5ab31e02288df8" kindref="member">operator / </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r1.p/r2,<sp/>r1.v/r2);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="framevel_8inl_1a39917427f4058e722ae43db23556970e" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a2999e16d0ab35872ea5ab31e02288df8" kindref="member">operator / </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref>&amp;<sp/>r1)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(r2.p/r1.t,<sp/>r2.v/r1.t<sp/>-<sp/>r2.p*r1.grad/r1.t/r1.t);</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="framevel_8inl_1afaa2bb35e56cf49ca16850fa85ded1d7" refkind="member"><highlight class="normal">VectorVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>R,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VectorVel(R*x.p,R*x.v);</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="classKDL_1_1VectorVel_1a80167d51e0e21173ea0e8d957eaabd72" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>&amp;<sp/>VectorVel::operator<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>p=arg.<ref refid="classKDL_1_1VectorVel_1a34b253c5a762fe8c4f8c8718578156d1" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>v=arg.<ref refid="classKDL_1_1VectorVel_1a3c4ed9d12d84f39153b5be985436214e" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330" refid="classKDL_1_1VectorVel_1aa05a92ea1d8d0fcf17d90a11adfe0f61" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>&amp;<sp/>VectorVel::operator<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>p=arg;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>v=Vector::Zero();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335" refid="classKDL_1_1VectorVel_1afa59012d44981c5d76f05ea8bed3ffa9" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>&amp;<sp/>VectorVel::operator<sp/>+=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>p+=arg.<ref refid="classKDL_1_1VectorVel_1a34b253c5a762fe8c4f8c8718578156d1" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>v+=arg.<ref refid="classKDL_1_1VectorVel_1a3c4ed9d12d84f39153b5be985436214e" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340" refid="classKDL_1_1VectorVel_1ac7047032ef5e65789252fab619e8f760" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>&amp;<sp/>VectorVel::operator<sp/>-=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>&amp;<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>p-=arg.<ref refid="classKDL_1_1VectorVel_1a34b253c5a762fe8c4f8c8718578156d1" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>v-=arg.<ref refid="classKDL_1_1VectorVel_1a3c4ed9d12d84f39153b5be985436214e" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="classKDL_1_1VectorVel_1a099bf8c8e23409321451ac3498d5dce1" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref><sp/>VectorVel::Zero()<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>(Vector::Zero(),Vector::Zero());</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349" refid="classKDL_1_1VectorVel_1aee631b59b42bf30d9eed5f16a2ff1ef8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VectorVel::ReverseSign()<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>p.ReverseSign();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>v.ReverseSign();</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353" refid="classKDL_1_1VectorVel_1ab373cf3392d99d471fad992b4d0db529" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Rall1d" kindref="compound">doubleVel</ref><sp/><ref refid="namespaceKDL_1a04a201d7eeb1d5e1ebcea1d297efe9a4" kindref="member">VectorVel::Norm</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>p.Norm(eps);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>eps)<sp/></highlight><highlight class="comment">//<sp/>Setting<sp/>norm<sp/><sp/>of<sp/>p<sp/>and<sp/>v<sp/>to<sp/>0<sp/>in<sp/>case<sp/>norm<sp/>of<sp/>p<sp/>is<sp/>smaller<sp/>than<sp/>eps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref>(0,<sp/>0);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref>(n,<sp/><ref refid="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" kindref="member">dot</ref>(p,v)/n);</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="framevel_8inl_1a65db533288824ff8b59bac2486fb81ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.p,r2.p,eps)<sp/>&amp;&amp;<sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.v,r2.v,eps));</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363" refid="framevel_8inl_1a0e57cc06661c81464f1d3453484b19c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1,r2.p,eps)<sp/>&amp;&amp;<sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(Vector::Zero(),r2.v,eps));</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366" refid="framevel_8inl_1a255cde0e7fc0d2a66c26e5ea9a75eb63" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>r2,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.p,r2,eps)<sp/>&amp;&amp;<sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.v,Vector::Zero(),eps));</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369" refid="framevel_8inl_1a0edc115976f17c2b43c65887a60f3e2c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1,<sp/>r2);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(r1.p<sp/>==<sp/>r2.p<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.v<sp/>==<sp/>r2.v<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377" refid="framevel_8inl_1a7b607236d8ad8f512fdfcbaf834d5e53" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(r1,r2);</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380" refid="framevel_8inl_1a8140686eeba5a07d9bda1df1d630658c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1,<sp/>r2);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(r1<sp/>==<sp/>r2.p<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector::Zero()<sp/>==<sp/>r2.v);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388" refid="framevel_8inl_1ad052081b751a0f63443d3923cb2e1ca2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(r1,r2);</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391" refid="framevel_8inl_1abf669d09bce84107e0ba06542a89cb6c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1,<sp/>r2);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(r1.p<sp/>==<sp/>r2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.v<sp/>==<sp/>Vector::Zero()<sp/>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399" refid="framevel_8inl_1abfcd577e4bec35dc2f1a197760d79d80" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(r1,r2);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="framevel_8inl_1af1f0492ef92bcd6a5061e287867356de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r2,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.w,r2.w,eps)<sp/>&amp;&amp;<sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.R,r2.R,eps));</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407" refid="framevel_8inl_1aeda05130347a56cc656854a26d9ce2a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r2,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(Vector::Zero(),r2.w,eps)<sp/>&amp;&amp;<sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1,r2.R,eps));</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410" refid="framevel_8inl_1a932d340abdc249f667fc6583516db76f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>r2,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.w,Vector::Zero(),eps)<sp/>&amp;&amp;<sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1.R,r2,eps));</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413" refid="framevel_8inl_1a152d12f624b6be15cedf1556510f5eb7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1,<sp/>r2);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(r1.w<sp/>==<sp/>r2.w<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.R<sp/>==<sp/>r2.R<sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421" refid="framevel_8inl_1a75a2974b5c90121e0a98747f83493fa9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(r1,r2);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424" refid="framevel_8inl_1acebb3ede907321a775d68122dd1a40a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1,<sp/>r2);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Vector::Zero()<sp/>==<sp/>r2.w<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1<sp/>==<sp/>r2.R);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432" refid="framevel_8inl_1a284b31ffd824c5e7025496a9c0e9bdb6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(r1,r2);</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435" refid="framevel_8inl_1a7a9ee0e5006279864eb5b678e6d044e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1,<sp/>r2);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(r1.w<sp/>==<sp/>Vector::Zero()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.R<sp/>==<sp/>r2);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443" refid="framevel_8inl_1a596e653ce001a8283afc835aad69a282" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RotationVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Rotation&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(r1,r2);</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="framevel_8inl_1a4148591885417fd3088c9ea376327aed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(a.rot,b.rot,eps)&amp;&amp;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(a.vel,b.vel,eps)<sp/><sp/>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452" refid="framevel_8inl_1a4a4f0a2a411dfee26a2a8b3829064251" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(a.rot,b.rot,eps)&amp;&amp;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(a.vel,b.vel,eps)<sp/><sp/>);</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456" refid="framevel_8inl_1a92aa0809085c114632767a176f80e999" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>b,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(a.rot,b.rot,eps)&amp;&amp;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(a.vel,b.vel,eps)<sp/><sp/>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460" refid="framevel_8inl_1ab27d55e1029536b86f970d66c85a6dd7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(a,<sp/>b);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a.rot<sp/>==<sp/>b.rot<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.vel<sp/>==<sp/>b.vel<sp/>);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468" refid="framevel_8inl_1a9b7d6e43a7fa83de3e7256bd0a5504a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(a,b);</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471" refid="framevel_8inl_1ad48f356f94ae241b01967ed496eff092" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>a,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(a,<sp/>b);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a.rot<sp/>==<sp/>b.rot<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.vel<sp/>==<sp/>b.vel<sp/>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479" refid="framevel_8inl_1aee0c9994ee9606a97790249ae57130f7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(r1,r2);</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482" refid="framevel_8inl_1a243550519ca17e63431afda81480c0e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>KDL_USE_EQUAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1aa2f36b13490ad24ac922a3013671c6da" kindref="member">Equal</ref>(r1,<sp/>r2);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a.rot<sp/>==<sp/>b.rot<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.vel<sp/>==<sp/>b.vel<sp/>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490" refid="framevel_8inl_1a106b050c78a0ccc92c5f742e5506e50c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1acbc30d2726ac0d643ae37e36a242a510" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>r1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Twist&amp;<sp/>r2)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="framevel_8inl_1a76bd4a34de71de0a786b70e7df02a878" kindref="member">operator==</ref>(r1,r2);</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref><sp/><ref refid="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" kindref="member">dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref>(<ref refid="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" kindref="member">dot</ref>(lhs.p,rhs.p),<ref refid="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" kindref="member">dot</ref>(lhs.p,rhs.v)+<ref refid="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" kindref="member">dot</ref>(lhs.v,rhs.p));</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498" refid="framevel_8inl_1adacd080306299b8680f1bf2b7bff1030" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref><sp/><ref refid="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" kindref="member">dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref>(<ref refid="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" kindref="member">dot</ref>(lhs.p,rhs),<ref refid="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" kindref="member">dot</ref>(lhs.v,rhs));</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501" refid="framevel_8inl_1ac9390fd1e22ca2364e2d7bc045f5b419" refkind="member"><highlight class="normal"><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref><sp/><ref refid="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" kindref="member">dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VectorVel&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref>(<ref refid="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" kindref="member">dot</ref>(lhs,rhs.p),<ref refid="framevel_8inl_1a52517fdd0668839b4e35f360b3a906b2" kindref="member">dot</ref>(lhs,rhs.v));</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="classKDL_1_1TwistVel_1a261c9168c653f34eb67f0679ef43507c" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/>TwistVel::Zero()</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>(VectorVel::Zero(),VectorVel::Zero());</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="classKDL_1_1TwistVel_1a66c9e0046f2a4d65dde897e5cad4e246" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TwistVel::ReverseSign()</highlight></codeline>
<codeline lineno="512"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>vel.ReverseSign();</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>rot.ReverseSign();</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="classKDL_1_1TwistVel_1ad740e29afce9114035fa66ad8184fce8" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/>TwistVel::RefPoint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref>&amp;<sp/>v_base_AB)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Changes<sp/>the<sp/>reference<sp/>point<sp/>of<sp/>the<sp/>TwistVel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>VectorVel<sp/>v_base_AB<sp/>is<sp/>expressed<sp/>in<sp/>the<sp/>same<sp/>base<sp/>as<sp/>the<sp/>TwistVel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>VectorVel<sp/>v_base_AB<sp/>is<sp/>a<sp/>VectorVel<sp/>from<sp/>the<sp/>old<sp/>point<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Complexity<sp/>:<sp/>6M+6A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>(this-&gt;vel+this-&gt;rot*v_base_AB,this-&gt;rot);</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="classKDL_1_1TwistVel_1ab0a5cf2bbbe689ce5a2e748999a025a3" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>&amp;<sp/>TwistVel::operator-=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>vel-=arg.<ref refid="classKDL_1_1TwistVel_1a795a8e31b689557d518ce5c6a2eb7ee8" kindref="member">vel</ref>;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>rot<sp/>-=arg.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref>;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534" refid="classKDL_1_1TwistVel_1a3fde598746a106cb75f2f256d4036284" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>&amp;<sp/>TwistVel::operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="535"><highlight class="normal">{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>vel+=arg.<ref refid="classKDL_1_1TwistVel_1a795a8e31b689557d518ce5c6a2eb7ee8" kindref="member">vel</ref>;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>rot<sp/>+=arg.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref>;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="framevel_8inl_1adde1e133f2008c1cc6636c47ca1213f7" refkind="member"><highlight class="normal">TwistVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>lhs,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)</highlight></codeline>
<codeline lineno="543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TwistVel(lhs.vel*rhs,lhs.rot*rhs);</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547" refid="framevel_8inl_1a4b1ea516875d4889c28be34b71833194" refkind="member"><highlight class="normal">TwistVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator*</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TwistVel(lhs*rhs.vel,lhs*rhs.rot);</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="framevel_8inl_1a74969b2abf09079d49d8b5c4a5f315f1" refkind="member"><highlight class="normal">TwistVel<sp/><ref refid="framevel_8inl_1a2999e16d0ab35872ea5ab31e02288df8" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>lhs,</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)</highlight></codeline>
<codeline lineno="553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TwistVel(lhs.vel/rhs,lhs.rot/rhs);</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558" refid="framevel_8inl_1a49bf02a2bf61674395e8fee267c1a867" refkind="member"><highlight class="normal">TwistVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TwistVel(lhs.vel*rhs,lhs.rot*rhs);</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="framevel_8inl_1ac4966917e36119bbc17d79e8b369a7d6" refkind="member"><highlight class="normal">TwistVel<sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref>&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TwistVel(lhs*rhs.vel,lhs*rhs.rot);</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568" refid="framevel_8inl_1a851a9366c8edf5d2408acb8b23213a06" refkind="member"><highlight class="normal">TwistVel<sp/><ref refid="framevel_8inl_1a2999e16d0ab35872ea5ab31e02288df8" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TwistVel(lhs.vel/rhs,lhs.rot/rhs);</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>addition<sp/>of<sp/>TwistVel&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576" refid="framevel_8inl_1a4e64c3d4d6ee2a921edb11cac89ea65d" refkind="member"><highlight class="normal">TwistVel<sp/><ref refid="framevel_8inl_1a742c31bc54c7b0935eaaa644953285b0" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TwistVel(lhs.vel+rhs.vel,lhs.rot+rhs.rot);</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581" refid="framevel_8inl_1a25c9136cb151bff132f5518dd378c028" refkind="member"><highlight class="normal">TwistVel<sp/><ref refid="framevel_8inl_1a388e3cceebf6356ac0be4ab004f967e3" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>lhs,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="582"><highlight class="normal">{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TwistVel(lhs.vel-rhs.vel,lhs.rot-rhs.rot);</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unary<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587" refid="framevel_8inl_1a808e063a233100f6f926c2eb5365fb8f" refkind="member"><highlight class="normal">TwistVel<sp/><ref refid="framevel_8inl_1a388e3cceebf6356ac0be4ab004f967e3" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TwistVel&amp;<sp/>arg)<sp/></highlight></codeline>
<codeline lineno="588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TwistVel(-arg.vel,-arg.rot);</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592" refid="framevel_8inl_1a1c39182fffa2e50952d2969f2125032e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="framevel_8inl_1a16056f24ee86efdc98656138808e16e8" kindref="member">SetToZero</ref>(TwistVel&amp;<sp/>v)</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><ref refid="framevel_8inl_1a16056f24ee86efdc98656138808e16e8" kindref="member">SetToZero</ref>(v.vel);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><ref refid="framevel_8inl_1a16056f24ee86efdc98656138808e16e8" kindref="member">SetToZero</ref>(v.rot);</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602" refid="classKDL_1_1RotationVel_1ad390e0fb49d8860a9445044a182e778d" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/>RotationVel::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="603"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>(Inverse(arg.<ref refid="classKDL_1_1TwistVel_1a795a8e31b689557d518ce5c6a2eb7ee8" kindref="member">vel</ref>),Inverse(arg.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref>));</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607" refid="classKDL_1_1RotationVel_1a48e2deaeb3111f9c4b3bd8735a52441f" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">RotationVel::operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="608"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)*arg.<ref refid="classKDL_1_1TwistVel_1a795a8e31b689557d518ce5c6a2eb7ee8" kindref="member">vel</ref>,(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)*arg.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612" refid="classKDL_1_1RotationVel_1a5cafbeb61d5c6a6fbeac95c5ce8e3b84" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/>RotationVel::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="613"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>(Inverse(arg.<ref refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" kindref="member">vel</ref>),Inverse(arg.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>));</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617" refid="classKDL_1_1RotationVel_1abc1e5dd5ebf0295215e0610f041441db" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">RotationVel::operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="618"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)*arg.<ref refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" kindref="member">vel</ref>,(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)*arg.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623" refid="classKDL_1_1FrameVel_1a24fe164dbc2ab0ec53caa6c6bfeb0b2f" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">FrameVel::operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="624"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref><sp/>=<sp/>M*arg.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1TwistVel_1a795a8e31b689557d518ce5c6a2eb7ee8" kindref="member">vel</ref><sp/>=<sp/>M*arg.<ref refid="classKDL_1_1TwistVel_1a795a8e31b689557d518ce5c6a2eb7ee8" kindref="member">vel</ref>+p*tmp.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref>;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631" refid="classKDL_1_1FrameVel_1af074e7ea86f5dff0fba17ce0f81fec26" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/><ref refid="framevel_8inl_1a1d25281fed75357c072cc3decfd419d8" kindref="member">FrameVel::operator * </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="632"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref><sp/>=<sp/>M*arg.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1TwistVel_1a795a8e31b689557d518ce5c6a2eb7ee8" kindref="member">vel</ref><sp/>=<sp/>M*arg.<ref refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" kindref="member">vel</ref>+p*tmp.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref>;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="classKDL_1_1FrameVel_1a8fb34ed59fc7571c4999670234b3b766" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/>FrameVel::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="640"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref><sp/>=<sp/><sp/>M.Inverse(arg.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref>);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1TwistVel_1a795a8e31b689557d518ce5c6a2eb7ee8" kindref="member">vel</ref><sp/>=<sp/>M.Inverse(arg.<ref refid="classKDL_1_1TwistVel_1a795a8e31b689557d518ce5c6a2eb7ee8" kindref="member">vel</ref>-p*arg.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref>);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="classKDL_1_1FrameVel_1a0f116e2dc14b1f3b14051b4b84d7e9d5" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/>FrameVel::Inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>&amp;<sp/>arg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="648"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1TwistVel_1ada2aaceb2bda6f65edf236d4bc6590e2" kindref="member">rot</ref><sp/>=<sp/><sp/>M.Inverse(arg.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.<ref refid="classKDL_1_1TwistVel_1a795a8e31b689557d518ce5c6a2eb7ee8" kindref="member">vel</ref><sp/>=<sp/>M.Inverse(arg.<ref refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" kindref="member">vel</ref>-p*arg.<ref refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" kindref="member">rot</ref>);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655" refid="classKDL_1_1TwistVel_1a6026aec60ee1a155f852bf87dc7f9a2e" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/>TwistVel::GetTwist()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>(vel.p,rot.p);</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659" refid="classKDL_1_1TwistVel_1a911420803a6b3c82df564c4f1277a112" refkind="member"><highlight class="normal"><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/>TwistVel::GetTwistDot()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>(vel.v,rot.v);</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/framevel.inl"/>
  </compounddef>
</doxygen>
