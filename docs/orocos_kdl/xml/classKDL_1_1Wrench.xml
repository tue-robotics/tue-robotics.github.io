<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classKDL_1_1Wrench" kind="class" language="C++" prot="public">
    <compoundname>KDL::Wrench</compoundname>
    <includes refid="frames_8hpp" local="no">frames.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classKDL_1_1Wrench_1a3f8bee8b5afd64870bf187fa6a4ea3fc" prot="public" static="no" mutable="no">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector KDL::Wrench::force</definition>
        <argsstring></argsstring>
        <name>force</name>
        <briefdescription>
<para>Force that is applied at the origin of the current ref frame. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="884" column="12" bodyfile="src/frames.hpp" bodystart="884" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKDL_1_1Wrench_1ab725bbdf755cadd4a6718ea1f2ed1c1e" prot="public" static="no" mutable="no">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector KDL::Wrench::torque</definition>
        <argsstring></argsstring>
        <name>torque</name>
        <briefdescription>
<para>Torque that is applied at the origin of the current ref frame. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="885" column="12" bodyfile="src/frames.hpp" bodystart="885" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classKDL_1_1Wrench_1a034291d6c9dc6a03e93b86ff71aa0315" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const Wrench &amp;a, const Wrench &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="947" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Wrench_1aee3a66b0ddf3b769f015c89b610db0c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Frame</definition>
        <argsstring></argsstring>
        <name>Frame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="955" column="5" bodyfile="src/frames.hpp" bodystart="955" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Wrench_1ab2633edb946009d63578990c33e899da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Wrench &amp;a, const Wrench &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The literal inequality <ref refid="classKDL_1_1Wrench_1ab2633edb946009d63578990c33e899da" kindref="member">operator!=()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="952" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Wrench_1accbdf521d6fc163bb229914dfa3e2c20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench operator*</definition>
        <argsstring>(const Wrench &amp;lhs, double rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Scalar multiplication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="914" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Wrench_1ad9270132aa4084d7d61b007374a81883" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench operator*</definition>
        <argsstring>(double lhs, const Wrench &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Scalar multiplication. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="916" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Wrench_1a17d4fccb33a2736468d0645862956cb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench operator+</definition>
        <argsstring>(const Wrench &amp;lhs, const Wrench &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="920" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Wrench_1aaa88a5af82234547897ea220ef3cd173" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench operator-</definition>
        <argsstring>(const Wrench &amp;arg)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>An unary - operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="924" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Wrench_1aa81947bb6d31729915fc66d59fdf84e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench operator-</definition>
        <argsstring>(const Wrench &amp;lhs, const Wrench &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="921" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Wrench_1a4c875b04aa468b3494b427e3007bb9e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench operator/</definition>
        <argsstring>(const Wrench &amp;lhs, double rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Scalar division. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="918" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Wrench_1a42be75b813fda510521ea4052ab0fd71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Wrench &amp;a, const Wrench &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The literal equality <ref refid="classKDL_1_1Wrench_1a42be75b813fda510521ea4052ab0fd71" kindref="member">operator==()</ref>, also identical. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="950" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Wrench_1aa9d2bf0f1d1d2655fb37b513d3159be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Rotation</definition>
        <argsstring></argsstring>
        <name>Rotation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="954" column="5" bodyfile="src/frames.hpp" bodystart="954" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Wrench_1ae9c9bc666b3fa58c6164f2d4b0588146" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend void</type>
        <definition>void SetToZero</definition>
        <argsstring>(Wrench &amp;v)</argsstring>
        <name>SetToZero</name>
        <param>
          <type><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> to Zero, to have a uniform function that sets an object or double to zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="928" column="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKDL_1_1Wrench_1a976ba92ead3f1a91cec72a5c4268fb2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double &amp; Wrench::operator()</definition>
        <argsstring>(int i)</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>index-based access to components, first force(0..2), then torque(3..5) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="897" column="20" bodyfile="src/frames.inl" bodystart="223" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Wrench_1a0014bc437c99886888122f8343f287d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Wrench::operator()</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>index-based access to components, first force(0..2), then torque(3..5) for use with a const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="901" column="20" bodyfile="src/frames.inl" bodystart="232" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Wrench_1a133c392f51dbc8f368f15255833e71cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
        <definition>Wrench &amp; Wrench::operator+=</definition>
        <argsstring>(const Wrench &amp;arg)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="894" column="20" bodyfile="src/frames.inl" bodystart="216" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Wrench_1a3d53d5f8ae0a7ea995b33d525152b55e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
        <definition>Wrench &amp; Wrench::operator-=</definition>
        <argsstring>(const Wrench &amp;arg)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="893" column="20" bodyfile="src/frames.inl" bodystart="209" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Wrench_1ad5a1f06642c2f5d060707427870bf1cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; KDL::Wrench::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="908" column="13" bodyfile="src/frames.hpp" bodystart="908" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Wrench_1ac005fdb2ae56f67943232946d04362e8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::Wrench::operator[]</definition>
        <argsstring>(int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="903" column="13" bodyfile="src/frames.hpp" bodystart="903" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Wrench_1ac84fd36d8238a48b750de87ec16ff01a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench Wrench::RefPoint</definition>
        <argsstring>(const Vector &amp;v_base_AB) const</argsstring>
        <name>RefPoint</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v_base_AB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the reference point of the wrench. The vector v_base_AB is expressed in the same base as the twist The vector v_base_AB is a vector from the old point to the new point.</para>
<para>Complexity : 6M+6A </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="942" column="20" bodyfile="src/frames.inl" bodystart="197" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Wrench_1af38ab9d4d4e87cfa3505118351b1ed26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Wrench::ReverseSign</definition>
        <argsstring>()</argsstring>
        <name>ReverseSign</name>
        <briefdescription>
<para>Reverses the sign of the current <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="934" column="18" bodyfile="src/frames.inl" bodystart="191" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Wrench_1a4ee5e7b7fbbd59c2ad81137ea2eca9d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::Wrench::Wrench</definition>
        <argsstring>()</argsstring>
        <name>Wrench</name>
        <briefdescription>
<para>Does initialise force and torque to zero via the underlying constructor of <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="889" column="5" bodyfile="src/frames.hpp" bodystart="889" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Wrench_1a7eace46e99879997458fc4b42e4d447b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::Wrench::Wrench</definition>
        <argsstring>(const Vector &amp;_force, const Vector &amp;_torque)</argsstring>
        <name>Wrench</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>_force</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>_torque</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="890" column="5" bodyfile="src/frames.hpp" bodystart="890" bodyend="890"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classKDL_1_1Wrench_1a5f331d9253cdfe634a8df55dfd158730" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench Wrench::Zero</definition>
        <argsstring>()</argsstring>
        <name>Zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a zero <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="931" column="27" bodyfile="src/frames.inl" bodystart="185" bodyend="188"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>represents both translational and rotational acceleration. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents an acceleration twist. A acceleration twist is the combination of translational acceleration and rotational acceleration applied at one point.</para>
<para>represents the combination of a force and a torque.</para>
<para>This class represents a <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref>. A <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> is the force and torque applied at a point </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>KDL::Wrench</label>
        <link refid="classKDL_1_1Wrench"/>
        <childnode refid="2" relation="usage">
          <edgelabel>force</edgelabel>
          <edgelabel>torque</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>KDL::Vector</label>
        <link refid="classKDL_1_1Vector"/>
      </node>
    </collaborationgraph>
    <location file="src/frames.hpp" line="882" column="1" bodyfile="src/frames.hpp" bodystart="881" bodyend="956"/>
    <listofallmembers>
      <member refid="classKDL_1_1Wrench_1a034291d6c9dc6a03e93b86ff71aa0315" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>Equal</name></member>
      <member refid="classKDL_1_1Wrench_1a3f8bee8b5afd64870bf187fa6a4ea3fc" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>force</name></member>
      <member refid="classKDL_1_1Wrench_1aee3a66b0ddf3b769f015c89b610db0c7" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>Frame</name></member>
      <member refid="classKDL_1_1Wrench_1ab2633edb946009d63578990c33e899da" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator!=</name></member>
      <member refid="classKDL_1_1Wrench_1a976ba92ead3f1a91cec72a5c4268fb2c" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator()</name></member>
      <member refid="classKDL_1_1Wrench_1a0014bc437c99886888122f8343f287d8" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator()</name></member>
      <member refid="classKDL_1_1Wrench_1accbdf521d6fc163bb229914dfa3e2c20" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Wrench_1ad9270132aa4084d7d61b007374a81883" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Wrench_1a17d4fccb33a2736468d0645862956cb5" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator+</name></member>
      <member refid="classKDL_1_1Wrench_1a133c392f51dbc8f368f15255833e71cb" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator+=</name></member>
      <member refid="classKDL_1_1Wrench_1aa81947bb6d31729915fc66d59fdf84e6" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator-</name></member>
      <member refid="classKDL_1_1Wrench_1aaa88a5af82234547897ea220ef3cd173" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator-</name></member>
      <member refid="classKDL_1_1Wrench_1a3d53d5f8ae0a7ea995b33d525152b55e" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator-=</name></member>
      <member refid="classKDL_1_1Wrench_1a4c875b04aa468b3494b427e3007bb9e6" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator/</name></member>
      <member refid="classKDL_1_1Wrench_1a42be75b813fda510521ea4052ab0fd71" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator==</name></member>
      <member refid="classKDL_1_1Wrench_1ac005fdb2ae56f67943232946d04362e8" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator[]</name></member>
      <member refid="classKDL_1_1Wrench_1ad5a1f06642c2f5d060707427870bf1cc" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>operator[]</name></member>
      <member refid="classKDL_1_1Wrench_1ac84fd36d8238a48b750de87ec16ff01a" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>RefPoint</name></member>
      <member refid="classKDL_1_1Wrench_1af38ab9d4d4e87cfa3505118351b1ed26" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>ReverseSign</name></member>
      <member refid="classKDL_1_1Wrench_1aa9d2bf0f1d1d2655fb37b513d3159be3" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>Rotation</name></member>
      <member refid="classKDL_1_1Wrench_1ae9c9bc666b3fa58c6164f2d4b0588146" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>SetToZero</name></member>
      <member refid="classKDL_1_1Wrench_1ab725bbdf755cadd4a6718ea1f2ed1c1e" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>torque</name></member>
      <member refid="classKDL_1_1Wrench_1a4ee5e7b7fbbd59c2ad81137ea2eca9d1" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>Wrench</name></member>
      <member refid="classKDL_1_1Wrench_1a7eace46e99879997458fc4b42e4d447b" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>Wrench</name></member>
      <member refid="classKDL_1_1Wrench_1a5f331d9253cdfe634a8df55dfd158730" prot="public" virt="non-virtual"><scope>KDL::Wrench</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
