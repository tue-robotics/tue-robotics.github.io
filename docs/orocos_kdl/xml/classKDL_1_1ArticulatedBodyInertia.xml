<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classKDL_1_1ArticulatedBodyInertia" kind="class" language="C++" prot="public">
    <compoundname>KDL::ArticulatedBodyInertia</compoundname>
    <includes refid="articulatedbodyinertia_8hpp" local="no">articulatedbodyinertia.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" prot="public" static="no" mutable="no">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d KDL::ArticulatedBodyInertia::H</definition>
        <argsstring></argsstring>
        <name>H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="90" column="25" bodyfile="src/articulatedbodyinertia.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" prot="public" static="no" mutable="no">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d KDL::ArticulatedBodyInertia::I</definition>
        <argsstring></argsstring>
        <name>I</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="91" column="25" bodyfile="src/articulatedbodyinertia.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" prot="public" static="no" mutable="no">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d KDL::ArticulatedBodyInertia::M</definition>
        <argsstring></argsstring>
        <name>M</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="89" column="25" bodyfile="src/articulatedbodyinertia.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKDL_1_1ArticulatedBodyInertia_1a1687a92d745541fcc41a977f38750eab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::ArticulatedBodyInertia::ArticulatedBodyInertia</definition>
        <argsstring>()</argsstring>
        <name>ArticulatedBodyInertia</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This constructor creates a zero articulated body inertia matrix, </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="46" column="9" bodyfile="src/articulatedbodyinertia.hpp" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1ArticulatedBodyInertia_1a514d696939be523d8bfc60120f98a0cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KDL::ArticulatedBodyInertia::ArticulatedBodyInertia</definition>
        <argsstring>(const Eigen::Matrix3d &amp;M, const Eigen::Matrix3d &amp;H, const Eigen::Matrix3d &amp;I)</argsstring>
        <name>ArticulatedBodyInertia</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>H</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="87" column="9" bodyfile="src/articulatedbodyinertia.cpp" bodystart="42" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1ArticulatedBodyInertia_1a9307edd093b5ab4f46d88e30ebede7f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KDL::ArticulatedBodyInertia::ArticulatedBodyInertia</definition>
        <argsstring>(const RigidBodyInertia &amp;rbi)</argsstring>
        <name>ArticulatedBodyInertia</name>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>rbi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This constructor creates a cartesian space articulated body inertia matrix, the arguments is a rigid body inertia. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="54" column="9" bodyfile="src/articulatedbodyinertia.cpp" bodystart="28" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1ArticulatedBodyInertia_1a655a11f4f0f3dfc3bd8281cb7d959a35" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KDL::ArticulatedBodyInertia::ArticulatedBodyInertia</definition>
        <argsstring>(double m, const Vector &amp;oc=Vector::Zero(), const RotationalInertia &amp;Ic=RotationalInertia::Zero())</argsstring>
        <name>ArticulatedBodyInertia</name>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>oc</declname>
          <defval><ref refid="classKDL_1_1Vector_1aac50a5f60447f9cb7b4a510c4695ab89" kindref="member">Vector::Zero</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref> &amp;</type>
          <declname>Ic</declname>
          <defval><ref refid="classKDL_1_1RotationalInertia_1a50fbe96830ed0c31a9de7528c859ae32" kindref="member">RotationalInertia::Zero</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This constructor creates a cartesian space inertia matrix, the arguments are the mass, the vector from the reference point to cog and the rotational inertia in the cog. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="60" column="18" bodyfile="src/articulatedbodyinertia.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1ArticulatedBodyInertia_1a079cf1b582f5b7abe3c6f0ee5903bff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia KDL::ArticulatedBodyInertia::RefPoint</definition>
        <argsstring>(const Vector &amp;p)</argsstring>
        <name>RefPoint</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference point change with v the vector from the old to the new point expressed in the current reference frame </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="85" column="32" bodyfile="src/articulatedbodyinertia.cpp" bodystart="95" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1ArticulatedBodyInertia_1aed6b8f04c1b53b5ac52165f075031aeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::ArticulatedBodyInertia::~ArticulatedBodyInertia</definition>
        <argsstring>()</argsstring>
        <name>~ArticulatedBodyInertia</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="70" column="9" bodyfile="src/articulatedbodyinertia.hpp" bodystart="70" bodyend="70"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classKDL_1_1ArticulatedBodyInertia_1af552f6e6fd54f714b4ac3cba2ca1afc4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>static ArticulatedBodyInertia KDL::ArticulatedBodyInertia::Zero</definition>
        <argsstring>()</argsstring>
        <name>Zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an inertia with zero mass, and zero <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="65" column="46" bodyfile="src/articulatedbodyinertia.hpp" bodystart="65" bodyend="67"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classKDL_1_1ArticulatedBodyInertia_1a1876000de094f72c8caa38a9dd01e433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench operator*</definition>
        <argsstring>(const ArticulatedBodyInertia &amp;I, const Twist &amp;t)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculate spatial momentum: h = I*v make sure that the twist v and the inertia are expressed in the same reference frame/point </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="77" column="23" bodyfile="src/articulatedbodyinertia.cpp" bodystart="68" bodyend="73"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1ArticulatedBodyInertia_1ad8daf12963cceeccc090763622e352c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia operator*</definition>
        <argsstring>(const Frame &amp;T, const ArticulatedBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Coordinate system transform Ia = T_a_b*Ib with T_a_b the frame from a to b. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="78" column="39" bodyfile="src/articulatedbodyinertia.cpp" bodystart="75" bodyend="88"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1ArticulatedBodyInertia_1ada2c2677db8424b306313c0e5a76ddbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia operator*</definition>
        <argsstring>(const Rotation &amp;R, const ArticulatedBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference frame orientation change Ia = R_a_b*Ib with R_a_b the rotation of b expressed in a </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="79" column="39" bodyfile="src/articulatedbodyinertia.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1ArticulatedBodyInertia_1a0f37f3ab2d7c263d6d1aa06573ad1a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia operator*</definition>
        <argsstring>(double a, const ArticulatedBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scalar product: I_new = double * I_old </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="72" column="39" bodyfile="src/articulatedbodyinertia.cpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1ArticulatedBodyInertia_1a6d5bb62d9ec093e70df7c591ce0bceac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia operator+</definition>
        <argsstring>(const ArticulatedBodyInertia &amp;Ia, const ArticulatedBodyInertia &amp;Ib)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>addition I: I_new = I_old1 + I_old2, make sure that I_old1 and I_old2 are expressed in the same reference frame/point, otherwise the result is worth nothing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="73" column="39" bodyfile="src/articulatedbodyinertia.cpp" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1ArticulatedBodyInertia_1a357613d4b45f8ef6ee511ab6a82fa61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia operator+</definition>
        <argsstring>(const ArticulatedBodyInertia &amp;Ia, const RigidBodyInertia &amp;Ib)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="74" column="39"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1ArticulatedBodyInertia_1a315c737b3a7c78d2264e0c635f8da8d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia operator-</definition>
        <argsstring>(const ArticulatedBodyInertia &amp;Ia, const ArticulatedBodyInertia &amp;Ib)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="75" column="39" bodyfile="src/articulatedbodyinertia.cpp" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1ArticulatedBodyInertia_1a872088f66e94007216f27d229b8e0034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia operator-</definition>
        <argsstring>(const ArticulatedBodyInertia &amp;Ia, const RigidBodyInertia &amp;Ib)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="76" column="39"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>6D Inertia of a articulated body </para>
    </briefdescription>
    <detaileddescription>
<para>The inertia is defined in a certain reference point and a certain reference base. The reference point does not have to coincide with the origin of the reference frame. </para>
    </detaileddescription>
    <location file="src/articulatedbodyinertia.hpp" line="40" column="33" bodyfile="src/articulatedbodyinertia.hpp" bodystart="40" bodyend="92"/>
    <listofallmembers>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a1687a92d745541fcc41a977f38750eab" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>ArticulatedBodyInertia</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a9307edd093b5ab4f46d88e30ebede7f2" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>ArticulatedBodyInertia</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a655a11f4f0f3dfc3bd8281cb7d959a35" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>ArticulatedBodyInertia</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a514d696939be523d8bfc60120f98a0cc" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>ArticulatedBodyInertia</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>H</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>I</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>M</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a0f37f3ab2d7c263d6d1aa06573ad1a3c" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a1876000de094f72c8caa38a9dd01e433" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1ad8daf12963cceeccc090763622e352c5" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1ada2c2677db8424b306313c0e5a76ddbf" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a6d5bb62d9ec093e70df7c591ce0bceac" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>operator+</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a357613d4b45f8ef6ee511ab6a82fa61a" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>operator+</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a315c737b3a7c78d2264e0c635f8da8d3" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>operator-</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a872088f66e94007216f27d229b8e0034" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>operator-</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1a079cf1b582f5b7abe3c6f0ee5903bff1" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>RefPoint</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1af552f6e6fd54f714b4ac3cba2ca1afc4" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>Zero</name></member>
      <member refid="classKDL_1_1ArticulatedBodyInertia_1aed6b8f04c1b53b5ac52165f075031aeb" prot="public" virt="non-virtual"><scope>KDL::ArticulatedBodyInertia</scope><name>~ArticulatedBodyInertia</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
