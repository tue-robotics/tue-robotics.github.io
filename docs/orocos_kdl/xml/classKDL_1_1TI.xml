<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classKDL_1_1TI" kind="class" language="C++" prot="public">
    <compoundname>KDL::TI</compoundname>
    <includes refid="utility_8h" local="no">utility.h</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classKDL_1_1TI_1ac725f8ed1591c7ad714166cf871a7162" prot="public" static="no" mutable="no">
        <type>const typedef T &amp;</type>
        <definition>const typedef T&amp; KDL::TI&lt; T &gt;::Arg</definition>
        <argsstring></argsstring>
        <name>Arg</name>
        <briefdescription>
<para>Arg is used for passing the element to a function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="146" column="25" bodyfile="src/utilities/utility.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Auxiliary class for argument types (Trait-template class )</para>
<para>Is used to pass doubles by value, and arbitrary objects by const reference. This is TWICE as fast (2 x less memory access) and avoids bugs in VC6++ concerning the assignment of the result of intrinsic functions to const double&amp;-typed variables, and optimization on. </para>
    </detaileddescription>
    <location file="src/utilities/utility.h" line="144" column="1" bodyfile="src/utilities/utility.h" bodystart="143" bodyend="147"/>
    <listofallmembers>
      <member refid="classKDL_1_1TI_1ac725f8ed1591c7ad714166cf871a7162" prot="public" virt="non-virtual"><scope>KDL::TI</scope><name>Arg</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
