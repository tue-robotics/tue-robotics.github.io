<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classKDL_1_1RotationalInertia" kind="class" language="C++" prot="public">
    <compoundname>KDL::RotationalInertia</compoundname>
    <includes refid="rotationalinertia_8hpp" local="no">rotationalinertia.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classKDL_1_1RotationalInertia_1a356b6345fac27c647f94eed62265a4e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia operator*</definition>
        <argsstring>(const Frame &amp;T, const RigidBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
<para>coordinate system transform Ia = T_a_b*Ib with T_a_b the frame from a to b </para>
        </briefdescription>
        <detaileddescription>
<para>Coordinate system transform Ia = T_a_b*Ib with T_a_b the frame from a to b. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="61" column="33" bodyfile="src/rigidbodyinertia.cpp" bodystart="54" bodyend="70"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1RotationalInertia_1a053fe8890d6c3a5fafd5dc7fa65b1b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench operator*</definition>
        <argsstring>(const RigidBodyInertia &amp;I, const Twist &amp;t)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>calculate spatial momentum </para>
        </briefdescription>
        <detaileddescription>
<para>calculate spatial momentum: h = I*v make sure that the twist v and the inertia are expressed in the same reference frame/point </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="59" column="23" bodyfile="src/rigidbodyinertia.cpp" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1RotationalInertia_1a8299aeb0c4514205697a571004ece305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia operator*</definition>
        <argsstring>(const Rotation &amp;R, const RigidBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
<para>base frame orientation change Ia = R_a_b*Ib with R_a_b the rotation for frame from a to b </para>
        </briefdescription>
        <detaileddescription>
<para>Reference frame orientation change Ia = R_a_b*Ib with R_a_b the rotation of b expressed in a </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="63" column="33" bodyfile="src/rigidbodyinertia.cpp" bodystart="72" bodyend="81"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1RotationalInertia_1a04507a0c6bfbd2fabd4178be65989a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia operator*</definition>
        <argsstring>(double a, const RigidBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
<para>Scalar product. </para>
        </briefdescription>
        <detaileddescription>
<para>Scalar product: I_new = double * I_old </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="55" column="33" bodyfile="src/rigidbodyinertia.cpp" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1RotationalInertia_1a7f6a4e6436ac8e81ccd6634e4ed90e4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref></type>
        <definition>RotationalInertia operator*</definition>
        <argsstring>(double a, const RotationalInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="43" column="34" bodyfile="src/rotationalinertia.cpp" bodystart="50" bodyend="54"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1RotationalInertia_1a81525c4002e3725a67dd0f730b7e35b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia operator+</definition>
        <argsstring>(const RigidBodyInertia &amp;Ia, const RigidBodyInertia &amp;Ib)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
<para>addition </para>
        </briefdescription>
        <detaileddescription>
<para>addition I: I_new = I_old1 + I_old2, make sure that I_old1 and I_old2 are expressed in the same reference frame/point, otherwise the result is worth nothing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="57" column="33" bodyfile="src/rigidbodyinertia.cpp" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1RotationalInertia_1ad0005da22a34748cf2780d97a82ef868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref></type>
        <definition>RotationalInertia operator+</definition>
        <argsstring>(const RotationalInertia &amp;Ia, const RotationalInertia &amp;Ib)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="44" column="34" bodyfile="src/rotationalinertia.cpp" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1RotationalInertia_1a220ff47720a5ea22d70befb61bf5ba32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class RigidBodyInertia</definition>
        <argsstring></argsstring>
        <name>RigidBodyInertia</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="53" column="9" bodyfile="src/rotationalinertia.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double KDL::RotationalInertia::data[9]</definition>
        <argsstring>[9]</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="65" column="16" bodyfile="src/rotationalinertia.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKDL_1_1RotationalInertia_1a965f2ee7b35e52949da72da4eba0886d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">KDL::Vector</ref></type>
        <definition>Vector KDL::RotationalInertia::operator*</definition>
        <argsstring>(const KDL::Vector &amp;omega) const</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">KDL::Vector</ref> &amp;</type>
          <declname>omega</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function calculates the angular momentum resulting from a rotational velocity omega </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="49" column="21" bodyfile="src/rotationalinertia.cpp" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RotationalInertia_1a9aeb48fd7b9d44cb5bc1284cd8410382" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>KDL::RotationalInertia::RotationalInertia</definition>
        <argsstring>(double Ixx=0, double Iyy=0, double Izz=0, double Ixy=0, double Ixz=0, double Iyz=0)</argsstring>
        <name>RotationalInertia</name>
        <param>
          <type>double</type>
          <declname>Ixx</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>Iyy</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>Izz</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>Ixy</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>Ixz</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>Iyz</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="37" column="18" bodyfile="src/rotationalinertia.cpp" bodystart="28" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1RotationalInertia_1a60935f7bdebbd8fd6a2dcd694e794189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>KDL::RotationalInertia::~RotationalInertia</definition>
        <argsstring>()</argsstring>
        <name>~RotationalInertia</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="51" column="9" bodyfile="src/rotationalinertia.cpp" bodystart="39" bodyend="41"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classKDL_1_1RotationalInertia_1a50fbe96830ed0c31a9de7528c859ae32" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref></type>
        <definition>static RotationalInertia KDL::RotationalInertia::Zero</definition>
        <argsstring>()</argsstring>
        <name>Zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.hpp" line="39" column="41" bodyfile="src/rotationalinertia.hpp" bodystart="39" bodyend="41"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/rotationalinertia.hpp" line="34" column="24" bodyfile="src/rotationalinertia.hpp" bodystart="34" bodyend="66"/>
    <listofallmembers>
      <member refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>data</name></member>
      <member refid="classKDL_1_1RotationalInertia_1a7f6a4e6436ac8e81ccd6634e4ed90e4d" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1RotationalInertia_1a965f2ee7b35e52949da72da4eba0886d" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1RotationalInertia_1a04507a0c6bfbd2fabd4178be65989a42" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1RotationalInertia_1a053fe8890d6c3a5fafd5dc7fa65b1b9a" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1RotationalInertia_1a356b6345fac27c647f94eed62265a4e3" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1RotationalInertia_1a8299aeb0c4514205697a571004ece305" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>operator*</name></member>
      <member refid="classKDL_1_1RotationalInertia_1ad0005da22a34748cf2780d97a82ef868" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>operator+</name></member>
      <member refid="classKDL_1_1RotationalInertia_1a81525c4002e3725a67dd0f730b7e35b4" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>operator+</name></member>
      <member refid="classKDL_1_1RotationalInertia_1a220ff47720a5ea22d70befb61bf5ba32" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>RigidBodyInertia</name></member>
      <member refid="classKDL_1_1RotationalInertia_1a9aeb48fd7b9d44cb5bc1284cd8410382" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>RotationalInertia</name></member>
      <member refid="classKDL_1_1RotationalInertia_1a50fbe96830ed0c31a9de7528c859ae32" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>Zero</name></member>
      <member refid="classKDL_1_1RotationalInertia_1a60935f7bdebbd8fd6a2dcd694e794189" prot="public" virt="non-virtual"><scope>KDL::RotationalInertia</scope><name>~RotationalInertia</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
