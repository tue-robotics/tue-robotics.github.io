<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classKDL_1_1Vector" kind="class" language="C++" prot="public">
    <compoundname>KDL::Vector</compoundname>
    <includes refid="frames_8hpp" local="no">frames.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double KDL::Vector::data[3]</definition>
        <argsstring>[3]</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="165" column="12" bodyfile="src/frames.hpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classKDL_1_1Vector_1a05cf85096758f8283563aa8e98f05590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend double</type>
        <definition>double dot</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="225" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1a3fc448bfad4d9cdc3daa7067d5a53cda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const Vector &amp;a, const Vector &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="258" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1aee3a66b0ddf3b769f015c89b610db0c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Frame</definition>
        <argsstring></argsstring>
        <name>Frame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="266" column="6" bodyfile="src/frames.hpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1ae46ad0d04e82adad56d33036cb25d35b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Vector &amp;a, const Vector &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The literal inequality <ref refid="classKDL_1_1Vector_1ae46ad0d04e82adad56d33036cb25d35b" kindref="member">operator!=()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="263" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1a7cf9d5b6086b4ece4eeeb6ca333906ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator*</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="223" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1abe5f3e3747654906e6e2b506947675cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator*</definition>
        <argsstring>(const Vector &amp;lhs, double rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Scalar multiplication is defined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="215" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1af1b7f920324ab230c303c352421c799a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator*</definition>
        <argsstring>(double lhs, const Vector &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Scalar multiplication is defined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="217" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1a20bc1d82d45f4a1be572ee0131e221e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator+</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="221" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1a5eff5e8fcf678ef559ff40f236865596" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator-</definition>
        <argsstring>(const Vector &amp;arg)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="224" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1ac05824c584cfc758e7c79e215ebda4ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator-</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="222" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1a25d9bb5f010ee074e6ae3f1ade146927" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector operator/</definition>
        <argsstring>(const Vector &amp;lhs, double rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Scalar division is defined. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="220" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1a3c0498fec3046f477a2399a21ab921ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Vector &amp;a, const Vector &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The literal equality <ref refid="classKDL_1_1Vector_1a3c0498fec3046f477a2399a21ab921ff" kindref="member">operator==()</ref>, also identical. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="261" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1aa9d2bf0f1d1d2655fb37b513d3159be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Rotation</definition>
        <argsstring></argsstring>
        <name>Rotation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="265" column="6" bodyfile="src/frames.hpp" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Vector_1a19c2eb030bca79fcb5456642f0f2f55d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend void</type>
        <definition>void SetToZero</definition>
        <argsstring>(Vector &amp;v)</argsstring>
        <name>SetToZero</name>
        <param>
          <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To have a uniform operator to put an element to zero, for scalar values and for objects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="229" column="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKDL_1_1Vector_1ade3f16bb567c5f4ab314346605c66056" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::Vector::Norm</definition>
        <argsstring>(double eps=epsilon) const</argsstring>
        <name>Norm</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the norm of the vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="242" column="13" bodyfile="src/frames.cpp" bodystart="142" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a82226cbbe86665615c3548cad5d8855f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::Vector::Normalize</definition>
        <argsstring>(double eps=epsilon)</argsstring>
        <name>Normalize</name>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Normalizes this vector and returns it norm makes v a unitvector and returns the norm of v. if v is smaller than eps, Vector(1,0,0) is returned with norm 0. if this is not good, check the return value of this method. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="239" column="13" bodyfile="src/frames.cpp" bodystart="172" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a3897f8e1b819ac710918030f70db0c12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double &amp; Vector::operator()</definition>
        <argsstring>(int index)</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Access to elements, range checked when NDEBUG is not set, from 0..2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="182" column="20" bodyfile="src/frames.inl" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1ab2446f1e1c0a1ec8fc42f29259f43b23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Vector::operator()</definition>
        <argsstring>(int index) const</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Access to elements, range checked when NDEBUG is not set, from 0..2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="179" column="20" bodyfile="src/frames.inl" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a6e70ce6aa6a38df00e518857b3aa4115" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; Vector::operator+=</definition>
        <argsstring>(const Vector &amp;arg)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Adds a vector from the <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> object itself. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="212" column="20" bodyfile="src/frames.inl" bodystart="120" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a20668af899021cbd59dc92211a32a2c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; Vector::operator-=</definition>
        <argsstring>(const Vector &amp;arg)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>subtracts a vector from the <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> object itself </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="208" column="20" bodyfile="src/frames.inl" bodystart="129" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a7de07a01933c474bba6406d9392a6839" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>IMETHOD Vector &amp; Vector::operator=</definition>
        <argsstring>(const Vector &amp;arg)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Assignment operator. The normal copy by value semantics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="176" column="20" bodyfile="src/frames.inl" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1ad61e6cfc1d4fb17192c3e57ebd957a1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; KDL::Vector::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Equivalent to double&amp; <ref refid="classKDL_1_1Vector_1a3897f8e1b819ac710918030f70db0c12" kindref="member">operator()(int index)</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="191" column="13" bodyfile="src/frames.hpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a4a05df28b5418bb198859c17cc01ee3f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::Vector::operator[]</definition>
        <argsstring>(int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Equivalent to double <ref refid="classKDL_1_1Vector_1ab2446f1e1c0a1ec8fc42f29259f43b23" kindref="member">operator()(int index) const</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="185" column="13" bodyfile="src/frames.hpp" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a18b996436214594500892b6cfd5e1aad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::ReverseSign</definition>
        <argsstring>()</argsstring>
        <name>ReverseSign</name>
        <briefdescription>
<para>Reverses the sign of the <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> object itself. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="204" column="18" bodyfile="src/frames.inl" bodystart="440" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a005f4c09544fbe00f8fd59e9793d07e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::Set2DPlane</definition>
        <argsstring>(const Frame &amp;F_someframe_XY, const Vector2 &amp;v_XY)</argsstring>
        <name>Set2DPlane</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>F_someframe_XY</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v_XY</declname>
        </param>
        <briefdescription>
<para>a 3D vector where the 2D vector v_XY is put in the XY plane of the frame F_someframe_XY. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="253" column="18" bodyfile="src/frames.inl" bodystart="707" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1aaf4b99e0da51be7806ac5aaeb8c353aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::Set2DXY</definition>
        <argsstring>(const Vector2 &amp;v)</argsstring>
        <name>Set2DXY</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>a 3D vector where the 2D vector v is put in the XY plane </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="247" column="18" bodyfile="src/frames.inl" bodystart="458" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1aee5feebe23a0f950dcb24e3c9e158879" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::Set2DYZ</definition>
        <argsstring>(const Vector2 &amp;v)</argsstring>
        <name>Set2DYZ</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>a 3D vector where the 2D vector v is put in the YZ plane </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="249" column="18" bodyfile="src/frames.inl" bodystart="466" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a6d695cbbecbb108ba01d34ac26429960" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Vector::Set2DZX</definition>
        <argsstring>(const Vector2 &amp;v)</argsstring>
        <name>Set2DZX</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>a 3D vector where the 2D vector v is put in the ZX plane </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="251" column="18" bodyfile="src/frames.inl" bodystart="475" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a8e7413d32d76152fb64dbb440ce34fd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::Vector::Vector</definition>
        <argsstring>()</argsstring>
        <name>Vector</name>
        <briefdescription>
<para>Does not initialise the <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> to zero. use <ref refid="classKDL_1_1Vector_1aac50a5f60447f9cb7b4a510c4695ab89" kindref="member">Vector::Zero()</ref> or SetToZero for that. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="167" column="13" bodyfile="src/frames.hpp" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a25eb8c0bef6d3a3fb521fc13b7b0415e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>IMETHOD Vector::Vector</definition>
        <argsstring>(const Vector &amp;arg)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Assignment operator. The normal copy by value semantics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="173" column="13" bodyfile="src/frames.inl" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a05d50ffeedd10ed4758fa102a047f085" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>IMETHOD Vector::Vector</definition>
        <argsstring>(double x, double y, double z)</argsstring>
        <name>Vector</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Constructs a vector out of the three values x, y and z. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="170" column="13" bodyfile="src/frames.inl" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a9a07c1943fa9132a95ab98069d976c80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>IMETHOD double Vector::x</definition>
        <argsstring>() const</argsstring>
        <name>x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="196" column="20" bodyfile="src/frames.inl" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1ada285f915c468ced263776d1a6796e89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Vector::x</definition>
        <argsstring>(double)</argsstring>
        <name>x</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="199" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a5177abd2f89d6f3bc891306083e62075" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>IMETHOD double Vector::y</definition>
        <argsstring>() const</argsstring>
        <name>y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="197" column="20" bodyfile="src/frames.inl" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1aa41ede65eeeb3cd0f6bf79ec63f756c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Vector::y</definition>
        <argsstring>(double)</argsstring>
        <name>y</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="200" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1a443e864c08b2cbd2b48b1d85b1da8ea5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>IMETHOD double Vector::z</definition>
        <argsstring>() const</argsstring>
        <name>z</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="198" column="20" bodyfile="src/frames.inl" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Vector_1ac66357702410a618ae7d0dbefc266a99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Vector::z</definition>
        <argsstring>(double)</argsstring>
        <name>z</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="201" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classKDL_1_1Vector_1aac50a5f60447f9cb7b4a510c4695ab89" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector Vector::Zero</definition>
        <argsstring>()</argsstring>
        <name>Zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a zero vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="232" column="27" bodyfile="src/frames.inl" bodystart="138" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A concrete implementation of a 3 dimensional vector class. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/frames.hpp" line="163" column="1" bodyfile="src/frames.hpp" bodystart="162" bodyend="267"/>
    <listofallmembers>
      <member refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>data</name></member>
      <member refid="classKDL_1_1Vector_1a05cf85096758f8283563aa8e98f05590" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>dot</name></member>
      <member refid="classKDL_1_1Vector_1a3fc448bfad4d9cdc3daa7067d5a53cda" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Equal</name></member>
      <member refid="classKDL_1_1Vector_1aee3a66b0ddf3b769f015c89b610db0c7" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Frame</name></member>
      <member refid="classKDL_1_1Vector_1ade3f16bb567c5f4ab314346605c66056" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Norm</name></member>
      <member refid="classKDL_1_1Vector_1a82226cbbe86665615c3548cad5d8855f" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Normalize</name></member>
      <member refid="classKDL_1_1Vector_1ae46ad0d04e82adad56d33036cb25d35b" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator!=</name></member>
      <member refid="classKDL_1_1Vector_1ab2446f1e1c0a1ec8fc42f29259f43b23" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator()</name></member>
      <member refid="classKDL_1_1Vector_1a3897f8e1b819ac710918030f70db0c12" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator()</name></member>
      <member refid="classKDL_1_1Vector_1abe5f3e3747654906e6e2b506947675cd" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Vector_1af1b7f920324ab230c303c352421c799a" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Vector_1a7cf9d5b6086b4ece4eeeb6ca333906ea" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Vector_1a20bc1d82d45f4a1be572ee0131e221e5" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator+</name></member>
      <member refid="classKDL_1_1Vector_1a6e70ce6aa6a38df00e518857b3aa4115" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator+=</name></member>
      <member refid="classKDL_1_1Vector_1ac05824c584cfc758e7c79e215ebda4ec" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator-</name></member>
      <member refid="classKDL_1_1Vector_1a5eff5e8fcf678ef559ff40f236865596" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator-</name></member>
      <member refid="classKDL_1_1Vector_1a20668af899021cbd59dc92211a32a2c8" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator-=</name></member>
      <member refid="classKDL_1_1Vector_1a25d9bb5f010ee074e6ae3f1ade146927" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator/</name></member>
      <member refid="classKDL_1_1Vector_1a7de07a01933c474bba6406d9392a6839" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator=</name></member>
      <member refid="classKDL_1_1Vector_1a3c0498fec3046f477a2399a21ab921ff" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator==</name></member>
      <member refid="classKDL_1_1Vector_1a4a05df28b5418bb198859c17cc01ee3f" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator[]</name></member>
      <member refid="classKDL_1_1Vector_1ad61e6cfc1d4fb17192c3e57ebd957a1b" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>operator[]</name></member>
      <member refid="classKDL_1_1Vector_1a18b996436214594500892b6cfd5e1aad" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>ReverseSign</name></member>
      <member refid="classKDL_1_1Vector_1aa9d2bf0f1d1d2655fb37b513d3159be3" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Rotation</name></member>
      <member refid="classKDL_1_1Vector_1a005f4c09544fbe00f8fd59e9793d07e0" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Set2DPlane</name></member>
      <member refid="classKDL_1_1Vector_1aaf4b99e0da51be7806ac5aaeb8c353aa" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Set2DXY</name></member>
      <member refid="classKDL_1_1Vector_1aee5feebe23a0f950dcb24e3c9e158879" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Set2DYZ</name></member>
      <member refid="classKDL_1_1Vector_1a6d695cbbecbb108ba01d34ac26429960" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Set2DZX</name></member>
      <member refid="classKDL_1_1Vector_1a19c2eb030bca79fcb5456642f0f2f55d" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>SetToZero</name></member>
      <member refid="classKDL_1_1Vector_1a8e7413d32d76152fb64dbb440ce34fd5" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Vector</name></member>
      <member refid="classKDL_1_1Vector_1a05d50ffeedd10ed4758fa102a047f085" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Vector</name></member>
      <member refid="classKDL_1_1Vector_1a25eb8c0bef6d3a3fb521fc13b7b0415e" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Vector</name></member>
      <member refid="classKDL_1_1Vector_1a9a07c1943fa9132a95ab98069d976c80" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>x</name></member>
      <member refid="classKDL_1_1Vector_1ada285f915c468ced263776d1a6796e89" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>x</name></member>
      <member refid="classKDL_1_1Vector_1a5177abd2f89d6f3bc891306083e62075" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>y</name></member>
      <member refid="classKDL_1_1Vector_1aa41ede65eeeb3cd0f6bf79ec63f756c4" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>y</name></member>
      <member refid="classKDL_1_1Vector_1a443e864c08b2cbd2b48b1d85b1da8ea5" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>z</name></member>
      <member refid="classKDL_1_1Vector_1ac66357702410a618ae7d0dbefc266a99" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>z</name></member>
      <member refid="classKDL_1_1Vector_1aac50a5f60447f9cb7b4a510c4695ab89" prot="public" virt="non-virtual"><scope>KDL::Vector</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
