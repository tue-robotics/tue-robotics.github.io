<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="inertiatest_8cpp" kind="file" language="C++">
    <compoundname>inertiatest.cpp</compoundname>
    <includes local="no">math.h</includes>
    <includes refid="inertiatest_8hpp" local="yes">inertiatest.hpp</includes>
    <includes refid="frames__io_8hpp" local="no">frames_io.hpp</includes>
    <includes refid="rotationalinertia_8hpp" local="no">rotationalinertia.hpp</includes>
    <includes refid="rigidbodyinertia_8hpp" local="no">rigidbodyinertia.hpp</includes>
    <includes refid="articulatedbodyinertia_8hpp" local="no">articulatedbodyinertia.hpp</includes>
    <includes local="no">Eigen/Core</includes>
    <incdepgraph>
      <node id="1">
        <label>inertiatest.cpp</label>
        <link refid="inertiatest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>functional</label>
        <link refid="cpp/header/functional" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="16">
        <label>utilities/hash_combine.h</label>
        <link refid="hash__combine_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cstdlib</label>
        <link refid="cpp/header/cstdlib" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="23">
        <label>rigidbodyinertia.hpp</label>
        <link refid="rigidbodyinertia_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>frames_io.hpp</label>
        <link refid="frames__io_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Eigen/Core</label>
      </node>
      <node id="7">
        <label>iostream</label>
        <link refid="cpp/header/iostream" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="9">
        <label>fstream</label>
        <link refid="cpp/header/fstream" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="10">
        <label>frames.hpp</label>
        <link refid="frames_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>jacobian.hpp</label>
        <link refid="jacobian_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>utilities/utility_io.h</label>
        <link refid="utility__io_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cassert</label>
        <link refid="cpp/header/cassert" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="12">
        <label>utilities/utility.h</label>
        <link refid="utility_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>iomanip</label>
        <link refid="cpp/header/iomanip" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="18">
        <label>frames.inl</label>
        <link refid="frames_8inl"/>
      </node>
      <node id="2">
        <label>math.h</label>
      </node>
      <node id="19">
        <label>jntarray.hpp</label>
        <link refid="jntarray_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>inertiatest.hpp</label>
        <link refid="inertiatest_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>rotationalinertia.hpp</label>
        <link refid="rotationalinertia_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cppunit/extensions/HelperMacros.h</label>
      </node>
      <node id="15">
        <label>cmath</label>
        <link refid="cpp/header/cmath" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="11">
        <label>utilities/kdl-config.h</label>
        <link refid="kdl-config_8h"/>
      </node>
      <node id="24">
        <label>articulatedbodyinertia.hpp</label>
        <link refid="articulatedbodyinertia_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="inertiatest_8cpp_1a501062313ecce26deabeaddeb5bf331f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CPPUNIT_TEST_SUITE_REGISTRATION</definition>
        <argsstring>(InertiaTest)</argsstring>
        <name>CPPUNIT_TEST_SUITE_REGISTRATION</name>
        <param>
          <type><ref refid="classInertiaTest" kindref="compound">InertiaTest</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/inertiatest.cpp" line="9" column="1" declfile="tests/inertiatest.cpp" declline="9" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="inertiatest_8hpp" kindref="compound">inertiatest.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="frames__io_8hpp" kindref="compound">frames_io.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="rotationalinertia_8hpp" kindref="compound">rotationalinertia.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="rigidbodyinertia_8hpp" kindref="compound">rigidbodyinertia.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="articulatedbodyinertia_8hpp" kindref="compound">articulatedbodyinertia.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="inertiatest_8cpp_1a501062313ecce26deabeaddeb5bf331f" kindref="member">CPPUNIT_TEST_SUITE_REGISTRATION</ref>(<sp/><ref refid="classInertiaTest" kindref="compound">InertiaTest</ref><sp/>);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceKDL" kindref="compound">KDL</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="classInertiaTest_1a8391f13b53ef3826f4637c4a9a6e9ba1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classInertiaTest_1a8391f13b53ef3826f4637c4a9a6e9ba1" kindref="member">InertiaTest::setUp</ref>()</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="classInertiaTest_1a9fe52f0ec92290de639fcad544e75368" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classInertiaTest_1a9fe52f0ec92290de639fcad544e75368" kindref="member">InertiaTest::tearDown</ref>()</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classInertiaTest_1a9e4981cad84032f0c3560200388700a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classInertiaTest_1a9e4981cad84032f0c3560200388700a0" kindref="member">InertiaTest::TestRotationalInertia</ref>()<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>construction<sp/>works<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref><sp/>I0=<ref refid="classKDL_1_1RotationalInertia_1a50fbe96830ed0c31a9de7528c859ae32" kindref="member">RotationalInertia::Zero</ref>();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT(Eigen::Map&lt;Eigen::Matrix3d&gt;(I0.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>).isZero());</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref><sp/>I1;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT(Eigen::Map&lt;Eigen::Matrix3d&gt;(I1.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>).isZero());</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((Eigen::Map&lt;Eigen::Matrix3d&gt;(I0.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)-Eigen::Map&lt;Eigen::Matrix3d&gt;(I1.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)).isZero());</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref><sp/>I2(1,2,3,4,5,6);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>copying<sp/>works<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref><sp/>I3=I2;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((Eigen::Map&lt;Eigen::Matrix3d&gt;(I3.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)-Eigen::Map&lt;Eigen::Matrix3d&gt;(I2.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)).isZero());</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>I2.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>[0]=0.0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT(!(Eigen::Map&lt;Eigen::Matrix3d&gt;(I3.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)-Eigen::Map&lt;Eigen::Matrix3d&gt;(I2.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)).isZero());</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>addition<sp/>and<sp/>multiplication<sp/>works<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Map&lt;Eigen::Matrix3d&gt;(I0.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>).setRandom();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>I1=-2*I0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT(!Eigen::Map&lt;Eigen::Matrix3d&gt;(I1.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>).isZero());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>I1=I1+I0+I0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT(Eigen::Map&lt;Eigen::Matrix3d&gt;(I1.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>).isZero());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>matrix<sp/>is<sp/>symmetric</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((Eigen::Map&lt;Eigen::Matrix3d&gt;(I2.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)-Eigen::Map&lt;Eigen::Matrix3d&gt;(I2.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>).transpose()).isZero());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>angular<sp/>momentum<sp/>is<sp/>correctly<sp/>calculated:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>omega;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(omega);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>momentum=I2*omega;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((Eigen::Map&lt;Eigen::Vector3d&gt;(momentum.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>)-(Eigen::Map&lt;Eigen::Matrix3d&gt;(I2.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)*Eigen::Map&lt;Eigen::Vector3d&gt;(omega.data))).isZero());</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classInertiaTest_1a340ae3cc89b6141d52d529d2b5589622" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classInertiaTest_1a340ae3cc89b6141d52d529d2b5589622" kindref="member">InertiaTest::TestRigidBodyInertia</ref>()<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref><sp/>I1(0.0);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>c;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref><sp/>Ic;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(mass);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(c);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>Ic_eig<sp/>=<sp/>Eigen::Matrix3d::Random();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>it<sp/>symmetric:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Map&lt;Eigen::Matrix3d&gt;(Ic.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)=Ic_eig+Ic_eig.transpose();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref><sp/>I2(mass,c,Ic);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>construction<sp/>works<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.<ref refid="classKDL_1_1RigidBodyInertia_1ae1c13abc7c9cf39b8767f6f6a076f10e" kindref="member">getMass</ref>(),mass);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT(!Eigen::Map&lt;Eigen::Matrix3d&gt;(I2.<ref refid="classKDL_1_1RigidBodyInertia_1a0b1e6ebb0d63dd66c9079683f11f277b" kindref="member">getRotationalInertia</ref>().<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>).isZero());</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.<ref refid="classKDL_1_1RigidBodyInertia_1a89c5adb42c867ac824d39a248fb7345a" kindref="member">getCOG</ref>(),c);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((Eigen::Map&lt;Eigen::Matrix3d&gt;(I2.<ref refid="classKDL_1_1RigidBodyInertia_1a0b1e6ebb0d63dd66c9079683f11f277b" kindref="member">getRotationalInertia</ref>().<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)-(Eigen::Map&lt;Eigen::Matrix3d&gt;(Ic.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)-mass*(Eigen::Map&lt;Eigen::Vector3d&gt;(c.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>)*Eigen::Map&lt;Eigen::Vector3d&gt;(c.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>).transpose()-(Eigen::Map&lt;Eigen::Vector3d&gt;(c.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>).dot(Eigen::Map&lt;Eigen::Vector3d&gt;(c.<ref refid="classKDL_1_1Vector_1a97106b4583f8e2ecf39ed7682b945bd1" kindref="member">data</ref>))*Eigen::Matrix3d::Identity())))).isZero());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref><sp/>I3=I2;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>copying<sp/>works<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.<ref refid="classKDL_1_1RigidBodyInertia_1ae1c13abc7c9cf39b8767f6f6a076f10e" kindref="member">getMass</ref>(),I3.<ref refid="classKDL_1_1RigidBodyInertia_1ae1c13abc7c9cf39b8767f6f6a076f10e" kindref="member">getMass</ref>());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.<ref refid="classKDL_1_1RigidBodyInertia_1a89c5adb42c867ac824d39a248fb7345a" kindref="member">getCOG</ref>(),I3.<ref refid="classKDL_1_1RigidBodyInertia_1a89c5adb42c867ac824d39a248fb7345a" kindref="member">getCOG</ref>());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((Eigen::Map&lt;Eigen::Matrix3d&gt;(I2.<ref refid="classKDL_1_1RigidBodyInertia_1a0b1e6ebb0d63dd66c9079683f11f277b" kindref="member">getRotationalInertia</ref>().<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)-Eigen::Map&lt;Eigen::Matrix3d&gt;(I3.<ref refid="classKDL_1_1RigidBodyInertia_1a0b1e6ebb0d63dd66c9079683f11f277b" kindref="member">getRotationalInertia</ref>().<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)).isZero());</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>multiplication<sp/>and<sp/>addition<sp/>works<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref><sp/>I4=-2*I2<sp/>+I3+I3;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_DOUBLES_EQUAL(I4.<ref refid="classKDL_1_1RigidBodyInertia_1ae1c13abc7c9cf39b8767f6f6a076f10e" kindref="member">getMass</ref>(),0.0,<ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I4.<ref refid="classKDL_1_1RigidBodyInertia_1a89c5adb42c867ac824d39a248fb7345a" kindref="member">getCOG</ref>(),<ref refid="classKDL_1_1Vector_1aac50a5f60447f9cb7b4a510c4695ab89" kindref="member">Vector::Zero</ref>());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT(Eigen::Map&lt;Eigen::Matrix3d&gt;(I4.<ref refid="classKDL_1_1RigidBodyInertia_1a0b1e6ebb0d63dd66c9079683f11f277b" kindref="member">getRotationalInertia</ref>().<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>).isZero());</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>transformations<sp/>work<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>only<sp/>rotation<sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//back<sp/>and<sp/>forward</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref><sp/>R;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(R);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>I3<sp/>=<sp/>R*I2;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>I4<sp/>=<sp/>R.<ref refid="classKDL_1_1Rotation_1a09a2ee554e814222ef86a8d1ce3267b1" kindref="member">Inverse</ref>()*I3;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_DOUBLES_EQUAL(I2.getMass(),I4.<ref refid="classKDL_1_1RigidBodyInertia_1ae1c13abc7c9cf39b8767f6f6a076f10e" kindref="member">getMass</ref>(),<sp/><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.getCOG(),I4.<ref refid="classKDL_1_1RigidBodyInertia_1a89c5adb42c867ac824d39a248fb7345a" kindref="member">getCOG</ref>());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((Eigen::Map&lt;Eigen::Matrix3d&gt;(I2.getRotationalInertia().data)-Eigen::Map&lt;Eigen::Matrix3d&gt;(I4.<ref refid="classKDL_1_1RigidBodyInertia_1a0b1e6ebb0d63dd66c9079683f11f277b" kindref="member">getRotationalInertia</ref>().<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)).isZero());</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//rotation<sp/>and<sp/>total<sp/>with<sp/>p=0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref><sp/>T(R);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>I4<sp/>=<sp/>T*I2;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_DOUBLES_EQUAL(I3.getMass(),I4.<ref refid="classKDL_1_1RigidBodyInertia_1ae1c13abc7c9cf39b8767f6f6a076f10e" kindref="member">getMass</ref>(),<sp/><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I3.getCOG(),I4.<ref refid="classKDL_1_1RigidBodyInertia_1a89c5adb42c867ac824d39a248fb7345a" kindref="member">getCOG</ref>());</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((Eigen::Map&lt;Eigen::Matrix3d&gt;(I3.getRotationalInertia().data)-Eigen::Map&lt;Eigen::Matrix3d&gt;(I4.<ref refid="classKDL_1_1RigidBodyInertia_1a0b1e6ebb0d63dd66c9079683f11f277b" kindref="member">getRotationalInertia</ref>().<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)).isZero());</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>only<sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>p;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(p);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>I3<sp/>=<sp/>I2.RefPoint(p);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>I4<sp/>=<sp/>I3.<ref refid="classKDL_1_1RigidBodyInertia_1a4349dc26f4e538e7630fd5de18484d83" kindref="member">RefPoint</ref>(-p);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_DOUBLES_EQUAL(I2.getMass(),I4.<ref refid="classKDL_1_1RigidBodyInertia_1ae1c13abc7c9cf39b8767f6f6a076f10e" kindref="member">getMass</ref>(),<ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.getCOG(),I4.<ref refid="classKDL_1_1RigidBodyInertia_1a89c5adb42c867ac824d39a248fb7345a" kindref="member">getCOG</ref>());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((Eigen::Map&lt;Eigen::Matrix3d&gt;(I2.getRotationalInertia().data)-Eigen::Map&lt;Eigen::Matrix3d&gt;(I4.<ref refid="classKDL_1_1RigidBodyInertia_1a0b1e6ebb0d63dd66c9079683f11f277b" kindref="member">getRotationalInertia</ref>().<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)).isZero());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>T=<ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref>(-p);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>I4<sp/>=<sp/>T*I2;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_DOUBLES_EQUAL(I3.getMass(),I4.<ref refid="classKDL_1_1RigidBodyInertia_1ae1c13abc7c9cf39b8767f6f6a076f10e" kindref="member">getMass</ref>(),<ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I3.getCOG(),I4.<ref refid="classKDL_1_1RigidBodyInertia_1a89c5adb42c867ac824d39a248fb7345a" kindref="member">getCOG</ref>());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((Eigen::Map&lt;Eigen::Matrix3d&gt;(I3.getRotationalInertia().data)-Eigen::Map&lt;Eigen::Matrix3d&gt;(I4.<ref refid="classKDL_1_1RigidBodyInertia_1a0b1e6ebb0d63dd66c9079683f11f277b" kindref="member">getRotationalInertia</ref>().<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)).isZero());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(T);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>I3=T*I2;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>I4=T.<ref refid="classKDL_1_1Frame_1ac508fa4e7c59527f8f377a3c6c225d12" kindref="member">Inverse</ref>()*I3;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/>a;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(a);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref><sp/>f=I2*a;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(T*f,(T*I2)*(T*a));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(T);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>I3<sp/>=<sp/>T*I2;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>I4<sp/>=<sp/>T.<ref refid="classKDL_1_1Frame_1ac508fa4e7c59527f8f377a3c6c225d12" kindref="member">Inverse</ref>()*I3;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_DOUBLES_EQUAL(I2.getMass(),I4.<ref refid="classKDL_1_1RigidBodyInertia_1ae1c13abc7c9cf39b8767f6f6a076f10e" kindref="member">getMass</ref>(),<ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.getCOG(),I4.<ref refid="classKDL_1_1RigidBodyInertia_1a89c5adb42c867ac824d39a248fb7345a" kindref="member">getCOG</ref>());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((Eigen::Map&lt;Eigen::Matrix3d&gt;(I2.getRotationalInertia().data)-Eigen::Map&lt;Eigen::Matrix3d&gt;(I4.<ref refid="classKDL_1_1RigidBodyInertia_1a0b1e6ebb0d63dd66c9079683f11f277b" kindref="member">getRotationalInertia</ref>().<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>)).isZero());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130" refid="classInertiaTest_1a87fec9379623d182b6d9dd7eb214239e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classInertiaTest_1a87fec9379623d182b6d9dd7eb214239e" kindref="member">InertiaTest::TestArticulatedBodyInertia</ref>()<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mass;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>c;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref><sp/>Ic;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(mass);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(c);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d::Map(Ic.<ref refid="classKDL_1_1RotationalInertia_1a84d956cfe35692bc64cf90f8b0923ef3" kindref="member">data</ref>).triangularView&lt;Eigen::Lower&gt;()=<sp/>Eigen::Matrix3d::Random().triangularView&lt;Eigen::Lower&gt;();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref><sp/>RBI2(mass,c,Ic);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref><sp/>I2(RBI2);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref><sp/>I1(mass,c,Ic);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>construction<sp/>works<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>,I1.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.<ref refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" kindref="member">H</ref>,I1.<ref refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" kindref="member">H</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>,I1.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>I1<sp/>=<sp/><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref>(I2);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>,I1.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.<ref refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" kindref="member">H</ref>,I1.<ref refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" kindref="member">H</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>,I1.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(I2.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>,(Eigen::Matrix3d::Identity()*mass).eval());</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT(!I2.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>.isZero());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.I-(Eigen::Map&lt;Eigen::Matrix3d&gt;(Ic.data)-mass*(Eigen::Map&lt;Eigen::Vector3d&gt;(c.data)*Eigen::Map&lt;Eigen::Vector3d&gt;(c.data).transpose()-(Eigen::Map&lt;Eigen::Vector3d&gt;(c.data).dot(Eigen::Map&lt;Eigen::Vector3d&gt;(c.data))*Eigen::Matrix3d::Identity())))).isZero());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.H-(Eigen::Map&lt;Eigen::Vector3d&gt;(c.data)*Eigen::Map&lt;Eigen::Vector3d&gt;(c.data).transpose()-(Eigen::Map&lt;Eigen::Vector3d&gt;(c.data).dot(Eigen::Map&lt;Eigen::Vector3d&gt;(c.data))*Eigen::Matrix3d::Identity()))).isZero());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref><sp/>I3=I2;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>if<sp/>copying<sp/>works<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>-I3.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>).isZero());</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.<ref refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" kindref="member">H</ref>-I3.<ref refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" kindref="member">H</ref>).isZero());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>-I3.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>).isZero());</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>multiplication<sp/>and<sp/>addition<sp/>works<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref><sp/>I4=-2*I2<sp/>+I3+I3;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT(I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>.isZero());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT(I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" kindref="member">H</ref>.isZero());</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT(I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>.isZero());</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>if<sp/>transformations<sp/>work<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>only<sp/>rotation<sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//back<sp/>and<sp/>forward</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref><sp/>R;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(R);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>I3<sp/>=<sp/>R*I2;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Map&lt;Eigen::Matrix3d&gt;<sp/>E(R.<ref refid="classKDL_1_1Rotation_1aad4572c3cd7591216d5dc561abbcbdb6" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>tmp<sp/>=<sp/>E.transpose()*I2.M*E;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I3.M-tmp).isZero());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>E.transpose()*I2.H*E;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I3.H-tmp).isZero());</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>E.transpose()*I2.I*E;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I3.I-tmp).isZero());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>I4<sp/>=<sp/>R.<ref refid="classKDL_1_1Rotation_1a09a2ee554e814222ef86a8d1ce3267b1" kindref="member">Inverse</ref>()*I3;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.M-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>).isZero());</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.H-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" kindref="member">H</ref>).isZero());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.I-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>).isZero());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//rotation<sp/>and<sp/>total<sp/>with<sp/>p=0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref><sp/>T(R);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>I4<sp/>=<sp/>T*I2;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I3.M-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>).isZero());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I3.H-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" kindref="member">H</ref>).isZero());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I3.I-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>).isZero());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Check<sp/>only<sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref><sp/>p;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(p);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>I3<sp/>=<sp/>I2.RefPoint(p);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>I4<sp/>=<sp/>I3.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a079cf1b582f5b7abe3c6f0ee5903bff1" kindref="member">RefPoint</ref>(-p);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.M-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>).isZero());</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.H-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" kindref="member">H</ref>).isZero());</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.I-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>).isZero());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>T=<ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref>(-p);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>I4<sp/>=<sp/>T*I2;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I3.M-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>).isZero());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I3.H-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" kindref="member">H</ref>).isZero());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I3.I-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>).isZero());</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(T);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>I3=T*I2;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>I4=T.<ref refid="classKDL_1_1Frame_1ac508fa4e7c59527f8f377a3c6c225d12" kindref="member">Inverse</ref>()*I3;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref><sp/>a;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(a);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref><sp/>f=I2*a;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT_EQUAL(T*f,(T*I2)*(T*a));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" kindref="member">random</ref>(T);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>I3<sp/>=<sp/>T*I2;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>I4<sp/>=<sp/>T.<ref refid="classKDL_1_1Frame_1ac508fa4e7c59527f8f377a3c6c225d12" kindref="member">Inverse</ref>()*I3;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.M-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a4554945bd26747db6b3e5a66c8d41a48" kindref="member">M</ref>).isZero());</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.H-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1ad50ff6e5a4b88e4f4f783d66ae550738" kindref="member">H</ref>).isZero());</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>CPPUNIT_ASSERT((I2.I-I4.<ref refid="classKDL_1_1ArticulatedBodyInertia_1a10c72eceeae5dcc9ddabc503c1cac8d3" kindref="member">I</ref>).isZero());</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tests/inertiatest.cpp"/>
  </compounddef>
</doxygen>
