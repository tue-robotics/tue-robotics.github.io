<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classKDL_1_1Twist" kind="class" language="C++" prot="public">
    <compoundname>KDL::Twist</compoundname>
    <includes refid="frames_8hpp" local="no">frames.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" prot="public" static="no" mutable="no">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector KDL::Twist::rot</definition>
        <argsstring></argsstring>
        <name>rot</name>
        <briefdescription>
<para>The rotational velocity of that point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="726" column="12" bodyfile="src/frames.hpp" bodystart="726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" prot="public" static="no" mutable="no">
        <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector KDL::Twist::vel</definition>
        <argsstring></argsstring>
        <name>vel</name>
        <briefdescription>
<para>The velocity of that point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="725" column="12" bodyfile="src/frames.hpp" bodystart="725" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classKDL_1_1Twist_1a429650b165c7435c0eacfd7777c0ed8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend double</type>
        <definition>double dot</definition>
        <argsstring>(const Twist &amp;lhs, const Wrench &amp;rhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="759" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1a4aacbaba41da650a85bd3c1348839472" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend double</type>
        <definition>double dot</definition>
        <argsstring>(const Wrench &amp;rhs, const Twist &amp;lhs)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="760" column="27"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1a4d2986be7f6dd2251b5202b94d777cc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool Equal</definition>
        <argsstring>(const Twist &amp;a, const Twist &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="784" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1aee3a66b0ddf3b769f015c89b610db0c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Frame</definition>
        <argsstring></argsstring>
        <name>Frame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="793" column="5" bodyfile="src/frames.hpp" bodystart="793" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1afd3d551a546d21e9e3fd58d370cdc597" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Twist &amp;a, const Twist &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The literal inequality <ref refid="classKDL_1_1Twist_1afd3d551a546d21e9e3fd58d370cdc597" kindref="member">operator!=()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="789" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1a969cd47ef10751021ada52c678503ce7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist operator*</definition>
        <argsstring>(const Twist &amp;lhs, const Twist &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Spatial cross product for 6d motion vectors, beware all of them have to be expressed in the same reference frame/point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="763" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1a10f7a1660ecf13906fc0808f9d264d33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench operator*</definition>
        <argsstring>(const Twist &amp;lhs, const Wrench &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Spatial cross product for 6d force vectors, beware all of them have to be expressed in the same reference frame/point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="765" column="26"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1a04b73370fb4ad857f2b4cb720f3c9113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist operator*</definition>
        <argsstring>(const Twist &amp;lhs, double rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="753" column="26"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1ac7e5ad8e49d4f92b49b5d6b16e606158" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist operator*</definition>
        <argsstring>(double lhs, const Twist &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="754" column="26"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1ad0f34bc2ed48c3caa688b8e405466985" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist operator+</definition>
        <argsstring>(const Twist &amp;lhs, const Twist &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="756" column="26"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1aa659300da279e4d00b44489a755d4be9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist operator-</definition>
        <argsstring>(const Twist &amp;arg)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="758" column="26"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1a6c7c88bf859de28239ded2fdbcd848bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist operator-</definition>
        <argsstring>(const Twist &amp;lhs, const Twist &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="757" column="26"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1a939e42c12cc59ac6eb8f8152c4461ea1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist operator/</definition>
        <argsstring>(const Twist &amp;lhs, double rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="755" column="26"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1a5a541a88ae93c7a7735857a3d5bf257e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Twist &amp;a, const Twist &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>The literal equality <ref refid="classKDL_1_1Twist_1a5a541a88ae93c7a7735857a3d5bf257e" kindref="member">operator==()</ref>, also identical. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="787" column="25"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1aa9d2bf0f1d1d2655fb37b513d3159be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Rotation</definition>
        <argsstring></argsstring>
        <name>Rotation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="792" column="5" bodyfile="src/frames.hpp" bodystart="792" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classKDL_1_1Twist_1a8a39c17bd375db7c35e9d8f475770234" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend void</type>
        <definition>void SetToZero</definition>
        <argsstring>(Twist &amp;v)</argsstring>
        <name>SetToZero</name>
        <param>
          <type><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="761" column="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classKDL_1_1Twist_1a35ff2697b863859d0c1d63b48120b406" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double &amp; Twist::operator()</definition>
        <argsstring>(int i)</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>index-based access to components, first vel(0..2), then rot(3..5) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="737" column="19" bodyfile="src/frames.inl" bodystart="326" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Twist_1a8b509ec22cf6bfbf46f533882d923409" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double Twist::operator()</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>index-based access to components, first vel(0..2), then rot(3..5) For use with a const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="741" column="19" bodyfile="src/frames.inl" bodystart="335" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Twist_1a34b35ebb6c8e2ac3b19ca7d0aac5f467" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
        <definition>Twist &amp; Twist::operator+=</definition>
        <argsstring>(const Twist &amp;arg)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="735" column="18" bodyfile="src/frames.inl" bodystart="319" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Twist_1ad357a06d42137c4973ac6b368fd6be74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
        <definition>Twist &amp; Twist::operator-=</definition>
        <argsstring>(const Twist &amp;arg)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="734" column="18" bodyfile="src/frames.inl" bodystart="312" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Twist_1ab044b0f28eccd7a452a644c311242a13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; KDL::Twist::operator[]</definition>
        <argsstring>(int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="748" column="13" bodyfile="src/frames.hpp" bodystart="748" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Twist_1ad526767d8b1369ff2493680f1df15ddf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::Twist::operator[]</definition>
        <argsstring>(int index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="743" column="13" bodyfile="src/frames.hpp" bodystart="743" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Twist_1abd257927af744c4b6e985edc22f0b667" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist Twist::RefPoint</definition>
        <argsstring>(const Vector &amp;v_base_AB) const</argsstring>
        <name>RefPoint</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v_base_AB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the reference point of the twist. The vector v_base_AB is expressed in the same base as the twist The vector v_base_AB is a vector from the old point to the new point.</para>
<para>Complexity : 6M+6A </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="779" column="19" bodyfile="src/frames.inl" bodystart="302" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Twist_1aaa84dee400c40843546885ee6d7f8ec7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Twist::ReverseSign</definition>
        <argsstring>()</argsstring>
        <name>ReverseSign</name>
        <briefdescription>
<para>Reverses the sign of the twist. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="771" column="18" bodyfile="src/frames.inl" bodystart="296" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Twist_1a78cd07ebe62d640d862c7e46e0063837" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::Twist::Twist</definition>
        <argsstring>()</argsstring>
        <name>Twist</name>
        <briefdescription>
<para>The default constructor initialises to Zero via the constructor of <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="730" column="5" bodyfile="src/frames.hpp" bodystart="730" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="classKDL_1_1Twist_1a14c164a7b0e81336d1e3e15a2585e150" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>KDL::Twist::Twist</definition>
        <argsstring>(const Vector &amp;_vel, const Vector &amp;_rot)</argsstring>
        <name>Twist</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>_vel</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>_rot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="732" column="5" bodyfile="src/frames.hpp" bodystart="732" bodyend="732"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classKDL_1_1Twist_1aeb2250f1de9e0c6f9fe738dc8c083bc9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>Twist Twist::Zero</definition>
        <argsstring>()</argsstring>
        <name>Zero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a zero <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> : <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref>(<ref refid="classKDL_1_1Vector_1aac50a5f60447f9cb7b4a510c4695ab89" kindref="member">Vector::Zero()</ref>,<ref refid="classKDL_1_1Vector_1aac50a5f60447f9cb7b4a510c4695ab89" kindref="member">Vector::Zero()</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="768" column="26" bodyfile="src/frames.inl" bodystart="290" bodyend="293"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>represents both translational and rotational velocities. </para>
    </briefdescription>
    <detaileddescription>
<para>This class represents a twist. A twist is the combination of translational velocity and rotational velocity applied at one point. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>KDL::Twist</label>
        <link refid="classKDL_1_1Twist"/>
        <childnode refid="2" relation="usage">
          <edgelabel>rot</edgelabel>
          <edgelabel>vel</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>KDL::Vector</label>
        <link refid="classKDL_1_1Vector"/>
      </node>
    </collaborationgraph>
    <location file="src/frames.hpp" line="723" column="12" bodyfile="src/frames.hpp" bodystart="723" bodyend="794"/>
    <listofallmembers>
      <member refid="classKDL_1_1Twist_1a429650b165c7435c0eacfd7777c0ed8a" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>dot</name></member>
      <member refid="classKDL_1_1Twist_1a4aacbaba41da650a85bd3c1348839472" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>dot</name></member>
      <member refid="classKDL_1_1Twist_1a4d2986be7f6dd2251b5202b94d777cc9" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>Equal</name></member>
      <member refid="classKDL_1_1Twist_1aee3a66b0ddf3b769f015c89b610db0c7" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>Frame</name></member>
      <member refid="classKDL_1_1Twist_1afd3d551a546d21e9e3fd58d370cdc597" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator!=</name></member>
      <member refid="classKDL_1_1Twist_1a35ff2697b863859d0c1d63b48120b406" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator()</name></member>
      <member refid="classKDL_1_1Twist_1a8b509ec22cf6bfbf46f533882d923409" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator()</name></member>
      <member refid="classKDL_1_1Twist_1a04b73370fb4ad857f2b4cb720f3c9113" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Twist_1ac7e5ad8e49d4f92b49b5d6b16e606158" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Twist_1a969cd47ef10751021ada52c678503ce7" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Twist_1a10f7a1660ecf13906fc0808f9d264d33" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator*</name></member>
      <member refid="classKDL_1_1Twist_1ad0f34bc2ed48c3caa688b8e405466985" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator+</name></member>
      <member refid="classKDL_1_1Twist_1a34b35ebb6c8e2ac3b19ca7d0aac5f467" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator+=</name></member>
      <member refid="classKDL_1_1Twist_1a6c7c88bf859de28239ded2fdbcd848bf" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator-</name></member>
      <member refid="classKDL_1_1Twist_1aa659300da279e4d00b44489a755d4be9" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator-</name></member>
      <member refid="classKDL_1_1Twist_1ad357a06d42137c4973ac6b368fd6be74" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator-=</name></member>
      <member refid="classKDL_1_1Twist_1a939e42c12cc59ac6eb8f8152c4461ea1" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator/</name></member>
      <member refid="classKDL_1_1Twist_1a5a541a88ae93c7a7735857a3d5bf257e" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator==</name></member>
      <member refid="classKDL_1_1Twist_1ad526767d8b1369ff2493680f1df15ddf" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator[]</name></member>
      <member refid="classKDL_1_1Twist_1ab044b0f28eccd7a452a644c311242a13" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>operator[]</name></member>
      <member refid="classKDL_1_1Twist_1abd257927af744c4b6e985edc22f0b667" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>RefPoint</name></member>
      <member refid="classKDL_1_1Twist_1aaa84dee400c40843546885ee6d7f8ec7" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>ReverseSign</name></member>
      <member refid="classKDL_1_1Twist_1a5ab2bb436b67c902e9c7735c4df16eba" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>rot</name></member>
      <member refid="classKDL_1_1Twist_1aa9d2bf0f1d1d2655fb37b513d3159be3" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>Rotation</name></member>
      <member refid="classKDL_1_1Twist_1a8a39c17bd375db7c35e9d8f475770234" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>SetToZero</name></member>
      <member refid="classKDL_1_1Twist_1a78cd07ebe62d640d862c7e46e0063837" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>Twist</name></member>
      <member refid="classKDL_1_1Twist_1a14c164a7b0e81336d1e3e15a2585e150" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>Twist</name></member>
      <member refid="classKDL_1_1Twist_1adda560fbd643ba2448d519fce626b680" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>vel</name></member>
      <member refid="classKDL_1_1Twist_1aeb2250f1de9e0c6f9fe738dc8c083bc9" prot="public" virt="non-virtual"><scope>KDL::Twist</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
