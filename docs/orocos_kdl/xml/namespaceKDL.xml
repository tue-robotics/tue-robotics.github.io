<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceKDL" kind="namespace" language="C++">
    <compoundname>KDL</compoundname>
    <innerclass refid="classKDL_1_1ArticulatedBodyInertia" prot="public">KDL::ArticulatedBodyInertia</innerclass>
    <innerclass refid="classKDL_1_1Chain" prot="public">KDL::Chain</innerclass>
    <innerclass refid="classKDL_1_1ChainDynParam" prot="public">KDL::ChainDynParam</innerclass>
    <innerclass refid="classKDL_1_1ChainExternalWrenchEstimator" prot="public">KDL::ChainExternalWrenchEstimator</innerclass>
    <innerclass refid="classKDL_1_1ChainFdSolver" prot="public">KDL::ChainFdSolver</innerclass>
    <innerclass refid="classKDL_1_1ChainFdSolver__RNE" prot="public">KDL::ChainFdSolver_RNE</innerclass>
    <innerclass refid="classKDL_1_1ChainFkSolverAcc" prot="public">KDL::ChainFkSolverAcc</innerclass>
    <innerclass refid="classKDL_1_1ChainFkSolverPos" prot="public">KDL::ChainFkSolverPos</innerclass>
    <innerclass refid="classKDL_1_1ChainFkSolverPos__recursive" prot="public">KDL::ChainFkSolverPos_recursive</innerclass>
    <innerclass refid="classKDL_1_1ChainFkSolverVel" prot="public">KDL::ChainFkSolverVel</innerclass>
    <innerclass refid="classKDL_1_1ChainFkSolverVel__recursive" prot="public">KDL::ChainFkSolverVel_recursive</innerclass>
    <innerclass refid="classKDL_1_1ChainHdSolver__Vereshchagin" prot="public">KDL::ChainHdSolver_Vereshchagin</innerclass>
    <innerclass refid="classKDL_1_1ChainIdSolver" prot="public">KDL::ChainIdSolver</innerclass>
    <innerclass refid="classKDL_1_1ChainIdSolver__RNE" prot="public">KDL::ChainIdSolver_RNE</innerclass>
    <innerclass refid="classKDL_1_1ChainIdSolver__Vereshchagin" prot="public">KDL::ChainIdSolver_Vereshchagin</innerclass>
    <innerclass refid="classKDL_1_1ChainIkSolverAcc" prot="public">KDL::ChainIkSolverAcc</innerclass>
    <innerclass refid="classKDL_1_1ChainIkSolverPos" prot="public">KDL::ChainIkSolverPos</innerclass>
    <innerclass refid="classKDL_1_1ChainIkSolverPos__LMA" prot="public">KDL::ChainIkSolverPos_LMA</innerclass>
    <innerclass refid="classKDL_1_1ChainIkSolverPos__NR" prot="public">KDL::ChainIkSolverPos_NR</innerclass>
    <innerclass refid="classKDL_1_1ChainIkSolverPos__NR__JL" prot="public">KDL::ChainIkSolverPos_NR_JL</innerclass>
    <innerclass refid="classKDL_1_1ChainIkSolverVel" prot="public">KDL::ChainIkSolverVel</innerclass>
    <innerclass refid="classKDL_1_1ChainIkSolverVel__pinv" prot="public">KDL::ChainIkSolverVel_pinv</innerclass>
    <innerclass refid="classKDL_1_1ChainIkSolverVel__pinv__givens" prot="public">KDL::ChainIkSolverVel_pinv_givens</innerclass>
    <innerclass refid="classKDL_1_1ChainIkSolverVel__pinv__nso" prot="public">KDL::ChainIkSolverVel_pinv_nso</innerclass>
    <innerclass refid="classKDL_1_1ChainIkSolverVel__wdls" prot="public">KDL::ChainIkSolverVel_wdls</innerclass>
    <innerclass refid="classKDL_1_1ChainJntToJacDotSolver" prot="public">KDL::ChainJntToJacDotSolver</innerclass>
    <innerclass refid="classKDL_1_1ChainJntToJacSolver" prot="public">KDL::ChainJntToJacSolver</innerclass>
    <innerclass refid="classKDL_1_1checkBinary" prot="public">KDL::checkBinary</innerclass>
    <innerclass refid="classKDL_1_1checkBinary__displ" prot="public">KDL::checkBinary_displ</innerclass>
    <innerclass refid="classKDL_1_1checkBinaryVel" prot="public">KDL::checkBinaryVel</innerclass>
    <innerclass refid="classKDL_1_1checkUnary" prot="public">KDL::checkUnary</innerclass>
    <innerclass refid="classKDL_1_1checkUnaryVel" prot="public">KDL::checkUnaryVel</innerclass>
    <innerclass refid="classKDL_1_1Error" prot="public">KDL::Error</innerclass>
    <innerclass refid="classKDL_1_1Error__BasicIO" prot="public">KDL::Error_BasicIO</innerclass>
    <innerclass refid="classKDL_1_1Error__BasicIO__Exp__Delim" prot="public">KDL::Error_BasicIO_Exp_Delim</innerclass>
    <innerclass refid="classKDL_1_1Error__BasicIO__File" prot="public">KDL::Error_BasicIO_File</innerclass>
    <innerclass refid="classKDL_1_1Error__BasicIO__Not__A__Space" prot="public">KDL::Error_BasicIO_Not_A_Space</innerclass>
    <innerclass refid="classKDL_1_1Error__BasicIO__Not__Opened" prot="public">KDL::Error_BasicIO_Not_Opened</innerclass>
    <innerclass refid="classKDL_1_1Error__BasicIO__ToBig" prot="public">KDL::Error_BasicIO_ToBig</innerclass>
    <innerclass refid="classKDL_1_1Error__BasicIO__Unexpected" prot="public">KDL::Error_BasicIO_Unexpected</innerclass>
    <innerclass refid="classKDL_1_1Error__Chain__Unexpected__id" prot="public">KDL::Error_Chain_Unexpected_id</innerclass>
    <innerclass refid="classKDL_1_1Error__ChainIO" prot="public">KDL::Error_ChainIO</innerclass>
    <innerclass refid="classKDL_1_1Error__Criterium" prot="public">KDL::Error_Criterium</innerclass>
    <innerclass refid="classKDL_1_1Error__Criterium__Unexpected__id" prot="public">KDL::Error_Criterium_Unexpected_id</innerclass>
    <innerclass refid="classKDL_1_1Error__Frame__Frame__Unexpected__id" prot="public">KDL::Error_Frame_Frame_Unexpected_id</innerclass>
    <innerclass refid="classKDL_1_1Error__Frame__Rotation__Unexpected__id" prot="public">KDL::Error_Frame_Rotation_Unexpected_id</innerclass>
    <innerclass refid="classKDL_1_1Error__Frame__Vector__Unexpected__id" prot="public">KDL::Error_Frame_Vector_Unexpected_id</innerclass>
    <innerclass refid="classKDL_1_1Error__FrameIO" prot="public">KDL::Error_FrameIO</innerclass>
    <innerclass refid="classKDL_1_1Error__Integrator" prot="public">KDL::Error_Integrator</innerclass>
    <innerclass refid="classKDL_1_1Error__IO" prot="public">KDL::Error_IO</innerclass>
    <innerclass refid="classKDL_1_1Error__Limits" prot="public">KDL::Error_Limits</innerclass>
    <innerclass refid="classKDL_1_1Error__Limits__Unexpected__id" prot="public">KDL::Error_Limits_Unexpected_id</innerclass>
    <innerclass refid="classKDL_1_1Error__MotionIO" prot="public">KDL::Error_MotionIO</innerclass>
    <innerclass refid="classKDL_1_1Error__MotionIO__Unexpected__MotProf" prot="public">KDL::Error_MotionIO_Unexpected_MotProf</innerclass>
    <innerclass refid="classKDL_1_1Error__MotionIO__Unexpected__Traj" prot="public">KDL::Error_MotionIO_Unexpected_Traj</innerclass>
    <innerclass refid="classKDL_1_1Error__MotionPlanning" prot="public">KDL::Error_MotionPlanning</innerclass>
    <innerclass refid="classKDL_1_1Error__MotionPlanning__Circle__No__Plane" prot="public">KDL::Error_MotionPlanning_Circle_No_Plane</innerclass>
    <innerclass refid="classKDL_1_1Error__MotionPlanning__Circle__ToSmall" prot="public">KDL::Error_MotionPlanning_Circle_ToSmall</innerclass>
    <innerclass refid="classKDL_1_1Error__MotionPlanning__Incompatible" prot="public">KDL::Error_MotionPlanning_Incompatible</innerclass>
    <innerclass refid="classKDL_1_1Error__MotionPlanning__Not__Applicable" prot="public">KDL::Error_MotionPlanning_Not_Applicable</innerclass>
    <innerclass refid="classKDL_1_1Error__MotionPlanning__Not__Feasible" prot="public">KDL::Error_MotionPlanning_Not_Feasible</innerclass>
    <innerclass refid="classKDL_1_1Error__Not__Implemented" prot="public">KDL::Error_Not_Implemented</innerclass>
    <innerclass refid="classKDL_1_1Error__Redundancy" prot="public">KDL::Error_Redundancy</innerclass>
    <innerclass refid="classKDL_1_1Error__Redundancy__Illegal__Resolutiontype" prot="public">KDL::Error_Redundancy_Illegal_Resolutiontype</innerclass>
    <innerclass refid="classKDL_1_1Error__Redundancy__Low__Manip" prot="public">KDL::Error_Redundancy_Low_Manip</innerclass>
    <innerclass refid="classKDL_1_1Error__Redundancy__Unavoidable" prot="public">KDL::Error_Redundancy_Unavoidable</innerclass>
    <innerclass refid="classKDL_1_1Error__RedundancyIO" prot="public">KDL::Error_RedundancyIO</innerclass>
    <innerclass refid="classKDL_1_1Error__Stepsize__To__Small" prot="public">KDL::Error_Stepsize_To_Small</innerclass>
    <innerclass refid="classKDL_1_1Error__Stepsize__Underflow" prot="public">KDL::Error_Stepsize_Underflow</innerclass>
    <innerclass refid="classKDL_1_1Error__To__Many__Steps" prot="public">KDL::Error_To_Many_Steps</innerclass>
    <innerclass refid="classKDL_1_1Frame" prot="public">KDL::Frame</innerclass>
    <innerclass refid="classKDL_1_1Frame2" prot="public">KDL::Frame2</innerclass>
    <innerclass refid="classKDL_1_1FrameAcc" prot="public">KDL::FrameAcc</innerclass>
    <innerclass refid="classKDL_1_1FrameVel" prot="public">KDL::FrameVel</innerclass>
    <innerclass refid="classKDL_1_1Jacobian" prot="public">KDL::Jacobian</innerclass>
    <innerclass refid="classKDL_1_1JntArray" prot="public">KDL::JntArray</innerclass>
    <innerclass refid="classKDL_1_1JntArrayAcc" prot="public">KDL::JntArrayAcc</innerclass>
    <innerclass refid="classKDL_1_1JntArrayVel" prot="public">KDL::JntArrayVel</innerclass>
    <innerclass refid="classKDL_1_1Joint" prot="public">KDL::Joint</innerclass>
    <innerclass refid="classKDL_1_1Path" prot="public">KDL::Path</innerclass>
    <innerclass refid="classKDL_1_1Path__Circle" prot="public">KDL::Path_Circle</innerclass>
    <innerclass refid="classKDL_1_1Path__Composite" prot="public">KDL::Path_Composite</innerclass>
    <innerclass refid="classKDL_1_1Path__Cyclic__Closed" prot="public">KDL::Path_Cyclic_Closed</innerclass>
    <innerclass refid="classKDL_1_1Path__Line" prot="public">KDL::Path_Line</innerclass>
    <innerclass refid="classKDL_1_1Path__Point" prot="public">KDL::Path_Point</innerclass>
    <innerclass refid="classKDL_1_1Path__RoundedComposite" prot="public">KDL::Path_RoundedComposite</innerclass>
    <innerclass refid="classKDL_1_1Rall1d" prot="public">KDL::Rall1d</innerclass>
    <innerclass refid="classKDL_1_1Rall2d" prot="public">KDL::Rall2d</innerclass>
    <innerclass refid="classKDL_1_1RigidBodyInertia" prot="public">KDL::RigidBodyInertia</innerclass>
    <innerclass refid="classKDL_1_1Rotation" prot="public">KDL::Rotation</innerclass>
    <innerclass refid="classKDL_1_1Rotation2" prot="public">KDL::Rotation2</innerclass>
    <innerclass refid="classKDL_1_1RotationAcc" prot="public">KDL::RotationAcc</innerclass>
    <innerclass refid="classKDL_1_1RotationalInertia" prot="public">KDL::RotationalInertia</innerclass>
    <innerclass refid="classKDL_1_1RotationalInterpolation" prot="public">KDL::RotationalInterpolation</innerclass>
    <innerclass refid="classKDL_1_1RotationalInterpolation__SingleAxis" prot="public">KDL::RotationalInterpolation_SingleAxis</innerclass>
    <innerclass refid="classKDL_1_1RotationVel" prot="public">KDL::RotationVel</innerclass>
    <innerclass refid="classKDL_1_1scoped__ptr" prot="public">KDL::scoped_ptr</innerclass>
    <innerclass refid="classKDL_1_1Segment" prot="public">KDL::Segment</innerclass>
    <innerclass refid="classKDL_1_1SolverI" prot="public">KDL::SolverI</innerclass>
    <innerclass refid="classKDL_1_1Stiffness" prot="public">KDL::Stiffness</innerclass>
    <innerclass refid="classKDL_1_1SVD__HH" prot="public">KDL::SVD_HH</innerclass>
    <innerclass refid="classKDL_1_1TI" prot="public">KDL::TI</innerclass>
    <innerclass refid="classKDL_1_1TI_3_01double_01_4" prot="public">KDL::TI&lt; double &gt;</innerclass>
    <innerclass refid="classKDL_1_1TI_3_01int_01_4" prot="public">KDL::TI&lt; int &gt;</innerclass>
    <innerclass refid="classKDL_1_1Trajectory" prot="public">KDL::Trajectory</innerclass>
    <innerclass refid="classKDL_1_1Trajectory__Composite" prot="public">KDL::Trajectory_Composite</innerclass>
    <innerclass refid="classKDL_1_1Trajectory__Segment" prot="public">KDL::Trajectory_Segment</innerclass>
    <innerclass refid="classKDL_1_1Trajectory__Stationary" prot="public">KDL::Trajectory_Stationary</innerclass>
    <innerclass refid="classKDL_1_1Tree" prot="public">KDL::Tree</innerclass>
    <innerclass refid="classKDL_1_1TreeElement" prot="public">KDL::TreeElement</innerclass>
    <innerclass refid="classKDL_1_1TreeFkSolverPos" prot="public">KDL::TreeFkSolverPos</innerclass>
    <innerclass refid="classKDL_1_1TreeFkSolverPos__recursive" prot="public">KDL::TreeFkSolverPos_recursive</innerclass>
    <innerclass refid="classKDL_1_1TreeIdSolver" prot="public">KDL::TreeIdSolver</innerclass>
    <innerclass refid="classKDL_1_1TreeIdSolver__RNE" prot="public">KDL::TreeIdSolver_RNE</innerclass>
    <innerclass refid="classKDL_1_1TreeIkSolverPos" prot="public">KDL::TreeIkSolverPos</innerclass>
    <innerclass refid="classKDL_1_1TreeIkSolverPos__NR__JL" prot="public">KDL::TreeIkSolverPos_NR_JL</innerclass>
    <innerclass refid="classKDL_1_1TreeIkSolverPos__Online" prot="public">KDL::TreeIkSolverPos_Online</innerclass>
    <innerclass refid="classKDL_1_1TreeIkSolverVel" prot="public">KDL::TreeIkSolverVel</innerclass>
    <innerclass refid="classKDL_1_1TreeIkSolverVel__wdls" prot="public">KDL::TreeIkSolverVel_wdls</innerclass>
    <innerclass refid="classKDL_1_1TreeJntToJacSolver" prot="public">KDL::TreeJntToJacSolver</innerclass>
    <innerclass refid="classKDL_1_1Twist" prot="public">KDL::Twist</innerclass>
    <innerclass refid="classKDL_1_1TwistAcc" prot="public">KDL::TwistAcc</innerclass>
    <innerclass refid="classKDL_1_1TwistVel" prot="public">KDL::TwistVel</innerclass>
    <innerclass refid="classKDL_1_1Vector" prot="public">KDL::Vector</innerclass>
    <innerclass refid="classKDL_1_1Vector2" prot="public">KDL::Vector2</innerclass>
    <innerclass refid="classKDL_1_1VectorAcc" prot="public">KDL::VectorAcc</innerclass>
    <innerclass refid="classKDL_1_1VectorVel" prot="public">KDL::VectorVel</innerclass>
    <innerclass refid="classKDL_1_1VelocityProfile" prot="public">KDL::VelocityProfile</innerclass>
    <innerclass refid="classKDL_1_1VelocityProfile__Dirac" prot="public">KDL::VelocityProfile_Dirac</innerclass>
    <innerclass refid="classKDL_1_1VelocityProfile__Rectangular" prot="public">KDL::VelocityProfile_Rectangular</innerclass>
    <innerclass refid="classKDL_1_1VelocityProfile__Spline" prot="public">KDL::VelocityProfile_Spline</innerclass>
    <innerclass refid="classKDL_1_1VelocityProfile__Trap" prot="public">KDL::VelocityProfile_Trap</innerclass>
    <innerclass refid="classKDL_1_1VelocityProfile__TrapHalf" prot="public">KDL::VelocityProfile_TrapHalf</innerclass>
    <innerclass refid="classKDL_1_1Wrench" prot="public">KDL::Wrench</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceKDL_1a931155039a40a3f75d0150bed1055206" prot="public" static="no">
        <type><ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; double, double, double &gt;</type>
        <definition>typedef Rall2d&lt;double,double,double&gt; KDL::doubleAcc</definition>
        <argsstring></argsstring>
        <name>doubleAcc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="66" column="16" bodyfile="src/frameacc.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" prot="public" static="no">
        <type><ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; double &gt;</type>
        <definition>typedef Rall1d&lt;double&gt; KDL::doubleVel</definition>
        <argsstring></argsstring>
        <name>doubleVel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="55" column="16" bodyfile="src/framevel.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceKDL_1a2c209d9aae01cb8ad1ddbee85811b0c2" prot="public" static="no">
        <type><ref refid="cpp/container/stack" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::stack</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>typedef std::stack&lt;std::string&gt; KDL::ErrorStack</definition>
        <argsstring></argsstring>
        <name>ErrorStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/error_stack.cxx" line="40" column="21" bodyfile="src/utilities/error_stack.cxx" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceKDL_1a19abc72c063bbf7718e2299712003478" prot="public" static="no">
        <type><ref refid="cpp/container/map" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::map</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref>, <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &gt;</type>
        <definition>typedef std::map&lt;std::string, Frame&gt; KDL::Frames</definition>
        <argsstring></argsstring>
        <name>Frames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/treeiksolver.hpp" line="20" column="18" bodyfile="src/treeiksolver.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceKDL_1ad23eebdce1073711bb4db8f9fa568362" prot="public" static="no">
        <type><ref refid="cpp/container/map" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::map</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref>, <ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &gt;</type>
        <definition>typedef std::map&lt;std::string, Jacobian&gt; KDL::Jacobians</definition>
        <argsstring></argsstring>
        <name>Jacobians</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/treeiksolver.hpp" line="19" column="18" bodyfile="src/treeiksolver.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceKDL_1a6bfcccbcc840654a88822ddd0ee6bdaa" prot="public" static="no">
        <type><ref refid="cpp/container/map" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::map</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref>, <ref refid="classKDL_1_1TreeElement" kindref="compound">TreeElement</ref> &gt;</type>
        <definition>typedef std::map&lt;std::string,TreeElement&gt; KDL::SegmentMap</definition>
        <argsstring></argsstring>
        <name>SegmentMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree.hpp" line="56" column="22" bodyfile="src/tree.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceKDL_1a3816afaee547d0e1a8e3acc39e6ed0d9" prot="public" static="no">
        <type><ref refid="classKDL_1_1TreeElement" kindref="compound">TreeElement</ref></type>
        <definition>typedef TreeElement KDL::TreeElementType</definition>
        <argsstring></argsstring>
        <name>TreeElementType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree.hpp" line="57" column="25" bodyfile="src/tree.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceKDL_1a48ceacb8e88b1c7009802cdf75ac5b87" prot="public" static="no">
        <type><ref refid="cpp/container/map" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::map</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref>, <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &gt;</type>
        <definition>typedef std::map&lt;std::string, Twist&gt; KDL::Twists</definition>
        <argsstring></argsstring>
        <name>Twists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/treeiksolver.hpp" line="18" column="18" bodyfile="src/treeiksolver.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceKDL_1afeffe2d8d9e5e5cfbad0fc90b720c264" prot="public" static="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &gt;</type>
        <definition>typedef std::vector&lt; Wrench &gt; KDL::Wrenches</definition>
        <argsstring></argsstring>
        <name>Wrenches</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/chainfdsolver.hpp" line="34" column="25" bodyfile="src/chainfdsolver.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceKDL_1a6461f6198aeae25076631dfd74486f8f" prot="public" static="no">
        <type><ref refid="cpp/container/map" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::map</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref>, <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &gt;</type>
        <definition>typedef std::map&lt;std::string,Wrench&gt; KDL::WrenchMap</definition>
        <argsstring></argsstring>
        <name>WrenchMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/treeidsolver.hpp" line="33" column="20" bodyfile="src/treeidsolver.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceKDL_1a13e35fb20991715e2e62f926f50d32ef" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double KDL::deg2rad</definition>
        <argsstring></argsstring>
        <name>deg2rad</name>
        <initializer>= 0.017453292519943295769236907684886127</initializer>
        <briefdescription>
<para>the value pi/180 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.cxx" line="19" column="14" bodyfile="src/utilities/utility.cxx" bodystart="19" bodyend="-1" declfile="src/utilities/utility.h" declline="189" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double KDL::epsilon</definition>
        <argsstring></argsstring>
        <name>epsilon</name>
        <initializer>= 1e-6</initializer>
        <briefdescription>
<para>default precision while comparing with Equal(..,..) functions. Initialized at 0.0000001. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.cxx" line="21" column="8" bodyfile="src/utilities/utility.cxx" bodystart="21" bodyend="-1" declfile="src/utilities/utility.h" declline="195" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1a366764fd0ed23dc3ea9e6ec26e21a584" prot="public" static="yes" mutable="no">
        <type><ref refid="namespaceKDL_1a2c209d9aae01cb8ad1ddbee85811b0c2" kindref="member">ErrorStack</ref></type>
        <definition>ErrorStack KDL::errorstack</definition>
        <argsstring></argsstring>
        <name>errorstack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/error_stack.cxx" line="43" column="19" bodyfile="src/utilities/error_stack.cxx" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1a35956496bbd1a2ca3a5c7e66f58b20b4" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double KDL::L0</definition>
        <argsstring></argsstring>
        <name>L0</name>
        <initializer>= 1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobiandottest.cpp" line="12" column="25" bodyfile="tests/jacobiandottest.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1ac1c8ba5dc96829d42bbcbd9acc918845" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double KDL::L1</definition>
        <argsstring></argsstring>
        <name>L1</name>
        <initializer>= 0.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobiandottest.cpp" line="13" column="25" bodyfile="tests/jacobiandottest.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1af4cea78cef6b19a2fd7c5cfa8277e390" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double KDL::L2</definition>
        <argsstring></argsstring>
        <name>L2</name>
        <initializer>= 0.4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobiandottest.cpp" line="14" column="25" bodyfile="tests/jacobiandottest.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1acd4cd01f70c4e54086741eb7c0deb458" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double KDL::L3</definition>
        <argsstring></argsstring>
        <name>L3</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobiandottest.cpp" line="15" column="25" bodyfile="tests/jacobiandottest.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1ad5ee36c66f5e923cfa7fa9277d61d778" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double KDL::L4</definition>
        <argsstring></argsstring>
        <name>L4</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobiandottest.cpp" line="16" column="25" bodyfile="tests/jacobiandottest.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1abb468a531abf653db7e349673eb99b15" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double KDL::L5</definition>
        <argsstring></argsstring>
        <name>L5</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobiandottest.cpp" line="17" column="25" bodyfile="tests/jacobiandottest.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1a7a47ab8b28f696d7994692f27295aa7c" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int KDL::MAXLENFILENAME</definition>
        <argsstring></argsstring>
        <name>MAXLENFILENAME</name>
        <initializer>= 255</initializer>
        <briefdescription>
<para>maximal length of a file name </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.cxx" line="15" column="5" bodyfile="src/utilities/utility.cxx" bodystart="15" bodyend="-1" declfile="src/utilities/utility.h" declline="177" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1afa3b4bdc2d61c7de06ec879a6ae90458" prot="public" static="yes" mutable="no">
        <type>const static bool</type>
        <definition>const static bool KDL::mhi</definition>
        <argsstring></argsstring>
        <name>mhi</name>
        <initializer>=true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.cpp" line="28" column="23" bodyfile="src/rigidbodyinertia.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1a8deb2bd8c8926513a18283b4af0de0fd" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double KDL::PI</definition>
        <argsstring></argsstring>
        <name>PI</name>
        <initializer>= 3.141592653589793238462643383279502884</initializer>
        <briefdescription>
<para>the value of pi </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.cxx" line="16" column="14" bodyfile="src/utilities/utility.cxx" bodystart="16" bodyend="-1" declfile="src/utilities/utility.h" declline="180" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1ade3c77f3bc3e28d8cb67aa59162599cf" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double KDL::PI_2</definition>
        <argsstring></argsstring>
        <name>PI_2</name>
        <initializer>= 1.570796326794896619231321691639751442</initializer>
        <briefdescription>
<para>the value of pi/2 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.cxx" line="17" column="14" bodyfile="src/utilities/utility.cxx" bodystart="17" bodyend="-1" declfile="src/utilities/utility.h" declline="183" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1ad25e8cd211d5b4d3cb1a4f8d07c813c9" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double KDL::PI_4</definition>
        <argsstring></argsstring>
        <name>PI_4</name>
        <initializer>= 0.785398163397448309615660845819875721</initializer>
        <briefdescription>
<para>the value of pi/4 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.cxx" line="18" column="14" bodyfile="src/utilities/utility.cxx" bodystart="18" bodyend="-1" declfile="src/utilities/utility.h" declline="186" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1a6adad4aa09f1426ea5805e7071f01bce" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double KDL::rad2deg</definition>
        <argsstring></argsstring>
        <name>rad2deg</name>
        <initializer>= 57.29577951308232087679815481410517033</initializer>
        <briefdescription>
<para>the value 180/pi </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.cxx" line="20" column="14" bodyfile="src/utilities/utility.cxx" bodystart="20" bodyend="-1" declfile="src/utilities/utility.h" declline="192" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1af3e337367c4790df4e3d3aa76b3d6486" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int KDL::STREAMBUFFERSIZE</definition>
        <argsstring></argsstring>
        <name>STREAMBUFFERSIZE</name>
        <initializer>= 10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>/note linkage Something fishy about the difference between C++ and C in C++ const values default to INTERNAL linkage, in C they default to EXTERNAL linkage. Here the constants should have EXTERNAL linkage because they, for at least some of them, can be changed by the user. If you want to explicitly declare internal linkage, use &quot;static&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.cxx" line="14" column="5" bodyfile="src/utilities/utility.cxx" bodystart="14" bodyend="-1" declfile="src/utilities/utility.h" declline="174" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceKDL_1a97a3fc02283b954c92f9a84d5059fb49" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int KDL::VSIZE</definition>
        <argsstring></argsstring>
        <name>VSIZE</name>
        <briefdescription>
<para>the number of derivatives used in the RN-... objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="198" column="21" declfile="src/utilities/utility.h" declline="198" declcolumn="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceKDL_1af921988409536d4c97f24f6a2583ac38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::_check_istream</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>_check_istream</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>checks validity of basic io of is </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility_io.cxx" line="47" column="10" bodyfile="src/utilities/utility_io.cxx" bodystart="47" bodyend="53" declfile="src/utilities/utility_io.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a73f08c8fcb041d7ea2ba7a0b4583eaea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KDL::_EatSpace</definition>
        <argsstring>(std::istream &amp;is, int *countp=NULL)</argsstring>
        <name>_EatSpace</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>countp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility_io.cxx" line="91" column="5" bodyfile="src/utilities/utility_io.cxx" bodystart="91" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a30ad39870ecc36b0e592a2226e016664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KDL::_EatUntilEndOfComment</definition>
        <argsstring>(std::istream &amp;is, int *countp=NULL)</argsstring>
        <name>_EatUntilEndOfComment</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>countp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility_io.cxx" line="69" column="5" bodyfile="src/utilities/utility_io.cxx" bodystart="69" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a49b12c2b5288a2bc92c0c5eebddc9366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KDL::_EatUntilEndOfLine</definition>
        <argsstring>(std::istream &amp;is, int *countp=NULL)</argsstring>
        <name>_EatUntilEndOfLine</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>countp</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility_io.cxx" line="55" column="5" bodyfile="src/utilities/utility_io.cxx" bodystart="55" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1affe10f5ae1a0fdbd042580f06b703999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::abs</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="431" column="16" bodyfile="src/utilities/rall1d.h" bodystart="431" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a862fb83a9d0c8d003dfa59fc280c12c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::abs</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="487" column="16" bodyfile="src/utilities/rall2d.h" bodystart="487" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac6367033b9a758525a780a270e70a0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::acos</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="423" column="16" bodyfile="src/utilities/rall1d.h" bodystart="423" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a00fb9a1e597465cbd15c4d50961cf1ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::acos</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>acos</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="451" column="16" bodyfile="src/utilities/rall2d.h" bodystart="451" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a4c7942715b046bd6f4dfb8001f2beb4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::acos</definition>
        <argsstring>(double a)</argsstring>
        <name>acos</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="113" column="19" bodyfile="src/utilities/utility.h" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a3247ff837ae01a286d6f267f3611bd78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Add</definition>
        <argsstring>(const JntArray &amp;src1, const JntArray &amp;src2, JntArray &amp;dest)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to add two joint arrays, all the arguments must have the same size: A + B = C. This function is aliasing-safe, A or B can be the same array as C.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src1</parametername>
</parameternamelist>
<parameterdescription>
<para>A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src2</parametername>
</parameternamelist>
<parameterdescription>
<para>B </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>C </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.cpp" line="80" column="10" bodyfile="src/jntarray.cpp" bodystart="80" bodyend="83" declfile="src/jntarray.hpp" declline="163" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a576562dc10e56a5f4cd88840031b9714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Add</definition>
        <argsstring>(const JntArrayAcc &amp;src1, const JntArray &amp;src2, JntArrayAcc &amp;dest)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="78" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="78" bodyend="83" declfile="src/jntarrayacc.hpp" declline="37" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac9ab98846beb21a1e6507218edda37b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Add</definition>
        <argsstring>(const JntArrayAcc &amp;src1, const JntArrayAcc &amp;src2, JntArrayAcc &amp;dest)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="66" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="66" bodyend="71" declfile="src/jntarrayacc.hpp" declline="35" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a6267b92f0a4a416a00a1774b5f565d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Add</definition>
        <argsstring>(const JntArrayAcc &amp;src1, const JntArrayVel &amp;src2, JntArrayAcc &amp;dest)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="72" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="72" bodyend="77" declfile="src/jntarrayacc.hpp" declline="36" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a8315fb2791bd487674d77c3ad66a7135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Add</definition>
        <argsstring>(const JntArrayVel &amp;src1, const JntArray &amp;src2, JntArrayVel &amp;dest)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayvel.cpp" line="62" column="10" bodyfile="src/jntarrayvel.cpp" bodystart="62" bodyend="66" declfile="src/jntarrayvel.hpp" declline="35" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a869bd80558b4be8a8481620a47883a53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Add</definition>
        <argsstring>(const JntArrayVel &amp;src1, const JntArrayVel &amp;src2, JntArrayVel &amp;dest)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayvel.cpp" line="57" column="10" bodyfile="src/jntarrayvel.cpp" bodystart="57" bodyend="61" declfile="src/jntarrayvel.hpp" declline="34" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af635568f6c7c9d282230d7ef6aaf2c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Add</definition>
        <argsstring>(const JntSpaceInertiaMatrix &amp;src1, const JntSpaceInertiaMatrix &amp;src2, JntSpaceInertiaMatrix &amp;dest)</argsstring>
        <name>Add</name>
        <param>
          <type>const JntSpaceInertiaMatrix &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const JntSpaceInertiaMatrix &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>JntSpaceInertiaMatrix &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntspaceinertiamatrix.cpp" line="79" column="10" bodyfile="src/jntspaceinertiamatrix.cpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a6ac0a4190fd520636b59af8d3c002b49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref></type>
        <definition>IMETHOD doubleVel KDL::addDelta</definition>
        <argsstring>(const doubleVel &amp;a, const doubleVel &amp;da, double dt=1.0)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const <ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref> &amp;</type>
          <declname>da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="61" column="19" bodyfile="src/framevel.hpp" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a57e682fab9c7fb9fe18145310d9984d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref></type>
        <definition>IMETHOD Frame KDL::addDelta</definition>
        <argsstring>(const Frame &amp;F_w_a, const Twist &amp;da_w, double dt=1)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>F_w_a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>da_w</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the frame resulting from the rotation of frame a by the axis and angle specified in da_w and the translation of the origin (also specified in da_w).</para>
<para>see also the corresponding <ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff()</ref> routine. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>R_w_a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> matrix of frame a expressed to some frame w. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>da_w</parametername>
</parameternamelist>
<parameterdescription>
<para>axis and angle of the rotation (da_w.rot), together with a displacement vector for the origin (da_w.vel), expressed to some frame w. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the frame resulting from the rotation of frame a by the axis and angle specified with da.rot, and the translation of the origin da_w.vel . The resulting frame is expressed with respect to frame w. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1234" column="15" declfile="src/frames.hpp" declline="1234" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1afc209ec5b445dbeb2080f137428469d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref></type>
        <definition>IMETHOD FrameVel KDL::addDelta</definition>
        <argsstring>(const FrameVel &amp;a, const TwistVel &amp;da, double dt=1.0)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const <ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref> &amp;</type>
          <declname>da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="365" column="18" bodyfile="src/framevel.hpp" bodystart="365" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a2a84a971a8a4300f6b4dd97f40479029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref></type>
        <definition>IMETHOD Rotation KDL::addDelta</definition>
        <argsstring>(const Rotation &amp;R_w_a, const Vector &amp;da_w, double dt=1)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>R_w_a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>da_w</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the rotation matrix resulting from the rotation of frame a by the axis and angle specified with da_w. <linebreak/>
</para>
<para>see also the corresponding <ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff()</ref> routine.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>R_w_a</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> matrix of frame a expressed to some frame w. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>da_w</parametername>
</parameternamelist>
<parameterdescription>
<para>axis and angle of the rotation expressed to some frame w. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the rotation matrix resulting from the rotation of frame a by the axis and angle specified with da. The resulting rotation matrix is expressed with respect to frame w. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1222" column="18" declfile="src/frames.hpp" declline="1222" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aab054566b4b7c16b491d1fd24a209b8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref></type>
        <definition>IMETHOD RotationVel KDL::addDelta</definition>
        <argsstring>(const RotationVel &amp;a, const VectorVel &amp;da, double dt=1.0)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const <ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref> &amp;</type>
          <declname>da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="357" column="21" bodyfile="src/framevel.hpp" bodystart="357" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a32903427965bec95694731b3ad6e4cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>IMETHOD Twist KDL::addDelta</definition>
        <argsstring>(const Twist &amp;a, const Twist &amp;da, double dt=1)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>adds the twist da to the twist a. see also the corresponding <ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff()</ref> routine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>a twist wrt some frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>da</parametername>
</parameternamelist>
<parameterdescription>
<para>a twist difference wrt some frame </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The twist (a+da) wrt the corresponding frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1243" column="15" declfile="src/frames.hpp" declline="1243" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac90990ec8c80f1c7a411052f6b1f322b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>IMETHOD Vector KDL::addDelta</definition>
        <argsstring>(const Vector &amp;p_w_a, const Vector &amp;p_w_da, double dt=1)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>p_w_a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>p_w_da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>adds vector da to vector a. see also the corresponding <ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff()</ref> routine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_w_a</parametername>
</parameternamelist>
<parameterdescription>
<para>vector a expressed to some frame w. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_w_da</parametername>
</parameternamelist>
<parameterdescription>
<para>vector da expressed to some frame w. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the vector resulting from the displacement of vector a by vector da, expressed in the frame w. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1208" column="16" declfile="src/frames.hpp" declline="1208" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ab8f44efdaa9efac075dabe72b9b1d793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref></type>
        <definition>IMETHOD VectorVel KDL::addDelta</definition>
        <argsstring>(const VectorVel &amp;a, const VectorVel &amp;da, double dt=1.0)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref> &amp;</type>
          <declname>da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="350" column="19" bodyfile="src/framevel.hpp" bodystart="350" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a2e1b786a27b63352f5f2c098ef26392d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>IMETHOD Wrench KDL::addDelta</definition>
        <argsstring>(const Wrench &amp;a, const Wrench &amp;da, double dt=1)</argsstring>
        <name>addDelta</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>adds the wrench da to the wrench w. see also the corresponding <ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff()</ref> routine. see also the corresponding <ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff()</ref> routine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>a wrench wrt some frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>da</parametername>
</parameternamelist>
<parameterdescription>
<para>a wrench difference wrt some frame </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the wrench (a+da) wrt the corresponding frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1254" column="16" declfile="src/frames.hpp" declline="1254" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a97e670ceadfa42f7e07cb404cd345506" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::addDelta</definition>
        <argsstring>(double a, double da, double dt)</argsstring>
        <name>addDelta</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>da</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="288" column="15" bodyfile="src/utilities/utility.h" bodystart="288" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa1deba048bebb8cfbc4455210bb54f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::asin</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="415" column="16" bodyfile="src/utilities/rall1d.h" bodystart="415" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a35aa2a7571735ebf167be9203277bb15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::asin</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>asin</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="439" column="16" bodyfile="src/utilities/rall2d.h" bodystart="439" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae95d0e9fbb66c0d9800ea2d6a175526c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::asin</definition>
        <argsstring>(double a)</argsstring>
        <name>asin</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="116" column="19" bodyfile="src/utilities/utility.h" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ab35b68b021e044b46c03f38c4c14738f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::atan</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>atan</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="399" column="16" bodyfile="src/utilities/rall1d.h" bodystart="399" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a799650ee210b3260a6255f8d8f2b6b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::atan</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>atan</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="464" column="16" bodyfile="src/utilities/rall2d.h" bodystart="464" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aec69fd13a968acc96224cfc6c0d261e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::atan</definition>
        <argsstring>(double a)</argsstring>
        <name>atan</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="110" column="19" bodyfile="src/utilities/utility.h" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aeaea5afce42aa1a21d7fbce3d75969d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::atan2</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;y, const Rall1d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="453" column="16" bodyfile="src/utilities/rall1d.h" bodystart="453" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a5b66be54ba5f45a06751e99d881c53ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::atan2</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;y, const Rall2d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="476" column="16" bodyfile="src/utilities/rall2d.h" bodystart="476" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a04e57bfbdbf57b878c4c54a9ceb7ebf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::atan2</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>atan2</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="125" column="19" bodyfile="src/utilities/utility.h" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa440186e9c44a521afa7e2e8816866a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::changeBase</definition>
        <argsstring>(const Jacobian &amp;src1, const Rotation &amp;rot, Jacobian &amp;dest)</argsstring>
        <name>changeBase</name>
        <param>
          <type>const <ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>rot</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jacobian.cpp" line="103" column="10" bodyfile="src/jacobian.cpp" bodystart="103" bodyend="110" declfile="src/jacobian.hpp" declline="82" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a54141738e3da2da7cebea6bd59ed605b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::changeRefFrame</definition>
        <argsstring>(const Jacobian &amp;src1, const Frame &amp;frame, Jacobian &amp;dest)</argsstring>
        <name>changeRefFrame</name>
        <param>
          <type>const <ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>frame</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jacobian.cpp" line="117" column="10" bodyfile="src/jacobian.cpp" bodystart="117" bodyend="124" declfile="src/jacobian.hpp" declline="83" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae68d5c0d686d03b0a779f595083209c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::changeRefPoint</definition>
        <argsstring>(const Jacobian &amp;src1, const Vector &amp;base_AB, Jacobian &amp;dest)</argsstring>
        <name>changeRefPoint</name>
        <param>
          <type>const <ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>base_AB</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jacobian.cpp" line="89" column="10" bodyfile="src/jacobian.cpp" bodystart="89" bodyend="96" declfile="src/jacobian.hpp" declline="81" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1afa0dd1bd029ad0f2f51f07be7ba97c42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::checkDiffs</definition>
        <argsstring>()</argsstring>
        <name>checkDiffs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobianframetests.cpp" line="13" column="6" bodyfile="tests/jacobianframetests.cpp" bodystart="13" bodyend="47" declfile="tests/jacobianframetests.hpp" declline="14" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a6cdf7ff2b751c04cb8c248d064cf3eff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::checkDoubleOps</definition>
        <argsstring>()</argsstring>
        <name>checkDoubleOps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobiandoubletests.cpp" line="6" column="6" bodyfile="tests/jacobiandoubletests.cpp" bodystart="6" bodyend="19" declfile="tests/jacobiandoubletests.hpp" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ab7804c53df3c43b41c15ddddfc3bfa74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void KDL::checkEqual</definition>
        <argsstring>(const T &amp;a, const T &amp;b, double eps)</argsstring>
        <name>checkEqual</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobiantests.hpp" line="34" column="13" bodyfile="tests/jacobiantests.hpp" bodystart="34" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1abd6725a64375d5a20e9ccdcc435f68ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::checkEulerZYX</definition>
        <argsstring>()</argsstring>
        <name>checkEulerZYX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobianframetests.cpp" line="50" column="6" bodyfile="tests/jacobianframetests.cpp" bodystart="50" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac67b73fe0546b2c549678cf3b99fb390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::checkFrameOps</definition>
        <argsstring>()</argsstring>
        <name>checkFrameOps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobianframetests.cpp" line="89" column="6" bodyfile="tests/jacobianframetests.cpp" bodystart="89" bodyend="130" declfile="tests/jacobianframetests.hpp" declline="16" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a2baa428714b4624f647d157130ed6f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::checkFrameVelOps</definition>
        <argsstring>()</argsstring>
        <name>checkFrameVelOps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobianframetests.cpp" line="132" column="6" bodyfile="tests/jacobianframetests.cpp" bodystart="132" bodyend="183" declfile="tests/jacobianframetests.hpp" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a28fb39c2d77d3050aebc60d3fcb67797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::cos</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="343" column="16" bodyfile="src/utilities/rall1d.h" bodystart="343" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a4f00c87082c43c31c5bbc9305d064acd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::cos</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>cos</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="368" column="16" bodyfile="src/utilities/rall2d.h" bodystart="368" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a887e76f013222161ad97011c29f44567" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::cos</definition>
        <argsstring>(double a)</argsstring>
        <name>cos</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="89" column="19" bodyfile="src/utilities/utility.h" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a38afce44f23b730b7d570b66b838aa68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::cosh</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>cosh</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="367" column="16" bodyfile="src/utilities/rall1d.h" bodystart="367" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a872ad38e62e8f1fac77f5083ffcbb0dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::cosh</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>cosh</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="392" column="16" bodyfile="src/utilities/rall2d.h" bodystart="392" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1abda1794286cb009f3205067b8444ac14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::cosh</definition>
        <argsstring>(double a)</argsstring>
        <name>cosh</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="101" column="19" bodyfile="src/utilities/utility.h" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a2c919aa6e336f8a1a90cfc3dad43b1f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1Chain" kindref="compound">Chain</ref></type>
        <definition>Chain KDL::d2</definition>
        <argsstring>()</argsstring>
        <name>d2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobiandottest.cpp" line="18" column="11" bodyfile="tests/jacobiandottest.cpp" bodystart="18" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a7085f1d08acf85c900ceb4f3e8f39ac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1Chain" kindref="compound">Chain</ref></type>
        <definition>Chain KDL::d6</definition>
        <argsstring>()</argsstring>
        <name>d6</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobiandottest.cpp" line="24" column="11" bodyfile="tests/jacobiandottest.cpp" bodystart="24" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac33cd30cdcbb2a408118c7f4da33d839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref></type>
        <definition>IMETHOD doubleVel KDL::diff</definition>
        <argsstring>(const doubleVel &amp;a, const doubleVel &amp;b, double dt=1.0)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="57" column="19" bodyfile="src/framevel.hpp" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af738311fdea560d6255894ddc0425095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>IMETHOD Twist KDL::diff</definition>
        <argsstring>(const Frame &amp;F_a_b1, const Frame &amp;F_a_b2, double dt=1)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>F_a_b1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>F_a_b2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>determines the rotation axis necessary to rotate the frame b1 to the same orientation as frame b2 and the vector necessary to translate the origin of b1 to the origin of b2, and stores the result in a <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> datastructure. <linebreak/>
 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F_a_b1</parametername>
</parameternamelist>
<parameterdescription>
<para>frame b1 expressed with respect to some frame a. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F_a_b2</parametername>
</parameternamelist>
<parameterdescription>
<para>frame b2 expressed with respect to some frame a. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>The result is not a Twist! <linebreak/>
 see <ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff()</ref> for <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> and <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> arguments for further detail on the semantics. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1187" column="15" declfile="src/frames.hpp" declline="1187" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a4abe67e47461ea82dd1764ff915b8e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref></type>
        <definition>IMETHOD TwistVel KDL::diff</definition>
        <argsstring>(const FrameVel &amp;a, const FrameVel &amp;b, double dt=1.0)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="361" column="18" bodyfile="src/framevel.hpp" bodystart="361" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ad23c4b0b7788db8ecc670b5561dbc427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>IMETHOD Vector KDL::diff</definition>
        <argsstring>(const Rotation &amp;R_a_b1, const Rotation &amp;R_a_b2, double dt=1)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>R_a_b1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>R_a_b2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>determines the (scaled) rotation axis necessary to rotate from b1 to b2. <linebreak/>
</para>
<para>This rotation axis is expressed w.r.t. frame a. The rotation axis is scaled by the necessary rotation angle. The rotation angle is always in the (inclusive) interval <formula id="13">$ [0 , \pi] $</formula>.</para>
<para>This definition is chosen in this way to facilitate numerical differentiation. With this definition diff(a,b) == -diff(b,a).</para>
<para>The <ref refid="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" kindref="member">diff()</ref> function is overloaded for all classes in <ref refid="frames_8hpp" kindref="compound">frames.hpp</ref> and framesvel.hpp, such that numerical differentiation, equality checks with tolerances, etc. can be performed without caring exactly on which type the operation is performed. <linebreak/>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>R_a_b1</parametername>
</parameternamelist>
<parameterdescription>
<para>The rotation matrix <formula id="14">$ _a^{b1} R $</formula> of b1 with respect to frame a. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>R_a_b2</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> matrix <formula id="15">$ _a^{b2} R $</formula> of b2 with respect to frame a. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>[optional][obsolete] time interval over which the numerical differentiation takes place. By default this is set to 1.0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>rotation axis to rotate from b1 to b2, scaled by the rotation angle, expressed in frame a. </para>
</simplesect>
<simplesect kind="warning"><para>- The result is not a rotational vector, i.e. it is not a mathematical vector. (no communitative addition).</para>
</simplesect>
<simplesect kind="warning"><para>- When used in the context of numerical differentiation, with the frames b1 and b2 very close to each other, the semantics correspond to the twist, scaled by the time.</para>
</simplesect>
<simplesect kind="warning"><para>- For angles equal to <formula id="16">$ \pi $</formula>, The negative of the return value is equally valid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1177" column="16" declfile="src/frames.hpp" declline="1177" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af6fe4108d2d1bc8f56de6ada8b1e02a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref></type>
        <definition>IMETHOD VectorVel KDL::diff</definition>
        <argsstring>(const RotationVel &amp;a, const RotationVel &amp;b, double dt=1.0)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="353" column="19" bodyfile="src/framevel.hpp" bodystart="353" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a64a30fa7b4a6a532cbd43ad90c93bc5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref></type>
        <definition>IMETHOD Twist KDL::diff</definition>
        <argsstring>(const Twist &amp;a, const Twist &amp;b, double dt=1)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>determines the difference between two twists i.e. the difference between the underlying velocity vectors and rotational velocity vectors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1193" column="15" declfile="src/frames.hpp" declline="1193" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a721ba3f54f506bc1004fb981a9ea7b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>IMETHOD Vector KDL::diff</definition>
        <argsstring>(const Vector &amp;p_w_a, const Vector &amp;p_w_b, double dt=1)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>p_w_a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>p_w_b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>determines the difference of vector b with vector a.</para>
<para>see diff for <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> matrices for further background information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_w_a</parametername>
</parameternamelist>
<parameterdescription>
<para>start vector a expressed to some frame w </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_w_b</parametername>
</parameternamelist>
<parameterdescription>
<para>end vector b expressed to some frame w . </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>[optional][obsolete] time interval over which the numerical differentiation takes place. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the difference (b-a) expressed to the frame w. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1147" column="16" declfile="src/frames.hpp" declline="1147" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1abcbdf134e1245fff7276c09d93bc129e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref></type>
        <definition>IMETHOD VectorVel KDL::diff</definition>
        <argsstring>(const VectorVel &amp;a, const VectorVel &amp;b, double dt=1.0)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="346" column="19" bodyfile="src/framevel.hpp" bodystart="346" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a0207da13db4661467e2e8c74cce973a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>IMETHOD Wrench KDL::diff</definition>
        <argsstring>(const Wrench &amp;W_a_p1, const Wrench &amp;W_a_p2, double dt=1)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>W_a_p1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>W_a_p2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>determines the difference between two wrenches i.e. the difference between the underlying torque vectors and force vectors. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="1199" column="16" declfile="src/frames.hpp" declline="1199" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a46bf12853011243d224d0faf74f975f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::diff</definition>
        <argsstring>(double a, double b, double dt)</argsstring>
        <name>diff</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="282" column="15" bodyfile="src/utilities/utility.h" bodystart="282" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a58ae4682bfa96df290a84bc8764db2f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Divide</definition>
        <argsstring>(const JntArray &amp;src, const double &amp;factor, JntArray &amp;dest)</argsstring>
        <name>Divide</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to divide all the array values with a scalar factor: A/b=C. This function is aliasing-safe, A can be the same array as C.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>b </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>C </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.cpp" line="95" column="10" bodyfile="src/jntarray.cpp" bodystart="95" bodyend="98" declfile="src/jntarray.hpp" declline="193" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a271c55c29a0bbb873d420392f4cd1685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Divide</definition>
        <argsstring>(const JntArrayAcc &amp;src, const double &amp;factor, JntArrayAcc &amp;dest)</argsstring>
        <name>Divide</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="133" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="133" bodyend="138" declfile="src/jntarrayacc.hpp" declline="44" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae8b64e8487e3bb3b6a8f2ccf5255c80f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Divide</definition>
        <argsstring>(const JntArrayAcc &amp;src, const doubleAcc &amp;factor, JntArrayAcc &amp;dest)</argsstring>
        <name>Divide</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceKDL_1a931155039a40a3f75d0150bed1055206" kindref="member">doubleAcc</ref> &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="151" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="151" bodyend="162" declfile="src/jntarrayacc.hpp" declline="46" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a29a463da0ea75ee267a9229b6397cff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Divide</definition>
        <argsstring>(const JntArrayAcc &amp;src, const doubleVel &amp;factor, JntArrayAcc &amp;dest)</argsstring>
        <name>Divide</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref> &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="139" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="139" bodyend="150" declfile="src/jntarrayacc.hpp" declline="45" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae139248a5f388a7926789e58a1cb192b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Divide</definition>
        <argsstring>(const JntArrayVel &amp;src, const double &amp;factor, JntArrayVel &amp;dest)</argsstring>
        <name>Divide</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayvel.cpp" line="92" column="10" bodyfile="src/jntarrayvel.cpp" bodystart="92" bodyend="96" declfile="src/jntarrayvel.hpp" declline="40" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ab47fd546752c9082c646e51430daed25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Divide</definition>
        <argsstring>(const JntArrayVel &amp;src, const doubleVel &amp;factor, JntArrayVel &amp;dest)</argsstring>
        <name>Divide</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref> &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayvel.cpp" line="97" column="10" bodyfile="src/jntarrayvel.cpp" bodystart="97" bodyend="103" declfile="src/jntarrayvel.hpp" declline="41" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa9dca0c2efb73851970931de9f0daa6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Divide</definition>
        <argsstring>(const JntSpaceInertiaMatrix &amp;src, const double &amp;factor, JntSpaceInertiaMatrix &amp;dest)</argsstring>
        <name>Divide</name>
        <param>
          <type>const JntSpaceInertiaMatrix &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>JntSpaceInertiaMatrix &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntspaceinertiamatrix.cpp" line="94" column="10" bodyfile="src/jntspaceinertiamatrix.cpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa1f884273ae8bdbcb4638569d12484e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Eat</definition>
        <argsstring>(std::istream &amp;is, const char *descript)</argsstring>
        <name>Eat</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>descript</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Eats characters of the stream as long as they satisfy the description in descript <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>a stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descript</parametername>
</parameternamelist>
<parameterdescription>
<para>description string. A sequence of spaces, tabs, new-lines and comments is regarded as 1 space in the description string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility_io.cxx" line="166" column="6" bodyfile="src/utilities/utility_io.cxx" bodystart="166" bodyend="193" declfile="src/utilities/utility_io.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a31d23582bde3483d45295cec3e54a8b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Eat</definition>
        <argsstring>(std::istream &amp;is, int delim)</argsstring>
        <name>Eat</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Eats characters of the stream until the character delim is encountered <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>a stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>eat until this character is encountered </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility_io.cxx" line="123" column="6" bodyfile="src/utilities/utility_io.cxx" bodystart="123" bodyend="132" declfile="src/utilities/utility_io.h" declline="63" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a00837fd6a97743f18dc3ee514dbb1dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::EatEnd</definition>
        <argsstring>(std::istream &amp;is, int delim)</argsstring>
        <name>EatEnd</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Eats characters of the stream until the character delim is encountered similar to Eat(is,delim) but spaces at the end are not read. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>a stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>eat until this character is encountered </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility_io.cxx" line="137" column="6" bodyfile="src/utilities/utility_io.cxx" bodystart="137" bodyend="144" declfile="src/utilities/utility_io.h" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a3ae42cae48abc196d6b3c15244b63f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::EatWord</definition>
        <argsstring>(std::istream &amp;is, const char *delim, char *storage, int maxsize)</argsstring>
        <name>EatWord</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>delim</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>storage</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Eats a word of the stream delimited by the letters in delim or space(tabs...) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>a stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delim</parametername>
</parameternamelist>
<parameterdescription>
<para>a string containing the delimmiting characters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>storage</parametername>
</parameternamelist>
<parameterdescription>
<para>for returning the word </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxsize</parametername>
</parameternamelist>
<parameterdescription>
<para>a word can be maximally maxsize-1 long. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility_io.cxx" line="197" column="6" bodyfile="src/utilities/utility_io.cxx" bodystart="197" bodyend="220" declfile="src/utilities/utility_io.h" declline="80" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a72c03a3025051e3933e297aeede21b2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const Frame &amp;a, const Frame &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="151" column="13" declfile="src/frames.hpp" declline="151" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a949f98c6634c2e4982e4e9a60236c802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const Frame &amp;r1, const FrameAcc &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1FrameAcc" kindref="compound">FrameAcc</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="74" column="14" declfile="src/frameacc.hpp" declline="74" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a74d6caebb4c8bb6d96850d7f15c3e852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const Frame &amp;r1, const FrameVel &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="77" column="14" declfile="src/framevel.hpp" declline="77" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a3c79935119cb20a215b5cee87210bbd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const Frame2 &amp;a, const Frame2 &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame2" kindref="compound">Frame2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Frame2" kindref="compound">Frame2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="156" column="13" declfile="src/frames.hpp" declline="156" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a399b9b6c20646535bc01897410c2ffec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const FrameAcc &amp;r1, const Frame &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1FrameAcc" kindref="compound">FrameAcc</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="75" column="14" declfile="src/frameacc.hpp" declline="75" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1afbaac359311f16d1bbd3ea75c4ea7463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const FrameAcc &amp;r1, const FrameAcc &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1FrameAcc" kindref="compound">FrameAcc</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1FrameAcc" kindref="compound">FrameAcc</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="73" column="14" declfile="src/frameacc.hpp" declline="73" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1c5526c410ff01dc13670b787632ce84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const FrameVel &amp;r1, const Frame &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="78" column="14" declfile="src/framevel.hpp" declline="78" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a0ffaf9640b6915be0d1c08f88fc6a815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const FrameVel &amp;r1, const FrameVel &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="76" column="14" declfile="src/framevel.hpp" declline="76" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ab56d49bccacc4c7d3725ee1a31a3a686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const Jacobian &amp;a, const Jacobian &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jacobian.cpp" line="136" column="10" bodyfile="src/jacobian.cpp" bodystart="136" bodyend="142" declfile="src/jacobian.hpp" declline="32" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a068d1c706d47e7be23bc58bfe6079799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const JntArray &amp;src1, const JntArray &amp;src2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to check if two arrays are the same with a precision of eps</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eps</parametername>
</parameternamelist>
<parameterdescription>
<para>default: epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if each element of src1 is within eps of the same element in src2, or if both src1 and src2 have no data (ie 0==rows()) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.cpp" line="111" column="10" bodyfile="src/jntarray.cpp" bodystart="111" bodyend="116" declfile="src/jntarray.hpp" declline="223" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a944126492e3ac5834cde755114151d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const JntArrayAcc &amp;src1, const JntArrayAcc &amp;src2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="171" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="171" bodyend="174" declfile="src/jntarrayacc.hpp" declline="34" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1afdfb90a1123ea45e6b0e348aff04b230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const JntArrayVel &amp;src1, const JntArrayVel &amp;src2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayvel.cpp" line="111" column="10" bodyfile="src/jntarrayvel.cpp" bodystart="111" bodyend="114" declfile="src/jntarrayvel.hpp" declline="33" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a59ea9aebf2aaa6edfd35375dcbcea546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const JntSpaceInertiaMatrix &amp;src1, const JntSpaceInertiaMatrix &amp;src2, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const JntSpaceInertiaMatrix &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const JntSpaceInertiaMatrix &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntspaceinertiamatrix.cpp" line="109" column="10" bodyfile="src/jntspaceinertiamatrix.cpp" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1cc2df81152a4a21b53a6b358edc5ec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> bool</type>
        <definition>INLINE bool KDL::Equal</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;y, const Rall1d&lt; T, V, S &gt; &amp;x, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="491" column="14" bodyfile="src/utilities/rall1d.h" bodystart="491" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af7e00537fa97de615af633da567033d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> bool</type>
        <definition>INLINE bool KDL::Equal</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;y, const Rall2d&lt; T, V, S &gt; &amp;x, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="548" column="14" bodyfile="src/utilities/rall2d.h" bodystart="548" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa75157c97981a05a94513ec9a8c40124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const Rotation &amp;a, const Rotation &amp;b, double eps)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.cpp" line="184" column="10" bodyfile="src/frames.cpp" bodystart="184" bodyend="194" declfile="src/frames.hpp" declline="559" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a889a4d2dfad5e0a4b6e3ae5e098e9090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const Rotation &amp;r1, const RotationAcc &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationAcc" kindref="compound">RotationAcc</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="77" column="14" declfile="src/frameacc.hpp" declline="77" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aafa32af6bcaef5caf39f58bd127cf7f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const Rotation &amp;r1, const RotationVel &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="74" column="14" declfile="src/framevel.hpp" declline="74" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a00d8678742c2204af939fea099c73290" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const Rotation2 &amp;a, const Rotation2 &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="155" column="13" declfile="src/frames.hpp" declline="155" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a8d8c652180b0e6ba90bdd6001a80c710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const RotationAcc &amp;r1, const Rotation &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1RotationAcc" kindref="compound">RotationAcc</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="78" column="14" declfile="src/frameacc.hpp" declline="78" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af79df29838ded6ee337634e9fd4ff695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const RotationAcc &amp;r1, const RotationAcc &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1RotationAcc" kindref="compound">RotationAcc</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationAcc" kindref="compound">RotationAcc</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="76" column="14" declfile="src/frameacc.hpp" declline="76" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac0c853681474909b3778413f387c7b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const RotationVel &amp;r1, const Rotation &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="75" column="14" declfile="src/framevel.hpp" declline="75" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ada2765064e33340c414070cee795c621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const RotationVel &amp;r1, const RotationVel &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="73" column="14" declfile="src/framevel.hpp" declline="73" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1bf61bba26095a71d565e3b3c3609c03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const Twist &amp;a, const Twist &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="152" column="13" declfile="src/frames.hpp" declline="152" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a5276fe299547679088429a531a81254e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const Twist &amp;a, const TwistAcc &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1TwistAcc" kindref="compound">TwistAcc</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="80" column="14" declfile="src/frameacc.hpp" declline="80" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a3913bd2c646449575cef74465bef9ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const Twist &amp;a, const TwistVel &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="80" column="14" declfile="src/framevel.hpp" declline="80" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a20e49f2904933fc449c7142d7381be5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const TwistAcc &amp;a, const Twist &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1TwistAcc" kindref="compound">TwistAcc</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="81" column="14" declfile="src/frameacc.hpp" declline="81" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a56247aaa80e17ed4f3e06cacc34ae207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const TwistAcc &amp;a, const TwistAcc &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1TwistAcc" kindref="compound">TwistAcc</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1TwistAcc" kindref="compound">TwistAcc</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="79" column="14" declfile="src/frameacc.hpp" declline="79" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a0f01d277c124c371148ab0e77b532e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const TwistVel &amp;a, const Twist &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="81" column="14" declfile="src/framevel.hpp" declline="81" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a8c311f3939cffaafcf4a1c619007fc9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const TwistVel &amp;a, const TwistVel &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="79" column="14" declfile="src/framevel.hpp" declline="79" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a3f99be43d1a34491dd6e72b41e37027d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const Vector &amp;a, const Vector &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="150" column="13" declfile="src/frames.hpp" declline="150" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a9c512559065d11623615c8cde5033121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const Vector &amp;r1, const VectorAcc &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1VectorAcc" kindref="compound">VectorAcc</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="83" column="14" declfile="src/frameacc.hpp" declline="83" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a24e792f9b06363b65317e72f7109a993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const Vector &amp;r1, const VectorVel &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="71" column="14" declfile="src/framevel.hpp" declline="71" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a3221dde16368ef33e1ced8917a99639a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const Vector2 &amp;a, const Vector2 &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="154" column="13" declfile="src/frames.hpp" declline="154" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae83aee9345f6edb76497b81c3d42b08c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const VectorAcc &amp;r1, const Vector &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1VectorAcc" kindref="compound">VectorAcc</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="84" column="14" declfile="src/frameacc.hpp" declline="84" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af3dabdc2bc6405979ae19bae6ee9f6a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const VectorAcc &amp;r1, const VectorAcc &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1VectorAcc" kindref="compound">VectorAcc</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1VectorAcc" kindref="compound">VectorAcc</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc.hpp" line="82" column="14" declfile="src/frameacc.hpp" declline="82" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1746d0a886e9b4d41e1be4201faaa2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const VectorVel &amp;r1, const Vector &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="72" column="14" declfile="src/framevel.hpp" declline="72" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a0436b3359dbb0f8fd0fe18f11ce363f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> bool</type>
        <definition>IMETHOD bool KDL::Equal</definition>
        <argsstring>(const VectorVel &amp;r1, const VectorVel &amp;r2, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="70" column="14" declfile="src/framevel.hpp" declline="70" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1d1ac60a99e09e81b6014c2242614c47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(const Wrench &amp;a, const Wrench &amp;b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>do not use operator == because the definition of Equal(.,.) is slightly different. It compares whether the 2 arguments are equal in an eps-interval </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.hpp" line="153" column="13" declfile="src/frames.hpp" declline="153" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a9dc76b8309a93eeb9a843a275c11d037" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::Equal</definition>
        <argsstring>(double a, double b, double eps=epsilon)</argsstring>
        <name>Equal</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval><ref refid="namespaceKDL_1ad69840ad33dc4985798237acfd5fd048" kindref="member">epsilon</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="268" column="13" bodyfile="src/utilities/utility.h" bodystart="268" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aecbca56af74738ce15c95556313bad67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::exp</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="319" column="16" bodyfile="src/utilities/rall1d.h" bodystart="319" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a625aa60f7ecd2b0b322d30c6fc9373b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::exp</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="340" column="16" bodyfile="src/utilities/rall2d.h" bodystart="340" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a3ed681a445a5c713d91466027501d864" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::exp</definition>
        <argsstring>(double a)</argsstring>
        <name>exp</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="92" column="19" bodyfile="src/utilities/utility.h" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a94c4e9f0c4e9790ec33e72003bd13fdc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void KDL::generatePowers</definition>
        <argsstring>(int n, double x, double *powers)</argsstring>
        <name>generatePowers</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>powers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/velocityprofile_spline.cpp" line="8" column="20" bodyfile="src/velocityprofile_spline.cpp" bodystart="8" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a4ab52bdf7ad33b2efa740ac5d7230e66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void KDL::hash_combine</definition>
        <argsstring>(std::size_t &amp;seed, const T &amp;v)</argsstring>
        <name>hash_combine</name>
        <param>
          <type><ref refid="cpp/types/size_t" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::size_t</ref> &amp;</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Combine hash of object <computeroutput>v</computeroutput> to the <computeroutput>seed</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed to append the hash of <computeroutput>v</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Object of which the hash should be appended to the seed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Inspired by: <ref refid="" kindref="compound">https://github.com/boostorg/multiprecision/blob/boost-1.79.0/include/boost/multiprecision/detail/hash.hpp#L35-L41</ref></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/hash_combine.h" line="18" column="13" bodyfile="src/utilities/hash_combine.h" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aeeb6f21482d731a6aea17e8a8f3be211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::hypot</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;y, const Rall1d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>hypot</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="407" column="16" bodyfile="src/utilities/rall1d.h" bodystart="407" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a8f1f61de6f649b0e140c882a0cc0b154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::hypot</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;y, const Rall2d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>hypot</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="494" column="16" bodyfile="src/utilities/rall2d.h" bodystart="494" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae9d2ed96f6e1c0a53867b5eb564be155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::IOTrace</definition>
        <argsstring>(const std::string &amp;description)</argsstring>
        <name>IOTrace</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/error_stack.cxx" line="46" column="6" bodyfile="src/utilities/error_stack.cxx" bodystart="46" bodyend="48" declfile="src/utilities/error_stack.h" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a6c06e8e3cc494415714628c19ddb5177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::IOTraceOutput</definition>
        <argsstring>(std::ostream &amp;os)</argsstring>
        <name>IOTraceOutput</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>outputs the IO-stack to a stream to provide a better errormessage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/error_stack.cxx" line="55" column="6" bodyfile="src/utilities/error_stack.cxx" bodystart="55" bodyend="60" declfile="src/utilities/error_stack.h" declline="60" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ab82b0df5bce4dfba0dab75a147067198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::IOTracePop</definition>
        <argsstring>()</argsstring>
        <name>IOTracePop</name>
        <briefdescription>
<para>pops a description of the IO-stack </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/error_stack.cxx" line="51" column="6" bodyfile="src/utilities/error_stack.cxx" bodystart="51" bodyend="53" declfile="src/utilities/error_stack.h" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a48e1005745b610ecdb493a7fe330a2ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::IOTracePopStr</definition>
        <argsstring>(char *buffer, int size)</argsstring>
        <name>IOTracePopStr</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>outputs one element of the IO-stack to the buffer (maximally size chars) returns empty string if no elements on the stack. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/error_stack.cxx" line="63" column="6" bodyfile="src/utilities/error_stack.cxx" bodystart="63" bodyend="80" declfile="src/utilities/error_stack.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa7a1cb76dad08011ca94f38aa1dbef71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1Chain" kindref="compound">Chain</ref></type>
        <definition>Chain KDL::KukaLWR</definition>
        <argsstring>()</argsstring>
        <name>KukaLWR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="models/models.hpp" line="30" column="7" declfile="models/models.hpp" declline="30" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a0654087810d42fbfb0b0259216ce3580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1Chain" kindref="compound">Chain</ref></type>
        <definition>Chain KDL::KukaLWR_DHnew</definition>
        <argsstring>()</argsstring>
        <name>KukaLWR_DHnew</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="models/kukaLWR_DHnew.cpp" line="26" column="11" bodyfile="models/kukaLWR_DHnew.cpp" bodystart="26" bodyend="81" declfile="models/models.hpp" declline="32" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1afe322fa00695865d1617d8d6932d034d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1Chain" kindref="compound">Chain</ref></type>
        <definition>Chain KDL::KukaLWRsegment</definition>
        <argsstring>()</argsstring>
        <name>KukaLWRsegment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="models/models.hpp" line="31" column="7" declfile="models/models.hpp" declline="31" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1acba9b399cc104f4be96ee84cadf99b07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KDL::ldl_solver_eigen</definition>
        <argsstring>(const Eigen::MatrixXd &amp;A, const Eigen::VectorXd &amp;v, Eigen::MatrixXd &amp;L, Eigen::VectorXd &amp;D, Eigen::VectorXd &amp;vtmp, Eigen::VectorXd &amp;q)</argsstring>
        <name>ldl_solver_eigen</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>L</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>D</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>vtmp</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Solves the system of equations Aq = v for q via LDL decomposition, where A is a square positive definite matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The algorithm factor A into the product of three matrices LDL^T, where L is a lower triangular matrix and D is a diagonal matrix. This allows q to be computed without explicitly inverting A. Note that the LDL decomposition is a variant of the classical Cholesky Decomposition that does not require the computation of square roots. Input parameters: <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix&lt;double&gt;(nxn) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">vector&lt;double&gt;</ref> n </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vtmp</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">vector&lt;double&gt;</ref> n [temp variable] Output parameters: </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>L</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix&lt;double&gt;(nxn) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">vector&lt;double&gt;</ref> n </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">vector&lt;double&gt;</ref> n </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, E_SIZE_MISMATCH if dimensions do not match References: <ulink url="https://en.wikipedia.org/wiki/Cholesky_decomposition">https://en.wikipedia.org/wiki/Cholesky_decomposition</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/ldl_solver_eigen.cpp" line="26" column="9" bodyfile="src/utilities/ldl_solver_eigen.cpp" bodystart="26" bodyend="81" declfile="src/utilities/ldl_solver_eigen.hpp" declline="55" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a649a0834fa4420e71c427e5c3f4058e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::LinComb</definition>
        <argsstring>(double alfa, double a, double beta, double b)</argsstring>
        <name>LinComb</name>
        <param>
          <type>double</type>
          <declname>alfa</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="231" column="15" bodyfile="src/utilities/utility.h" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae90a4f8ef5486eb57f84f57006e44bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::LinComb</definition>
        <argsstring>(S alfa, const Rall1d&lt; T, V, S &gt; &amp;a, const T &amp;beta, const Rall1d&lt; T, V, S &gt; &amp;b)</argsstring>
        <name>LinComb</name>
        <param>
          <type>S</type>
          <declname>alfa</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="461" column="16" bodyfile="src/utilities/rall1d.h" bodystart="461" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a01f26dd0a944947d02f7a38208540621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::LinComb</definition>
        <argsstring>(S alfa, const Rall2d&lt; T, V, S &gt; &amp;a, const T &amp;beta, const Rall2d&lt; T, V, S &gt; &amp;b)</argsstring>
        <name>LinComb</name>
        <param>
          <type>S</type>
          <declname>alfa</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="514" column="16" bodyfile="src/utilities/rall2d.h" bodystart="514" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a6bbbeb53220cbe45b460b577b42526e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::LinCombR</definition>
        <argsstring>(double alfa, double a, double beta, double b, double &amp;result)</argsstring>
        <name>LinCombR</name>
        <param>
          <type>double</type>
          <declname>alfa</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="236" column="13" bodyfile="src/utilities/utility.h" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ab0aa503972c5de68fec288a020b87d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> void</type>
        <definition>INLINE void KDL::LinCombR</definition>
        <argsstring>(S alfa, const Rall1d&lt; T, V, S &gt; &amp;a, const T &amp;beta, const Rall1d&lt; T, V, S &gt; &amp;b, Rall1d&lt; T, V, S &gt; &amp;result)</argsstring>
        <name>LinCombR</name>
        <param>
          <type>S</type>
          <declname>alfa</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="470" column="14" bodyfile="src/utilities/rall1d.h" bodystart="470" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a4ba14b7db89c84e8be303cb076c53e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> void</type>
        <definition>INLINE void KDL::LinCombR</definition>
        <argsstring>(S alfa, const Rall2d&lt; T, V, S &gt; &amp;a, const T &amp;beta, const Rall2d&lt; T, V, S &gt; &amp;b, Rall2d&lt; T, V, S &gt; &amp;result)</argsstring>
        <name>LinCombR</name>
        <param>
          <type>S</type>
          <declname>alfa</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="524" column="14" bodyfile="src/utilities/rall2d.h" bodystart="524" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a62718f5f4025f9087934790966678ff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::log</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="327" column="16" bodyfile="src/utilities/rall1d.h" bodystart="327" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a03c16593fdf8bc82c0ef2a41055334ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::log</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="350" column="16" bodyfile="src/utilities/rall2d.h" bodystart="350" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa3666e576c08e814a905297a6ecc41f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::log</definition>
        <argsstring>(double a)</argsstring>
        <name>log</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="95" column="19" bodyfile="src/utilities/utility.h" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1adb3f6f67f41bc87f6d98423ac7a5b92f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::max</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>max</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="204" column="15" bodyfile="src/utilities/utility.h" bodystart="204" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa7c26c4bc57cab66adc41b08110f5948" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::min</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>min</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="212" column="15" bodyfile="src/utilities/utility.h" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a65d854aa88f96a677c66b50bc06b54bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Multiply</definition>
        <argsstring>(const JntArray &amp;src, const double &amp;factor, JntArray &amp;dest)</argsstring>
        <name>Multiply</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to multiply all the array values with a scalar factor: A*b=C. This function is aliasing-safe, A can be the same array as C.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>b </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>C </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.cpp" line="90" column="10" bodyfile="src/jntarray.cpp" bodystart="90" bodyend="93" declfile="src/jntarray.hpp" declline="183" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ab32cb0e76ccfdbc012bbdff485fa2e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Multiply</definition>
        <argsstring>(const JntArrayAcc &amp;src, const double &amp;factor, JntArrayAcc &amp;dest)</argsstring>
        <name>Multiply</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="104" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="104" bodyend="109" declfile="src/jntarrayacc.hpp" declline="41" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a4b751d3ba37a7ca2ee37b4955b6a1b2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Multiply</definition>
        <argsstring>(const JntArrayAcc &amp;src, const doubleAcc &amp;factor, JntArrayAcc &amp;dest)</argsstring>
        <name>Multiply</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceKDL_1a931155039a40a3f75d0150bed1055206" kindref="member">doubleAcc</ref> &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="120" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="120" bodyend="131" declfile="src/jntarrayacc.hpp" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a15f89314c4b049945d7e4566b3bb1459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Multiply</definition>
        <argsstring>(const JntArrayAcc &amp;src, const doubleVel &amp;factor, JntArrayAcc &amp;dest)</argsstring>
        <name>Multiply</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref> &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="110" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="110" bodyend="119" declfile="src/jntarrayacc.hpp" declline="42" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aecfc62e3d4f3d21b9752669794aac2fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Multiply</definition>
        <argsstring>(const JntArrayVel &amp;src, const double &amp;factor, JntArrayVel &amp;dest)</argsstring>
        <name>Multiply</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayvel.cpp" line="79" column="10" bodyfile="src/jntarrayvel.cpp" bodystart="79" bodyend="83" declfile="src/jntarrayvel.hpp" declline="38" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a3dbaa87cc9453c14a7fd4335ca343c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Multiply</definition>
        <argsstring>(const JntArrayVel &amp;src, const doubleVel &amp;factor, JntArrayVel &amp;dest)</argsstring>
        <name>Multiply</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref> &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayvel.cpp" line="84" column="10" bodyfile="src/jntarrayvel.cpp" bodystart="84" bodyend="90" declfile="src/jntarrayvel.hpp" declline="39" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae7a531e845086142255090a67666ec70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Multiply</definition>
        <argsstring>(const JntSpaceInertiaMatrix &amp;src, const double &amp;factor, JntSpaceInertiaMatrix &amp;dest)</argsstring>
        <name>Multiply</name>
        <param>
          <type>const JntSpaceInertiaMatrix &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>JntSpaceInertiaMatrix &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntspaceinertiamatrix.cpp" line="89" column="10" bodyfile="src/jntspaceinertiamatrix.cpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1210f7f6f4db1eee2e2c39211c7cb388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Multiply</definition>
        <argsstring>(const JntSpaceInertiaMatrix &amp;src, const JntArray &amp;vec, JntArray &amp;dest)</argsstring>
        <name>Multiply</name>
        <param>
          <type>const JntSpaceInertiaMatrix &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntspaceinertiamatrix.cpp" line="99" column="10" bodyfile="src/jntspaceinertiamatrix.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac85eca37a300ca3afa534bf3133cd134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::MultiplyJacobian</definition>
        <argsstring>(const Jacobian &amp;jac, const JntArray &amp;src, Twist &amp;dest)</argsstring>
        <name>MultiplyJacobian</name>
        <param>
          <type>const <ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>jac</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to multiply a <ref refid="classKDL_1_1Jacobian" kindref="compound">KDL::Jacobian</ref> with a <ref refid="classKDL_1_1JntArray" kindref="compound">KDL::JntArray</ref> to get a <ref refid="classKDL_1_1Twist" kindref="compound">KDL::Twist</ref>, it should not be used to calculate the forward velocity kinematics, the solver classes are built for this purpose. J*q = t</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jac</parametername>
</parameternamelist>
<parameterdescription>
<para>J </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>q </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>dest==<ref refid="classKDL_1_1Twist_1aeb2250f1de9e0c6f9fe738dc8c083bc9" kindref="member">Twist::Zero()</ref> if 0==src.rows() (ie src is empty) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.cpp" line="100" column="10" bodyfile="src/jntarray.cpp" bodystart="100" bodyend="104" declfile="src/jntarray.hpp" declline="206" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a04a201d7eeb1d5e1ebcea1d297efe9a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> S</type>
        <definition>INLINE S KDL::Norm</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;value)</argsstring>
        <name>Norm</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="440" column="11" bodyfile="src/utilities/rall1d.h" bodystart="440" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a4b8d42bd80ee61a21095edbc1bf8d8d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> S</type>
        <definition>INLINE S KDL::Norm</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;value)</argsstring>
        <name>Norm</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="505" column="11" bodyfile="src/utilities/rall2d.h" bodystart="505" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1ea4c3a83ea51ec60e63e46f23ff7ae2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::Norm</definition>
        <argsstring>(double arg)</argsstring>
        <name>Norm</name>
        <param>
          <type>double</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="256" column="15" bodyfile="src/utilities/utility.h" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a38341cc30e5b13d0e90de01b69378c2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> bool</type>
        <definition>INLINE bool KDL::operator!=</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;y, const Rall1d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="507" column="14" bodyfile="src/utilities/rall1d.h" bodystart="507" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a98cfe0a9be76a87db8358bc51b469a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> bool</type>
        <definition>INLINE bool KDL::operator!=</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;y, const Rall2d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="570" column="14" bodyfile="src/utilities/rall2d.h" bodystart="570" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a57e5b07873e812f8d7f94d5ca1acd229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench KDL::operator*</definition>
        <argsstring>(const ArticulatedBodyInertia &amp;I, const Twist &amp;t)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculate spatial momentum: h = I*v make sure that the twist v and the inertia are expressed in the same reference frame/point </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.cpp" line="68" column="12" bodyfile="src/articulatedbodyinertia.cpp" bodystart="68" bodyend="73" declfile="src/articulatedbodyinertia.hpp" declline="112" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ab60953771d5ef2a0ef08cf7e8266473f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia KDL::operator*</definition>
        <argsstring>(const Frame &amp;T, const ArticulatedBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Coordinate system transform Ia = T_a_b*Ib with T_a_b the frame from a to b. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.cpp" line="75" column="28" bodyfile="src/articulatedbodyinertia.cpp" bodystart="75" bodyend="88" declfile="src/articulatedbodyinertia.hpp" declline="117" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1acbf30c08a930e58f18e6f4b89b4d3fd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia KDL::operator*</definition>
        <argsstring>(const Frame &amp;T, const RigidBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Coordinate system transform Ia = T_a_b*Ib with T_a_b the frame from a to b. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.cpp" line="54" column="22" bodyfile="src/rigidbodyinertia.cpp" bodystart="54" bodyend="70" declfile="src/rigidbodyinertia.hpp" declline="128" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae0ac1e675d2d8e40cba13ea17eb64154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator*</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;lhs, const Rall1d&lt; T, V, S &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="245" column="16" bodyfile="src/utilities/rall1d.h" bodystart="245" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac63ff44d01eb3515325a5e68632a0411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator*</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;v, S s)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="276" column="16" bodyfile="src/utilities/rall1d.h" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af4b20aee782ff7944820549428d994d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator*</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;lhs, const Rall2d&lt; T, V, S &gt; &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="258" column="16" bodyfile="src/utilities/rall2d.h" bodystart="258" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae8b5701325d16dc7c9b820e1100cfb4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator*</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;v, S s)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="292" column="16" bodyfile="src/utilities/rall2d.h" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aea69709844f7f034d1352c182036b5ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench KDL::operator*</definition>
        <argsstring>(const RigidBodyInertia &amp;I, const Twist &amp;t)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>calculate spatial momentum: h = I*v make sure that the twist v and the inertia are expressed in the same reference frame/point </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.cpp" line="50" column="12" bodyfile="src/rigidbodyinertia.cpp" bodystart="50" bodyend="52" declfile="src/rigidbodyinertia.hpp" declline="123" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa9ad476d005ede2a464b048a9b048a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref></type>
        <definition>Rotation KDL::operator*</definition>
        <argsstring>(const Rotation &amp;lhs, const Rotation &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.cpp" line="198" column="14" bodyfile="src/frames.cpp" bodystart="198" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aef01dde4be0f6e8252a1703c16f30bdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia KDL::operator*</definition>
        <argsstring>(const Rotation &amp;M, const ArticulatedBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference frame orientation change Ia = R_a_b*Ib with R_a_b the rotation of b expressed in a </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.cpp" line="90" column="28" bodyfile="src/articulatedbodyinertia.cpp" bodystart="90" bodyend="93" declfile="src/articulatedbodyinertia.hpp" declline="122" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a68dfff80e6489e8c7c208d764a71ccaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia KDL::operator*</definition>
        <argsstring>(const Rotation &amp;M, const RigidBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference frame orientation change Ia = R_a_b*Ib with R_a_b the rotation of b expressed in a </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.cpp" line="72" column="22" bodyfile="src/rigidbodyinertia.cpp" bodystart="72" bodyend="81" declfile="src/rigidbodyinertia.hpp" declline="133" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aaeeb2ef394b9f8e5772d793d9c361530" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref></type>
        <definition>Wrench KDL::operator*</definition>
        <argsstring>(const Stiffness &amp;s, const Twist &amp;t)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classKDL_1_1Stiffness" kindref="compound">Stiffness</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stiffness.hpp" line="81" column="15" bodyfile="src/stiffness.hpp" bodystart="81" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa7100a66f621fadcd96168a97d27784d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia KDL::operator*</definition>
        <argsstring>(double a, const ArticulatedBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scalar product: I_new = double * I_old </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.cpp" line="49" column="28" bodyfile="src/articulatedbodyinertia.cpp" bodystart="49" bodyend="51" declfile="src/articulatedbodyinertia.hpp" declline="97" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1accbcba03cf4c161e16962aa6ede0f71f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia KDL::operator*</definition>
        <argsstring>(double a, const RigidBodyInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scalar product: I_new = double * I_old </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.cpp" line="42" column="22" bodyfile="src/rigidbodyinertia.cpp" bodystart="42" bodyend="44" declfile="src/rigidbodyinertia.hpp" declline="111" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af55f79c3adb61f24af891e0a01b1c9da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref></type>
        <definition>RotationalInertia KDL::operator*</definition>
        <argsstring>(double a, const RotationalInertia &amp;I)</argsstring>
        <name>operator*</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref> &amp;</type>
          <declname>I</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.cpp" line="50" column="23" bodyfile="src/rotationalinertia.cpp" bodystart="50" bodyend="54" declfile="src/rotationalinertia.hpp" declline="68" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1acf526a38ef0ac580f129e95baef75930" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator*</definition>
        <argsstring>(S s, const Rall1d&lt; T, V, S &gt; &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="270" column="16" bodyfile="src/utilities/rall1d.h" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ade558189aadf6828c72bda912c0be10b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator*</definition>
        <argsstring>(S s, const Rall2d&lt; T, V, S &gt; &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="286" column="16" bodyfile="src/utilities/rall2d.h" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a3bc91024ee0a8b23fa94b74fa7c952f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia KDL::operator+</definition>
        <argsstring>(const ArticulatedBodyInertia &amp;Ia, const ArticulatedBodyInertia &amp;Ib)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>addition I: I_new = I_old1 + I_old2, make sure that I_old1 and I_old2 are expressed in the same reference frame/point, otherwise the result is worth nothing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.cpp" line="53" column="28" bodyfile="src/articulatedbodyinertia.cpp" bodystart="53" bodyend="55" declfile="src/articulatedbodyinertia.hpp" declline="103" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a698a887bd036f999ead109cb2f29c5e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia KDL::operator+</definition>
        <argsstring>(const ArticulatedBodyInertia &amp;Ia, const RigidBodyInertia &amp;Ib)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="104" column="28" declfile="src/articulatedbodyinertia.hpp" declline="104" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac658376e450f37a620b95f4051358fce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator+</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;lhs, const Rall1d&lt; T, V, S &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="251" column="16" bodyfile="src/utilities/rall1d.h" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a021feb07a51ec623e769248b1c110cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator+</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;v, S s)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="288" column="16" bodyfile="src/utilities/rall1d.h" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a6a8432d8241db0cbee8a256f4b59ef46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator+</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;lhs, const Rall2d&lt; T, V, S &gt; &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="268" column="16" bodyfile="src/utilities/rall2d.h" bodystart="268" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aea25d0be19e8dccf456c4f8e0e1fe28f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator+</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;v, S s)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="304" column="16" bodyfile="src/utilities/rall2d.h" bodystart="304" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af14129ba902ec31f692ae97e29c033ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia KDL::operator+</definition>
        <argsstring>(const RigidBodyInertia &amp;Ia, const ArticulatedBodyInertia &amp;Ib)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.cpp" line="57" column="28" bodyfile="src/articulatedbodyinertia.cpp" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a9a48ecd0ba02c61eb30f97b3606a1d10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref></type>
        <definition>RigidBodyInertia KDL::operator+</definition>
        <argsstring>(const RigidBodyInertia &amp;Ia, const RigidBodyInertia &amp;Ib)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>addition I: I_new = I_old1 + I_old2, make sure that I_old1 and I_old2 are expressed in the same reference frame/point, otherwise the result is worth nothing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rigidbodyinertia.cpp" line="46" column="22" bodyfile="src/rigidbodyinertia.cpp" bodystart="46" bodyend="48" declfile="src/rigidbodyinertia.hpp" declline="117" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1abe6b8cfeb5c5230d0641585798889a77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref></type>
        <definition>RotationalInertia KDL::operator+</definition>
        <argsstring>(const RotationalInertia &amp;Ia, const RotationalInertia &amp;Ib)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationalInertia" kindref="compound">RotationalInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rotationalinertia.cpp" line="56" column="23" bodyfile="src/rotationalinertia.cpp" bodystart="56" bodyend="60" declfile="src/rotationalinertia.hpp" declline="69" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a9c96e2afbe60a8f62893843c08895a35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classKDL_1_1Stiffness" kindref="compound">Stiffness</ref></type>
        <definition>Stiffness KDL::operator+</definition>
        <argsstring>(const Stiffness &amp;s1, const Stiffness &amp;s2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classKDL_1_1Stiffness" kindref="compound">Stiffness</ref> &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Stiffness" kindref="compound">Stiffness</ref> &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stiffness.hpp" line="92" column="18" bodyfile="src/stiffness.hpp" bodystart="92" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac3f53bf66c5fe04eb356b96b38e11033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator+</definition>
        <argsstring>(S s, const Rall1d&lt; T, V, S &gt; &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="282" column="16" bodyfile="src/utilities/rall1d.h" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a996784b6057419f3a2a8ff6565221ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator+</definition>
        <argsstring>(S s, const Rall2d&lt; T, V, S &gt; &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="298" column="16" bodyfile="src/utilities/rall2d.h" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a148a5015338fa55d58b91dc7b9bb9983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia KDL::operator-</definition>
        <argsstring>(const ArticulatedBodyInertia &amp;Ia, const ArticulatedBodyInertia &amp;Ib)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.cpp" line="60" column="28" bodyfile="src/articulatedbodyinertia.cpp" bodystart="60" bodyend="62" declfile="src/articulatedbodyinertia.hpp" declline="105" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a8b9e70a1774fb129e540065eb6b263e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia KDL::operator-</definition>
        <argsstring>(const ArticulatedBodyInertia &amp;Ia, const RigidBodyInertia &amp;Ib)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.hpp" line="106" column="28" declfile="src/articulatedbodyinertia.hpp" declline="106" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a6414c63b4135a843ebe5a608cb0120a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator-</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="264" column="16" bodyfile="src/utilities/rall1d.h" bodystart="264" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a6f7dfac4a72e09dd826a191cb7ddd896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator-</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;lhs, const Rall1d&lt; T, V, S &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="258" column="16" bodyfile="src/utilities/rall1d.h" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a723b0ed6f8e985f802bfe5d06bf645ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator-</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;v, S s)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="300" column="16" bodyfile="src/utilities/rall1d.h" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1afa692e300009c4ac5a03777b777cc129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator-</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="280" column="16" bodyfile="src/utilities/rall2d.h" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1afaef0cdb1c85e52616214d0bb599ab11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator-</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;lhs, const Rall2d&lt; T, V, S &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="274" column="16" bodyfile="src/utilities/rall2d.h" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a2c6a1564b16d5a2c26abf5d63eec896e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator-</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;v, S s)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="316" column="16" bodyfile="src/utilities/rall2d.h" bodystart="316" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a2dfa94ee82b9d4f12d9c4ee2b79a43b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref></type>
        <definition>ArticulatedBodyInertia KDL::operator-</definition>
        <argsstring>(const RigidBodyInertia &amp;Ia, const ArticulatedBodyInertia &amp;Ib)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classKDL_1_1RigidBodyInertia" kindref="compound">RigidBodyInertia</ref> &amp;</type>
          <declname>Ia</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1ArticulatedBodyInertia" kindref="compound">ArticulatedBodyInertia</ref> &amp;</type>
          <declname>Ib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/articulatedbodyinertia.cpp" line="64" column="28" bodyfile="src/articulatedbodyinertia.cpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a930f40fc3b24eeb1b072e4f8e842fdb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator-</definition>
        <argsstring>(S s, const Rall1d&lt; T, V, S &gt; &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="294" column="16" bodyfile="src/utilities/rall1d.h" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af56a9af66e83392919871e2781ff6baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator-</definition>
        <argsstring>(S s, const Rall2d&lt; T, V, S &gt; &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="310" column="16" bodyfile="src/utilities/rall2d.h" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1acc761e20a4b8939e7b1fc19509fed229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator/</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;lhs, const Rall1d&lt; T, V, S &gt; &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="239" column="16" bodyfile="src/utilities/rall1d.h" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ad19e835adb6a238c72c6adba682d1c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator/</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;v, S s)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="312" column="16" bodyfile="src/utilities/rall1d.h" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aaea6ad212ea3f03cf359a6fd0b68d308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator/</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;lhs, const Rall2d&lt; T, V, S &gt; &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="248" column="16" bodyfile="src/utilities/rall2d.h" bodystart="248" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a60c791d571a9e7f6f8362715de2e69ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator/</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;v, S s)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="333" column="16" bodyfile="src/utilities/rall2d.h" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae578ae5ecc8af1ddea7f795743634552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::operator/</definition>
        <argsstring>(S s, const Rall1d&lt; T, V, S &gt; &amp;v)</argsstring>
        <name>operator/</name>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="306" column="16" bodyfile="src/utilities/rall1d.h" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1688bc7b4ec8112c41ed8f53eaedb472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::operator/</definition>
        <argsstring>(S s, const Rall2d&lt; T, V, S &gt; &amp;rhs)</argsstring>
        <name>operator/</name>
        <param>
          <type>S</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="322" column="16" bodyfile="src/utilities/rall2d.h" bodystart="322" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a82e4b532cea22eeed8fbec1bd43181f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Chain &amp;chain)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Chain" kindref="compound">Chain</ref> &amp;</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="45" column="1" bodyfile="src/kinfam_io.cpp" bodystart="45" bodyend="51" declfile="src/kinfam_io.hpp" declline="41" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a226695adfb3680921b18f03136ce0273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Frame &amp;T)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="130" column="1" bodyfile="src/frames_io.cpp" bodystart="130" bodyend="134" declfile="src/frames_io.hpp" declline="93" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a63ec444e29aca93f6c23373ef6433601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Frame2 &amp;T)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Frame2" kindref="compound">Frame2</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="148" column="1" bodyfile="src/frames_io.cpp" bodystart="148" bodyend="152" declfile="src/frames_io.hpp" declline="98" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1afc1e3573bca3a74daedbe3ab41552e3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const FrameAcc &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1FrameAcc" kindref="compound">FrameAcc</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc_io.hpp" line="61" column="8" bodyfile="src/frameacc_io.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ad6b4b7d81abe14453de980e479590cd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const FrameVel &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel_io.hpp" line="56" column="8" bodyfile="src/framevel_io.hpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a0b1bfa84edf53b8bda42eb5aed25b000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Jacobian &amp;jac)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>jac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="87" column="1" bodyfile="src/kinfam_io.cpp" bodystart="87" bodyend="96" declfile="src/kinfam_io.hpp" declline="51" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a9c24a75480dd228cc709f5671a91ad5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const JntArray &amp;array)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="75" column="1" bodyfile="src/kinfam_io.cpp" bodystart="75" bodyend="81" declfile="src/kinfam_io.hpp" declline="49" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa08626fac3a13378cd8d93ce317f581f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const JntSpaceInertiaMatrix &amp;jntspaceinertiamatrix)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const JntSpaceInertiaMatrix &amp;</type>
          <declname>jntspaceinertiamatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="101" column="1" bodyfile="src/kinfam_io.cpp" bodystart="101" bodyend="110" declfile="src/kinfam_io.hpp" declline="53" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ada870ba0c32e066ec5bc788b89d74749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Joint &amp;joint)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Joint" kindref="compound">Joint</ref> &amp;</type>
          <declname>joint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="27" column="1" bodyfile="src/kinfam_io.cpp" bodystart="27" bodyend="30" declfile="src/kinfam_io.hpp" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ad4b99bce081e77e3c06b2f41bb592589" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Rall1d&lt; T, V, S &gt; &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d_io.h" line="44" column="8" bodyfile="src/utilities/rall1d_io.h" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1acad9a8c9b186ba55de9bb3fc0c1b6930" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Rall2d&lt; T, V, S &gt; &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d_io.h" line="45" column="1" bodyfile="src/utilities/rall2d_io.h" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a142dcb0cd026eb30ac3cd5b4525f5090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Rotation &amp;R)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="96" column="1" bodyfile="src/frames_io.cpp" bodystart="96" bodyend="128" declfile="src/frames_io.hpp" declline="92" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a24d29a8e06dbaf10d717157f1ba28d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Rotation2 &amp;R)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="143" column="1" bodyfile="src/frames_io.cpp" bodystart="143" bodyend="146" declfile="src/frames_io.hpp" declline="97" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af23846837b43f7eca43c2088148e28fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const RotationAcc &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationAcc" kindref="compound">RotationAcc</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc_io.hpp" line="54" column="8" bodyfile="src/frameacc_io.hpp" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a7dc7beffdaf33343803aae8f3729330e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const RotationVel &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel_io.hpp" line="50" column="8" bodyfile="src/framevel_io.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ad58c420f0f0975c5cfb6c143d528a0b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Segment &amp;segment)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Segment" kindref="compound">Segment</ref> &amp;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="36" column="1" bodyfile="src/kinfam_io.cpp" bodystart="36" bodyend="39" declfile="src/kinfam_io.hpp" declline="39" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a9d7494dc064cd870a35029348375a838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Tree &amp;tree)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Tree" kindref="compound">Tree</ref> &amp;</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="57" column="1" bodyfile="src/kinfam_io.cpp" bodystart="57" bodyend="60" declfile="src/kinfam_io.hpp" declline="44" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa2ad7c49487ea4700b039c05fa5d3bb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Twist &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="73" column="1" bodyfile="src/frames_io.cpp" bodystart="73" bodyend="82" declfile="src/frames_io.hpp" declline="94" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac020750892e14e0e4e075efd6bfd3100" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const TwistAcc &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1TwistAcc" kindref="compound">TwistAcc</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc_io.hpp" line="65" column="8" bodyfile="src/frameacc_io.hpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a6f27a3f6197596968c14f5976048d0cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const TwistVel &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel_io.hpp" line="61" column="8" bodyfile="src/framevel_io.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a4dde00469dc5fc853343c8ac32efa147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>width to be used when printing variables out with frames_io.h global variable, can be changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="67" column="1" bodyfile="src/frames_io.cpp" bodystart="67" bodyend="71" declfile="src/frames_io.hpp" declline="91" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a3815b8d46d06c7e3e5ae67cd6e4990b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector2 &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="136" column="1" bodyfile="src/frames_io.cpp" bodystart="136" bodyend="140" declfile="src/frames_io.hpp" declline="96" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a05fc643515b491c7a9938a8f6fd0500f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const VectorAcc &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1VectorAcc" kindref="compound">VectorAcc</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frameacc_io.hpp" line="49" column="8" bodyfile="src/frameacc_io.hpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aad66d20d936c19dc757be3a94cadcace" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream&amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const VectorVel &amp;r)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel_io.hpp" line="45" column="8" bodyfile="src/framevel_io.hpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1abdb1c2aa6c78a0a27427849421256152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Wrench &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="84" column="1" bodyfile="src/frames_io.cpp" bodystart="84" bodyend="93" declfile="src/frames_io.hpp" declline="95" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a0ff1c2a2597af9f062ddf0358682350e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
        <definition>std::ostream &amp; KDL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, SegmentMap::const_iterator root)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>SegmentMap::const_iterator</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="62" column="1" bodyfile="src/kinfam_io.cpp" bodystart="62" bodyend="69" declfile="src/kinfam_io.hpp" declline="47" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae4da090fc8773ecb33ea708305f73b0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::operator==</definition>
        <argsstring>(const JntArray &amp;src1, const JntArray &amp;src2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.cpp" line="118" column="10" bodyfile="src/jntarray.cpp" bodystart="118" bodyend="118" declfile="src/jntarray.hpp" declline="151" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1abbf2ff7d3f960ab4ff33d979d13f591e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::operator==</definition>
        <argsstring>(const JntSpaceInertiaMatrix &amp;src1, const JntSpaceInertiaMatrix &amp;src2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const JntSpaceInertiaMatrix &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const JntSpaceInertiaMatrix &amp;</type>
          <declname>src2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntspaceinertiamatrix.cpp" line="116" column="10" bodyfile="src/jntspaceinertiamatrix.cpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a28d08c1a822a0fe3a5e2c7e59d06236a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> bool</type>
        <definition>INLINE bool KDL::operator==</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;y, const Rall1d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="497" column="14" bodyfile="src/utilities/rall1d.h" bodystart="497" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a5d47d4e43e47c0d65a074ed1851de847" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> bool</type>
        <definition>INLINE bool KDL::operator==</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;y, const Rall2d&lt; T, V, S &gt; &amp;x)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="557" column="14" bodyfile="src/utilities/rall2d.h" bodystart="557" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1d076f4eec84df192b9bcfa5740f2ebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool KDL::operator==</definition>
        <argsstring>(const Rotation &amp;a, const Rotation &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames.cpp" line="455" column="6" bodyfile="src/frames.cpp" bodystart="455" bodyend="469" declfile="src/frames.hpp" declline="558" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aba43ee3692a840b29148361f29ddfce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Chain &amp;chain)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Chain" kindref="compound">Chain</ref> &amp;</type>
          <declname>chain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="53" column="14" bodyfile="src/kinfam_io.cpp" bodystart="53" bodyend="55" declfile="src/kinfam_io.hpp" declline="42" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ab4978efdfafa24e8f1cb78220c643fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Frame &amp;T)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Frame" kindref="compound">Frame</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="276" column="14" bodyfile="src/frames_io.cpp" bodystart="276" bodyend="305" declfile="src/frames_io.hpp" declline="104" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a84456402e2d197eae16e609d80596e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Frame2 &amp;T)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Frame2" kindref="compound">Frame2</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="327" column="14" bodyfile="src/frames_io.cpp" bodystart="327" bodyend="333" declfile="src/frames_io.hpp" declline="109" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a85780256ced2e5f6fba9424699585611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Jacobian &amp;jac)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>jac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="98" column="14" bodyfile="src/kinfam_io.cpp" bodystart="98" bodyend="100" declfile="src/kinfam_io.hpp" declline="52" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa3598c2cd0bf08e0d4091b62c3d3e70b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, JntArray &amp;array)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="83" column="14" bodyfile="src/kinfam_io.cpp" bodystart="83" bodyend="85" declfile="src/kinfam_io.hpp" declline="50" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a59562838391488e5b3aa4b158a090225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, JntSpaceInertiaMatrix &amp;jntspaceinertiamatrix)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>JntSpaceInertiaMatrix &amp;</type>
          <declname>jntspaceinertiamatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="112" column="14" bodyfile="src/kinfam_io.cpp" bodystart="112" bodyend="114" declfile="src/kinfam_io.hpp" declline="54" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a14b0994fadb788bdcdb88e9009f5d919" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Joint &amp;joint)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Joint" kindref="compound">Joint</ref> &amp;</type>
          <declname>joint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="32" column="14" bodyfile="src/kinfam_io.cpp" bodystart="32" bodyend="34" declfile="src/kinfam_io.hpp" declline="38" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ab2c986dc7a5f9e5864938fc2e79dd67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Rotation &amp;r)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Rotation" kindref="compound">Rotation</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="215" column="14" bodyfile="src/frames_io.cpp" bodystart="215" bodyend="274" declfile="src/frames_io.hpp" declline="103" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a798f68d899adc2906b5eb1fca8b4b372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Rotation2 &amp;r)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Rotation2" kindref="compound">Rotation2</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="317" column="14" bodyfile="src/frames_io.cpp" bodystart="317" bodyend="326" declfile="src/frames_io.hpp" declline="108" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a462bc4499da1e5209d5001872632985b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Segment &amp;segment)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Segment" kindref="compound">Segment</ref> &amp;</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="41" column="14" bodyfile="src/kinfam_io.cpp" bodystart="41" bodyend="43" declfile="src/kinfam_io.hpp" declline="40" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a15fc44010bfdca609d7802c8aab91895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Tree &amp;tree)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Tree" kindref="compound">Tree</ref> &amp;</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="71" column="14" bodyfile="src/kinfam_io.cpp" bodystart="71" bodyend="73" declfile="src/kinfam_io.hpp" declline="45" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a99cf8d444d6ece29e81ba106a4b1d48f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Twist &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Twist" kindref="compound">Twist</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="177" column="14" bodyfile="src/frames_io.cpp" bodystart="177" bodyend="194" declfile="src/frames_io.hpp" declline="105" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1afa42ed5643a2891f71a3b6c6a2df285f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Vector &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="154" column="14" bodyfile="src/frames_io.cpp" bodystart="154" bodyend="175" declfile="src/frames_io.hpp" declline="102" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a614435357b4ef70a4306fb45facbe606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Vector2 &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Vector2" kindref="compound">Vector2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="307" column="14" bodyfile="src/frames_io.cpp" bodystart="307" bodyend="316" declfile="src/frames_io.hpp" declline="107" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a4147003cd7f723387395f3f87887fa96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
        <definition>std::istream &amp; KDL::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Wrench &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1Wrench" kindref="compound">Wrench</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/frames_io.cpp" line="196" column="14" bodyfile="src/frames_io.cpp" bodystart="196" bodyend="213" declfile="src/frames_io.hpp" declline="106" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae535e38a0cb4424d3c6d838d6ed94051" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::posrandom</definition>
        <argsstring>(double &amp;a)</argsstring>
        <name>posrandom</name>
        <param>
          <type>double &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="278" column="13" bodyfile="src/utilities/utility.h" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac19da83b9af24139e10645a8d85a46be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void KDL::posrandom</definition>
        <argsstring>(doubleVel &amp;F)</argsstring>
        <name>posrandom</name>
        <param>
          <type><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="69" column="14" bodyfile="src/framevel.hpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a804501a1fd1b260f9950c36f25377393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void KDL::posrandom</definition>
        <argsstring>(FrameVel &amp;F)</argsstring>
        <name>posrandom</name>
        <param>
          <type><ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="404" column="14" bodyfile="src/framevel.hpp" bodystart="404" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a4c3c25f90186eeb86ea560c0a79e9b6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void KDL::posrandom</definition>
        <argsstring>(Jacobian&lt; T &gt; &amp;rv)</argsstring>
        <name>posrandom</name>
        <param>
          <type><ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref>&lt; T &gt; &amp;</type>
          <declname>rv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobiantests.hpp" line="25" column="6" bodyfile="tests/jacobiantests.hpp" bodystart="25" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a5c000a5dfa9cbf912bf67073fb7520fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void KDL::posrandom</definition>
        <argsstring>(RotationVel &amp;R)</argsstring>
        <name>posrandom</name>
        <param>
          <type><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="399" column="14" bodyfile="src/framevel.hpp" bodystart="399" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a8139fb4347d29af451e019f5d54f5268" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::posrandom</definition>
        <argsstring>(Stiffness &amp;F)</argsstring>
        <name>posrandom</name>
        <param>
          <type><ref refid="classKDL_1_1Stiffness" kindref="compound">Stiffness</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stiffness.hpp" line="102" column="13" bodyfile="src/stiffness.hpp" bodystart="102" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ad28862488c44a3fcd86179b28223b34b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void KDL::posrandom</definition>
        <argsstring>(TwistVel &amp;a)</argsstring>
        <name>posrandom</name>
        <param>
          <type><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="394" column="14" bodyfile="src/framevel.hpp" bodystart="394" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a50822c16b76589bb4a41df313d931f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void KDL::posrandom</definition>
        <argsstring>(VectorVel &amp;a)</argsstring>
        <name>posrandom</name>
        <param>
          <type><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="390" column="14" bodyfile="src/framevel.hpp" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a5a8dc3166791f85443680b2aaf077ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::pow</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;arg, double m)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="383" column="16" bodyfile="src/utilities/rall1d.h" bodystart="383" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a208905dec0210e79b264165dca1ac694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::pow</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg, double m)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="417" column="16" bodyfile="src/utilities/rall2d.h" bodystart="417" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a68d5186e6e1bfad5036dbee0948b2583" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::pow</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>pow</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="122" column="19" bodyfile="src/utilities/utility.h" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aaf684fac9a1afae7d61bca2a13a2dae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classKDL_1_1Chain" kindref="compound">Chain</ref></type>
        <definition>Chain KDL::Puma560</definition>
        <argsstring>()</argsstring>
        <name>Puma560</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="models/puma560.cpp" line="27" column="11" bodyfile="models/puma560.cpp" bodystart="27" bodyend="53" declfile="models/models.hpp" declline="29" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a05d58dfdea5e2cb5e49e26d23b7b3328" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::PYTHAG</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>PYTHAG</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/svd_eigen_HH.hpp" line="33" column="19" bodyfile="src/utilities/svd_eigen_HH.hpp" bodystart="33" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac876b04cb1835696c7e227ba0d37d7e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::random</definition>
        <argsstring>(double &amp;a)</argsstring>
        <name>random</name>
        <param>
          <type>double &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="274" column="13" bodyfile="src/utilities/utility.h" bodystart="274" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a910caae27c05e168ff9e13c1e1646319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void KDL::random</definition>
        <argsstring>(doubleVel &amp;F)</argsstring>
        <name>random</name>
        <param>
          <type><ref refid="namespaceKDL_1a6725eee11f82dfb8f65f78b107bbe7e8" kindref="member">doubleVel</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="65" column="14" bodyfile="src/framevel.hpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a30e4eea768db2597e48833327755dc16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void KDL::random</definition>
        <argsstring>(FrameVel &amp;F)</argsstring>
        <name>random</name>
        <param>
          <type><ref refid="classKDL_1_1FrameVel" kindref="compound">FrameVel</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="386" column="14" bodyfile="src/framevel.hpp" bodystart="386" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a9a9883ce5d4acd8ae15f21dd9efca7e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void KDL::random</definition>
        <argsstring>(Jacobian&lt; T &gt; &amp;rv)</argsstring>
        <name>random</name>
        <param>
          <type><ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref>&lt; T &gt; &amp;</type>
          <declname>rv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tests/jacobiantests.hpp" line="16" column="6" bodyfile="tests/jacobiantests.hpp" bodystart="16" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a255a6a31ee024f0c265366e89129f564" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void KDL::random</definition>
        <argsstring>(RotationVel &amp;R)</argsstring>
        <name>random</name>
        <param>
          <type><ref refid="classKDL_1_1RotationVel" kindref="compound">RotationVel</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="381" column="14" bodyfile="src/framevel.hpp" bodystart="381" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1acedf7ab3ea2f5f02a51c0509a406ef33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::random</definition>
        <argsstring>(Stiffness &amp;F)</argsstring>
        <name>random</name>
        <param>
          <type><ref refid="classKDL_1_1Stiffness" kindref="compound">Stiffness</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/stiffness.hpp" line="111" column="13" bodyfile="src/stiffness.hpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1fdb77353c9152acfebd13a454872ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void KDL::random</definition>
        <argsstring>(TwistVel &amp;a)</argsstring>
        <name>random</name>
        <param>
          <type><ref refid="classKDL_1_1TwistVel" kindref="compound">TwistVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="376" column="14" bodyfile="src/framevel.hpp" bodystart="376" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ad4bc824b5837adae75f79399bd124804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="utility_8h_1aa516142b5f3c749c4774febbf30b1a30" kindref="member">IMETHOD</ref> void</type>
        <definition>IMETHOD void KDL::random</definition>
        <argsstring>(VectorVel &amp;a)</argsstring>
        <name>random</name>
        <param>
          <type><ref refid="classKDL_1_1VectorVel" kindref="compound">VectorVel</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/framevel.hpp" line="372" column="14" bodyfile="src/framevel.hpp" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a6756ce7b540d1a6f3e74019bc73642cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::SetToIdentity</definition>
        <argsstring>(double &amp;arg)</argsstring>
        <name>SetToIdentity</name>
        <param>
          <type>double &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>to uniformly set double, RNDouble,<ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>,... objects to the identity element in template-classes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="247" column="13" bodyfile="src/utilities/utility.h" bodystart="247" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a47a8d2d992187948218d1525aaefc923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> void</type>
        <definition>INLINE void KDL::SetToIdentity</definition>
        <argsstring>(Rall1d&lt; T, V, S &gt; &amp;value)</argsstring>
        <name>SetToIdentity</name>
        <param>
          <type><ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="484" column="14" bodyfile="src/utilities/rall1d.h" bodystart="484" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aecb4ad606020d5019539920cf1afbc03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> void</type>
        <definition>INLINE void KDL::SetToIdentity</definition>
        <argsstring>(Rall2d&lt; T, V, S &gt; &amp;value)</argsstring>
        <name>SetToIdentity</name>
        <param>
          <type><ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="540" column="14" bodyfile="src/utilities/rall2d.h" bodystart="540" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a35f7ca17400933ea6775b76bc2d96f94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::SetToZero</definition>
        <argsstring>(double &amp;arg)</argsstring>
        <name>SetToZero</name>
        <param>
          <type>double &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>to uniformly set double, RNDouble,<ref refid="classKDL_1_1Vector" kindref="compound">Vector</ref>,... objects to zero in template-classes </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="242" column="13" bodyfile="src/utilities/utility.h" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa2015ef4bf3ebb5f6defaf8bc1cf5184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::SetToZero</definition>
        <argsstring>(Jacobian &amp;jac)</argsstring>
        <name>SetToZero</name>
        <param>
          <type><ref refid="classKDL_1_1Jacobian" kindref="compound">Jacobian</ref> &amp;</type>
          <declname>jac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jacobian.cpp" line="79" column="10" bodyfile="src/jacobian.cpp" bodystart="79" bodyend="82" declfile="src/jacobian.hpp" declline="33" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a2f3640f68421949e70b00b7850917ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::SetToZero</definition>
        <argsstring>(JntArray &amp;array)</argsstring>
        <name>SetToZero</name>
        <param>
          <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to set all the values of the array to 0</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>array</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.cpp" line="106" column="10" bodyfile="src/jntarray.cpp" bodystart="106" bodyend="109" declfile="src/jntarray.hpp" declline="212" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a11a7cb9d8b92e0170f7bbfa76b378704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::SetToZero</definition>
        <argsstring>(JntArrayAcc &amp;array)</argsstring>
        <name>SetToZero</name>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="164" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="164" bodyend="169" declfile="src/jntarrayacc.hpp" declline="47" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af728f5fb88f6dfdca91afeae2d036d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::SetToZero</definition>
        <argsstring>(JntArrayVel &amp;array)</argsstring>
        <name>SetToZero</name>
        <param>
          <type><ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayvel.cpp" line="105" column="10" bodyfile="src/jntarrayvel.cpp" bodystart="105" bodyend="109" declfile="src/jntarrayvel.hpp" declline="42" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a3dd6492d65329fce08a49950b28256ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::SetToZero</definition>
        <argsstring>(JntSpaceInertiaMatrix &amp;mat)</argsstring>
        <name>SetToZero</name>
        <param>
          <type>JntSpaceInertiaMatrix &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntspaceinertiamatrix.cpp" line="104" column="10" bodyfile="src/jntspaceinertiamatrix.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae33b889bf3ebfc8b2124a4e9b7e3176d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> void</type>
        <definition>INLINE void KDL::SetToZero</definition>
        <argsstring>(Rall1d&lt; T, V, S &gt; &amp;value)</argsstring>
        <name>SetToZero</name>
        <param>
          <type><ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="478" column="14" bodyfile="src/utilities/rall1d.h" bodystart="478" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a3a66a9767257c9a79eadcba0367a8ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> void</type>
        <definition>INLINE void KDL::SetToZero</definition>
        <argsstring>(Rall2d&lt; T, V, S &gt; &amp;value)</argsstring>
        <name>SetToZero</name>
        <param>
          <type><ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="532" column="14" bodyfile="src/utilities/rall2d.h" bodystart="532" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ad2be3f0ee76cde337e1ad2f047bce434" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::SIGN</definition>
        <argsstring>(double a, double b)</argsstring>
        <name>SIGN</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/svd_eigen_HH.hpp" line="51" column="19" bodyfile="src/utilities/svd_eigen_HH.hpp" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a26d8ca57d3f08fc3ae0c00b3fc7b2d94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::sign</definition>
        <argsstring>(double arg)</argsstring>
        <name>sign</name>
        <param>
          <type>double</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="251" column="15" bodyfile="src/utilities/utility.h" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ad75e917c4141823627a64b5cfc912eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::sin</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="335" column="16" bodyfile="src/utilities/rall1d.h" bodystart="335" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aec3b56df50f199741cf7f2eaf6187051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::sin</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>sin</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="360" column="16" bodyfile="src/utilities/rall2d.h" bodystart="360" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a83eeaaa67bf4c15196b7ca7b44a8ebf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::sin</definition>
        <argsstring>(double a)</argsstring>
        <name>sin</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="85" column="19" bodyfile="src/utilities/utility.h" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1c9ec321012adc09c9aa66b03d06545b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::sinh</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>sinh</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="359" column="16" bodyfile="src/utilities/rall1d.h" bodystart="359" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa154e163f0597be89a5ae4e4db4fbfc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::sinh</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>sinh</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="384" column="16" bodyfile="src/utilities/rall2d.h" bodystart="384" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a0d650809e1cc8fb0b490a330c8ee3501" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::sinh</definition>
        <argsstring>(double a)</argsstring>
        <name>sinh</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="104" column="19" bodyfile="src/utilities/utility.h" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1af1b48945aeed7c276806449802481a08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::sqr</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>sqr</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="375" column="16" bodyfile="src/utilities/rall1d.h" bodystart="375" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aaa4bd8cc4cbf315b38a11542634bd4d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::sqr</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>sqr</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="408" column="16" bodyfile="src/utilities/rall2d.h" bodystart="408" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a807ad524ab1bc63cf7f30e34e8f379e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::sqr</definition>
        <argsstring>(double arg)</argsstring>
        <name>sqr</name>
        <param>
          <type>double</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="255" column="15" bodyfile="src/utilities/utility.h" bodystart="255" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aa6caeaeca2777225cf1f09355e286d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::sqrt</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="391" column="16" bodyfile="src/utilities/rall1d.h" bodystart="391" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a41c73e4ca2b95ea025688ac60ffc1d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::sqrt</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="428" column="16" bodyfile="src/utilities/rall2d.h" bodystart="428" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a4c17e5a3698f4fd73e13958436629801" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::sqrt</definition>
        <argsstring>(double a)</argsstring>
        <name>sqrt</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="107" column="19" bodyfile="src/utilities/utility.h" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac44746c206c669411831b6caff88e421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Subtract</definition>
        <argsstring>(const JntArray &amp;src1, const JntArray &amp;src2, JntArray &amp;dest)</argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to subtract two joint arrays, all the arguments must have the same size: A - B = C. This function is aliasing-safe, A or B can be the same array as C.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src1</parametername>
</parameternamelist>
<parameterdescription>
<para>A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src2</parametername>
</parameternamelist>
<parameterdescription>
<para>B </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>C </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarray.cpp" line="85" column="10" bodyfile="src/jntarray.cpp" bodystart="85" bodyend="88" declfile="src/jntarray.hpp" declline="173" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a9bac2127ca5bdf3e32005ba6c4b6e7ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Subtract</definition>
        <argsstring>(const JntArrayAcc &amp;src1, const JntArray &amp;src2, JntArrayAcc &amp;dest)</argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="97" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="97" bodyend="102" declfile="src/jntarrayacc.hpp" declline="40" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a11d30225535a30ab654b8709f63e01f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Subtract</definition>
        <argsstring>(const JntArrayAcc &amp;src1, const JntArrayAcc &amp;src2, JntArrayAcc &amp;dest)</argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="85" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="85" bodyend="90" declfile="src/jntarrayacc.hpp" declline="38" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a0c8b3f55e1a6fb791e14bcb8e0b5e9d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Subtract</definition>
        <argsstring>(const JntArrayAcc &amp;src1, const JntArrayVel &amp;src2, JntArrayAcc &amp;dest)</argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayAcc" kindref="compound">JntArrayAcc</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayacc.cpp" line="91" column="10" bodyfile="src/jntarrayacc.cpp" bodystart="91" bodyend="96" declfile="src/jntarrayacc.hpp" declline="39" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1aadbca4bf9398d905195352bb15fffb06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Subtract</definition>
        <argsstring>(const JntArrayVel &amp;src1, const JntArray &amp;src2, JntArrayVel &amp;dest)</argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArray" kindref="compound">JntArray</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayvel.cpp" line="73" column="10" bodyfile="src/jntarrayvel.cpp" bodystart="73" bodyend="77" declfile="src/jntarrayvel.hpp" declline="37" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae4d61bfbf31b933f7843f71328966e85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Subtract</definition>
        <argsstring>(const JntArrayVel &amp;src1, const JntArrayVel &amp;src2, JntArrayVel &amp;dest)</argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1JntArrayVel" kindref="compound">JntArrayVel</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntarrayvel.cpp" line="68" column="10" bodyfile="src/jntarrayvel.cpp" bodystart="68" bodyend="72" declfile="src/jntarrayvel.hpp" declline="36" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ad7871e05e7ecc703e39a9256dbc3ea4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void KDL::Subtract</definition>
        <argsstring>(const JntSpaceInertiaMatrix &amp;src1, const JntSpaceInertiaMatrix &amp;src2, JntSpaceInertiaMatrix &amp;dest)</argsstring>
        <name>Subtract</name>
        <param>
          <type>const JntSpaceInertiaMatrix &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const JntSpaceInertiaMatrix &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type>JntSpaceInertiaMatrix &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/jntspaceinertiamatrix.cpp" line="84" column="10" bodyfile="src/jntspaceinertiamatrix.cpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a018cd64c810b4538db502263927b2071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KDL::svd_eigen_HH</definition>
        <argsstring>(const Eigen::MatrixXd &amp;A, Eigen::MatrixXd &amp;U, Eigen::VectorXd &amp;S, Eigen::MatrixXd &amp;V, Eigen::VectorXd &amp;tmp, int maxiter, double epsilon)</argsstring>
        <name>svd_eigen_HH</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>S</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>tmp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxiter</declname>
          <defval>150</defval>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval>1e-300</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>svd calculation of eigen matrices</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix&lt;double&gt;(mxn) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix&lt;double&gt;(mxn) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">vector&lt;double&gt;</ref> n </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix&lt;double&gt;(nxn) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tmp</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">vector&lt;double&gt;</ref> n </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxiter</parametername>
</parameternamelist>
<parameterdescription>
<para>defaults to 150</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-2 if maxiter exceeded, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/svd_eigen_HH.cpp" line="26" column="9" bodyfile="src/utilities/svd_eigen_HH.cpp" bodystart="26" bodyend="267" declfile="src/utilities/svd_eigen_HH.hpp" declline="67" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1ffa30e1db026c43a7a6fe8b3e2f866c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int KDL::svd_eigen_Macie</definition>
        <argsstring>(const Eigen::MatrixXd &amp;A, Eigen::MatrixXd &amp;U, Eigen::VectorXd &amp;S, Eigen::MatrixXd &amp;V, Eigen::MatrixXd &amp;B, Eigen::VectorXd &amp;tempi, double threshold, bool toggle)</argsstring>
        <name>svd_eigen_Macie</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>U</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>S</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>tempi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>toggle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>svd_eigen_Macie provides Maciejewski implementation for SVD.</para>
<para>computes the singular value decomposition of a matrix A, such that A=U*Sm*V</para>
<para>(Maciejewski and Klein,1989) and (Braun, Ulrey, Maciejewski and Siegel,2002)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>[INPUT] is an <formula id="17">$m \times n$</formula>-matrix, where <formula id="18">$ m \geq n $</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>[OUTPUT] is an <formula id="19">$n$</formula>-vector, representing the diagonal elements of the diagonal matrix Sm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>[INPUT/OUTPUT] is an <formula id="20">$m \times m$</formula> orthonormal matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>[INPUT/OUTPUT] is an <formula id="21">$n \times n$</formula> orthonormal matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>[TEMPORARY] is an <formula id="17">$m \times n$</formula> matrix used for temporary storage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tempi</parametername>
</parameternamelist>
<parameterdescription>
<para>[TEMPORARY] is an <formula id="22">$m$</formula> vector used for temporary storage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>[INPUT] Threshold to determine orthogonality. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>toggle</parametername>
</parameternamelist>
<parameterdescription>
<para>[INPUT] toggle this boolean variable on each call of this routine. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of sweeps. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/svd_eigen_Macie.cpp" line="25" column="9" bodyfile="src/utilities/svd_eigen_Macie.cpp" bodystart="25" bodyend="161" declfile="src/utilities/svd_eigen_Macie.hpp" declline="58" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a8d333b9b7dd404a61e9a28d18cf9b798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void KDL::swap</definition>
        <argsstring>(scoped_ptr&lt; T &gt; &amp;, scoped_ptr&lt; T &gt; &amp;)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classKDL_1_1scoped__ptr" kindref="compound">scoped_ptr</ref>&lt; T &gt; &amp;</type>
          <defname>a</defname>
        </param>
        <param>
          <type><ref refid="classKDL_1_1scoped__ptr" kindref="compound">scoped_ptr</ref>&lt; T &gt; &amp;</type>
          <defname>b</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/scoped_ptr.hpp" line="94" column="6" bodyfile="src/utilities/scoped_ptr.hpp" bodystart="94" bodyend="97" declfile="src/utilities/scoped_ptr.hpp" declline="57" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ae2a9f81586eda282e1a1ffe9e6d2c4b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::tan</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="351" column="16" bodyfile="src/utilities/rall1d.h" bodystart="351" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a937d2213d891795af2a5e491cccd5350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::tan</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>tan</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="376" column="16" bodyfile="src/utilities/rall2d.h" bodystart="376" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a4745e37091ce2f99620a8f655b689d5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::tan</definition>
        <argsstring>(double a)</argsstring>
        <name>tan</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="98" column="19" bodyfile="src/utilities/utility.h" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a66e2106429c51143468bd90e27f576fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall1d&lt;T,V,S&gt; KDL::tanh</definition>
        <argsstring>(const Rall1d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>tanh</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall1d" kindref="compound">Rall1d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall1d.h" line="446" column="16" bodyfile="src/utilities/rall1d.h" bodystart="446" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a1081ccc535a2243f01697c71350f3886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class V</type>
          </param>
          <param>
            <type>class S</type>
          </param>
        </templateparamlist>
        <type><ref refid="utility_8h_1a2eb6f9e0395b47b8d5e3eeae4fe0c116" kindref="member">INLINE</ref> <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt;</type>
        <definition>INLINE Rall2d&lt;T,V,S&gt; KDL::tanh</definition>
        <argsstring>(const Rall2d&lt; T, V, S &gt; &amp;arg)</argsstring>
        <name>tanh</name>
        <param>
          <type>const <ref refid="classKDL_1_1Rall2d" kindref="compound">Rall2d</ref>&lt; T, V, S &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/rall2d.h" line="400" column="16" bodyfile="src/utilities/rall2d.h" bodystart="400" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a88109e831bec435e602116a20afdd728" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double KDL::tanh</definition>
        <argsstring>(double a)</argsstring>
        <name>tanh</name>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility.h" line="119" column="19" bodyfile="src/utilities/utility.h" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a41887a706e492cdc9233cd8a8d1941fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string KDL::tree2str</definition>
        <argsstring>(const SegmentMap::const_iterator it, const std::string &amp;separator, const std::string &amp;preamble, unsigned int level)</argsstring>
        <name>tree2str</name>
        <param>
          <type>const SegmentMap::const_iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>separator</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>preamble</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="117" column="13" bodyfile="src/kinfam_io.cpp" bodystart="117" bodyend="126" declfile="src/kinfam_io.hpp" declline="61" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1a47c82d0ef17bb32147727b66899b5a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string KDL::tree2str</definition>
        <argsstring>(const Tree &amp;tree, const std::string &amp;separator, const std::string &amp;preamble)</argsstring>
        <name>tree2str</name>
        <param>
          <type>const <ref refid="classKDL_1_1Tree" kindref="compound">Tree</ref> &amp;</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>separator</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>preamble</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/kinfam_io.cpp" line="128" column="13" bodyfile="src/kinfam_io.cpp" bodystart="128" bodyend="130" declfile="src/kinfam_io.hpp" declline="60" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ad99081b5fff0a9d43dfc07a3f64ee714" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void KDL::Twist_to_Eigen</definition>
        <argsstring>(const KDL::Twist &amp;t, Eigen::MatrixBase&lt; Derived &gt; &amp;e)</argsstring>
        <name>Twist_to_Eigen</name>
        <param>
          <type>const <ref refid="classKDL_1_1Twist" kindref="compound">KDL::Twist</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Eigen::MatrixBase&lt; Derived &gt; &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/chainiksolverpos_lma.cpp" line="63" column="13" bodyfile="src/chainiksolverpos_lma.cpp" bodystart="63" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceKDL_1ac4d41c6375e459d92fd4bcc2782e427b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char</type>
        <definition>char KDL::Upper</definition>
        <argsstring>(char ch)</argsstring>
        <name>Upper</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utilities/utility_io.cxx" line="156" column="13" bodyfile="src/utilities/utility_io.cxx" bodystart="156" bodyend="164"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="models/kukaLWR_DHnew.cpp" line="25" column="13"/>
  </compounddef>
</doxygen>
