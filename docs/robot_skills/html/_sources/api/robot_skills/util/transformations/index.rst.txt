robot_skills.util.transformations
=================================

.. py:module:: robot_skills.util.transformations


Functions
---------

.. autoapisummary::

   robot_skills.util.transformations.euler_z_to_quaternion
   robot_skills.util.transformations.euler_z_from_quaternion
   robot_skills.util.transformations.compute_relative_angle
   robot_skills.util.transformations.transform_into_base_coordinates
   robot_skills.util.transformations.compute_distance
   robot_skills.util.transformations.compute_angle
   robot_skills.util.transformations.transform_into_non_conflicting_position
   robot_skills.util.transformations.tf_transform


Module Contents
---------------

.. py:function:: euler_z_to_quaternion(angle)

   Calculate a quaternion based on a Z angle

   >>> from math import pi
   >>> euler_z_to_quaternion(pi/2)   # doctest: +ELLIPSIS
   x: 0.0
   y: 0.0
   z: 0.70710678118...
   w: 0.70710678118...


.. py:function:: euler_z_from_quaternion(quaternion)

   Return the yaw (z) angle of a quaternion

   >>> from geometry_msgs.msg import Quaternion
   >>> q = Quaternion()
   >>> euler_z_from_quaternion(q)
   0.0


.. py:function:: compute_relative_angle(absolute_angle, robot_orientation)

.. py:function:: transform_into_base_coordinates(target_position, robot_position, robot_orientation)

.. py:function:: compute_distance(target_position, robot_position)

.. py:function:: compute_angle(target_position, robot_position)

.. py:function:: transform_into_non_conflicting_position(target_position, robot_position, radius=0.6)

.. py:function:: tf_transform(coordinates, inputframe, outputframe, tf)

