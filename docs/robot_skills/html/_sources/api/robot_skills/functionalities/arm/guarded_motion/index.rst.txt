robot_skills.functionalities.arm.guarded_motion
===============================================

.. py:module:: robot_skills.functionalities.arm.guarded_motion


Classes
-------

.. autoapisummary::

   robot_skills.functionalities.arm.guarded_motion.GuardedMotionFunc


Functions
---------

.. autoapisummary::

   robot_skills.functionalities.arm.guarded_motion.move_down_until_force_sensor_edge_up
   robot_skills.functionalities.arm.guarded_motion._create_lower_force_sensing_goal
   robot_skills.functionalities.arm.guarded_motion._create_retract_force_sensing_goal
   robot_skills.functionalities.arm.guarded_motion.create_force_sensing_goal


Module Contents
---------------

.. py:class:: GuardedMotionFunc

   Bases: :py:obj:`robot_skills.functionalities.RobotFunc`


   .. py:method:: check_requirements(arm)

      Check that the arm has at least one force sensor



.. py:function:: move_down_until_force_sensor_edge_up(self, force_sensor=None, timeout=10, retract_distance=0.01, distance_move_down=10.0)

   Move down the arm (hero specific, only joint arm_lift_joint) until one of 2 things:
       - Force sensor detects an edge up
       - Timeout

   A 'force_sensor.TimeOutException' will be raised if no edge up is detected within timeout

   :param force_sensor: ForceSensor of the arm
   :param timeout: Max duration for edge up detection
   :param retract_distance: How much to retract if we have reached a surface
   :param distance_move_down: Maximum distance to move down the arm_lift_joint


.. py:function:: _create_lower_force_sensing_goal(self, distance_move_down, timeout)

.. py:function:: _create_retract_force_sensing_goal(self, retract_distance, timeout)

.. py:function:: create_force_sensing_goal(joint_names, current_joint_state, timeout)

