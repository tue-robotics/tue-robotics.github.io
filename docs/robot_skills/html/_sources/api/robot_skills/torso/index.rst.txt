robot_skills.torso
==================

.. py:module:: robot_skills.torso


Classes
-------

.. autoapisummary::

   robot_skills.torso.Torso


Module Contents
---------------

.. py:class:: Torso(robot_name, tf_buffer, get_joint_states, arm_joint_names=None)

   Bases: :py:obj:`robot_skills.robot_part.RobotPart`


   Base class for robot parts

   constructor

   :param robot_name: robot_name
   :param tf_buffer: tf2_ros.Buffer


   .. py:attribute:: joint_names


   .. py:attribute:: default_configurations


   .. py:attribute:: default_tolerance


   .. py:attribute:: lower_limit


   .. py:attribute:: upper_limit


   .. py:attribute:: _arm_joint_names
      :value: []



   .. py:attribute:: ac_move_torso


   .. py:attribute:: _get_joint_states


   .. py:method:: close()

      Cancels all active goals for the torso
      :return: no return



   .. py:method:: send_goal(configuration, timeout=0.0, tolerance=[])

      Send a named joint goal (pose) defined in the parameter default_configurations to the torso

      :param configuration: name of configuration, configuration should be loaded as parameter
      :param timeout: timeout in seconds; in case of 0.0, not waiting for motion done
      :param tolerance: list of position tolerances with the length equal to the number of joints
      :return: True or False, False in case of nonexistent configuration or failed execution



   .. py:method:: _send_goal(torso_pos, timeout=0.0, tolerance=[], start_time=1.5)

      Send a joint goal to the torso

      :param torso_pos: list of joint positions with the length equal to the number of joints
      :param timeout: timeout in seconds; in case of 0.0, not waiting for motion done
      :param tolerance: list of position tolerances with the length equal to the number of joints
      :return: True or False, False in case of nonexistent configuration or failed execution



   .. py:method:: high()

      Sends the torso to its upper limit

      :return: True or False



   .. py:method:: medium()

      Sends the torso to the middle position of each joint

      :return: True or False



   .. py:method:: low()

      Sends the torso to its lower limit

      :return: True or False



   .. py:method:: selfreset()

      Sends the torso to the reset pose

      :return:



   .. py:method:: cancel_goal()

      Cancels all active goals for the torso; Doing the same as close()

      :return: no return



   .. py:method:: wait_for_motion_done(timeout=10, cancel=False)

      Waits until all action clients are done

      :param timeout: double with time (defaults to 10.0 seconds)
      :param cancel: bool specifying whether goals should be cancelled if timeout is exceeded
      :return: bool indicates whether motion was done (True if reached, False otherwise)



   .. py:method:: wait(timeout=10)


   .. py:method:: get_position()

      Get the current joint positions

      :return: list of current positions



