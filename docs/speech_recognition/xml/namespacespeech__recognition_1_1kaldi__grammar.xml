<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacespeech__recognition_1_1kaldi__grammar" kind="namespace" language="Python">
    <compoundname>speech_recognition::kaldi_grammar</compoundname>
    <innerclass refid="classspeech__recognition_1_1kaldi__grammar_1_1Grammar" prot="public">speech_recognition::kaldi_grammar::Grammar</innerclass>
    <innerclass refid="classspeech__recognition_1_1kaldi__grammar_1_1SentenceEdge" prot="public">speech_recognition::kaldi_grammar::SentenceEdge</innerclass>
    <innerclass refid="classspeech__recognition_1_1kaldi__grammar_1_1SentenceNode" prot="public">speech_recognition::kaldi_grammar::SentenceNode</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacespeech__recognition_1_1kaldi__grammar_1a86677adb4b0367cac691f3d24b1418f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def speech_recognition.kaldi_grammar.assign_node</definition>
        <argsstring>(sentence_list, available_nodes, work_list, rules)</argsstring>
        <name>assign_node</name>
        <param>
          <type>sentence_list</type>
          <defname>sentence_list</defname>
        </param>
        <param>
          <type>available_nodes</type>
          <defname>available_nodes</defname>
        </param>
        <param>
          <type>work_list</type>
          <defname>work_list</defname>
        </param>
        <param>
          <type>rules</type>
          <defname>rules</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>For a given list of rule suffixes, find or add a node, and update the work list if necessary.

:param sentence_list: List of rule suffixes to find or add a node for.
:type  sentence_list: List of rule alternatives (a list of conjuncts, partly expanded to words,
        in particular, the first conjuct shou d not be a variable).

:param available_nodes: Known set of rule sufixes and their associated nodes. May be updated.
:type  available_nodes: Dict of str to SentenceNode

:param work_list: List or rule suffixes that need further processing. May be updated.
:type  work_list: List of pairs (node, rule suffixes).

:param rules: Rules of the grammar.

:return: Node associated with the provided sentence_list.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/speech_recognition/kaldi_grammar.py" line="329" column="1" bodyfile="src/speech_recognition/kaldi_grammar.py" bodystart="329" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="namespacespeech__recognition_1_1kaldi__grammar_1ade1da5874f744def4d3a46a8d55c70b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def speech_recognition.kaldi_grammar.expand_sentences</definition>
        <argsstring>(sentence_list, rules)</argsstring>
        <name>expand_sentences</name>
        <param>
          <type>sentence_list</type>
          <defname>sentence_list</defname>
        </param>
        <param>
          <type>rules</type>
          <defname>rules</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Expands the grammar rules until elimination of all variables at the first position

:param sentence_list: List of grammar rules
:param rules: Rules of the grammar
:return: Expanded list, an whether an end of an sentence was found.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/speech_recognition/kaldi_grammar.py" line="270" column="1" bodyfile="src/speech_recognition/kaldi_grammar.py" bodystart="270" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="namespacespeech__recognition_1_1kaldi__grammar_1ac95521ed69f89f573d98c44f8823a02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def speech_recognition.kaldi_grammar.expand_tree</definition>
        <argsstring>(rules, target=&apos;T&apos;)</argsstring>
        <name>expand_tree</name>
        <param>
          <type>rules</type>
          <defname>rules</defname>
        </param>
        <param>
          <type>target</type>
          <defname>target</defname>
          <defval>&apos;T&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Expands the grammar tree based on the words in the grammar rules.

:param rules: Extracted rules from the grammar file.
:param target: Target rule to expand, default is &apos;T&apos;.
:return: The root of the expanded tree.
:rtype: SentenceNode
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/speech_recognition/kaldi_grammar.py" line="228" column="1" bodyfile="src/speech_recognition/kaldi_grammar.py" bodystart="228" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="namespacespeech__recognition_1_1kaldi__grammar_1a08a39e2025b8450448e0b759659cd27f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def speech_recognition.kaldi_grammar.print_graphviz</definition>
        <argsstring>(root_node, outpath)</argsstring>
        <name>print_graphviz</name>
        <param>
          <type>root_node</type>
          <defname>root_node</defname>
        </param>
        <param>
          <type>outpath</type>
          <defname>outpath</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Prints Graphviz input of the tree.

:param root_node: Root of the tree
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/speech_recognition/kaldi_grammar.py" line="367" column="1" bodyfile="src/speech_recognition/kaldi_grammar.py" bodystart="367" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="namespacespeech__recognition_1_1kaldi__grammar_1a12744940fa598882d4fa5afd90575851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def speech_recognition.kaldi_grammar.stringify_suffixes</definition>
        <argsstring>(expanded_list)</argsstring>
        <name>stringify_suffixes</name>
        <param>
          <type>expanded_list</type>
          <defname>expanded_list</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Convert the current rule suffixes to string form.

:param expanded_list: List of rule suffixes to convert.
:return: Set of suffixes, after converting each to a string.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/speech_recognition/kaldi_grammar.py" line="315" column="1" bodyfile="src/speech_recognition/kaldi_grammar.py" bodystart="315" bodyend="328"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/speech_recognition/kaldi_grammar.py" line="1" column="1"/>
  </compounddef>
</doxygen>
