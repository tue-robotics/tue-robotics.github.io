<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability" kind="class" language="Python" prot="public">
    <compoundname>challenge_serving_drinks::sd_states::CheckAvailability</compoundname>
    <basecompoundref prot="public" virt="non-virtual">State</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1abcd1c69be887e04210aa5cb25276dbd6" prot="private" static="no" mutable="no">
        <type></type>
        <definition>challenge_serving_drinks.sd_states.CheckAvailability::_available_drinks_designator</definition>
        <argsstring></argsstring>
        <name>_available_drinks_designator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="36" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1ae3f49342d830fde16d2eeea279b1a47b" prot="private" static="no" mutable="no">
        <type></type>
        <definition>challenge_serving_drinks.sd_states.CheckAvailability::_drink_designator</definition>
        <argsstring></argsstring>
        <name>_drink_designator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="35" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1ab6d2990307681174fc1140177fb58b0c" prot="private" static="no" mutable="no">
        <type></type>
        <definition>challenge_serving_drinks.sd_states.CheckAvailability::_drinks_target</definition>
        <argsstring></argsstring>
        <name>_drinks_target</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="44" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1af0643f6424e57dbc63241c4034f646e8" prot="private" static="no" mutable="no">
        <type></type>
        <definition>challenge_serving_drinks.sd_states.CheckAvailability::_max_queries_per_try</definition>
        <argsstring></argsstring>
        <name>_max_queries_per_try</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="40" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1add6dbc9cf7704c7433b5538c62b4daf4" prot="private" static="no" mutable="no">
        <type></type>
        <definition>challenge_serving_drinks.sd_states.CheckAvailability::_max_tries</definition>
        <argsstring></argsstring>
        <name>_max_tries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="39" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1a51d0da906f8de4f65c9a9c93e2497ff1" prot="private" static="no" mutable="no">
        <type></type>
        <definition>challenge_serving_drinks.sd_states.CheckAvailability::_objects</definition>
        <argsstring></argsstring>
        <name>_objects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="38" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1a5c4518d0d51d1f0e9dfd413a3691420f" prot="private" static="no" mutable="no">
        <type></type>
        <definition>challenge_serving_drinks.sd_states.CheckAvailability::_robot</definition>
        <argsstring></argsstring>
        <name>_robot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="34" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1a07682a15fe18c1909f7a369f2ae1aeeb" prot="private" static="no" mutable="no">
        <type></type>
        <definition>challenge_serving_drinks.sd_states.CheckAvailability::_unavailable_drink_designator</definition>
        <argsstring></argsstring>
        <name>_unavailable_drink_designator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="37" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1a2a7358e4a606f7f126e395032d26b19a" prot="public" static="no" mutable="no">
        <type></type>
        <definition>challenge_serving_drinks.sd_states.CheckAvailability::trial</definition>
        <argsstring></argsstring>
        <name>trial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="41" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1a436d06ac286a3a3208a41918a3154101" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def challenge_serving_drinks.sd_states.CheckAvailability.__init__</definition>
        <argsstring>(self, robot, drink_designator, available_drinks_designator, unavailable_drink_designator, objects, max_tries=6, max_queries_per_try=3)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>robot</type>
          <defname>robot</defname>
        </param>
        <param>
          <type>drink_designator</type>
          <defname>drink_designator</defname>
        </param>
        <param>
          <type>available_drinks_designator</type>
          <defname>available_drinks_designator</defname>
        </param>
        <param>
          <type>unavailable_drink_designator</type>
          <defname>unavailable_drink_designator</defname>
        </param>
        <param>
          <type><ref refid="namespaceanalyse-annotations_1af4113b136547aa5563f633bb2da42c17" kindref="member" external="/home/docker/ros/noetic/system/build/docs/test_tools/tags">objects</ref></type>
          <defname>objects</defname>
        </param>
        <param>
          <type>max_tries</type>
          <defname>max_tries</defname>
          <defval>6</defval>
        </param>
        <param>
          <type>max_queries_per_try</type>
          <defname>max_queries_per_try</defname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Initialization method

:param robot: robot api object
:param drink_designator: (VariableDesignator) in which the drink to fetch is stored
:param available_drinks_designator: (VariableDesignator) in which the available drinks are stored
:param unavailable_drink_designator: (VariableDesignator) in which the unavailable drink is stored
:param objects: Objects from common knowledge
:param max_tries: (int) maximum number of times the robot asks which drink
:param max_queries_per_try: (int) maximum number of queries to the HMI server per try
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="20" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="20" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1ae1f2a6ae83557c7fab6c54df2adb75ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def challenge_serving_drinks.sd_states.CheckAvailability.execute</definition>
        <argsstring>(self, userdata=None)</argsstring>
        <name>execute</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>userdata</type>
          <defname>userdata</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="67" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="67" bodyend="98"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1aeda658f3c60fecc09cdf1cad90ee41be" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def challenge_serving_drinks.sd_states.CheckAvailability._query_drink</definition>
        <argsstring>(self, max_tries)</argsstring>
        <name>_query_drink</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>max_tries</type>
          <defname>max_tries</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Queries the HMI server for &lt;max_tries&gt; times until a result has been obtained
:return: (HMIResult) (N.B.: the &apos;semantics&apos; attribute should be a dict with &apos;beverage&apos; key)
:raises: (TimeoutException) if robot didn&apos;t hear anything
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="99" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="99" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1a2f0e760c9492cfe20c3dcdaf508c4cfa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def challenge_serving_drinks.sd_states.CheckAvailability._setup_drinks_grammar</definition>
        <argsstring>(self)</argsstring>
        <name>_setup_drinks_grammar</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Sets up the grammar to ask which drink someone would like based on the objects in the knowlegde.
:return: tuple(str, str) grammar and target
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_serving_drinks/sd_states.py" line="49" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="49" bodyend="66"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Hears the desired drink and checks its availability.
</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>challenge_serving_drinks.sd_states.CheckAvailability</label>
        <link refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>State</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>challenge_serving_drinks.sd_states.CheckAvailability</label>
        <link refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>State</label>
      </node>
    </collaborationgraph>
    <location file="src/challenge_serving_drinks/sd_states.py" line="15" column="1" bodyfile="src/challenge_serving_drinks/sd_states.py" bodystart="15" bodyend="126"/>
    <listofallmembers>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1a436d06ac286a3a3208a41918a3154101" prot="public" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>__init__</name></member>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1abcd1c69be887e04210aa5cb25276dbd6" prot="private" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>_available_drinks_designator</name></member>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1ae3f49342d830fde16d2eeea279b1a47b" prot="private" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>_drink_designator</name></member>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1ab6d2990307681174fc1140177fb58b0c" prot="private" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>_drinks_target</name></member>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1af0643f6424e57dbc63241c4034f646e8" prot="private" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>_max_queries_per_try</name></member>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1add6dbc9cf7704c7433b5538c62b4daf4" prot="private" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>_max_tries</name></member>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1a51d0da906f8de4f65c9a9c93e2497ff1" prot="private" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>_objects</name></member>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1aeda658f3c60fecc09cdf1cad90ee41be" prot="private" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>_query_drink</name></member>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1a5c4518d0d51d1f0e9dfd413a3691420f" prot="private" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>_robot</name></member>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1a2f0e760c9492cfe20c3dcdaf508c4cfa" prot="private" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>_setup_drinks_grammar</name></member>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1a07682a15fe18c1909f7a369f2ae1aeeb" prot="private" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>_unavailable_drink_designator</name></member>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1ae1f2a6ae83557c7fab6c54df2adb75ca" prot="public" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>execute</name></member>
      <member refid="classchallenge__serving__drinks_1_1sd__states_1_1CheckAvailability_1a2a7358e4a606f7f126e395032d26b19a" prot="public" virt="non-virtual"><scope>challenge_serving_drinks::sd_states::CheckAvailability</scope><name>trial</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
