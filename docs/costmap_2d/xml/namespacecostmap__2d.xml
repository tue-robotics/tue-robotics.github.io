<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacecostmap__2d" kind="namespace" language="C++">
    <compoundname>costmap_2d</compoundname>
    <innerclass refid="classcostmap__2d_1_1CellData" prot="public">costmap_2d::CellData</innerclass>
    <innerclass refid="classcostmap__2d_1_1Costmap2D" prot="public">costmap_2d::Costmap2D</innerclass>
    <innerclass refid="classcostmap__2d_1_1Costmap2DPublisher" prot="public">costmap_2d::Costmap2DPublisher</innerclass>
    <innerclass refid="classcostmap__2d_1_1Costmap2DROS" prot="public">costmap_2d::Costmap2DROS</innerclass>
    <innerclass refid="classcostmap__2d_1_1CostmapLayer" prot="public">costmap_2d::CostmapLayer</innerclass>
    <innerclass refid="classcostmap__2d_1_1CostmapTester" prot="public">costmap_2d::CostmapTester</innerclass>
    <innerclass refid="classcostmap__2d_1_1InflationLayer" prot="public">costmap_2d::InflationLayer</innerclass>
    <innerclass refid="classcostmap__2d_1_1Layer" prot="public">costmap_2d::Layer</innerclass>
    <innerclass refid="classcostmap__2d_1_1LayeredCostmap" prot="public">costmap_2d::LayeredCostmap</innerclass>
    <innerclass refid="structcostmap__2d_1_1MapLocation" prot="public">costmap_2d::MapLocation</innerclass>
    <innerclass refid="classcostmap__2d_1_1Observation" prot="public">costmap_2d::Observation</innerclass>
    <innerclass refid="classcostmap__2d_1_1ObservationBuffer" prot="public">costmap_2d::ObservationBuffer</innerclass>
    <innerclass refid="classcostmap__2d_1_1ObstacleLayer" prot="public">costmap_2d::ObstacleLayer</innerclass>
    <innerclass refid="classcostmap__2d_1_1StaticLayer" prot="public">costmap_2d::StaticLayer</innerclass>
    <innerclass refid="classcostmap__2d_1_1VoxelLayer" prot="public">costmap_2d::VoxelLayer</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacecostmap__2d_1aa367750132c78d35f962c9130c1a572c" prot="public" static="yes" mutable="no">
        <type>const unsigned char</type>
        <definition>const unsigned char costmap_2d::FREE_SPACE</definition>
        <argsstring></argsstring>
        <name>FREE_SPACE</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/cost_values.h" line="80" column="28" bodyfile="include/costmap_2d/cost_values.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecostmap__2d_1a5d3c464519e4135a8f54c9aea7a51d2b" prot="public" static="yes" mutable="no">
        <type>const unsigned char</type>
        <definition>const unsigned char costmap_2d::INSCRIBED_INFLATED_OBSTACLE</definition>
        <argsstring></argsstring>
        <name>INSCRIBED_INFLATED_OBSTACLE</name>
        <initializer>= 253</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/cost_values.h" line="79" column="28" bodyfile="include/costmap_2d/cost_values.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecostmap__2d_1aab110f187082d88d103ee84c8e420872" prot="public" static="yes" mutable="no">
        <type>const unsigned char</type>
        <definition>const unsigned char costmap_2d::LETHAL_OBSTACLE</definition>
        <argsstring></argsstring>
        <name>LETHAL_OBSTACLE</name>
        <initializer>= 254</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/cost_values.h" line="78" column="28" bodyfile="include/costmap_2d/cost_values.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecostmap__2d_1ae61ae84ebebea32544148f295779c4ef" prot="public" static="yes" mutable="no">
        <type>const unsigned char</type>
        <definition>const unsigned char costmap_2d::NO_INFORMATION</definition>
        <argsstring></argsstring>
        <name>NO_INFORMATION</name>
        <initializer>= 255</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/cost_values.h" line="77" column="28" bodyfile="include/costmap_2d/cost_values.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecostmap__2d_1a6eeafbd231ad1ec2de69e61754773742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void costmap_2d::calculateMinAndMaxDistances</definition>
        <argsstring>(const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint, double &amp;min_dist, double &amp;max_dist)</argsstring>
        <name>calculateMinAndMaxDistances</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>min_dist</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>max_dist</declname>
        </param>
        <briefdescription>
<para>Calculate the extreme distances for the footprint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>footprint</parametername>
</parameternamelist>
<parameterdescription>
<para>The footprint to examine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_dist</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter of the minimum distance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_dist</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter of the maximum distance </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/footprint.cpp" line="41" column="6" bodyfile="src/footprint.cpp" bodystart="41" bodyend="67" declfile="include/costmap_2d/footprint.h" declline="93" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1a983825dbb0ea5cf30ea3fa2763375e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt;</type>
        <definition>std::vector&lt; geometry_msgs::Point &gt; costmap_2d::makeFootprintFromParams</definition>
        <argsstring>(ros::NodeHandle &amp;nh)</argsstring>
        <name>makeFootprintFromParams</name>
        <param>
          <type>ros::NodeHandle &amp;</type>
          <declname>nh</declname>
        </param>
        <briefdescription>
<para>Read the ros-params &quot;footprint&quot; and/or &quot;robot_radius&quot; from the given NodeHandle using searchParam() to go up the tree. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/footprint.cpp" line="212" column="13" bodyfile="src/footprint.cpp" bodystart="212" bodyend="250" declfile="include/costmap_2d/footprint.h" declline="160" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1ac13ae420906acd9f42c9cc2a73e9de41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt;</type>
        <definition>std::vector&lt; geometry_msgs::Point &gt; costmap_2d::makeFootprintFromRadius</definition>
        <argsstring>(double radius)</argsstring>
        <name>makeFootprintFromRadius</name>
        <param>
          <type>double</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Create a circular footprint from a given radius. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/footprint.cpp" line="150" column="13" bodyfile="src/footprint.cpp" bodystart="150" bodyend="167" declfile="include/costmap_2d/footprint.h" declline="146" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1a0c5b34c84596c37289f90800701d5aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool costmap_2d::makeFootprintFromString</definition>
        <argsstring>(const std::string &amp;footprint_string, std::vector&lt; geometry_msgs::Point &gt; &amp;footprint)</argsstring>
        <name>makeFootprintFromString</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>footprint_string</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint</declname>
        </param>
        <briefdescription>
<para>Make the footprint from the given string. </para>
        </briefdescription>
        <detaileddescription>
<para>Format should be bracketed array of arrays of floats, like so: [[1.0, 2.2], [3.3, 4.2], ...] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/footprint.cpp" line="170" column="6" bodyfile="src/footprint.cpp" bodystart="170" bodyend="208" declfile="include/costmap_2d/footprint.h" declline="154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1ae37a15b51dd27900fd42c5d0601ae37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt;</type>
        <definition>std::vector&lt;geometry_msgs::Point&gt; costmap_2d::makeFootprintFromXMLRPC</definition>
        <argsstring>(XmlRpc::XmlRpcValue &amp;footprint_xmlrpc, const std::string &amp;full_param_name)</argsstring>
        <name>makeFootprintFromXMLRPC</name>
        <param>
          <type>XmlRpc::XmlRpcValue &amp;</type>
          <declname>footprint_xmlrpc</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>full_param_name</declname>
        </param>
        <briefdescription>
<para>Create the footprint from the given XmlRpcValue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>footprint_xmlrpc</parametername>
</parameternamelist>
<parameterdescription>
<para>should be an array of arrays, where the top-level array should have 3 or more elements, and the sub-arrays should all have exactly 2 elements (x and y coordinates).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>full_param_name</parametername>
</parameternamelist>
<parameterdescription>
<para>this is the full name of the rosparam from which the footprint_xmlrpc value came. It is used only for reporting errors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/footprint.h" line="173" column="13" declfile="include/costmap_2d/footprint.h" declline="173" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1a50986cddcfe2d310c603a723f85395b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void costmap_2d::move_parameter</definition>
        <argsstring>(ros::NodeHandle &amp;old_h, ros::NodeHandle &amp;new_h, std::string name, bool should_delete=true)</argsstring>
        <name>move_parameter</name>
        <param>
          <type>ros::NodeHandle &amp;</type>
          <declname>old_h</declname>
        </param>
        <param>
          <type>ros::NodeHandle &amp;</type>
          <declname>new_h</declname>
        </param>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>should_delete</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/costmap_2d_ros.cpp" line="53" column="6" bodyfile="src/costmap_2d_ros.cpp" bodystart="53" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1a16dd6a7064ce2ed191b40c7009512489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void costmap_2d::padFootprint</definition>
        <argsstring>(std::vector&lt; geometry_msgs::Point &gt; &amp;footprint, double padding)</argsstring>
        <name>padFootprint</name>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>padding</declname>
        </param>
        <briefdescription>
<para>Adds the specified amount of padding to the footprint (in place) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/footprint.cpp" line="138" column="6" bodyfile="src/footprint.cpp" bodystart="138" bodyend="147" declfile="include/costmap_2d/footprint.h" declline="141" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1a269a284e6ee48725e0f286ce771d71fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; float &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; float &gt; &gt; costmap_2d::parseVVF</definition>
        <argsstring>(const std::string &amp;input, std::string &amp;error_return)</argsstring>
        <name>parseVVF</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>error_return</declname>
        </param>
        <briefdescription>
<para>Parse a vector of vectors of floats from a string. </para>
        </briefdescription>
        <detaileddescription>
<para>Parse a vector of vector of floats from a string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>error_return</parametername>
</parameternamelist>
<parameterdescription>
<para>If no error, error_return is set to &quot;&quot;. If error, error_return will describe the error. Syntax is [[1.0, 2.0], [3.3, 4.4, 5.5], ...]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
On error, error_return is set and the return value could be anything, like part of a successful parse.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_return</parametername>
</parameternamelist>
<parameterdescription>
<para>Syntax is [[1.0, 2.0], [3.3, 4.4, 5.5], ...] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/array_parser.cpp" line="44" column="13" bodyfile="src/array_parser.cpp" bodystart="44" bodyend="113" declfile="include/costmap_2d/array_parser.h" declline="47" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1a9ffe4eb45b6230a18f56723b49cb0047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>geometry_msgs::Point</type>
        <definition>geometry_msgs::Point costmap_2d::toPoint</definition>
        <argsstring>(geometry_msgs::Point32 pt)</argsstring>
        <name>toPoint</name>
        <param>
          <type>geometry_msgs::Point32</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Convert Point32 to Point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/footprint.cpp" line="78" column="22" bodyfile="src/footprint.cpp" bodystart="78" bodyend="85" declfile="include/costmap_2d/footprint.h" declline="99" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1a50f77e1c7e28435a7707e1991b9a82a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>geometry_msgs::Point32</type>
        <definition>geometry_msgs::Point32 costmap_2d::toPoint32</definition>
        <argsstring>(geometry_msgs::Point pt)</argsstring>
        <name>toPoint32</name>
        <param>
          <type>geometry_msgs::Point</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Convert Point to Point32. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/footprint.cpp" line="69" column="24" bodyfile="src/footprint.cpp" bodystart="69" bodyend="76" declfile="include/costmap_2d/footprint.h" declline="104" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1a5969ae5fc593cedb677488002354feba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt;</type>
        <definition>std::vector&lt; geometry_msgs::Point &gt; costmap_2d::toPointVector</definition>
        <argsstring>(geometry_msgs::Polygon polygon)</argsstring>
        <name>toPointVector</name>
        <param>
          <type>geometry_msgs::Polygon</type>
          <declname>polygon</declname>
        </param>
        <briefdescription>
<para>Convert Polygon msg to vector of Points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/footprint.cpp" line="96" column="13" bodyfile="src/footprint.cpp" bodystart="96" bodyend="104" declfile="include/costmap_2d/footprint.h" declline="114" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1a137137a824a6a667fbf9a850c762c6ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>geometry_msgs::Polygon</type>
        <definition>geometry_msgs::Polygon costmap_2d::toPolygon</definition>
        <argsstring>(std::vector&lt; geometry_msgs::Point &gt; pts)</argsstring>
        <name>toPolygon</name>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt;</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
<para>Convert vector of Points to Polygon msg. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/footprint.cpp" line="87" column="24" bodyfile="src/footprint.cpp" bodystart="87" bodyend="94" declfile="include/costmap_2d/footprint.h" declline="109" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1aaaa46e7b32e85f73ee55de25d4c6616d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void costmap_2d::transformFootprint</definition>
        <argsstring>(double x, double y, double theta, const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint_spec, geometry_msgs::PolygonStamped &amp;oriented_footprint)</argsstring>
        <name>transformFootprint</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint_spec</declname>
        </param>
        <param>
          <type>geometry_msgs::PolygonStamped &amp;</type>
          <declname>oriented_footprint</declname>
        </param>
        <briefdescription>
<para>Given a pose and base footprint, build the oriented footprint of the robot (PolygonStamped) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x position of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y position of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>The orientation of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footprint_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>Basic shape of the footprint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oriented_footprint</parametername>
</parameternamelist>
<parameterdescription>
<para>Will be filled with the points in the oriented footprint of the robot </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/footprint.cpp" line="122" column="6" bodyfile="src/footprint.cpp" bodystart="122" bodyend="136" declfile="include/costmap_2d/footprint.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1a0928255ee5f8797cece2ab99f3eb310b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void costmap_2d::transformFootprint</definition>
        <argsstring>(double x, double y, double theta, const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint_spec, std::vector&lt; geometry_msgs::Point &gt; &amp;oriented_footprint)</argsstring>
        <name>transformFootprint</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint_spec</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>oriented_footprint</declname>
        </param>
        <briefdescription>
<para>Given a pose and base footprint, build the oriented footprint of the robot (list of Points) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x position of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y position of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>theta</parametername>
</parameternamelist>
<parameterdescription>
<para>The orientation of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footprint_spec</parametername>
</parameternamelist>
<parameterdescription>
<para>Basic shape of the footprint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oriented_footprint</parametername>
</parameternamelist>
<parameterdescription>
<para>Will be filled with the points in the oriented footprint of the robot </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/footprint.cpp" line="106" column="6" bodyfile="src/footprint.cpp" bodystart="106" bodyend="120" declfile="include/costmap_2d/footprint.h" declline="124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacecostmap__2d_1ae02b98da234ff50b2ef1e3fa6d53f33b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void costmap_2d::writeFootprintToParam</definition>
        <argsstring>(ros::NodeHandle &amp;nh, const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint)</argsstring>
        <name>writeFootprintToParam</name>
        <param>
          <type>ros::NodeHandle &amp;</type>
          <declname>nh</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint</declname>
        </param>
        <briefdescription>
<para>Write the current unpadded_footprint_ to the &quot;footprint&quot; parameter of the given NodeHandle so that dynamic_reconfigure will see the new value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/footprint.cpp" line="252" column="6" bodyfile="src/footprint.cpp" bodystart="252" bodyend="-1" declfile="include/costmap_2d/footprint.h" declline="179" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Provides a mapping for often used cost values </para>
    </detaileddescription>
    <location file="include/costmap_2d/array_parser.h" line="38" column="1"/>
  </compounddef>
</doxygen>
