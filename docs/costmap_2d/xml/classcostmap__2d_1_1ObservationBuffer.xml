<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcostmap__2d_1_1ObservationBuffer" kind="class" language="C++" prot="public">
    <compoundname>costmap_2d::ObservationBuffer</compoundname>
    <includes refid="observation__buffer_8h" local="no">observation_buffer.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1a10d0c3bc749c7a1710526616b0210cd3" prot="private" static="no" mutable="no">
        <type>const ros::Duration</type>
        <definition>const ros::Duration costmap_2d::ObservationBuffer::expected_update_rate_</definition>
        <argsstring></argsstring>
        <name>expected_update_rate_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="177" column="23" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1a92c26d155177c15f23501fef11153afa" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string costmap_2d::ObservationBuffer::global_frame_</definition>
        <argsstring></argsstring>
        <name>global_frame_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="179" column="15" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1a7c9909af13ffca0a992756d4704b05d6" prot="private" static="no" mutable="no">
        <type>ros::Time</type>
        <definition>ros::Time costmap_2d::ObservationBuffer::last_updated_</definition>
        <argsstring></argsstring>
        <name>last_updated_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="178" column="13" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1a85f23aec440e01fac3ac9f9bdaebbdcc" prot="private" static="no" mutable="no">
        <type>boost::recursive_mutex</type>
        <definition>boost::recursive_mutex costmap_2d::ObservationBuffer::lock_</definition>
        <argsstring></argsstring>
        <name>lock_</name>
        <briefdescription>
<para>A lock for accessing data in callbacks safely. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="184" column="26" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1a238db75220517e998952c2b411f5ebae" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double costmap_2d::ObservationBuffer::max_obstacle_height_</definition>
        <argsstring></argsstring>
        <name>max_obstacle_height_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="183" column="31" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1aa4ac1ea1cf1ac01fd1a0cb3f779e623c" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double costmap_2d::ObservationBuffer::min_obstacle_height_</definition>
        <argsstring></argsstring>
        <name>min_obstacle_height_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="183" column="10" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1a29bc32d920027d37eaeb49e0975ae337" prot="private" static="no" mutable="no">
        <type>const ros::Duration</type>
        <definition>const ros::Duration costmap_2d::ObservationBuffer::observation_keep_time_</definition>
        <argsstring></argsstring>
        <name>observation_keep_time_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="176" column="23" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1a9f2bf57b5de5b5dd70299dad223b0689" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/list" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::list</ref>&lt; <ref refid="classcostmap__2d_1_1Observation" kindref="compound">Observation</ref> &gt;</type>
        <definition>std::list&lt;Observation&gt; costmap_2d::ObservationBuffer::observation_list_</definition>
        <argsstring></argsstring>
        <name>observation_list_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="181" column="13" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1a688f4520b698c8ce3b766212e217c2a0" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double costmap_2d::ObservationBuffer::obstacle_range_</definition>
        <argsstring></argsstring>
        <name>obstacle_range_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="185" column="10" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1af47e0ad64246605f41dacdcc7fca4edf" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double costmap_2d::ObservationBuffer::raytrace_range_</definition>
        <argsstring></argsstring>
        <name>raytrace_range_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="185" column="26" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1aab699cc1c65c2bda7fe0e9e1a1f6a380" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string costmap_2d::ObservationBuffer::sensor_frame_</definition>
        <argsstring></argsstring>
        <name>sensor_frame_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="180" column="15" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1a73444bf190531d9180e474e9e608b32b" prot="private" static="no" mutable="no">
        <type>tf2_ros::Buffer &amp;</type>
        <definition>tf2_ros::Buffer&amp; costmap_2d::ObservationBuffer::tf2_buffer_</definition>
        <argsstring></argsstring>
        <name>tf2_buffer_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="175" column="19" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1a236a04bad7c2cb033ae307e7b509e430" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double costmap_2d::ObservationBuffer::tf_tolerance_</definition>
        <argsstring></argsstring>
        <name>tf_tolerance_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="186" column="10" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcostmap__2d_1_1ObservationBuffer_1a459fda9f6de13c20340ede0e85a5c26c" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string costmap_2d::ObservationBuffer::topic_name_</definition>
        <argsstring></argsstring>
        <name>topic_name_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="182" column="15" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcostmap__2d_1_1ObservationBuffer_1af1bdb755c1ed181b2108fc26826bc273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void costmap_2d::ObservationBuffer::bufferCloud</definition>
        <argsstring>(const sensor_msgs::PointCloud2 &amp;cloud)</argsstring>
        <name>bufferCloud</name>
        <param>
          <type>const sensor_msgs::PointCloud2 &amp;</type>
          <declname>cloud</declname>
        </param>
        <briefdescription>
<para>Transforms a PointCloud to the global frame and buffers it <bold>Note: The burden is on the user to make sure the transform is available... ie they should use a MessageNotifier</bold> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cloud</parametername>
</parameternamelist>
<parameterdescription>
<para>The cloud to be buffered </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="134" column="8" bodyfile="src/observation_buffer.cpp" bodystart="108" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classcostmap__2d_1_1ObservationBuffer_1aa89ff474cd6785349e3c0b2f49e2d738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void costmap_2d::ObservationBuffer::getObservations</definition>
        <argsstring>(std::vector&lt; Observation &gt; &amp;observations)</argsstring>
        <name>getObservations</name>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="classcostmap__2d_1_1Observation" kindref="compound">Observation</ref> &gt; &amp;</type>
          <declname>observations</declname>
        </param>
        <briefdescription>
<para>Pushes copies of all current observations onto the end of the vector passed in. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observations</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to be filled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="140" column="8" bodyfile="src/observation_buffer.cpp" bodystart="192" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classcostmap__2d_1_1ObservationBuffer_1a169930366d75cae5d78e7b069be4a042" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool costmap_2d::ObservationBuffer::isCurrent</definition>
        <argsstring>() const</argsstring>
        <name>isCurrent</name>
        <briefdescription>
<para>Check if the observation buffer is being update at its expected rate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if it is being updated at the expected rate, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="146" column="8" bodyfile="src/observation_buffer.cpp" bodystart="231" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classcostmap__2d_1_1ObservationBuffer_1af6e43c89ccb0db68cd1bad60108a8167" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void costmap_2d::ObservationBuffer::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <briefdescription>
<para>Lock the observation buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="151" column="15" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classcostmap__2d_1_1ObservationBuffer_1a6a6840d481c0f6fabf5f9b2788bbd205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>costmap_2d::ObservationBuffer::ObservationBuffer</definition>
        <argsstring>(std::string topic_name, double observation_keep_time, double expected_update_rate, double min_obstacle_height, double max_obstacle_height, double obstacle_range, double raytrace_range, tf2_ros::Buffer &amp;tf2_buffer, std::string global_frame, std::string sensor_frame, double tf_tolerance)</argsstring>
        <name>ObservationBuffer</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
          <declname>topic_name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>observation_keep_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>expected_update_rate</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_obstacle_height</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_obstacle_height</declname>
        </param>
        <param>
          <type>double</type>
          <declname>obstacle_range</declname>
        </param>
        <param>
          <type>double</type>
          <declname>raytrace_range</declname>
        </param>
        <param>
          <type>tf2_ros::Buffer &amp;</type>
          <declname>tf2_buffer</declname>
        </param>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
          <declname>global_frame</declname>
        </param>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
          <declname>sensor_frame</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tf_tolerance</declname>
        </param>
        <briefdescription>
<para>Constructs an observation buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>topic_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The topic of the observations, used as an identifier for error and warning messages </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observation_keep_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the persistence of observations in seconds, 0 means only keep the latest </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected_update_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>How often this buffer is expected to be updated, 0 means there is no limit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_obstacle_height</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum height of a hitpoint to be considered legal </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_obstacle_height</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum height of a hitpoint to be considered legal </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obstacle_range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to which the sensor should be trusted for inserting obstacles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>raytrace_range</parametername>
</parameternamelist>
<parameterdescription>
<para>The range to which the sensor should be trusted for raytracing to clear out space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tf2_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a tf2 Buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>global_frame</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame to transform PointClouds into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensor_frame</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame of the origin of the sensor, can be left blank to be read from the messages </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tf_tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of time to wait for a transform to be available when setting a new global frame </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="110" column="3" bodyfile="src/observation_buffer.cpp" bodystart="48" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classcostmap__2d_1_1ObservationBuffer_1aeb595ff9e1f56003644f4b0743020cd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void costmap_2d::ObservationBuffer::resetLastUpdated</definition>
        <argsstring>()</argsstring>
        <name>resetLastUpdated</name>
        <briefdescription>
<para>Reset last updated timestamp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="167" column="8" bodyfile="src/observation_buffer.cpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classcostmap__2d_1_1ObservationBuffer_1a078a1fab09eb0501fa9f205f818c4c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool costmap_2d::ObservationBuffer::setGlobalFrame</definition>
        <argsstring>(const std::string new_global_frame)</argsstring>
        <name>setGlobalFrame</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
          <declname>new_global_frame</declname>
        </param>
        <briefdescription>
<para>Sets the global frame of an observation buffer. This will transform all the currently cached observations to the new global frame. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_global_frame</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the new global frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation succeeds, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="127" column="8" bodyfile="src/observation_buffer.cpp" bodystart="63" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classcostmap__2d_1_1ObservationBuffer_1a5ccb558d025fd254ab9e1bf89f6d82d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void costmap_2d::ObservationBuffer::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <briefdescription>
<para>Lock the observation buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="159" column="15" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classcostmap__2d_1_1ObservationBuffer_1ad14ce56a9f57bddfecd87d0c2cc2201d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>costmap_2d::ObservationBuffer::~ObservationBuffer</definition>
        <argsstring>()</argsstring>
        <name>~ObservationBuffer</name>
        <briefdescription>
<para>Destructor... cleans up. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="118" column="3" bodyfile="src/observation_buffer.cpp" bodystart="59" bodyend="61"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classcostmap__2d_1_1ObservationBuffer_1a65b02e4c2e54d86b8e110fbabdab0659" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void costmap_2d::ObservationBuffer::purgeStaleObservations</definition>
        <argsstring>()</argsstring>
        <name>purgeStaleObservations</name>
        <briefdescription>
<para>Removes any stale observations from the buffer list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/costmap_2d/observation_buffer.h" line="173" column="8" bodyfile="src/observation_buffer.cpp" bodystart="205" bodyend="229"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Takes in point clouds from sensors, transforms them to the desired frame, and stores them. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>std::list&lt; costmap_2d::Observation &gt;</label>
        <link refid="cpp/container/list" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="1">
        <label>costmap_2d::ObservationBuffer</label>
        <link refid="classcostmap__2d_1_1ObservationBuffer"/>
        <childnode refid="2" relation="usage">
          <edgelabel>observation_list_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>topic_name_</edgelabel>
          <edgelabel>global_frame_</edgelabel>
          <edgelabel>sensor_frame_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::string</label>
        <link refid="cpp/string/basic_string" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="include/costmap_2d/observation_buffer.h" line="94" column="1" bodyfile="include/costmap_2d/observation_buffer.h" bodystart="93" bodyend="187"/>
    <listofallmembers>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1af1bdb755c1ed181b2108fc26826bc273" prot="public" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>bufferCloud</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a10d0c3bc749c7a1710526616b0210cd3" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>expected_update_rate_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1aa89ff474cd6785349e3c0b2f49e2d738" prot="public" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>getObservations</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a92c26d155177c15f23501fef11153afa" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>global_frame_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a169930366d75cae5d78e7b069be4a042" prot="public" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>isCurrent</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a7c9909af13ffca0a992756d4704b05d6" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>last_updated_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1af6e43c89ccb0db68cd1bad60108a8167" prot="public" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>lock</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a85f23aec440e01fac3ac9f9bdaebbdcc" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>lock_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a238db75220517e998952c2b411f5ebae" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>max_obstacle_height_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1aa4ac1ea1cf1ac01fd1a0cb3f779e623c" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>min_obstacle_height_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a29bc32d920027d37eaeb49e0975ae337" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>observation_keep_time_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a9f2bf57b5de5b5dd70299dad223b0689" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>observation_list_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a6a6840d481c0f6fabf5f9b2788bbd205" prot="public" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>ObservationBuffer</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a688f4520b698c8ce3b766212e217c2a0" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>obstacle_range_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a65b02e4c2e54d86b8e110fbabdab0659" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>purgeStaleObservations</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1af47e0ad64246605f41dacdcc7fca4edf" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>raytrace_range_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1aeb595ff9e1f56003644f4b0743020cd3" prot="public" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>resetLastUpdated</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1aab699cc1c65c2bda7fe0e9e1a1f6a380" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>sensor_frame_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a078a1fab09eb0501fa9f205f818c4c73" prot="public" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>setGlobalFrame</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a73444bf190531d9180e474e9e608b32b" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>tf2_buffer_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a236a04bad7c2cb033ae307e7b509e430" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>tf_tolerance_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a459fda9f6de13c20340ede0e85a5c26c" prot="private" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>topic_name_</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1a5ccb558d025fd254ab9e1bf89f6d82d8" prot="public" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>unlock</name></member>
      <member refid="classcostmap__2d_1_1ObservationBuffer_1ad14ce56a9f57bddfecd87d0c2cc2201d" prot="public" virt="non-virtual"><scope>costmap_2d::ObservationBuffer</scope><name>~ObservationBuffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
