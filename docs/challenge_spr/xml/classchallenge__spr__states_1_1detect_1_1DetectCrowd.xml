<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classchallenge__spr__states_1_1detect_1_1DetectCrowd" kind="class" language="Python" prot="public">
    <compoundname>challenge_spr_states::detect::DetectCrowd</compoundname>
    <basecompoundref prot="public" virt="non-virtual">State</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1a9f5b7fcfc9740b57b537ec20b284c4a1" prot="public" static="no" mutable="no">
        <type></type>
        <definition>challenge_spr_states.detect.DetectCrowd::people_received</definition>
        <argsstring></argsstring>
        <name>people_received</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_spr_states/detect.py" line="26" column="1" bodyfile="src/challenge_spr_states/detect.py" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1a860c6c46a5e401169dd978ecb9e2d273" prot="public" static="no" mutable="no">
        <type></type>
        <definition>challenge_spr_states.detect.DetectCrowd::robot</definition>
        <argsstring></argsstring>
        <name>robot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_spr_states/detect.py" line="24" column="1" bodyfile="src/challenge_spr_states/detect.py" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1aaee0f4de56fe135e86b911063731fc98" prot="public" static="no" mutable="no">
        <type></type>
        <definition>challenge_spr_states.detect.DetectCrowd::triggered</definition>
        <argsstring></argsstring>
        <name>triggered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_spr_states/detect.py" line="27" column="1" bodyfile="src/challenge_spr_states/detect.py" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1ac7ab519d8fe80b6f19e2254bb7898a7d" prot="private" static="no" mutable="no">
        <type></type>
        <definition>challenge_spr_states.detect.DetectCrowd::_people_sub</definition>
        <argsstring></argsstring>
        <name>_people_sub</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_spr_states/detect.py" line="25" column="1" bodyfile="src/challenge_spr_states/detect.py" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1a6cb5cffab455c2faf3856f34e0602aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def challenge_spr_states.detect.DetectCrowd.__init__</definition>
        <argsstring>(self, robot)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1a860c6c46a5e401169dd978ecb9e2d273" kindref="member">robot</ref></type>
          <defname>robot</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_spr_states/detect.py" line="22" column="1" bodyfile="src/challenge_spr_states/detect.py" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1a0308ceff89bccdddf16c895678e56296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def challenge_spr_states.detect.DetectCrowd.describe_crowd</definition>
        <argsstring>(self, detections)</argsstring>
        <name>describe_crowd</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>detections</type>
          <defname>detections</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Conversion from individual face properties to crowd properties

:param detections: list of face properties
:type detections: list[image_recognition_msgs/FaceProperties]
:return: crowd properties
:rtype: dict
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_spr_states/detect.py" line="85" column="1" bodyfile="src/challenge_spr_states/detect.py" bodystart="85" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1ab1afbb7098b8ecc2a56f62db4d45880c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def challenge_spr_states.detect.DetectCrowd.execute</definition>
        <argsstring>(self, userdata=None)</argsstring>
        <name>execute</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>userdata</type>
          <defname>userdata</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_spr_states/detect.py" line="35" column="1" bodyfile="src/challenge_spr_states/detect.py" bodystart="35" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1a206949e99578006a6ae9d9357289b813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def challenge_spr_states.detect.DetectCrowd.people_cb</definition>
        <argsstring>(self, persons)</argsstring>
        <name>people_cb</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>persons</type>
          <defname>persons</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_spr_states/detect.py" line="29" column="1" bodyfile="src/challenge_spr_states/detect.py" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1ac83f342da448454eecf97e15545ad6a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def challenge_spr_states.detect.DetectCrowd.recognize</definition>
        <argsstring>(self, tries=3)</argsstring>
        <name>recognize</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>tries</type>
          <defname>tries</defname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Recognize people. Takes multiple images and takes the try with the most faces

:param tries: number of tries
:type tries: int
:return: list of face properties
:rtype: list[image_recognition_msgs/FaceProperties]
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_spr_states/detect.py" line="46" column="1" bodyfile="src/challenge_spr_states/detect.py" bodystart="46" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>Detect a crowd and describe it based on individual detections
</verbatim> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>challenge_spr_states.detect.DetectCrowd</label>
        <link refid="classchallenge__spr__states_1_1detect_1_1DetectCrowd"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>State</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>challenge_spr_states.detect.DetectCrowd</label>
        <link refid="classchallenge__spr__states_1_1detect_1_1DetectCrowd"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>State</label>
      </node>
    </collaborationgraph>
    <location file="src/challenge_spr_states/detect.py" line="18" column="1" bodyfile="src/challenge_spr_states/detect.py" bodystart="18" bodyend="193"/>
    <listofallmembers>
      <member refid="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1a6cb5cffab455c2faf3856f34e0602aed" prot="public" virt="non-virtual"><scope>challenge_spr_states::detect::DetectCrowd</scope><name>__init__</name></member>
      <member refid="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1ac7ab519d8fe80b6f19e2254bb7898a7d" prot="private" virt="non-virtual"><scope>challenge_spr_states::detect::DetectCrowd</scope><name>_people_sub</name></member>
      <member refid="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1a0308ceff89bccdddf16c895678e56296" prot="public" virt="non-virtual"><scope>challenge_spr_states::detect::DetectCrowd</scope><name>describe_crowd</name></member>
      <member refid="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1ab1afbb7098b8ecc2a56f62db4d45880c" prot="public" virt="non-virtual"><scope>challenge_spr_states::detect::DetectCrowd</scope><name>execute</name></member>
      <member refid="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1a206949e99578006a6ae9d9357289b813" prot="public" virt="non-virtual"><scope>challenge_spr_states::detect::DetectCrowd</scope><name>people_cb</name></member>
      <member refid="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1a9f5b7fcfc9740b57b537ec20b284c4a1" prot="public" virt="non-virtual"><scope>challenge_spr_states::detect::DetectCrowd</scope><name>people_received</name></member>
      <member refid="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1ac83f342da448454eecf97e15545ad6a9" prot="public" virt="non-virtual"><scope>challenge_spr_states::detect::DetectCrowd</scope><name>recognize</name></member>
      <member refid="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1a860c6c46a5e401169dd978ecb9e2d273" prot="public" virt="non-virtual"><scope>challenge_spr_states::detect::DetectCrowd</scope><name>robot</name></member>
      <member refid="classchallenge__spr__states_1_1detect_1_1DetectCrowd_1aaee0f4de56fe135e86b911063731fc98" prot="public" virt="non-virtual"><scope>challenge_spr_states::detect::DetectCrowd</scope><name>triggered</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
