<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrgbd_1_1ImageBuffer" kind="class" language="C++" prot="public">
    <compoundname>rgbd::ImageBuffer</compoundname>
    <includes refid="image__buffer_8h" local="no">image_buffer.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrgbd_1_1ImageBuffer_1a6f9617d602988db55378105541a2f349" prot="private" static="no" mutable="no">
        <type>ros::CallbackQueue</type>
        <definition>ros::CallbackQueue rgbd::ImageBuffer::cb_queue_</definition>
        <argsstring></argsstring>
        <name>cb_queue_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="92" column="24" bodyfile="include/rgbd/image_buffer/image_buffer.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1ImageBuffer_1a57d5343909f01cbbb86f6eeea444c744" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/forward_list" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::forward_list</ref>&lt; <ref refid="namespacergbd_1a11f6d8b65b491dba632371e8355a99df" kindref="member" external="/home/docker/ros/noetic/system/build/docs/rgbd/tags">rgbd::ImageConstPtr</ref> &gt;</type>
        <definition>std::forward_list&lt;rgbd::ImageConstPtr&gt; rgbd::ImageBuffer::image_buffer_</definition>
        <argsstring></argsstring>
        <name>image_buffer_</name>
        <briefdescription>
<para>Newer images should be pushed on the front. This will result in the front being the most recent and the back being the oldest. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="90" column="23" bodyfile="include/rgbd/image_buffer/image_buffer.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1ImageBuffer_1a9c776f137e740138be93cdf4380e9bf2" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/utility/pair" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::pair</ref>&lt; <ref refid="namespacergbd_1a11f6d8b65b491dba632371e8355a99df" kindref="member" external="/home/docker/ros/noetic/system/build/docs/rgbd/tags">rgbd::ImageConstPtr</ref>, <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &gt;</type>
        <definition>std::pair&lt;rgbd::ImageConstPtr, geo::Pose3D&gt; rgbd::ImageBuffer::recent_image_</definition>
        <argsstring></argsstring>
        <name>recent_image_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="94" column="15" bodyfile="include/rgbd/image_buffer/image_buffer.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1ImageBuffer_1a1e1a1840af63ff0533c95026f0b65900" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/thread/mutex" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::mutex</ref></type>
        <definition>std::mutex rgbd::ImageBuffer::recent_image_mutex_</definition>
        <argsstring></argsstring>
        <name>recent_image_mutex_</name>
        <briefdescription>
<para>For protecting <ref refid="classrgbd_1_1ImageBuffer_1a9c776f137e740138be93cdf4380e9bf2" kindref="member">ImageBuffer::recent_image_</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="98" column="16" bodyfile="include/rgbd/image_buffer/image_buffer.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1ImageBuffer_1a9cbf41f01986ec9397714cebb64f454f" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/memory/unique_ptr" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::unique_ptr</ref>&lt; <ref refid="classrgbd_1_1Client" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/rgbd/tags">rgbd::Client</ref> &gt;</type>
        <definition>std::unique_ptr&lt;rgbd::Client&gt; rgbd::ImageBuffer::rgbd_client_</definition>
        <argsstring></argsstring>
        <name>rgbd_client_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="82" column="21" bodyfile="include/rgbd/image_buffer/image_buffer.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1ImageBuffer_1a48a9aafee372e0d80269420e415eaeb4" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string rgbd::ImageBuffer::root_frame_</definition>
        <argsstring></argsstring>
        <name>root_frame_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="80" column="17" bodyfile="include/rgbd/image_buffer/image_buffer.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1ImageBuffer_1aa585409de6fb2e9c3ace6dc5c93c1818" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool rgbd::ImageBuffer::shutdown_</definition>
        <argsstring></argsstring>
        <name>shutdown_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="100" column="10" bodyfile="include/rgbd/image_buffer/image_buffer.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1ImageBuffer_1a7c97af830778f38a09c1c594fb2b81a4" prot="private" static="no" mutable="no">
        <type>tf2_ros::Buffer</type>
        <definition>tf2_ros::Buffer rgbd::ImageBuffer::tf_buffer_</definition>
        <argsstring></argsstring>
        <name>tf_buffer_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="84" column="21" bodyfile="include/rgbd/image_buffer/image_buffer.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1ImageBuffer_1abde126b740beed96f98c4c82dc3948fb" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/memory/unique_ptr" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::unique_ptr</ref>&lt; tf2_ros::TransformListener &gt;</type>
        <definition>std::unique_ptr&lt;tf2_ros::TransformListener&gt; rgbd::ImageBuffer::tf_listener_</definition>
        <argsstring></argsstring>
        <name>tf_listener_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="85" column="21" bodyfile="include/rgbd/image_buffer/image_buffer.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrgbd_1_1ImageBuffer_1a99726f483025ce4ccf493304c2c4cbe3" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/memory/unique_ptr" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::unique_ptr</ref>&lt; <ref refid="cpp/thread/thread" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::thread</ref> &gt;</type>
        <definition>std::unique_ptr&lt;std::thread&gt; rgbd::ImageBuffer::worker_thread_ptr_</definition>
        <argsstring></argsstring>
        <name>worker_thread_ptr_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="99" column="21" bodyfile="include/rgbd/image_buffer/image_buffer.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrgbd_1_1ImageBuffer_1ac9a1ce005603ab3aa1844d4efcd2117b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rgbd::ImageBuffer::ImageBuffer</definition>
        <argsstring>()</argsstring>
        <name>ImageBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="36" column="5" bodyfile="src/image_buffer.cpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1ImageBuffer_1a44a69eea8b9b7fcc2bba5d9681457958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rgbd::ImageBuffer::initialize</definition>
        <argsstring>(const std::string &amp;topic, const std::string &amp;root_frame=&quot;map&quot;, const float worker_thread_frequency=20)</argsstring>
        <name>initialize</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>topic</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>root_frame</declname>
          <defval>&quot;map&quot;</defval>
        </param>
        <param>
          <type>const float</type>
          <declname>worker_thread_frequency</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Configure the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>topic</parametername>
</parameternamelist>
<parameterdescription>
<para>ros topic on which the rgbd images are published </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root_frame</parametername>
</parameternamelist>
<parameterdescription>
<para>root frame to calculate sensor pose relative to (default: map) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>worker_thread_frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>frequency at which the worker thread updates the most recent image (default: 20) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="46" column="10" bodyfile="src/image_buffer.cpp" bodystart="35" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1ImageBuffer_1a3dcce8079cd2748e448e6c91a3df4c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rgbd::ImageBuffer::nextImage</definition>
        <argsstring>(rgbd::ImageConstPtr &amp;image, geo::Pose3D &amp;sensor_pose)</argsstring>
        <name>nextImage</name>
        <param>
          <type><ref refid="namespacergbd_1a11f6d8b65b491dba632371e8355a99df" kindref="member" external="/home/docker/ros/noetic/system/build/docs/rgbd/tags">rgbd::ImageConstPtr</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &amp;</type>
          <declname>sensor_pose</declname>
        </param>
        <briefdescription>
<para>Returns the most recent combination of image and transform, provided it is different from the previous time the function was called. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">image</parametername>
</parameternamelist>
<parameterdescription>
<para>rgbd image to write the next image to. Iff a next image is found </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sensor_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>will be filled with the sensor pose corresponding to the next image. Iff a next image is found </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether or not a novel image is available </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="54" column="10" bodyfile="src/image_buffer.cpp" bodystart="138" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1ImageBuffer_1af3858657267ea27205538d9773fb3452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rgbd::ImageBuffer::waitForRecentImage</definition>
        <argsstring>(rgbd::ImageConstPtr &amp;image, geo::Pose3D &amp;sensor_pose, double timeout_sec, double check_rate)</argsstring>
        <name>waitForRecentImage</name>
        <param>
          <type><ref refid="namespacergbd_1a11f6d8b65b491dba632371e8355a99df" kindref="member" external="/home/docker/ros/noetic/system/build/docs/rgbd/tags">rgbd::ImageConstPtr</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &amp;</type>
          <declname>sensor_pose</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout_sec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>check_rate</declname>
        </param>
        <briefdescription>
<para>Blocks until a new image with transform is found. Returns false if no image or TF could be found within &apos;timeout_sec&apos; seconds. But will always give it one try, both to get the image and to get TF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">image</parametername>
</parameternamelist>
<parameterdescription>
<para>rgbd image to write the next image to. Iff a next image is found </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sensor_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>will be filled with the sensor pose corresponding to the next image. Iff a next image is found </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout_sec</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum duration to block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">check_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Check for a new image on this frequency. In case =0, set to 10 Hz </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether or not a next image was available within the timeout duration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="65" column="10" bodyfile="src/image_buffer.cpp" bodystart="52" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1ImageBuffer_1a73fff6ba9aac1138261c74f2a4efd135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rgbd::ImageBuffer::waitForRecentImage</definition>
        <argsstring>(rgbd::ImageConstPtr &amp;image, geo::Pose3D &amp;sensor_pose, double timeout_sec, uint timeout_tries=25u)</argsstring>
        <name>waitForRecentImage</name>
        <param>
          <type><ref refid="namespacergbd_1a11f6d8b65b491dba632371e8355a99df" kindref="member" external="/home/docker/ros/noetic/system/build/docs/rgbd/tags">rgbd::ImageConstPtr</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &amp;</type>
          <declname>sensor_pose</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timeout_sec</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>timeout_tries</declname>
          <defval>25u</defval>
        </param>
        <briefdescription>
<para>Blocks until a new image with transform is found. Returns false if no image or TF could be found within &apos;timeout_sec&apos; seconds. But will always give it one try, both to get the image and to get TF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">image</parametername>
</parameternamelist>
<parameterdescription>
<para>rgbd image to write the next image to. Iff a next image is found </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sensor_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>will be filled with the sensor pose corresponding to the next image. Iff a next image is found </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout_sec</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum duration to block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>[in</parametername>
<parametername>opt]</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout_tries number of tries to check for a new image. In case =0, set to 25 tries </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether or not a next image was available within the timeout duration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="76" column="10" bodyfile="src/image_buffer.cpp" bodystart="124" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1ImageBuffer_1a0ccba23c66bacca893bbd048e1ba0f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rgbd::ImageBuffer::~ImageBuffer</definition>
        <argsstring>()</argsstring>
        <name>~ImageBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="38" column="5" bodyfile="src/image_buffer.cpp" bodystart="26" bodyend="31"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrgbd_1_1ImageBuffer_1adaa29c0bf5f276d42cf636a1b30c5331" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rgbd::ImageBuffer::getMostRecentImageTF</definition>
        <argsstring>()</argsstring>
        <name>getMostRecentImageTF</name>
        <briefdescription>
<para>Iterates over the buffer and tries to get TF for the most recent image. Deletes image and all older images when succesful or when image is too old from the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Indicates whether the most recent image has been updated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="107" column="10" bodyfile="src/image_buffer.cpp" bodystart="157" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classrgbd_1_1ImageBuffer_1ac5c13e98fbeb51095d923d3007a589f8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rgbd::ImageBuffer::workerThreadFunc</definition>
        <argsstring>(const float frequency=20)</argsstring>
        <name>workerThreadFunc</name>
        <param>
          <type>const float</type>
          <declname>frequency</declname>
          <defval>20</defval>
        </param>
        <briefdescription>
<para>Calls <ref refid="classrgbd_1_1ImageBuffer_1adaa29c0bf5f276d42cf636a1b30c5331" kindref="member">ImageBuffer::getMostRecentImageTF</ref> on the specified frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency for checking new images. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rgbd/image_buffer/image_buffer.h" line="113" column="10" bodyfile="src/image_buffer.cpp" bodystart="250" bodyend="259"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classrgbd_1_1ImageBuffer" kindref="compound">ImageBuffer</ref> class provides a buffer to synchronise rgbd images with sensor positions. Images are stored until they are removed from the buffer or until a certain amount of time has passed. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>std::unique_ptr&lt; rgbd::Client &gt;</label>
        <link refid="cpp/memory/unique_ptr" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="5">
        <label>std::unique_ptr&lt; tf2_ros::TransformListener &gt;</label>
        <link refid="cpp/memory/unique_ptr" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="1">
        <label>rgbd::ImageBuffer</label>
        <link refid="classrgbd_1_1ImageBuffer"/>
        <childnode refid="2" relation="usage">
          <edgelabel>recent_image_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>recent_image_mutex_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>rgbd_client_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>tf_listener_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>root_frame_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>image_buffer_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>worker_thread_ptr_</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::forward_list&lt; std::shared_ptr &gt;</label>
        <link refid="cpp/container/forward_list" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="2">
        <label>std::pair&lt; std::shared_ptr, geo::Transform3T &gt;</label>
        <link refid="cpp/utility/pair" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="8">
        <label>std::unique_ptr&lt; std::thread &gt;</label>
        <link refid="cpp/memory/unique_ptr" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="3">
        <label>std::mutex</label>
        <link refid="cpp/thread/mutex" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="6">
        <label>std::string</label>
        <link refid="cpp/string/basic_string" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="include/rgbd/image_buffer/image_buffer.h" line="32" column="1" bodyfile="include/rgbd/image_buffer/image_buffer.h" bodystart="31" bodyend="115"/>
    <listofallmembers>
      <member refid="classrgbd_1_1ImageBuffer_1a6f9617d602988db55378105541a2f349" prot="private" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>cb_queue_</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1adaa29c0bf5f276d42cf636a1b30c5331" prot="private" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>getMostRecentImageTF</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1a57d5343909f01cbbb86f6eeea444c744" prot="private" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>image_buffer_</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1ac9a1ce005603ab3aa1844d4efcd2117b" prot="public" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>ImageBuffer</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1a44a69eea8b9b7fcc2bba5d9681457958" prot="public" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>initialize</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1a3dcce8079cd2748e448e6c91a3df4c7e" prot="public" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>nextImage</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1a9c776f137e740138be93cdf4380e9bf2" prot="private" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>recent_image_</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1a1e1a1840af63ff0533c95026f0b65900" prot="private" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>recent_image_mutex_</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1a9cbf41f01986ec9397714cebb64f454f" prot="private" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>rgbd_client_</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1a48a9aafee372e0d80269420e415eaeb4" prot="private" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>root_frame_</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1aa585409de6fb2e9c3ace6dc5c93c1818" prot="private" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>shutdown_</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1a7c97af830778f38a09c1c594fb2b81a4" prot="private" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>tf_buffer_</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1abde126b740beed96f98c4c82dc3948fb" prot="private" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>tf_listener_</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1af3858657267ea27205538d9773fb3452" prot="public" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>waitForRecentImage</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1a73fff6ba9aac1138261c74f2a4efd135" prot="public" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>waitForRecentImage</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1a99726f483025ce4ccf493304c2c4cbe3" prot="private" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>worker_thread_ptr_</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1ac5c13e98fbeb51095d923d3007a589f8" prot="private" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>workerThreadFunc</name></member>
      <member refid="classrgbd_1_1ImageBuffer_1a0ccba23c66bacca893bbd048e1ba0f97" prot="public" virt="non-virtual"><scope>rgbd::ImageBuffer</scope><name>~ImageBuffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
