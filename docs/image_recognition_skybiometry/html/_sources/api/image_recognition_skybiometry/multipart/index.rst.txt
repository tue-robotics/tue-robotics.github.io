image_recognition_skybiometry.multipart
=======================================

.. py:module:: image_recognition_skybiometry.multipart

.. autoapi-nested-parse::

   Classes for using multipart form data from Python, which does not (at the
   time of writing) support this directly.

   To use this, make an instance of Multipart and add parts to it via the factory
   methods field and file.  When you are done, get the content via the get method.

   @author: Stacy Prowell (http://stacyprowell.com)



Classes
-------

.. autoapisummary::

   image_recognition_skybiometry.multipart.Part
   image_recognition_skybiometry.multipart.Multipart


Module Contents
---------------

.. py:class:: Part(name, filename, body, headers)

   Bases: :py:obj:`object`


   Class holding a single part of the form.  You should never need to use
   this class directly; instead, use the factory methods in Multipart:
   field and file.

   Make a new part.  The part will have the given headers added initially.

   @param name: The part name.
   @type name: str
   @param filename: If this is a file, the name of the file.  Otherwise
                   None.
   @type filename: str
   @param body: The body of the part.
   @type body: str
   @param headers: Additional headers, or overrides, for this part.
                   You can override Content-Type here.
   @type headers: dict


   .. py:attribute:: BOUNDARY
      :value: '----------AaB03x'



   .. py:attribute:: CRLF
      :value: Multiline-String

      .. raw:: html

         <details><summary>Show Value</summary>

      .. code-block:: python

         """
         """

      .. raw:: html

         </details>




   .. py:attribute:: CONTENT_TYPE
      :value: 'Content-Type'



   .. py:attribute:: CONTENT_DISPOSITION
      :value: 'Content-Disposition'



   .. py:attribute:: DEFAULT_CONTENT_TYPE
      :value: 'application/octet-stream'



   .. py:attribute:: _headers


   .. py:attribute:: _name


   .. py:attribute:: _filename


   .. py:attribute:: _body


   .. py:method:: get()

      Convert the part into a list of lines for output.  This includes
      the boundary lines, part header lines, and the part itself.  A
      blank line is included between the header and the body.

      @return: Lines of this part.
      @rtype: list



.. py:class:: Multipart

   Bases: :py:obj:`object`


   Encapsulate multipart form data.  To use this, make an instance and then
   add parts to it via the two methods (field and file).  When done, you can
   get the result via the get method.

   See http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2 for
   details on multipart/form-data.

   Watch http://bugs.python.org/issue3244 to see if this is fixed in the
   Python libraries.

   @return: content type, body
   @rtype: tuple


   .. py:attribute:: parts
      :value: []



   .. py:method:: field(name, value, headers=None)

      Create and append a field part.  This kind of part has a field name
      and value.

      @param name: The field name.
      @type name: str
      @param value: The field value.
      @type value: str
      @param headers: Headers to set in addition to disposition.
      @type headers: dict



   .. py:method:: file(name, filename, value, headers=None)

      Create and append a file part.  THis kind of part has a field name,
      a filename, and a value.

      @param name: The field name.
      @type name: str
      @param filename: The file name
      @type filename: str
      @param value: The field value.
      @type value: str
      @param headers: Headers to set in addition to disposition.
      @type headers: dict



   .. py:method:: get()

      Get the multipart form data.  This returns the content type, which
      specifies the boundary marker, and also returns the body containing
      all parts and bondary markers.

      @return: content type, body
      @rtype: tuple



