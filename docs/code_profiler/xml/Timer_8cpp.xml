<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="Timer_8cpp" kind="file" language="C++">
    <compoundname>Timer.cpp</compoundname>
    <includes refid="Timer_8h" local="yes">profiling/Timer.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="6">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>Timer.cpp</label>
        <link refid="Timer_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>iostream</label>
        <link refid="cpp/header/iostream" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="3">
        <label>sys/time.h</label>
      </node>
      <node id="5">
        <label>string</label>
        <link refid="cpp/header/string" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="2">
        <label>profiling/Timer.h</label>
        <link refid="Timer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Timer.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>High<sp/>Resolution<sp/>Timer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>timer<sp/>is<sp/>able<sp/>to<sp/>measure<sp/>the<sp/>elapsed<sp/>time<sp/>with<sp/>1<sp/>micro-second<sp/>accuracy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>both<sp/>Windows,<sp/>Linux<sp/>and<sp/>Unix<sp/>system<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>AUTHOR:<sp/>Song<sp/>Ho<sp/>Ahn<sp/>(song.ahn@gmail.com)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CREATED:<sp/>2003-01-13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UPDATED:<sp/>2006-01-13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2003<sp/>Song<sp/>Ho<sp/>Ahn</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Timer_8h" kindref="compound">profiling/Timer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">//<sp/>constructor</highlight></codeline>
<codeline lineno="21" refid="classTimer_1a5f16e8da27d2a5a5242dead46de05d97" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><ref refid="classTimer_1a5f16e8da27d2a5a5242dead46de05d97" kindref="member">Timer::Timer</ref>()</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>QueryPerformanceFrequency(&amp;frequency);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>startCount.QuadPart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>endCount.QuadPart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTimer_1a97f125defee19bc92f6dd12caca6380a" kindref="member">start_count_</ref>.tv_sec<sp/>=<sp/><ref refid="classTimer_1a97f125defee19bc92f6dd12caca6380a" kindref="member">start_count_</ref>.tv_usec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTimer_1acacacaa0ed88bffdacf0d46ee1e20b7f" kindref="member">end_count_</ref>.tv_sec<sp/>=<sp/><ref refid="classTimer_1acacacaa0ed88bffdacf0d46ee1e20b7f" kindref="member">end_count_</ref>.tv_usec<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTimer_1ab26cb8d29a882af7df3924a666fcd00e" kindref="member">stopped</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>distructor</highlight></codeline>
<codeline lineno="40" refid="classTimer_1a14fa469c4c295c5fa6e66a4ad1092146" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><ref refid="classTimer_1a14fa469c4c295c5fa6e66a4ad1092146" kindref="member">Timer::~Timer</ref>()</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">//<sp/>start<sp/>timer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>startCount<sp/>will<sp/>be<sp/>set<sp/>at<sp/>this<sp/>point.</highlight></codeline>
<codeline lineno="50" refid="classTimer_1a3a8b5272198d029779dc9302a54305a8" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTimer_1a3a8b5272198d029779dc9302a54305a8" kindref="member">Timer::start</ref>()</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTimer_1ab26cb8d29a882af7df3924a666fcd00e" kindref="member">stopped</ref><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>stop<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>QueryPerformanceCounter(&amp;startCount);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>gettimeofday(&amp;<ref refid="classTimer_1a97f125defee19bc92f6dd12caca6380a" kindref="member">start_count_</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="comment">//<sp/>stop<sp/>the<sp/>timer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>endCount<sp/>will<sp/>be<sp/>set<sp/>at<sp/>this<sp/>point.</highlight></codeline>
<codeline lineno="66" refid="classTimer_1a63f0eb44b27402196590a03781515dba" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTimer_1a63f0eb44b27402196590a03781515dba" kindref="member">Timer::stop</ref>()</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTimer_1ab26cb8d29a882af7df3924a666fcd00e" kindref="member">stopped</ref><sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>set<sp/>timer<sp/>stopped<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>QueryPerformanceCounter(&amp;endCount);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>gettimeofday(&amp;<ref refid="classTimer_1acacacaa0ed88bffdacf0d46ee1e20b7f" kindref="member">end_count_</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">//<sp/>compute<sp/>elapsed<sp/>time<sp/>in<sp/>micro-second<sp/>resolution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>other<sp/>getElapsedTime<sp/>will<sp/>call<sp/>this<sp/>first,<sp/>then<sp/>convert<sp/>to<sp/>correspond<sp/>resolution.</highlight></codeline>
<codeline lineno="83" refid="classTimer_1a6e55c9d026e4c697ddcb40b347cd8f48" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classTimer_1a6e55c9d026e4c697ddcb40b347cd8f48" kindref="member">Timer::getElapsedTimeInMicroSec</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="84"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="classTimer_1ab26cb8d29a882af7df3924a666fcd00e" kindref="member">stopped</ref>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QueryPerformanceCounter(&amp;endCount);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>startTimeInMicroSec<sp/>=<sp/>startCount.QuadPart<sp/>*<sp/>(1000000.0<sp/>/<sp/>frequency.QuadPart);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>endTimeInMicroSec<sp/>=<sp/>endCount.QuadPart<sp/>*<sp/>(1000000.0<sp/>/<sp/>frequency.QuadPart);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>timeval<sp/>end_count;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classTimer_1ab26cb8d29a882af7df3924a666fcd00e" kindref="member">stopped</ref>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_count<sp/>=<sp/><ref refid="classTimer_1acacacaa0ed88bffdacf0d46ee1e20b7f" kindref="member">end_count_</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gettimeofday(&amp;end_count,<sp/>NULL);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>startTimeInMicroSec<sp/>=<sp/>(<ref refid="classTimer_1a97f125defee19bc92f6dd12caca6380a" kindref="member">start_count_</ref>.tv_sec<sp/>*<sp/>1000000.0)<sp/>+<sp/><ref refid="classTimer_1a97f125defee19bc92f6dd12caca6380a" kindref="member">start_count_</ref>.tv_usec;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>endTimeInMicroSec<sp/>=<sp/>(end_count.tv_sec<sp/>*<sp/>1000000.0)<sp/>+<sp/>end_count.tv_usec;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>endTimeInMicroSec<sp/>-<sp/>startTimeInMicroSec;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="comment">//<sp/>divide<sp/>elapsedTimeInMicroSec<sp/>by<sp/>1000</highlight></codeline>
<codeline lineno="111" refid="classTimer_1ab4abf0aa5e3b0fafba2b6765cffdfe16" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classTimer_1ab4abf0aa5e3b0fafba2b6765cffdfe16" kindref="member">Timer::getElapsedTimeInMilliSec</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="112"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classTimer_1a6e55c9d026e4c697ddcb40b347cd8f48" kindref="member">getElapsedTimeInMicroSec</ref>()<sp/>*<sp/>0.001;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="comment">//<sp/>divide<sp/>elapsedTimeInMicroSec<sp/>by<sp/>1000000</highlight></codeline>
<codeline lineno="121" refid="classTimer_1a978ca2fe7f90342e724dc7dca153e14a" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classTimer_1a978ca2fe7f90342e724dc7dca153e14a" kindref="member">Timer::getElapsedTimeInSec</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="122"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classTimer_1a6e55c9d026e4c697ddcb40b347cd8f48" kindref="member">getElapsedTimeInMicroSec</ref>()<sp/>*<sp/>0.000001;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">//<sp/>same<sp/>as<sp/>getElapsedTimeInSec()</highlight></codeline>
<codeline lineno="131" refid="classTimer_1acefb80d948ed191aee4e1a9fb1cddc1a" refkind="member"><highlight class="comment"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classTimer_1acefb80d948ed191aee4e1a9fb1cddc1a" kindref="member">Timer::getElapsedTime</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="132"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classTimer_1a978ca2fe7f90342e724dc7dca153e14a" kindref="member">getElapsedTimeInSec</ref>();</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="classTimer_1aa3c79f6d73aec93f155dbebb8a92959f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTimer_1aa3c79f6d73aec93f155dbebb8a92959f" kindref="member">Timer::printLastElapsedTime</ref>(<ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>m)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/cout" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(sec):<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classTimer_1a978ca2fe7f90342e724dc7dca153e14a" kindref="member">getElapsedTimeInSec</ref>()<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/endl" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::endl</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classTimer_1ac5f82f8a027945f569f583d5d1765366" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTimer_1ac5f82f8a027945f569f583d5d1765366" kindref="member">Timer::printLastElapsedTimeMSec</ref>(<ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref><sp/>m)</highlight></codeline>
<codeline lineno="143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/io/cout" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::cout</ref><sp/>&lt;&lt;<sp/>m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(msec):<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classTimer_1ab4abf0aa5e3b0fafba2b6765cffdfe16" kindref="member">getElapsedTimeInMilliSec</ref>()<sp/>&lt;&lt;<sp/><ref refid="cpp/io/manip/endl" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::endl</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/profiling/Timer.cpp"/>
  </compounddef>
</doxygen>
