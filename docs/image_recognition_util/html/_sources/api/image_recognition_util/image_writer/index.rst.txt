image_recognition_util.image_writer
===================================

.. py:module:: image_recognition_util.image_writer


Functions
---------

.. autoapisummary::

   image_recognition_util.image_writer.mkdir_p
   image_recognition_util.image_writer.create_estimation_dir
   image_recognition_util.image_writer.color_map
   image_recognition_util.image_writer.write_estimation
   image_recognition_util.image_writer.write_estimations
   image_recognition_util.image_writer.write_annotated
   image_recognition_util.image_writer.write_raw
   image_recognition_util.image_writer.get_annotated_cv_image


Module Contents
---------------

.. py:function:: mkdir_p(directory)

   os.makedirs() without raising an exception in case of existence

   :param directory: directory to create


.. py:function:: create_estimation_dir(parent_dir, suffix)

   Create an estimation dir in parent directory

   :param parent_dir: parent directory
   :param suffix:
   :return: Created estimations directory


.. py:function:: color_map(n = 256, normalized = False)

   Generate an RGB color map of N different colors
   :param n: amount of colors to generate
   :type n: int
   :param normalized: indicating range of each channel: float32 in [0, 1] or int in [0, 255]
   :type normalized: bool
   :return a numpy.array of shape (N, 3) with a row for each color and each row is [R,G,B]


.. py:function:: write_estimation(dir_path, image, label, annotated_original_image = None, suffix = '')

   Write estimation to a directory.
   For the estimation, a directory of the run will be created

   :param dir_path: Parent directory
   :param image: Image to write
   :param label: Label of the image
   :param annotated_original_image: The entire image with annotations
   :param suffix: Suffix of the run specific directory
   :return: Success


.. py:function:: write_estimations(dir_path, images, labels, annotated_original_image = None, suffix = '')

   Write estimations to a directory.
   For each estimation cycle, a directory of the run will be created

   :param dir_path: Parent directory
   :param images: Image to write
   :param labels: Label of the image
   :param annotated_original_image: The entire image with annotations
   :param suffix: Suffix of the run specific directory
   :return: Success


.. py:function:: write_annotated(dir_path, image, label, verified = False)

   Write an image with an annotation to a folder

   :param dir_path: The base directory we are going to write to
   :param image: The OpenCV image
   :param label: The label that is used for creating the subdirectory if not exists
   :param verified: Whether we are sure the label is correct
   :return: Success


.. py:function:: write_raw(dir_path, image, subfolder_name = 'raw')

   Write an image to a file (path) with the label as subfolder
   :param dir_path: The base directory we are going to write to
   :param image: The OpenCV image
   :param subfolder_name: A directory within the path is created with this name
   :return: Success


.. py:function:: get_annotated_cv_image(cv_image, recognitions, labels = None)

   Gets an annotated CV image based on recognitions, drawing using cv.rectangle
   :param cv_image: Original cv image
   :param recognitions: List of recognitions
   :param labels: List of labels per recognition
   :return: Annotated image


