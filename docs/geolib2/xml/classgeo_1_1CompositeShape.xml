<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgeo_1_1CompositeShape" kind="class" language="C++" prot="public">
    <compoundname>geo::CompositeShape</compoundname>
    <basecompoundref refid="classgeo_1_1Shape" prot="public" virt="non-virtual">geo::Shape</basecompoundref>
    <includes refid="CompositeShape_8h" local="no">CompositeShape.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgeo_1_1CompositeShape_1a83839f441e9311fb047003f28a5ddc4b" prot="protected" static="no" mutable="no">
        <type><ref refid="classgeo_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box geo::CompositeShape::bb_</definition>
        <argsstring></argsstring>
        <name>bb_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="65" column="9" bodyfile="include/geolib/CompositeShape.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1CompositeShape_1a48aaa03c7986c67f79199d0763e835ba" prot="protected" static="no" mutable="no">
        <type><ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref></type>
        <definition>Vector3 geo::CompositeShape::max_</definition>
        <argsstring></argsstring>
        <name>max_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="63" column="13" bodyfile="include/geolib/CompositeShape.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1CompositeShape_1a4e8a5fb888e03bd650d942f043f2c9d9" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double geo::CompositeShape::max_radius_</definition>
        <argsstring></argsstring>
        <name>max_radius_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="59" column="12" bodyfile="include/geolib/CompositeShape.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1CompositeShape_1a95287396954648ffd03babd42995c896" prot="protected" static="no" mutable="no">
        <type><ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref></type>
        <definition>Vector3 geo::CompositeShape::min_</definition>
        <argsstring></argsstring>
        <name>min_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="61" column="13" bodyfile="include/geolib/CompositeShape.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1CompositeShape_1a5a3a4a85325c7d7553ded4e2c8302084" prot="protected" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/utility/pair" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::pair</ref>&lt; <ref refid="namespacegeo_1aef28655bad0d2414bb89fe6dba28bad1" kindref="member">ShapePtr</ref>, <ref refid="classgeo_1_1Transform" kindref="compound">Transform</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;ShapePtr, Transform&gt; &gt; geo::CompositeShape::shapes_</definition>
        <argsstring></argsstring>
        <name>shapes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pairs of child shapes and the transform from the origin of the child shape to the origin of the composite shape </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="57" column="17" bodyfile="include/geolib/CompositeShape.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgeo_1_1CompositeShape_1aae036877cbdc6c1e3373d944f54a2e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void geo::CompositeShape::addShape</definition>
        <argsstring>(const Shape &amp;shape, const Pose3D &amp;pose)</argsstring>
        <name>addShape</name>
        <param>
          <type>const <ref refid="classgeo_1_1Shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member">Pose3D</ref> &amp;</type>
          <declname>pose</declname>
        </param>
        <briefdescription>
<para>add a shape to the composite </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>child shape to be added </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pose</parametername>
</parameternamelist>
<parameterdescription>
<para>pose of the origin of the child shape relative to the origin of the composite shape </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="39" column="10" bodyfile="src/CompositeShape.cpp" bodystart="86" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1CompositeShape_1ad678b57d058304ff5f354ba331e4593b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classgeo_1_1CompositeShape" kindref="compound">CompositeShape</ref> *</type>
        <definition>CompositeShape * geo::CompositeShape::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="classgeo_1_1Shape_1ab6819adb192ee12c2032bd13fabb2c83">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="24" column="20" bodyfile="src/CompositeShape.cpp" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1CompositeShape_1aca2baa40c621fcd4350457d73c74b94f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>geo::CompositeShape::CompositeShape</definition>
        <argsstring>()</argsstring>
        <name>CompositeShape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="20" column="5" bodyfile="src/CompositeShape.cpp" bodystart="9" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1CompositeShape_1a0884afeed1e68b0f1f90650fb61fef1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool geo::CompositeShape::contains</definition>
        <argsstring>(const Vector3 &amp;p) const</argsstring>
        <name>contains</name>
        <reimplements refid="classgeo_1_1Shape_1ae7769cb7528180ed71c1ef919d42cc37">contains</reimplements>
        <param>
          <type>const <ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Determines whether a point p lies within the shape. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>point to test </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True means point p lies inside the shape</para>
</simplesect>
Let the line segment P connect points p and an arbitrary point p_out outside of the shape We count the number of intersections between P and the shape. A positive number means point p is inside the shape. We use plucker coordinates to determine whether or not a triangle intersects line segment P. more details <emphasis><ulink url="https://members.loria.fr/SLazard/ARC-Visi3D/Pant-project/files/Line_Segment_Triangle.html">https://members.loria.fr/SLazard/ARC-Visi3D/Pant-project/files/Line_Segment_Triangle.html</ulink></emphasis> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="30" column="10" bodyfile="src/CompositeShape.cpp" bodystart="64" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1CompositeShape_1a9e817b7aef499a9d1bdb2c6ef48bcd59" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classgeo_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box geo::CompositeShape::getBoundingBox</definition>
        <argsstring>() const</argsstring>
        <name>getBoundingBox</name>
        <reimplements refid="classgeo_1_1Shape_1ab05847f6e020356a637cf51882099c24">getBoundingBox</reimplements>
        <briefdescription>
<para>Returns the smallest box which includes all mesh points. <ref refid="classgeo_1_1Box" kindref="compound">Box</ref> is not rotated, but matches the axis of the <ref refid="classgeo_1_1Shape" kindref="compound">Shape</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classgeo_1_1Box" kindref="compound">geo::Box</ref> of the bounding box. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="41" column="9" bodyfile="src/CompositeShape.cpp" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1CompositeShape_1a21e1bc0318646cce36ebce586257c7ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double geo::CompositeShape::getMaxRadius</definition>
        <argsstring>() const</argsstring>
        <name>getMaxRadius</name>
        <reimplements refid="classgeo_1_1Shape_1ab4ecd5a86b3dae9bd3f3108a2d9fa9d1">getMaxRadius</reimplements>
        <briefdescription>
<para>Calculate the maximum distance from the origin of the shape to any point of the shape. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum radius found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="32" column="12" bodyfile="src/CompositeShape.cpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1CompositeShape_1ab6360b3f4ffd3223944314f3e59a9be2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/utility/pair" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::pair</ref>&lt; <ref refid="namespacegeo_1aef28655bad0d2414bb89fe6dba28bad1" kindref="member">ShapePtr</ref>, <ref refid="classgeo_1_1Transform" kindref="compound">Transform</ref> &gt; &gt; &amp;</type>
        <definition>const std::vector&lt; std::pair&lt; ShapePtr, Transform &gt; &gt; &amp; geo::CompositeShape::getShapes</definition>
        <argsstring>() const</argsstring>
        <name>getShapes</name>
        <briefdescription>
<para>Get all the child shapes and their inverse pose relative to the &quot;origin&quot; of the <ref refid="classgeo_1_1CompositeShape" kindref="compound">CompositeShape</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to the vector of all ShapePtr and <ref refid="classgeo_1_1Transform" kindref="compound">Transform</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="47" column="23" bodyfile="src/CompositeShape.cpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1CompositeShape_1a3b5780f34cefddc67d311ccc40abc434" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool geo::CompositeShape::intersect</definition>
        <argsstring>(const Ray &amp;r, float t0, float t1, double &amp;distance) const</argsstring>
        <name>intersect</name>
        <reimplements refid="classgeo_1_1Shape_1a1ac12f892c823caf90f7555e1fb98c62">intersect</reimplements>
        <param>
          <type>const <ref refid="classgeo_1_1Ray" kindref="compound">Ray</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>intersect: currently always throws a logic error </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t0</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true when the ray intersects the shape </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="26" column="10" bodyfile="src/CompositeShape.cpp" bodystart="19" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1CompositeShape_1ad8938b252b9678614b2130bf43289324" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool geo::CompositeShape::intersect</definition>
        <argsstring>(const Vector3 &amp;p, const double radius) const</argsstring>
        <name>intersect</name>
        <reimplements refid="classgeo_1_1Shape_1a3ba8194d47f9c6b31543ce22ac7778f0">intersect</reimplements>
        <param>
          <type>const <ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Determines whether the shape intersects a sphere with center p. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>center of the sphere </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>radius of the sphere </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True means the sphere intersects the shape</para>
</simplesect>
Main logic: <emphasis><ulink url="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.49.9172&amp;rep=rep1&amp;type=pdf">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.49.9172&amp;rep=rep1&amp;type=pdf</ulink></emphasis> Projection in triangle logic: <emphasis><ulink url="https://www.baeldung.com/cs/check-if-point-is-in-2d-triangle#1-mathematical-idea-2">https://www.baeldung.com/cs/check-if-point-is-in-2d-triangle#1-mathematical-idea-2</ulink></emphasis> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="28" column="10" bodyfile="src/CompositeShape.cpp" bodystart="50" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1CompositeShape_1a8084ec43015bdd94537487421e50d860" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void geo::CompositeShape::setMesh</definition>
        <argsstring>(const Mesh &amp;mesh)</argsstring>
        <name>setMesh</name>
        <reimplements refid="classgeo_1_1Shape_1a50cedd1350ccef781c83c7812695eeb2">setMesh</reimplements>
        <param>
          <type>const <ref refid="classgeo_1_1Mesh" kindref="compound">Mesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
<para>set the <ref refid="classgeo_1_1Mesh" kindref="compound">Mesh</ref> Any child classes should throw a <ref refid="cpp/error/logic_error" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::logic_error</ref> in case the mesh should not be changed via <ref refid="classgeo_1_1CompositeShape_1a8084ec43015bdd94537487421e50d860" kindref="member">setMesh</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>mesh to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="49" column="10" bodyfile="src/CompositeShape.cpp" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1CompositeShape_1a9255de2b1094a19ade5475df6532378c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>geo::CompositeShape::~CompositeShape</definition>
        <argsstring>()</argsstring>
        <name>~CompositeShape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/CompositeShape.h" line="22" column="13" bodyfile="src/CompositeShape.cpp" bodystart="12" bodyend="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A geometric description of a shape as a union of other shapes. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>geo::Shape</label>
        <link refid="classgeo_1_1Shape"/>
      </node>
      <node id="1">
        <label>geo::CompositeShape</label>
        <link refid="classgeo_1_1CompositeShape"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>geo::Shape</label>
        <link refid="classgeo_1_1Shape"/>
        <childnode refid="3" relation="usage">
          <edgelabel>mesh_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>bounding_box_max_cache_</edgelabel>
          <edgelabel>bounding_box_min_cache_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>TYPE</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>geo::Box</label>
        <link refid="classgeo_1_1Box"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>bounds</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>geo::CompositeShape</label>
        <link refid="classgeo_1_1CompositeShape"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>bb_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>max_</edgelabel>
          <edgelabel>min_</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>shapes_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; geo::Vector3 &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="10">
        <label>std::vector&lt; std::pair&lt; std::shared_ptr, geo::Transform &gt; &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="7">
        <label>geo::Vec3T&lt; T &gt;</label>
        <link refid="classgeo_1_1Vec3T"/>
      </node>
      <node id="5">
        <label>std::vector&lt; geo::TriangleI &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="3">
        <label>geo::Mesh</label>
        <link refid="classgeo_1_1Mesh"/>
        <childnode refid="4" relation="usage">
          <edgelabel>points_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>triangles_i_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>triangles_cache_</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::vector&lt; geo::Triangle &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="8">
        <label>std::string</label>
        <link refid="cpp/string/basic_string" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="include/geolib/CompositeShape.h" line="16" column="34" bodyfile="include/geolib/CompositeShape.h" bodystart="16" bodyend="67"/>
    <listofallmembers>
      <member refid="classgeo_1_1CompositeShape_1aae036877cbdc6c1e3373d944f54a2e74" prot="public" virt="non-virtual"><scope>geo::CompositeShape</scope><name>addShape</name></member>
      <member refid="classgeo_1_1CompositeShape_1a83839f441e9311fb047003f28a5ddc4b" prot="protected" virt="non-virtual"><scope>geo::CompositeShape</scope><name>bb_</name></member>
      <member refid="classgeo_1_1Shape_1a1d6ae03b4a06eb3d86dd918c1a2a5a30" prot="private" virt="non-virtual"><scope>geo::CompositeShape</scope><name>bounding_box_cache_valid_</name></member>
      <member refid="classgeo_1_1Shape_1a9ff738ec054dd0577dc948609db42475" prot="private" virt="non-virtual"><scope>geo::CompositeShape</scope><name>bounding_box_max_cache_</name></member>
      <member refid="classgeo_1_1Shape_1a20119d9bcc304168a5d536131f74bf63" prot="private" virt="non-virtual"><scope>geo::CompositeShape</scope><name>bounding_box_min_cache_</name></member>
      <member refid="classgeo_1_1CompositeShape_1ad678b57d058304ff5f354ba331e4593b" prot="public" virt="virtual"><scope>geo::CompositeShape</scope><name>clone</name></member>
      <member refid="classgeo_1_1CompositeShape_1aca2baa40c621fcd4350457d73c74b94f" prot="public" virt="non-virtual"><scope>geo::CompositeShape</scope><name>CompositeShape</name></member>
      <member refid="classgeo_1_1CompositeShape_1a0884afeed1e68b0f1f90650fb61fef1e" prot="public" virt="virtual"><scope>geo::CompositeShape</scope><name>contains</name></member>
      <member refid="classgeo_1_1Shape_1a99de8a314f524d2f3243befbb9e56dcb" prot="public" virt="virtual"><scope>geo::CompositeShape</scope><name>empty</name></member>
      <member refid="classgeo_1_1CompositeShape_1a9e817b7aef499a9d1bdb2c6ef48bcd59" prot="public" virt="virtual"><scope>geo::CompositeShape</scope><name>getBoundingBox</name></member>
      <member refid="classgeo_1_1CompositeShape_1a21e1bc0318646cce36ebce586257c7ec" prot="public" virt="virtual"><scope>geo::CompositeShape</scope><name>getMaxRadius</name></member>
      <member refid="classgeo_1_1Shape_1a8b5d477a7a1fd6b6e6e41e824b2feee9" prot="public" virt="virtual"><scope>geo::CompositeShape</scope><name>getMesh</name></member>
      <member refid="classgeo_1_1CompositeShape_1ab6360b3f4ffd3223944314f3e59a9be2" prot="public" virt="non-virtual"><scope>geo::CompositeShape</scope><name>getShapes</name></member>
      <member refid="classgeo_1_1CompositeShape_1a3b5780f34cefddc67d311ccc40abc434" prot="public" virt="virtual"><scope>geo::CompositeShape</scope><name>intersect</name></member>
      <member refid="classgeo_1_1CompositeShape_1ad8938b252b9678614b2130bf43289324" prot="public" virt="virtual"><scope>geo::CompositeShape</scope><name>intersect</name></member>
      <member refid="classgeo_1_1CompositeShape_1a48aaa03c7986c67f79199d0763e835ba" prot="protected" virt="non-virtual"><scope>geo::CompositeShape</scope><name>max_</name></member>
      <member refid="classgeo_1_1CompositeShape_1a4e8a5fb888e03bd650d942f043f2c9d9" prot="protected" virt="non-virtual"><scope>geo::CompositeShape</scope><name>max_radius_</name></member>
      <member refid="classgeo_1_1Shape_1a786ce13699e5a9d8ac66aa59901532ab" prot="protected" virt="non-virtual"><scope>geo::CompositeShape</scope><name>mesh_</name></member>
      <member refid="classgeo_1_1CompositeShape_1a95287396954648ffd03babd42995c896" prot="protected" virt="non-virtual"><scope>geo::CompositeShape</scope><name>min_</name></member>
      <member refid="classgeo_1_1Shape_1a78fdd351f1332234e258a98a115a25a0" prot="public" virt="non-virtual"><scope>geo::CompositeShape</scope><name>read</name></member>
      <member refid="classgeo_1_1CompositeShape_1a8084ec43015bdd94537487421e50d860" prot="public" virt="virtual"><scope>geo::CompositeShape</scope><name>setMesh</name></member>
      <member refid="classgeo_1_1Shape_1a8094a10b0bbca152bd8d0da08f255c9e" prot="public" virt="non-virtual"><scope>geo::CompositeShape</scope><name>Shape</name></member>
      <member refid="classgeo_1_1CompositeShape_1a5a3a4a85325c7d7553ded4e2c8302084" prot="protected" virt="non-virtual"><scope>geo::CompositeShape</scope><name>shapes_</name></member>
      <member refid="classgeo_1_1Shape_1a1a807ae1f21eafc3580a250805275d5b" prot="public" virt="non-virtual"><scope>geo::CompositeShape</scope><name>TYPE</name></member>
      <member refid="classgeo_1_1Shape_1a606be4fca6978f0a60e792854e6c5afc" prot="public" virt="virtual"><scope>geo::CompositeShape</scope><name>write</name></member>
      <member refid="classgeo_1_1CompositeShape_1a9255de2b1094a19ade5475df6532378c" prot="public" virt="virtual"><scope>geo::CompositeShape</scope><name>~CompositeShape</name></member>
      <member refid="classgeo_1_1Shape_1a1e857e24797a6007ddeb8fb280ff7366" prot="public" virt="virtual"><scope>geo::CompositeShape</scope><name>~Shape</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
