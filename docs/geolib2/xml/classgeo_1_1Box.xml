<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgeo_1_1Box" kind="class" language="C++" prot="public">
    <compoundname>geo::Box</compoundname>
    <basecompoundref refid="classgeo_1_1Shape" prot="public" virt="non-virtual">geo::Shape</basecompoundref>
    <includes refid="Box_8h" local="no">Box.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgeo_1_1Box_1a4aa55ba7f536e447a38243d111556017" prot="protected" static="no" mutable="no">
        <type><ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref></type>
        <definition>Vector3 geo::Box::bounds[2]</definition>
        <argsstring>[2]</argsstring>
        <name>bounds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="77" column="13" bodyfile="include/geolib/Box.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1Box_1a332b049e2201bedf78f8c1ebbe366175" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double geo::Box::max_radius_</definition>
        <argsstring></argsstring>
        <name>max_radius_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="79" column="12" bodyfile="include/geolib/Box.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgeo_1_1Box_1af1b2c1134698ba85ff0a59e0b27d3e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>geo::Box::Box</definition>
        <argsstring>(const Vector3 &amp;min, const Vector3 &amp;max)</argsstring>
        <name>Box</name>
        <param>
          <type>const <ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const <ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="19" column="5" bodyfile="src/Box.cpp" bodystart="11" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1ae94161a48df5c14add8430e23141a6a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classgeo_1_1Box" kindref="compound">Box</ref> *</type>
        <definition>Box * geo::Box::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="classgeo_1_1Shape_1ab6819adb192ee12c2032bd13fabb2c83">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="21" column="9" bodyfile="src/Box.cpp" bodystart="17" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1a850fc297a334847227411c1d86e2f01b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool geo::Box::contains</definition>
        <argsstring>(const Vector3 &amp;p) const</argsstring>
        <name>contains</name>
        <reimplements refid="classgeo_1_1Shape_1ae7769cb7528180ed71c1ef919d42cc37">contains</reimplements>
        <param>
          <type>const <ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Determines whether a point p lies within the shape. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>point to test </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True means point p lies inside the shape</para>
</simplesect>
Let the line segment P connect points p and an arbitrary point p_out outside of the shape We count the number of intersections between P and the shape. A positive number means point p is inside the shape. We use plucker coordinates to determine whether or not a triangle intersects line segment P. more details <emphasis><ulink url="https://members.loria.fr/SLazard/ARC-Visi3D/Pant-project/files/Line_Segment_Triangle.html">https://members.loria.fr/SLazard/ARC-Visi3D/Pant-project/files/Line_Segment_Triangle.html</ulink></emphasis> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="36" column="10" bodyfile="src/Box.cpp" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1a20ffccb66f6a535d018a0bfe6c9114f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void geo::Box::enclose</definition>
        <argsstring>(const Box &amp;box, const Pose3D &amp;pose)</argsstring>
        <name>enclose</name>
        <param>
          <type>const <ref refid="classgeo_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member">Pose3D</ref> &amp;</type>
          <declname>pose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="47" column="10" bodyfile="src/Box.cpp" bodystart="96" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1a839e324a385260d54ec8886527c5f8fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classgeo_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box geo::Box::getBoundingBox</definition>
        <argsstring>() const</argsstring>
        <name>getBoundingBox</name>
        <reimplements refid="classgeo_1_1Shape_1ab05847f6e020356a637cf51882099c24">getBoundingBox</reimplements>
        <briefdescription>
<para>Returns the smallest box which includes all mesh points. <ref refid="classgeo_1_1Box" kindref="compound">Box</ref> is not rotated, but matches the axis of the <ref refid="classgeo_1_1Shape" kindref="compound">Shape</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Return a bounding box, which is the same as the object itself. <simplesect kind="return"><para>itself </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="45" column="9" bodyfile="src/Box.cpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1a11ae7c76ddd4c64324a2d9acb63ddbbc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref></type>
        <definition>Vector3 geo::Box::getCenter</definition>
        <argsstring>() const</argsstring>
        <name>getCenter</name>
        <briefdescription>
<para>Determine the center of the box with respect to the origin of the box. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="59" column="13" bodyfile="src/Box.cpp" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1a304e1f4bd1a5d8f6b57ddeb73245a4d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref> &amp;</type>
        <definition>const Vector3 &amp; geo::Box::getMax</definition>
        <argsstring>() const</argsstring>
        <name>getMax</name>
        <briefdescription>
<para>get vertex of the box with maximum coordinates </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="71" column="19" bodyfile="src/Box.cpp" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1a7b947ee283056f60edb1d8e7f2465199" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double geo::Box::getMaxRadius</definition>
        <argsstring>() const</argsstring>
        <name>getMaxRadius</name>
        <reimplements refid="classgeo_1_1Shape_1ab4ecd5a86b3dae9bd3f3108a2d9fa9d1">getMaxRadius</reimplements>
        <briefdescription>
<para>Calculate the maximum distance from the origin of the shape to any point of the shape. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum radius found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="38" column="12" bodyfile="src/Box.cpp" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1ad73e21e941b5b6cb57c452820e9a54d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref> &amp;</type>
        <definition>const Vector3 &amp; geo::Box::getMin</definition>
        <argsstring>() const</argsstring>
        <name>getMin</name>
        <briefdescription>
<para>get vertex of the box with minimum coordinates </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="65" column="19" bodyfile="src/Box.cpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1a16487418fe6134aa320ede5869968d70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref></type>
        <definition>Vector3 geo::Box::getSize</definition>
        <argsstring>() const</argsstring>
        <name>getSize</name>
        <briefdescription>
<para>get the size of the box along all axes </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>vector with the sizes of the box along the corresponding axes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="53" column="13" bodyfile="src/Box.cpp" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1a2ed1f78cfb921c283e10e9ad26a8c350" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool geo::Box::intersect</definition>
        <argsstring>(const Box &amp;other) const</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classgeo_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Determines whether this <ref refid="classgeo_1_1Box" kindref="compound">Box</ref> intersects with another box. </para>
        </briefdescription>
        <detaileddescription>
<para>The two boxes are not rotated, they are assumed to be axis aligned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>second box </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True means this box intersects with the other box </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="32" column="10" bodyfile="src/Box.cpp" bodystart="55" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1a6e1c482b427734224465c20a83fbb8c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool geo::Box::intersect</definition>
        <argsstring>(const Ray &amp;r, float t0, float t1, double &amp;distance) const</argsstring>
        <name>intersect</name>
        <reimplements refid="classgeo_1_1Shape_1a1ac12f892c823caf90f7555e1fb98c62">intersect</reimplements>
        <param>
          <type>const <ref refid="classgeo_1_1Ray" kindref="compound">Ray</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>intersect: currently always throws a logic error </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t0</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true when the ray intersects the shape </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="23" column="10" bodyfile="src/Box.cpp" bodystart="21" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1a1e9c27ee406037af12b69bfe1d7a8337" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool geo::Box::intersect</definition>
        <argsstring>(const Vector3 &amp;p, const double radius) const</argsstring>
        <name>intersect</name>
        <reimplements refid="classgeo_1_1Shape_1a3ba8194d47f9c6b31543ce22ac7778f0">intersect</reimplements>
        <param>
          <type>const <ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Determines whether the shape intersects a sphere with center p. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>center of the sphere </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>radius of the sphere </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True means the sphere intersects the shape</para>
</simplesect>
Main logic: <emphasis><ulink url="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.49.9172&amp;rep=rep1&amp;type=pdf">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.49.9172&amp;rep=rep1&amp;type=pdf</ulink></emphasis> Projection in triangle logic: <emphasis><ulink url="https://www.baeldung.com/cs/check-if-point-is-in-2d-triangle#1-mathematical-idea-2">https://www.baeldung.com/cs/check-if-point-is-in-2d-triangle#1-mathematical-idea-2</ulink></emphasis> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="34" column="10" bodyfile="src/Box.cpp" bodystart="69" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Box_1a20159e31c7352bcdedca8d85f1646f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void geo::Box::setMesh</definition>
        <argsstring>(const Mesh &amp;mesh)</argsstring>
        <name>setMesh</name>
        <reimplements refid="classgeo_1_1Shape_1a50cedd1350ccef781c83c7812695eeb2">setMesh</reimplements>
        <param>
          <type>const <ref refid="classgeo_1_1Mesh" kindref="compound">Mesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
<para>set the <ref refid="classgeo_1_1Mesh" kindref="compound">Mesh</ref> Any child classes should throw a <ref refid="cpp/error/logic_error" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::logic_error</ref> in case the mesh should not be changed via <ref refid="classgeo_1_1Box_1a20159e31c7352bcdedca8d85f1646f75" kindref="member">setMesh</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>mesh to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="73" column="10" bodyfile="src/Box.cpp" bodystart="127" bodyend="131"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classgeo_1_1Box_1a1405e791e7e68b680a439b6158f9e1d1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void geo::Box::generate_mesh_</definition>
        <argsstring>()</argsstring>
        <name>generate_mesh_</name>
        <briefdescription>
<para>Should be called any time <ref refid="classgeo_1_1Box_1a4aa55ba7f536e447a38243d111556017" kindref="member">bounds</ref> is changed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Box.h" line="84" column="10" bodyfile="src/Box.cpp" bodystart="133" bodyend="169"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A class describing a box geometry</para>
<para>The box is defined by two vectors. Its origin is therefore not in the center of the box </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>geo::Shape</label>
        <link refid="classgeo_1_1Shape"/>
      </node>
      <node id="1">
        <label>geo::Box</label>
        <link refid="classgeo_1_1Box"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>geo::Shape</label>
        <link refid="classgeo_1_1Shape"/>
        <childnode refid="3" relation="usage">
          <edgelabel>mesh_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>bounding_box_max_cache_</edgelabel>
          <edgelabel>bounding_box_min_cache_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>TYPE</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>geo::Box</label>
        <link refid="classgeo_1_1Box"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>bounds</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; geo::Vector3 &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="7">
        <label>geo::Vec3T&lt; T &gt;</label>
        <link refid="classgeo_1_1Vec3T"/>
      </node>
      <node id="5">
        <label>std::vector&lt; geo::TriangleI &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="3">
        <label>geo::Mesh</label>
        <link refid="classgeo_1_1Mesh"/>
        <childnode refid="4" relation="usage">
          <edgelabel>points_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>triangles_i_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>triangles_cache_</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::vector&lt; geo::Triangle &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="8">
        <label>std::string</label>
        <link refid="cpp/string/basic_string" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="include/geolib/Box.h" line="15" column="23" bodyfile="include/geolib/Box.h" bodystart="15" bodyend="86"/>
    <listofallmembers>
      <member refid="classgeo_1_1Shape_1a1d6ae03b4a06eb3d86dd918c1a2a5a30" prot="private" virt="non-virtual"><scope>geo::Box</scope><name>bounding_box_cache_valid_</name></member>
      <member refid="classgeo_1_1Shape_1a9ff738ec054dd0577dc948609db42475" prot="private" virt="non-virtual"><scope>geo::Box</scope><name>bounding_box_max_cache_</name></member>
      <member refid="classgeo_1_1Shape_1a20119d9bcc304168a5d536131f74bf63" prot="private" virt="non-virtual"><scope>geo::Box</scope><name>bounding_box_min_cache_</name></member>
      <member refid="classgeo_1_1Box_1a4aa55ba7f536e447a38243d111556017" prot="protected" virt="non-virtual"><scope>geo::Box</scope><name>bounds</name></member>
      <member refid="classgeo_1_1Box_1af1b2c1134698ba85ff0a59e0b27d3e13" prot="public" virt="non-virtual"><scope>geo::Box</scope><name>Box</name></member>
      <member refid="classgeo_1_1Box_1ae94161a48df5c14add8430e23141a6a8" prot="public" virt="virtual"><scope>geo::Box</scope><name>clone</name></member>
      <member refid="classgeo_1_1Box_1a850fc297a334847227411c1d86e2f01b" prot="public" virt="virtual"><scope>geo::Box</scope><name>contains</name></member>
      <member refid="classgeo_1_1Shape_1a99de8a314f524d2f3243befbb9e56dcb" prot="public" virt="virtual"><scope>geo::Box</scope><name>empty</name></member>
      <member refid="classgeo_1_1Box_1a20ffccb66f6a535d018a0bfe6c9114f0" prot="public" virt="non-virtual"><scope>geo::Box</scope><name>enclose</name></member>
      <member refid="classgeo_1_1Box_1a1405e791e7e68b680a439b6158f9e1d1" prot="protected" virt="non-virtual"><scope>geo::Box</scope><name>generate_mesh_</name></member>
      <member refid="classgeo_1_1Box_1a839e324a385260d54ec8886527c5f8fa" prot="public" virt="virtual"><scope>geo::Box</scope><name>getBoundingBox</name></member>
      <member refid="classgeo_1_1Box_1a11ae7c76ddd4c64324a2d9acb63ddbbc" prot="public" virt="non-virtual"><scope>geo::Box</scope><name>getCenter</name></member>
      <member refid="classgeo_1_1Box_1a304e1f4bd1a5d8f6b57ddeb73245a4d5" prot="public" virt="non-virtual"><scope>geo::Box</scope><name>getMax</name></member>
      <member refid="classgeo_1_1Box_1a7b947ee283056f60edb1d8e7f2465199" prot="public" virt="virtual"><scope>geo::Box</scope><name>getMaxRadius</name></member>
      <member refid="classgeo_1_1Shape_1a8b5d477a7a1fd6b6e6e41e824b2feee9" prot="public" virt="virtual"><scope>geo::Box</scope><name>getMesh</name></member>
      <member refid="classgeo_1_1Box_1ad73e21e941b5b6cb57c452820e9a54d0" prot="public" virt="non-virtual"><scope>geo::Box</scope><name>getMin</name></member>
      <member refid="classgeo_1_1Box_1a16487418fe6134aa320ede5869968d70" prot="public" virt="non-virtual"><scope>geo::Box</scope><name>getSize</name></member>
      <member refid="classgeo_1_1Box_1a6e1c482b427734224465c20a83fbb8c4" prot="public" virt="virtual"><scope>geo::Box</scope><name>intersect</name></member>
      <member refid="classgeo_1_1Box_1a2ed1f78cfb921c283e10e9ad26a8c350" prot="public" virt="non-virtual"><scope>geo::Box</scope><name>intersect</name></member>
      <member refid="classgeo_1_1Box_1a1e9c27ee406037af12b69bfe1d7a8337" prot="public" virt="virtual"><scope>geo::Box</scope><name>intersect</name></member>
      <member refid="classgeo_1_1Box_1a332b049e2201bedf78f8c1ebbe366175" prot="protected" virt="non-virtual"><scope>geo::Box</scope><name>max_radius_</name></member>
      <member refid="classgeo_1_1Shape_1a786ce13699e5a9d8ac66aa59901532ab" prot="protected" virt="non-virtual"><scope>geo::Box</scope><name>mesh_</name></member>
      <member refid="classgeo_1_1Shape_1a78fdd351f1332234e258a98a115a25a0" prot="public" virt="non-virtual"><scope>geo::Box</scope><name>read</name></member>
      <member refid="classgeo_1_1Box_1a20159e31c7352bcdedca8d85f1646f75" prot="public" virt="virtual"><scope>geo::Box</scope><name>setMesh</name></member>
      <member refid="classgeo_1_1Shape_1a8094a10b0bbca152bd8d0da08f255c9e" prot="public" virt="non-virtual"><scope>geo::Box</scope><name>Shape</name></member>
      <member refid="classgeo_1_1Shape_1a1a807ae1f21eafc3580a250805275d5b" prot="public" virt="non-virtual"><scope>geo::Box</scope><name>TYPE</name></member>
      <member refid="classgeo_1_1Shape_1a606be4fca6978f0a60e792854e6c5afc" prot="public" virt="virtual"><scope>geo::Box</scope><name>write</name></member>
      <member refid="classgeo_1_1Shape_1a1e857e24797a6007ddeb8fb280ff7366" prot="public" virt="virtual"><scope>geo::Box</scope><name>~Shape</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
