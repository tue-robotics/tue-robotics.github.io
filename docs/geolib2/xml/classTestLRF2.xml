<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classTestLRF2" kind="class" language="C++" prot="public">
    <compoundname>TestLRF2</compoundname>
    <basecompoundref refid="classTestLRF" prot="public" virt="non-virtual">TestLRF</basecompoundref>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classTestLRF2_1a0d19cc7cd4d96a13d7084ded2351be5e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TestLRF2::TestLRF2</definition>
        <argsstring>()</argsstring>
        <name>TestLRF2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_lrf.cpp" line="44" column="5" bodyfile="test/test_lrf.cpp" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classTestLRF2_1aa6509debc6238ae50df0d77b5818cc5c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual TestLRF2::~TestLRF2</definition>
        <argsstring>()</argsstring>
        <name>~TestLRF2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_lrf.cpp" line="48" column="13" bodyfile="test/test_lrf.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>testing::Test</label>
      </node>
      <node id="1">
        <label>TestLRF2</label>
        <link refid="classTestLRF2"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>TestLRF</label>
        <link refid="classTestLRF"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>std::vector&lt; double &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="3">
        <label>testing::Test</label>
      </node>
      <node id="1">
        <label>TestLRF2</label>
        <link refid="classTestLRF2"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>TestLRF</label>
        <link refid="classTestLRF"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>lrf</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>ranges</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>geo::LaserRangeFinder</label>
        <link refid="classgeo_1_1LaserRangeFinder"/>
        <childnode refid="5" relation="usage">
          <edgelabel>ray_dirs_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>angles_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::vector&lt; geo::Vector3 &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="test/test_lrf.cpp" line="42" column="1" bodyfile="test/test_lrf.cpp" bodystart="41" bodyend="51"/>
    <listofallmembers>
      <member refid="classTestLRF_1a76864adb96a5da2750044420c9195ed1" prot="protected" virt="non-virtual"><scope>TestLRF2</scope><name>angle_max</name></member>
      <member refid="classTestLRF_1a5b2c7c1fdd9d7a5725c5aaf902eb8053" prot="protected" virt="non-virtual"><scope>TestLRF2</scope><name>angle_min</name></member>
      <member refid="classTestLRF_1aa7452e9d5d70ff3086d3593700493c28" prot="protected" virt="non-virtual"><scope>TestLRF2</scope><name>lrf</name></member>
      <member refid="classTestLRF_1ad9181863e960a4fd92031e4a5b0fd835" prot="protected" virt="non-virtual"><scope>TestLRF2</scope><name>n_beams</name></member>
      <member refid="classTestLRF_1a8ccfeb527bde1472c81aad2e7a744664" prot="protected" virt="non-virtual"><scope>TestLRF2</scope><name>range_max</name></member>
      <member refid="classTestLRF_1a420d3afbf90f7c8b308de3ed94c84930" prot="protected" virt="non-virtual"><scope>TestLRF2</scope><name>range_min</name></member>
      <member refid="classTestLRF_1a188083c08bc55840aeb2dc4957519b76" prot="protected" virt="non-virtual"><scope>TestLRF2</scope><name>ranges</name></member>
      <member refid="classTestLRF_1a26c22a256d5000a7f7c5ce1b0f1a7c5e" prot="protected" virt="non-virtual"><scope>TestLRF2</scope><name>SetUp</name></member>
      <member refid="classTestLRF_1a55d24d2b6514d2a2a64830ad4349ed54" prot="protected" virt="non-virtual"><scope>TestLRF2</scope><name>TestLRF</name></member>
      <member refid="classTestLRF2_1a0d19cc7cd4d96a13d7084ded2351be5e" prot="protected" virt="non-virtual"><scope>TestLRF2</scope><name>TestLRF2</name></member>
      <member refid="classTestLRF_1afd0f29aaf6be4c7e646cf82839c16886" prot="protected" virt="virtual"><scope>TestLRF2</scope><name>~TestLRF</name></member>
      <member refid="classTestLRF2_1aa6509debc6238ae50df0d77b5818cc5c" prot="protected" virt="virtual"><scope>TestLRF2</scope><name>~TestLRF2</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
