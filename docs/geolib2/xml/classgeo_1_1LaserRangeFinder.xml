<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgeo_1_1LaserRangeFinder" kind="class" language="C++" prot="public">
    <compoundname>geo::LaserRangeFinder</compoundname>
    <includes refid="LaserRangeFinder_8h" local="no">LaserRangeFinder.h</includes>
    <innerclass refid="classgeo_1_1LaserRangeFinder_1_1RenderOptions" prot="public">geo::LaserRangeFinder::RenderOptions</innerclass>
    <innerclass refid="classgeo_1_1LaserRangeFinder_1_1RenderResult" prot="public">geo::LaserRangeFinder::RenderResult</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgeo_1_1LaserRangeFinder_1ad689fe1d1b5ea0acaa1ce0a23e8b87f5" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double geo::LaserRangeFinder::a_max_</definition>
        <argsstring></argsstring>
        <name>a_max_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="119" column="19" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1LaserRangeFinder_1a26fa84d8b47146416bce63a5f10f1fc6" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double geo::LaserRangeFinder::a_min_</definition>
        <argsstring></argsstring>
        <name>a_min_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="119" column="12" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1LaserRangeFinder_1af5202331f5d3e480fb486eb194e73266" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double geo::LaserRangeFinder::angle_incr_</definition>
        <argsstring></argsstring>
        <name>angle_incr_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="129" column="12" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1LaserRangeFinder_1a4dc05d8e426b365dab854418b633ff35" prot="protected" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; geo::LaserRangeFinder::angles_</definition>
        <argsstring></argsstring>
        <name>angles_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="125" column="17" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1LaserRangeFinder_1a6440037bf0ccaa6daaacfbaf1a0d6ba9" prot="protected" static="no" mutable="no">
        <type>uint</type>
        <definition>uint geo::LaserRangeFinder::i_half_circle_</definition>
        <argsstring></argsstring>
        <name>i_half_circle_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="132" column="10" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1LaserRangeFinder_1aa3a4fada92938625d918816becee47c3" prot="protected" static="no" mutable="no">
        <type>uint</type>
        <definition>uint geo::LaserRangeFinder::num_beams_</definition>
        <argsstring></argsstring>
        <name>num_beams_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="123" column="10" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1LaserRangeFinder_1ad788a0f413a07d31d128e555866c2161" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double geo::LaserRangeFinder::range_max_</definition>
        <argsstring></argsstring>
        <name>range_max_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="121" column="23" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1LaserRangeFinder_1aea35bc0427eaaa558bda0f21c2d535d9" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double geo::LaserRangeFinder::range_min_</definition>
        <argsstring></argsstring>
        <name>range_min_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="121" column="12" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1LaserRangeFinder_1a641c391ec5741c43ea78a8366559722b" prot="protected" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="classgeo_1_1Vector3" kindref="compound">geo::Vector3</ref> &gt;</type>
        <definition>std::vector&lt;geo::Vector3&gt; geo::LaserRangeFinder::ray_dirs_</definition>
        <argsstring></argsstring>
        <name>ray_dirs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="127" column="17" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a50f30031488a25a70fc4711e6b98733e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double geo::LaserRangeFinder::getAngleIncrement</definition>
        <argsstring>() const</argsstring>
        <name>getAngleIncrement</name>
        <briefdescription>
<para>Angle increment between two beams. </para>
        </briefdescription>
        <detaileddescription>
<para><formula id="0">$ \frac{angle_{max} - angle_{min}}{N_{beams} - 1}$</formula> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="80" column="12" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="319" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1aa33d9cb7159e4a25fe97d99ada6b01f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double geo::LaserRangeFinder::getAngleMax</definition>
        <argsstring>() const</argsstring>
        <name>getAngleMax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="73" column="19" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a72543119cb4bcdafbffd44d4585671ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double geo::LaserRangeFinder::getAngleMin</definition>
        <argsstring>() const</argsstring>
        <name>getAngleMin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="71" column="19" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a297e8574ec79d04ae489f72c73e1497a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; double &gt; &amp;</type>
        <definition>const std::vector&lt;double&gt;&amp; geo::LaserRangeFinder::getAngles</definition>
        <argsstring>() const</argsstring>
        <name>getAngles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="82" column="30" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a94f7b5248d3b8526b49bdd24e45b8184" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint</type>
        <definition>uint geo::LaserRangeFinder::getAngleUpperIndex</definition>
        <argsstring>(double angle) const</argsstring>
        <name>getAngleUpperIndex</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Get the index of the first beam with a higher angle than this beam. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>radial angle of the beam </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of the beam, which bounded to be the number of beams [0, N_BEAMS] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="101" column="10" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="323" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a0a3c237e1e4f28fee88f483ab0447b38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint</type>
        <definition>uint geo::LaserRangeFinder::getAngleUpperIndex</definition>
        <argsstring>(double x, double y) const</argsstring>
        <name>getAngleUpperIndex</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x-coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y-coordinate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of the beam, which bounded to be the number of beams [0, N_BEAMS] </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="109" column="10" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a7e19e6cd78371992adc1db2628c387eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint</type>
        <definition>uint geo::LaserRangeFinder::getNumBeams</definition>
        <argsstring>() const</argsstring>
        <name>getNumBeams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="88" column="17" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a3e9b55dece63fc1e4ca8c5cd6bac1941" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double geo::LaserRangeFinder::getRangeMax</definition>
        <argsstring>() const</argsstring>
        <name>getRangeMax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="86" column="19" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a8cb9f257b43a96432d302f7376450181" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double geo::LaserRangeFinder::getRangeMin</definition>
        <argsstring>() const</argsstring>
        <name>getRangeMin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="84" column="19" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1ae272c6ec93be81ef725ab7c64abc2e21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgeo_1_1Vector3" kindref="compound">geo::Vector3</ref></type>
        <definition>const geo::Vector3 geo::LaserRangeFinder::getRayDirection</definition>
        <argsstring>(uint i) const</argsstring>
        <name>getRayDirection</name>
        <param>
          <type>uint</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="92" column="24" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="351" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a238481ab85dd963f682ad3292c56ab3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>geo::LaserRangeFinder::LaserRangeFinder</definition>
        <argsstring>()</argsstring>
        <name>LaserRangeFinder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="55" column="5" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="8" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a09583367efcdd8998f9b6d347e1d40e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool geo::LaserRangeFinder::rangesToPoints</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;ranges, std::vector&lt; geo::Vector3 &gt; &amp;points) const</argsstring>
        <name>rangesToPoints</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; double &gt; &amp;</type>
          <declname>ranges</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="classgeo_1_1Vector3" kindref="compound">geo::Vector3</ref> &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="94" column="10" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="355" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a595c038c0d42565734e0bb4cfdcd5915" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgeo_1_1Vector3" kindref="compound">geo::Vector3</ref></type>
        <definition>geo::Vector3 geo::LaserRangeFinder::rangeToPoint</definition>
        <argsstring>(double range, uint i) const</argsstring>
        <name>rangeToPoint</name>
        <param>
          <type>double</type>
          <declname>range</declname>
        </param>
        <param>
          <type>uint</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="90" column="18" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="347" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1afd9c684519a3604d875fca494dc12ca1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="classgeo_1_1Vector3" kindref="compound">geo::Vector3</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;geo::Vector3&gt;&amp; geo::LaserRangeFinder::rayDirections</definition>
        <argsstring>() const</argsstring>
        <name>rayDirections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="115" column="30" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1ad8f10c65dae48977785dc9d69c1a52b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void geo::LaserRangeFinder::render</definition>
        <argsstring>(const geo::LaserRangeFinder::RenderOptions &amp;options, geo::LaserRangeFinder::RenderResult &amp;res) const</argsstring>
        <name>render</name>
        <param>
          <type>const <ref refid="classgeo_1_1LaserRangeFinder_1_1RenderOptions" kindref="compound">geo::LaserRangeFinder::RenderOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type><ref refid="classgeo_1_1LaserRangeFinder_1_1RenderResult" kindref="compound">geo::LaserRangeFinder::RenderResult</ref> &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="59" column="10" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="142" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a387542bb672b3afb6d60afb99bd26ffa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgeo_1_1LaserRangeFinder_1_1RenderResult" kindref="compound">RenderResult</ref></type>
        <definition>LaserRangeFinder::RenderResult geo::LaserRangeFinder::render</definition>
        <argsstring>(const geo::Shape &amp;shape, const geo::Pose3D &amp;cam_pose, const geo::Pose3D &amp;obj_pose, std::vector&lt; double &gt; &amp;ranges) const</argsstring>
        <name>render</name>
        <param>
          <type>const <ref refid="classgeo_1_1Shape" kindref="compound">geo::Shape</ref> &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member">geo::Pose3D</ref> &amp;</type>
          <declname>cam_pose</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member">geo::Pose3D</ref> &amp;</type>
          <declname>obj_pose</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; double &gt; &amp;</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="61" column="18" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="258" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1ac97e97543a30f38dfd8e0d3e86fc49a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void geo::LaserRangeFinder::renderLine</definition>
        <argsstring>(const geo::Vec2 &amp;p1, const geo::Vec2 &amp;p2, std::vector&lt; double &gt; &amp;ranges) const</argsstring>
        <name>renderLine</name>
        <param>
          <type>const <ref refid="namespacegeo_1a721c6e5b9502c5b4337a1c0b61668362" kindref="member">geo::Vec2</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegeo_1a721c6e5b9502c5b4337a1c0b61668362" kindref="member">geo::Vec2</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; double &gt; &amp;</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="63" column="10" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="272" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1ab856ae850e86b31842c797347655d903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void geo::LaserRangeFinder::setAngleLimits</definition>
        <argsstring>(double min, double max)</argsstring>
        <name>setAngleLimits</name>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="65" column="10" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="285" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a17d109053351a0764dd39d54b25d7b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void geo::LaserRangeFinder::setNumBeams</definition>
        <argsstring>(uint n)</argsstring>
        <name>setNumBeams</name>
        <param>
          <type>uint</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="69" column="10" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="293" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a63508cd57690f3ec1668994aaca4c4fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void geo::LaserRangeFinder::setRangeLimits</definition>
        <argsstring>(double min, double max)</argsstring>
        <name>setRangeLimits</name>
        <param>
          <type>double</type>
          <declname>min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="67" column="17" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a84f39eea8a39e8741f8b67d3fb8f3977" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>geo::LaserRangeFinder::~LaserRangeFinder</definition>
        <argsstring>()</argsstring>
        <name>~LaserRangeFinder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="57" column="13" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="11" bodyend="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1af07d231230206a3ce88d4c49901706bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgeo_1_1Vector3" kindref="compound">geo::Vector3</ref></type>
        <definition>geo::Vector3 geo::LaserRangeFinder::polarTo2D</definition>
        <argsstring>(double angle, double range)</argsstring>
        <name>polarTo2D</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="111" column="25" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="366" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1abd34ffe934cdd1564dc3c6363af8a109" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgeo_1_1Vector3" kindref="compound">geo::Vector3</ref></type>
        <definition>geo::Vector3 geo::LaserRangeFinder::polarTo3D</definition>
        <argsstring>(const geo::Pose3D &amp;laser_pose, double angle, double range)</argsstring>
        <name>polarTo3D</name>
        <param>
          <type>const <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member">geo::Pose3D</ref> &amp;</type>
          <declname>laser_pose</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="113" column="25" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="370" bodyend="372"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a285cc3f7603433ac993ca1b29704b65d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void geo::LaserRangeFinder::calculateRays</definition>
        <argsstring>()</argsstring>
        <name>calculateRays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="149" column="10" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="300" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1a989d0ac0f9f558f762bbc188b646b76b" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int geo::LaserRangeFinder::getAngleUpperIndexRaw</definition>
        <argsstring>(double angle) const</argsstring>
        <name>getAngleUpperIndexRaw</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Get the index of the first beam with a higher angle than <computeroutput>angle</computeroutput>. Results may lie outside of the sensor range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>radial angle of the beam </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of the beam </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="139" column="9" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1LaserRangeFinder_1ac79d9d8057234162ac442a6540b8892f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int geo::LaserRangeFinder::getAngleUpperIndexRaw</definition>
        <argsstring>(double x, double y) const</argsstring>
        <name>getAngleUpperIndexRaw</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x-coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>y-coordinate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of the beam </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/sensors/LaserRangeFinder.h" line="147" column="9" bodyfile="src/sensors/LaserRangeFinder.cpp" bodystart="336" bodyend="339"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>std::vector&lt; double &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="1">
        <label>geo::LaserRangeFinder</label>
        <link refid="classgeo_1_1LaserRangeFinder"/>
        <childnode refid="2" relation="usage">
          <edgelabel>ray_dirs_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>angles_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::vector&lt; geo::Vector3 &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="include/geolib/sensors/LaserRangeFinder.h" line="13" column="23" bodyfile="include/geolib/sensors/LaserRangeFinder.h" bodystart="13" bodyend="151"/>
    <listofallmembers>
      <member refid="classgeo_1_1LaserRangeFinder_1ad689fe1d1b5ea0acaa1ce0a23e8b87f5" prot="protected" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>a_max_</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a26fa84d8b47146416bce63a5f10f1fc6" prot="protected" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>a_min_</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1af5202331f5d3e480fb486eb194e73266" prot="protected" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>angle_incr_</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a4dc05d8e426b365dab854418b633ff35" prot="protected" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>angles_</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a285cc3f7603433ac993ca1b29704b65d" prot="protected" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>calculateRays</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a50f30031488a25a70fc4711e6b98733e" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>getAngleIncrement</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1aa33d9cb7159e4a25fe97d99ada6b01f8" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>getAngleMax</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a72543119cb4bcdafbffd44d4585671ca" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>getAngleMin</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a297e8574ec79d04ae489f72c73e1497a" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>getAngles</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a94f7b5248d3b8526b49bdd24e45b8184" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>getAngleUpperIndex</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a0a3c237e1e4f28fee88f483ab0447b38" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>getAngleUpperIndex</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a989d0ac0f9f558f762bbc188b646b76b" prot="protected" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>getAngleUpperIndexRaw</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1ac79d9d8057234162ac442a6540b8892f" prot="protected" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>getAngleUpperIndexRaw</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a7e19e6cd78371992adc1db2628c387eb" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>getNumBeams</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a3e9b55dece63fc1e4ca8c5cd6bac1941" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>getRangeMax</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a8cb9f257b43a96432d302f7376450181" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>getRangeMin</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1ae272c6ec93be81ef725ab7c64abc2e21" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>getRayDirection</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a6440037bf0ccaa6daaacfbaf1a0d6ba9" prot="protected" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>i_half_circle_</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a238481ab85dd963f682ad3292c56ab3d" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>LaserRangeFinder</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1aa3a4fada92938625d918816becee47c3" prot="protected" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>num_beams_</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1af07d231230206a3ce88d4c49901706bf" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>polarTo2D</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1abd34ffe934cdd1564dc3c6363af8a109" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>polarTo3D</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1ad788a0f413a07d31d128e555866c2161" prot="protected" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>range_max_</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1aea35bc0427eaaa558bda0f21c2d535d9" prot="protected" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>range_min_</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a09583367efcdd8998f9b6d347e1d40e5" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>rangesToPoints</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a595c038c0d42565734e0bb4cfdcd5915" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>rangeToPoint</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a641c391ec5741c43ea78a8366559722b" prot="protected" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>ray_dirs_</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1afd9c684519a3604d875fca494dc12ca1" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>rayDirections</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1ad8f10c65dae48977785dc9d69c1a52b9" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>render</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a387542bb672b3afb6d60afb99bd26ffa" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>render</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1ac97e97543a30f38dfd8e0d3e86fc49a8" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>renderLine</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1ab856ae850e86b31842c797347655d903" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>setAngleLimits</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a17d109053351a0764dd39d54b25d7b10" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>setNumBeams</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a63508cd57690f3ec1668994aaca4c4fa" prot="public" virt="non-virtual"><scope>geo::LaserRangeFinder</scope><name>setRangeLimits</name></member>
      <member refid="classgeo_1_1LaserRangeFinder_1a84f39eea8a39e8741f8b67d3fb8f3977" prot="public" virt="virtual"><scope>geo::LaserRangeFinder</scope><name>~LaserRangeFinder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
