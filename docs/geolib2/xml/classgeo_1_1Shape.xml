<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classgeo_1_1Shape" kind="class" language="C++" prot="public">
    <compoundname>geo::Shape</compoundname>
    <derivedcompoundref refid="classgeo_1_1Box" prot="public" virt="non-virtual">geo::Box</derivedcompoundref>
    <derivedcompoundref refid="classgeo_1_1CompositeShape" prot="public" virt="non-virtual">geo::CompositeShape</derivedcompoundref>
    <derivedcompoundref refid="classgeo_1_1HeightMap" prot="public" virt="non-virtual">geo::HeightMap</derivedcompoundref>
    <derivedcompoundref refid="classgeo_1_1Octree" prot="public" virt="non-virtual">geo::Octree</derivedcompoundref>
    <includes refid="Shape_8h" local="no">Shape.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classgeo_1_1Shape_1ad2d8744585dcb094644b1caed04ac9ed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Importer</definition>
        <argsstring></argsstring>
        <name>Importer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="21" column="5" bodyfile="include/geolib/Shape.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classgeo_1_1Shape_1a1a807ae1f21eafc3580a250805275d5b" prot="public" static="yes" mutable="no">
        <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>const std::string geo::Shape::TYPE</definition>
        <argsstring></argsstring>
        <name>TYPE</name>
        <initializer>= &quot;mesh&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="98" column="30" bodyfile="include/geolib/Shape.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgeo_1_1Shape_1a786ce13699e5a9d8ac66aa59901532ab" prot="protected" static="no" mutable="no">
        <type><ref refid="classgeo_1_1Mesh" kindref="compound">Mesh</ref></type>
        <definition>Mesh geo::Shape::mesh_</definition>
        <argsstring></argsstring>
        <name>mesh_</name>
        <briefdescription>
<para>Should not be read or written to directly in general. Use <ref refid="classgeo_1_1Shape_1a50cedd1350ccef781c83c7812695eeb2" kindref="member">setMesh</ref> and <ref refid="classgeo_1_1Shape_1a8b5d477a7a1fd6b6e6e41e824b2feee9" kindref="member">getMesh</ref> to write respectively read the mesh. In a few exceptions, the mesh can be written direcly. Make sure that mesh keeps consistent with other member variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="112" column="10" bodyfile="include/geolib/Shape.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgeo_1_1Shape_1a1d6ae03b4a06eb3d86dd918c1a2a5a30" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool geo::Shape::bounding_box_cache_valid_</definition>
        <argsstring></argsstring>
        <name>bounding_box_cache_valid_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="116" column="19" bodyfile="include/geolib/Shape.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1Shape_1a9ff738ec054dd0577dc948609db42475" prot="private" static="no" mutable="yes">
        <type><ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref></type>
        <definition>Vector3 geo::Shape::bounding_box_max_cache_</definition>
        <argsstring></argsstring>
        <name>bounding_box_max_cache_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="118" column="21" bodyfile="include/geolib/Shape.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgeo_1_1Shape_1a20119d9bcc304168a5d536131f74bf63" prot="private" static="no" mutable="yes">
        <type><ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref></type>
        <definition>Vector3 geo::Shape::bounding_box_min_cache_</definition>
        <argsstring></argsstring>
        <name>bounding_box_min_cache_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="117" column="21" bodyfile="include/geolib/Shape.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgeo_1_1Shape_1ab6819adb192ee12c2032bd13fabb2c83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classgeo_1_1Shape" kindref="compound">Shape</ref> *</type>
        <definition>Shape * geo::Shape::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplementedby refid="classgeo_1_1Box_1ae94161a48df5c14add8430e23141a6a8">clone</reimplementedby>
        <reimplementedby refid="classgeo_1_1Octree_1aa169117aa4995a1963da6e5874fbf84b">clone</reimplementedby>
        <reimplementedby refid="classgeo_1_1CompositeShape_1ad678b57d058304ff5f354ba331e4593b">clone</reimplementedby>
        <reimplementedby refid="classgeo_1_1HeightMap_1adf09fd4524448cf812a1490f9611903c">clone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="29" column="19" bodyfile="src/Shape.cpp" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Shape_1ae7769cb7528180ed71c1ef919d42cc37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool geo::Shape::contains</definition>
        <argsstring>(const Vector3 &amp;p) const</argsstring>
        <name>contains</name>
        <reimplementedby refid="classgeo_1_1CompositeShape_1a0884afeed1e68b0f1f90650fb61fef1e">contains</reimplementedby>
        <reimplementedby refid="classgeo_1_1Box_1a850fc297a334847227411c1d86e2f01b">contains</reimplementedby>
        <reimplementedby refid="classgeo_1_1Octree_1ad47791a28aac547ea9a38481b2207323">contains</reimplementedby>
        <param>
          <type>const <ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Determines whether a point p lies within the shape. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>point to test </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True means point p lies inside the shape</para>
</simplesect>
Let the line segment P connect points p and an arbitrary point p_out outside of the shape We count the number of intersections between P and the shape. A positive number means point p is inside the shape. We use plucker coordinates to determine whether or not a triangle intersects line segment P. more details <emphasis><ulink url="https://members.loria.fr/SLazard/ARC-Visi3D/Pant-project/files/Line_Segment_Triangle.html">https://members.loria.fr/SLazard/ARC-Visi3D/Pant-project/files/Line_Segment_Triangle.html</ulink></emphasis> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="54" column="18" bodyfile="src/Shape.cpp" bodystart="229" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Shape_1a99de8a314f524d2f3243befbb9e56dcb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool geo::Shape::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>empty Test whether the shape(mesh) is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the mesh is empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="104" column="25" bodyfile="include/geolib/Shape.h" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Shape_1ab05847f6e020356a637cf51882099c24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classgeo_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box geo::Shape::getBoundingBox</definition>
        <argsstring>() const</argsstring>
        <name>getBoundingBox</name>
        <reimplementedby refid="classgeo_1_1CompositeShape_1a9e817b7aef499a9d1bdb2c6ef48bcd59">getBoundingBox</reimplementedby>
        <reimplementedby refid="classgeo_1_1Box_1a839e324a385260d54ec8886527c5f8fa">getBoundingBox</reimplementedby>
        <briefdescription>
<para>Returns the smallest box which includes all mesh points. <ref refid="classgeo_1_1Box" kindref="compound">Box</ref> is not rotated, but matches the axis of the <ref refid="classgeo_1_1Shape" kindref="compound">Shape</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="classgeo_1_1Box" kindref="compound">geo::Box</ref> of the bounding box. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="67" column="17" bodyfile="src/Shape.cpp" bodystart="402" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Shape_1ab4ecd5a86b3dae9bd3f3108a2d9fa9d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double geo::Shape::getMaxRadius</definition>
        <argsstring>() const</argsstring>
        <name>getMaxRadius</name>
        <reimplementedby refid="classgeo_1_1CompositeShape_1a21e1bc0318646cce36ebce586257c7ec">getMaxRadius</reimplementedby>
        <reimplementedby refid="classgeo_1_1Octree_1a2f62a767283119193c6d04622c0bfe7f">getMaxRadius</reimplementedby>
        <reimplementedby refid="classgeo_1_1Box_1a7b947ee283056f60edb1d8e7f2465199">getMaxRadius</reimplementedby>
        <briefdescription>
<para>Calculate the maximum distance from the origin of the shape to any point of the shape. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum radius found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="60" column="20" bodyfile="src/Shape.cpp" bodystart="434" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Shape_1a8b5d477a7a1fd6b6e6e41e824b2feee9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classgeo_1_1Mesh" kindref="compound">Mesh</ref> &amp;</type>
        <definition>const Mesh &amp; geo::Shape::getMesh</definition>
        <argsstring>() const</argsstring>
        <name>getMesh</name>
        <reimplementedby refid="classgeo_1_1Octree_1acb57cae9ae1f518370a56d7e2f4fa533">getMesh</reimplementedby>
        <briefdescription>
<para>return the mesh defining the shape </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a constant reference to the mesh of the shape </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="73" column="24" bodyfile="src/Shape.cpp" bodystart="425" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Shape_1a1ac12f892c823caf90f7555e1fb98c62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool geo::Shape::intersect</definition>
        <argsstring>(const Ray &amp;r, float t0, float t1, double &amp;distance) const</argsstring>
        <name>intersect</name>
        <reimplementedby refid="classgeo_1_1HeightMap_1a4db382581ffa73a74b1d33aa92e5d788">intersect</reimplementedby>
        <reimplementedby refid="classgeo_1_1Box_1a6e1c482b427734224465c20a83fbb8c4">intersect</reimplementedby>
        <reimplementedby refid="classgeo_1_1CompositeShape_1a3b5780f34cefddc67d311ccc40abc434">intersect</reimplementedby>
        <reimplementedby refid="classgeo_1_1Octree_1ac6f7ba9d9e45b056bf4c25d88da96dc1">intersect</reimplementedby>
        <param>
          <type>const <ref refid="classgeo_1_1Ray" kindref="compound">Ray</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
<para>intersect: currently always throws a logic error </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t0</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>distance</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true when the ray intersects the shape </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="39" column="18" bodyfile="src/Shape.cpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Shape_1a3ba8194d47f9c6b31543ce22ac7778f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool geo::Shape::intersect</definition>
        <argsstring>(const Vector3 &amp;p, const double radius) const</argsstring>
        <name>intersect</name>
        <reimplementedby refid="classgeo_1_1CompositeShape_1ad8938b252b9678614b2130bf43289324">intersect</reimplementedby>
        <reimplementedby refid="classgeo_1_1Box_1a1e9c27ee406037af12b69bfe1d7a8337">intersect</reimplementedby>
        <param>
          <type>const <ref refid="classgeo_1_1Vector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Determines whether the shape intersects a sphere with center p. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>center of the sphere </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radius</parametername>
</parameternamelist>
<parameterdescription>
<para>radius of the sphere </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True means the sphere intersects the shape</para>
</simplesect>
Main logic: <emphasis><ulink url="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.49.9172&amp;rep=rep1&amp;type=pdf">http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.49.9172&amp;rep=rep1&amp;type=pdf</ulink></emphasis> Projection in triangle logic: <emphasis><ulink url="https://www.baeldung.com/cs/check-if-point-is-in-2d-triangle#1-mathematical-idea-2">https://www.baeldung.com/cs/check-if-point-is-in-2d-triangle#1-mathematical-idea-2</ulink></emphasis> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="47" column="18" bodyfile="src/Shape.cpp" bodystart="160" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Shape_1a50cedd1350ccef781c83c7812695eeb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void geo::Shape::setMesh</definition>
        <argsstring>(const Mesh &amp;mesh)</argsstring>
        <name>setMesh</name>
        <reimplementedby refid="classgeo_1_1CompositeShape_1a8084ec43015bdd94537487421e50d860">setMesh</reimplementedby>
        <reimplementedby refid="classgeo_1_1Box_1a20159e31c7352bcdedca8d85f1646f75">setMesh</reimplementedby>
        <param>
          <type>const <ref refid="classgeo_1_1Mesh" kindref="compound">Mesh</ref> &amp;</type>
          <declname>mesh</declname>
        </param>
        <briefdescription>
<para>set the <ref refid="classgeo_1_1Mesh" kindref="compound">Mesh</ref> Any child classes should throw a <ref refid="cpp/error/logic_error" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::logic_error</ref> in case the mesh should not be changed via <ref refid="classgeo_1_1Shape_1a50cedd1350ccef781c83c7812695eeb2" kindref="member">setMesh</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mesh</parametername>
</parameternamelist>
<parameterdescription>
<para>mesh to set </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="80" column="18" bodyfile="src/Shape.cpp" bodystart="429" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Shape_1a8094a10b0bbca152bd8d0da08f255c9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>geo::Shape::Shape</definition>
        <argsstring>()</argsstring>
        <name>Shape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="25" column="5" bodyfile="src/Shape.cpp" bodystart="139" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Shape_1a606be4fca6978f0a60e792854e6c5afc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool geo::Shape::write</definition>
        <argsstring>(std::ostream &amp;output) const</argsstring>
        <name>write</name>
        <param>
          <type><ref refid="cpp/io/basic_ostream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::ostream</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>write, serialise the shape </para>
        </briefdescription>
        <detaileddescription>
<para>Serialisation must encode enough information to reconstruct a class object using the &apos;read&apos; method <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>always true </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="89" column="18" bodyfile="src/Shape.cpp" bodystart="439" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="classgeo_1_1Shape_1a1e857e24797a6007ddeb8fb280ff7366" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>geo::Shape::~Shape</definition>
        <argsstring>()</argsstring>
        <name>~Shape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="27" column="13" bodyfile="src/Shape.cpp" bodystart="142" bodyend="143"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgeo_1_1Shape_1a78fdd351f1332234e258a98a115a25a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegeo_1aef28655bad0d2414bb89fe6dba28bad1" kindref="member">ShapePtr</ref></type>
        <definition>ShapePtr geo::Shape::read</definition>
        <argsstring>(std::istream &amp;input)</argsstring>
        <name>read</name>
        <param>
          <type><ref refid="cpp/io/basic_istream" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::istream</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>read serialised data from an input stream and create a shape </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream, is expected to follow the format as generated by the &apos;write&apos; method </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>shared pointer to the created shape </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/geolib/Shape.h" line="96" column="21" bodyfile="src/Shape.cpp" bodystart="471" bodyend="497"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A geometric description of a shape. </para>
    </briefdescription>
    <detaileddescription>
<para>Defines a shape using a triangle mesh. The origin of the shape is not necesarily in the centre of the shape. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>geo::Shape</label>
        <link refid="classgeo_1_1Shape"/>
      </node>
      <node id="4">
        <label>geo::HeightMap</label>
        <link refid="classgeo_1_1HeightMap"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>geo::Box</label>
        <link refid="classgeo_1_1Box"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>geo::CompositeShape</label>
        <link refid="classgeo_1_1CompositeShape"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>geo::Octree</label>
        <link refid="classgeo_1_1Octree"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>geo::Shape</label>
        <link refid="classgeo_1_1Shape"/>
        <childnode refid="2" relation="usage">
          <edgelabel>mesh_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>bounding_box_max_cache_</edgelabel>
          <edgelabel>bounding_box_min_cache_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>TYPE</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::vector&lt; geo::Vector3 &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="6">
        <label>geo::Vec3T&lt; T &gt;</label>
        <link refid="classgeo_1_1Vec3T"/>
      </node>
      <node id="4">
        <label>std::vector&lt; geo::TriangleI &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="2">
        <label>geo::Mesh</label>
        <link refid="classgeo_1_1Mesh"/>
        <childnode refid="3" relation="usage">
          <edgelabel>points_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>triangles_i_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>triangles_cache_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::vector&lt; geo::Triangle &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="7">
        <label>std::string</label>
        <link refid="cpp/string/basic_string" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="include/geolib/Shape.h" line="19" column="12" bodyfile="include/geolib/Shape.h" bodystart="19" bodyend="119"/>
    <listofallmembers>
      <member refid="classgeo_1_1Shape_1a1d6ae03b4a06eb3d86dd918c1a2a5a30" prot="private" virt="non-virtual"><scope>geo::Shape</scope><name>bounding_box_cache_valid_</name></member>
      <member refid="classgeo_1_1Shape_1a9ff738ec054dd0577dc948609db42475" prot="private" virt="non-virtual"><scope>geo::Shape</scope><name>bounding_box_max_cache_</name></member>
      <member refid="classgeo_1_1Shape_1a20119d9bcc304168a5d536131f74bf63" prot="private" virt="non-virtual"><scope>geo::Shape</scope><name>bounding_box_min_cache_</name></member>
      <member refid="classgeo_1_1Shape_1ab6819adb192ee12c2032bd13fabb2c83" prot="public" virt="virtual"><scope>geo::Shape</scope><name>clone</name></member>
      <member refid="classgeo_1_1Shape_1ae7769cb7528180ed71c1ef919d42cc37" prot="public" virt="virtual"><scope>geo::Shape</scope><name>contains</name></member>
      <member refid="classgeo_1_1Shape_1a99de8a314f524d2f3243befbb9e56dcb" prot="public" virt="virtual"><scope>geo::Shape</scope><name>empty</name></member>
      <member refid="classgeo_1_1Shape_1ab05847f6e020356a637cf51882099c24" prot="public" virt="virtual"><scope>geo::Shape</scope><name>getBoundingBox</name></member>
      <member refid="classgeo_1_1Shape_1ab4ecd5a86b3dae9bd3f3108a2d9fa9d1" prot="public" virt="virtual"><scope>geo::Shape</scope><name>getMaxRadius</name></member>
      <member refid="classgeo_1_1Shape_1a8b5d477a7a1fd6b6e6e41e824b2feee9" prot="public" virt="virtual"><scope>geo::Shape</scope><name>getMesh</name></member>
      <member refid="classgeo_1_1Shape_1ad2d8744585dcb094644b1caed04ac9ed" prot="private" virt="non-virtual"><scope>geo::Shape</scope><name>Importer</name></member>
      <member refid="classgeo_1_1Shape_1a1ac12f892c823caf90f7555e1fb98c62" prot="public" virt="virtual"><scope>geo::Shape</scope><name>intersect</name></member>
      <member refid="classgeo_1_1Shape_1a3ba8194d47f9c6b31543ce22ac7778f0" prot="public" virt="virtual"><scope>geo::Shape</scope><name>intersect</name></member>
      <member refid="classgeo_1_1Shape_1a786ce13699e5a9d8ac66aa59901532ab" prot="protected" virt="non-virtual"><scope>geo::Shape</scope><name>mesh_</name></member>
      <member refid="classgeo_1_1Shape_1a78fdd351f1332234e258a98a115a25a0" prot="public" virt="non-virtual"><scope>geo::Shape</scope><name>read</name></member>
      <member refid="classgeo_1_1Shape_1a50cedd1350ccef781c83c7812695eeb2" prot="public" virt="virtual"><scope>geo::Shape</scope><name>setMesh</name></member>
      <member refid="classgeo_1_1Shape_1a8094a10b0bbca152bd8d0da08f255c9e" prot="public" virt="non-virtual"><scope>geo::Shape</scope><name>Shape</name></member>
      <member refid="classgeo_1_1Shape_1a1a807ae1f21eafc3580a250805275d5b" prot="public" virt="non-virtual"><scope>geo::Shape</scope><name>TYPE</name></member>
      <member refid="classgeo_1_1Shape_1a606be4fca6978f0a60e792854e6c5afc" prot="public" virt="virtual"><scope>geo::Shape</scope><name>write</name></member>
      <member refid="classgeo_1_1Shape_1a1e857e24797a6007ddeb8fb280ff7366" prot="public" virt="virtual"><scope>geo::Shape</scope><name>~Shape</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
