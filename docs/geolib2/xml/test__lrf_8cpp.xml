<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__lrf_8cpp" kind="file" language="C++">
    <compoundname>test_lrf.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="LaserRangeFinder_8h" local="no">geolib/sensors/LaserRangeFinder.h</includes>
    <includes refid="datatypes_8h" local="no">geolib/datatypes.h</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="12">
        <label>vector</label>
        <link refid="cpp/header/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="7">
        <label>iostream</label>
        <link refid="cpp/header/iostream" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="9">
        <label>memory</label>
        <link refid="cpp/header/memory" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="3">
        <label>geolib/sensors/LaserRangeFinder.h</label>
        <link refid="LaserRangeFinder_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>geolib/math_types.h</label>
        <link refid="math__types_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>array</label>
        <link refid="cpp/header/array" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="11">
        <label>climits</label>
        <link refid="cpp/header/climits" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
      </node>
      <node id="5">
        <label>datatypes.h</label>
        <link refid="datatypes_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>geolib/Ray.h</label>
        <link refid="Ray_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>test_lrf.cpp</label>
        <link refid="test__lrf_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cmath</label>
        <link refid="cpp/header/cmath" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </incdepgraph>
    <innerclass refid="classTestLRF" prot="public">TestLRF</innerclass>
    <innerclass refid="classTestLRF2" prot="public">TestLRF2</innerclass>
    <innerclass refid="classTestLRF3" prot="public">TestLRF3</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__lrf_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_lrf.cpp" line="178" column="5" bodyfile="test/test_lrf.cpp" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="test__lrf_8cpp_1a807583276b868516fdf5d083ac5bc6a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TestLRF, getAngleUpperIndexUnitCircle)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTestLRF" kindref="compound">TestLRF</ref></type>
        </param>
        <param>
          <type>getAngleUpperIndexUnitCircle</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_lrf.cpp" line="165" column="1" bodyfile="test/test_lrf.cpp" bodystart="165" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="test__lrf_8cpp_1a25ed213930da6bd4cce7e6878a414f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TestLRF, renderLineBack)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTestLRF" kindref="compound">TestLRF</ref></type>
        </param>
        <param>
          <type>renderLineBack</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_lrf.cpp" line="93" column="1" bodyfile="test/test_lrf.cpp" bodystart="93" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="test__lrf_8cpp_1af77c93a4f9768496bb5a01eb31dab432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TestLRF, renderLineFront)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTestLRF" kindref="compound">TestLRF</ref></type>
        </param>
        <param>
          <type>renderLineFront</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_lrf.cpp" line="65" column="1" bodyfile="test/test_lrf.cpp" bodystart="65" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="test__lrf_8cpp_1a00492b7ed5d01d5c2cadc1bef36f5dcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TestLRF, renderLineLeft)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTestLRF" kindref="compound">TestLRF</ref></type>
        </param>
        <param>
          <type>renderLineLeft</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_lrf.cpp" line="75" column="1" bodyfile="test/test_lrf.cpp" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="test__lrf_8cpp_1a09304b49cbbdf57ba39a7f5d77059c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TestLRF, renderLineRight)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTestLRF" kindref="compound">TestLRF</ref></type>
        </param>
        <param>
          <type>renderLineRight</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_lrf.cpp" line="84" column="1" bodyfile="test/test_lrf.cpp" bodystart="84" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="test__lrf_8cpp_1a71a4d78d7bcf1ccd630f133e6051ab92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TestLRF2, getAngleUpperIndexAngle)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTestLRF2" kindref="compound">TestLRF2</ref></type>
        </param>
        <param>
          <type>getAngleUpperIndexAngle</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_lrf.cpp" line="147" column="1" bodyfile="test/test_lrf.cpp" bodystart="147" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="test__lrf_8cpp_1a533eb4b4943ab45a8e97f4f6fc8bcc5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TestLRF2, getAngleUpperIndexXY)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTestLRF2" kindref="compound">TestLRF2</ref></type>
        </param>
        <param>
          <type>getAngleUpperIndexXY</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_lrf.cpp" line="156" column="1" bodyfile="test/test_lrf.cpp" bodystart="156" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="test__lrf_8cpp_1aa0caf24c9450448f4019e9b4e430ad1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TestLRF3, renderLineRight2)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTestLRF3" kindref="compound">TestLRF3</ref></type>
        </param>
        <param>
          <type>renderLineRight2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_lrf.cpp" line="128" column="1" bodyfile="test/test_lrf.cpp" bodystart="128" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="test__lrf_8cpp_1a141327c1024e90a56dbb4797d9df0a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(TestLRF3, renderLineWeird)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classTestLRF3" kindref="compound">TestLRF3</ref></type>
        </param>
        <param>
          <type>renderLineWeird</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_lrf.cpp" line="103" column="1" bodyfile="test/test_lrf.cpp" bodystart="103" bodyend="126"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="LaserRangeFinder_8h" kindref="compound">geolib/sensors/LaserRangeFinder.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="datatypes_8h" kindref="compound">geolib/datatypes.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/cmath" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">cmath</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="classTestLRF" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTestLRF" kindref="compound">TestLRF</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>testing::Test</highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12" refid="classTestLRF_1a55d24d2b6514d2a2a64830ad4349ed54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTestLRF_1a55d24d2b6514d2a2a64830ad4349ed54" kindref="member">TestLRF</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle_min_=-M_PI,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle_max_=M_PI,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>range_min_=0.2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>range_max_=60.,<sp/>uint<sp/>n_beams_=9)<sp/>:</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTestLRF_1a5b2c7c1fdd9d7a5725c5aaf902eb8053" kindref="member">angle_min</ref>(angle_min_),<sp/><ref refid="classTestLRF_1a76864adb96a5da2750044420c9195ed1" kindref="member">angle_max</ref>(angle_max_),<sp/><ref refid="classTestLRF_1a420d3afbf90f7c8b308de3ed94c84930" kindref="member">range_min</ref>(range_min_),<sp/><ref refid="classTestLRF_1a8ccfeb527bde1472c81aad2e7a744664" kindref="member">range_max</ref>(range_max_),<sp/><ref refid="classTestLRF_1ad9181863e960a4fd92031e4a5b0fd835" kindref="member">n_beams</ref>(n_beams_)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="classTestLRF_1afd0f29aaf6be4c7e646cf82839c16886" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classTestLRF_1afd0f29aaf6be4c7e646cf82839c16886" kindref="member">~TestLRF</ref>()</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classTestLRF_1a26c22a256d5000a7f7c5ce1b0f1a7c5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTestLRF_1a26c22a256d5000a7f7c5ce1b0f1a7c5e" kindref="member">SetUp</ref>()</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="22"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTestLRF_1aa7452e9d5d70ff3086d3593700493c28" kindref="member">lrf</ref>.<ref refid="classgeo_1_1LaserRangeFinder_1ab856ae850e86b31842c797347655d903" kindref="member">setAngleLimits</ref>(<ref refid="classTestLRF_1a5b2c7c1fdd9d7a5725c5aaf902eb8053" kindref="member">angle_min</ref>,<sp/><ref refid="classTestLRF_1a76864adb96a5da2750044420c9195ed1" kindref="member">angle_max</ref>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTestLRF_1aa7452e9d5d70ff3086d3593700493c28" kindref="member">lrf</ref>.<ref refid="classgeo_1_1LaserRangeFinder_1a17d109053351a0764dd39d54b25d7b10" kindref="member">setNumBeams</ref>(<ref refid="classTestLRF_1ad9181863e960a4fd92031e4a5b0fd835" kindref="member">n_beams</ref>);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTestLRF_1aa7452e9d5d70ff3086d3593700493c28" kindref="member">lrf</ref>.<ref refid="classgeo_1_1LaserRangeFinder_1a63508cd57690f3ec1668994aaca4c4fa" kindref="member">setRangeLimits</ref>(<ref refid="classTestLRF_1a420d3afbf90f7c8b308de3ed94c84930" kindref="member">range_min</ref>,<sp/><ref refid="classTestLRF_1a8ccfeb527bde1472c81aad2e7a744664" kindref="member">range_max</ref>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTestLRF_1a188083c08bc55840aeb2dc4957519b76" kindref="member">ranges</ref>.<ref refid="cpp/container/vector/resize" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">resize</ref>(<ref refid="classTestLRF_1ad9181863e960a4fd92031e4a5b0fd835" kindref="member">n_beams</ref>,<sp/><ref refid="classTestLRF_1a8ccfeb527bde1472c81aad2e7a744664" kindref="member">range_max</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="classTestLRF_1aa7452e9d5d70ff3086d3593700493c28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1LaserRangeFinder" kindref="compound">geo::LaserRangeFinder</ref><sp/><ref refid="classTestLRF_1aa7452e9d5d70ff3086d3593700493c28" kindref="member">lrf</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classTestLRF_1a5b2c7c1fdd9d7a5725c5aaf902eb8053" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classTestLRF_1a5b2c7c1fdd9d7a5725c5aaf902eb8053" kindref="member">angle_min</ref>;</highlight></codeline>
<codeline lineno="33" refid="classTestLRF_1a76864adb96a5da2750044420c9195ed1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classTestLRF_1a76864adb96a5da2750044420c9195ed1" kindref="member">angle_max</ref>;</highlight></codeline>
<codeline lineno="34" refid="classTestLRF_1a420d3afbf90f7c8b308de3ed94c84930" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classTestLRF_1a420d3afbf90f7c8b308de3ed94c84930" kindref="member">range_min</ref>;</highlight></codeline>
<codeline lineno="35" refid="classTestLRF_1a8ccfeb527bde1472c81aad2e7a744664" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classTestLRF_1a8ccfeb527bde1472c81aad2e7a744664" kindref="member">range_max</ref>;</highlight></codeline>
<codeline lineno="36" refid="classTestLRF_1ad9181863e960a4fd92031e4a5b0fd835" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint<sp/><ref refid="classTestLRF_1ad9181863e960a4fd92031e4a5b0fd835" kindref="member">n_beams</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classTestLRF_1a188083c08bc55840aeb2dc4957519b76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector&lt;double&gt;</ref><sp/><ref refid="classTestLRF_1a188083c08bc55840aeb2dc4957519b76" kindref="member">ranges</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="classTestLRF2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTestLRF2" kindref="compound">TestLRF2</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classTestLRF" kindref="compound">TestLRF</ref></highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44" refid="classTestLRF2_1a0d19cc7cd4d96a13d7084ded2351be5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTestLRF2_1a0d19cc7cd4d96a13d7084ded2351be5e" kindref="member">TestLRF2</ref>()<sp/>:<sp/><ref refid="classTestLRF" kindref="compound">TestLRF</ref>(-M_PI_2,<sp/>M_PI_2)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classTestLRF2_1aa6509debc6238ae50df0d77b5818cc5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classTestLRF2_1aa6509debc6238ae50df0d77b5818cc5c" kindref="member">~TestLRF2</ref>()</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classTestLRF3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classTestLRF3" kindref="compound">TestLRF3</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classTestLRF" kindref="compound">TestLRF</ref></highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="56" refid="classTestLRF3_1a7ec8a0d69cff3289d4d26cb567efbfc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTestLRF3_1a7ec8a0d69cff3289d4d26cb567efbfc8" kindref="member">TestLRF3</ref>()<sp/>:<sp/><ref refid="classTestLRF" kindref="compound">TestLRF</ref>(-M_PI_2,<sp/>M_PI_2,<sp/>0.2,<sp/>60.,<sp/>30)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="classTestLRF3_1aa414d41e7a6df75fbc9ab5f959fde01e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classTestLRF3_1aa414d41e7a6df75fbc9ab5f959fde01e" kindref="member">~TestLRF3</ref>()</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="test__lrf_8cpp_1af77c93a4f9768496bb5a01eb31dab432" refkind="member"><highlight class="normal"><ref refid="test__lrf_8cpp_1af77c93a4f9768496bb5a01eb31dab432" kindref="member">TEST_F</ref>(<ref refid="classTestLRF" kindref="compound">TestLRF</ref>,<sp/>renderLineFront)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1Vec2T" kindref="compound">geo::Vec2d</ref><sp/>p1(1.0,<sp/>-1.0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1Vec2T" kindref="compound">geo::Vec2d</ref><sp/>p2(1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>lrf.renderLine(p1,<sp/>p2,<sp/>ranges);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(0.0)<sp/>-1,<sp/>4);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(ranges[lrf.getAngleUpperIndex(0.0)<sp/>-1],<sp/>1);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="test__lrf_8cpp_1a00492b7ed5d01d5c2cadc1bef36f5dcb" refkind="member"><highlight class="normal"><ref refid="test__lrf_8cpp_1af77c93a4f9768496bb5a01eb31dab432" kindref="member">TEST_F</ref>(<ref refid="classTestLRF" kindref="compound">TestLRF</ref>,<sp/>renderLineLeft)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1Vec2T" kindref="compound">geo::Vec2d</ref><sp/>p1(1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1Vec2T" kindref="compound">geo::Vec2d</ref><sp/>p2(-1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>lrf.renderLine(p1,<sp/>p2,<sp/>ranges);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(ranges[lrf.getAngleUpperIndex(M_PI_2)<sp/>-1],<sp/>1.0);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="test__lrf_8cpp_1a09304b49cbbdf57ba39a7f5d77059c85" refkind="member"><highlight class="normal"><ref refid="test__lrf_8cpp_1af77c93a4f9768496bb5a01eb31dab432" kindref="member">TEST_F</ref>(<ref refid="classTestLRF" kindref="compound">TestLRF</ref>,<sp/>renderLineRight)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1Vec2T" kindref="compound">geo::Vec2d</ref><sp/>p1(-1.0,<sp/>-1.0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1Vec2T" kindref="compound">geo::Vec2d</ref><sp/>p2(1.0,<sp/>-1.0);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>lrf.renderLine(p1,<sp/>p2,<sp/>ranges);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(ranges[lrf.getAngleUpperIndex(-M_PI_2)<sp/>-1],<sp/>1.0);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="test__lrf_8cpp_1a25ed213930da6bd4cce7e6878a414f40" refkind="member"><highlight class="normal"><ref refid="test__lrf_8cpp_1af77c93a4f9768496bb5a01eb31dab432" kindref="member">TEST_F</ref>(<ref refid="classTestLRF" kindref="compound">TestLRF</ref>,<sp/>renderLineBack)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1Vec2T" kindref="compound">geo::Vec2d</ref><sp/>p1(-1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1Vec2T" kindref="compound">geo::Vec2d</ref><sp/>p2(-1.0,<sp/>-1.0);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>lrf.renderLine(p1,<sp/>p2,<sp/>ranges);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(ranges[lrf.getAngleUpperIndex(-M_PI)<sp/>-1],<sp/>1.0);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(ranges[lrf.getAngleUpperIndex(M_PI)<sp/>-<sp/>1],<sp/>1.0);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="test__lrf_8cpp_1a141327c1024e90a56dbb4797d9df0a33" refkind="member"><highlight class="normal"><ref refid="test__lrf_8cpp_1af77c93a4f9768496bb5a01eb31dab432" kindref="member">TEST_F</ref>(<ref refid="classTestLRF3" kindref="compound">TestLRF3</ref>,<sp/>renderLineWeird)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a1<sp/>=<sp/>angle_max<sp/>-<sp/>0.1;<sp/></highlight><highlight class="comment">//<sp/>Point<sp/>in<sp/>view<sp/>of<sp/>the<sp/>robot<sp/>-&gt;<sp/>angle_min<sp/>&lt;<sp/>a1<sp/>&lt;<sp/>angle_max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a2<sp/>=<sp/>angle_min<sp/>-<sp/>1.0;<sp/></highlight><highlight class="comment">//<sp/>Point<sp/>in<sp/>the<sp/>blind<sp/>spot<sp/>of<sp/>the<sp/>robot<sp/>but<sp/>with<sp/>a<sp/>positive<sp/>angle<sp/>-&gt;<sp/>a2<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>connecting<sp/>these<sp/>two<sp/>points<sp/>should<sp/>pass<sp/>behind<sp/>the<sp/>robot<sp/>-&gt;<sp/>a1<sp/>-<sp/>a2<sp/>&gt;<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>However<sp/>the<sp/>difference<sp/>between<sp/>the<sp/>a1<sp/>and<sp/>the<sp/>lower<sp/>angle<sp/>limit<sp/>is<sp/>less<sp/>than<sp/>half<sp/>a<sp/>circle<sp/>-&gt;<sp/>a1<sp/>+<sp/>a_max<sp/>&lt;<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1Vec2T" kindref="compound">geo::Vec2d</ref><sp/>p1(cos(a1),<sp/>sin(a1));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1Vec2T" kindref="compound">geo::Vec2d</ref><sp/>p2(cos(a2),<sp/>sin(a2));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>lrf.renderLine(p1,<sp/>p2,<sp/>ranges);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>upper_index_a1<sp/>=<sp/>lrf.getAngleUpperIndex(a1);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>rendered<sp/>line<sp/>passes<sp/>behind<sp/>the<sp/>robot.<sp/>But<sp/>not<sp/>through<sp/>the<sp/>blindspot.<sp/>Therefore<sp/>the<sp/>first<sp/>index<sp/>should<sp/>remain<sp/>untouched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint<sp/>i<sp/>=<sp/>0;<sp/>i&lt;upper_index_a1-1;<sp/>++i)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(ranges[i],<sp/>range_max)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Range<sp/>at<sp/>index<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>should<sp/>not<sp/>be<sp/>rendered.<sp/>Instead<sp/>is<sp/>rendered<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ranges[i];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>a1<sp/>we<sp/>should<sp/>see<sp/>the<sp/>switch<sp/>between<sp/>rendered<sp/>and<sp/>not<sp/>rendered.<sp/>indices<sp/>above<sp/>a1<sp/>should<sp/>be<sp/>rendered.<sp/>Because<sp/>points<sp/>lie<sp/>on<sp/>a<sp/>unit<sp/>circle<sp/>they<sp/>should<sp/>be<sp/>&lt;=<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint<sp/>i<sp/>=<sp/>upper_index_a1;<sp/>i&lt;n_beams;<sp/>++i)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_LE(ranges[i],<sp/>1.)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Range<sp/>at<sp/>index<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>should<sp/>be<sp/>rendered<sp/>to<sp/>&lt;=1.<sp/>Instead<sp/>its<sp/>value<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ranges[i];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="test__lrf_8cpp_1aa0caf24c9450448f4019e9b4e430ad1f" refkind="member"><highlight class="normal"><ref refid="test__lrf_8cpp_1af77c93a4f9768496bb5a01eb31dab432" kindref="member">TEST_F</ref>(<ref refid="classTestLRF3" kindref="compound">TestLRF3</ref>,<sp/>renderLineRight2)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1Vec2T" kindref="compound">geo::Vec2d</ref><sp/>p1(-1.0,<sp/>-1.0);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classgeo_1_1Vec2T" kindref="compound">geo::Vec2d</ref><sp/>p2(1.0,<sp/>-1.0);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>lrf.renderLine(p1,<sp/>p2,<sp/>ranges);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>upper_index_p2<sp/>=<sp/>lrf.getAngleUpperIndex(p2.<ref refid="classgeo_1_1Vec2T_1a476c2f7cacbf6b233746ab18f2a87c54" kindref="member">x</ref>,<sp/>p2.<ref refid="classgeo_1_1Vec2T_1a506e3148ad901feea9e7658a4d35fe8b" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>rendered<sp/>line<sp/>passes<sp/>the<sp/>robot<sp/>on<sp/>the<sp/>right<sp/>and<sp/>ends<sp/>in<sp/>the<sp/>blindspot.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint<sp/>i<sp/>=<sp/>0;<sp/>i&lt;upper_index_p2-1;<sp/>++i)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_LE(ranges[i],<sp/>sqrt(2))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Range<sp/>at<sp/>index<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>should<sp/>be<sp/>rendered<sp/>to<sp/>&lt;=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sqrt(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.<sp/>Instead<sp/>its<sp/>value<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ranges[i];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint<sp/>i<sp/>=<sp/>upper_index_p2;<sp/>i&lt;n_beams;<sp/>++i)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(ranges[i],<sp/>range_max)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Range<sp/>at<sp/>index<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>should<sp/>not<sp/>be<sp/>rendered.<sp/>Instead<sp/>is<sp/>rendered<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ranges[i];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="test__lrf_8cpp_1a71a4d78d7bcf1ccd630f133e6051ab92" refkind="member"><highlight class="normal"><ref refid="test__lrf_8cpp_1af77c93a4f9768496bb5a01eb31dab432" kindref="member">TEST_F</ref>(<ref refid="classTestLRF2" kindref="compound">TestLRF2</ref>,<sp/>getAngleUpperIndexAngle)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(1.5*angle_min),<sp/>0);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(angle_min),<sp/>1);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(0.5*angle_min<sp/>+<sp/>0.5*angle_max),<sp/><ref refid="cpp/numeric/math/floor" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::floor</ref>(0.5*n_beams-0.5)+1);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(angle_max),<sp/>n_beams);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(1.5*angle_max),<sp/>n_beams);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="test__lrf_8cpp_1a533eb4b4943ab45a8e97f4f6fc8bcc5d" refkind="member"><highlight class="normal"><ref refid="test__lrf_8cpp_1af77c93a4f9768496bb5a01eb31dab432" kindref="member">TEST_F</ref>(<ref refid="classTestLRF2" kindref="compound">TestLRF2</ref>,<sp/>getAngleUpperIndexXY)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(cos(1.5*angle_min),<sp/>sin(1.5*angle_min)),<sp/>0);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(cos(angle_min),<sp/>sin(angle_min)),<sp/>1);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(cos(0.5*angle_min<sp/>+<sp/>0.5*angle_max),<sp/>sin(0.5*angle_min<sp/>+<sp/>0.5*angle_max)),<sp/><ref refid="cpp/numeric/math/floor" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::floor</ref>(0.5*n_beams<sp/>-<sp/>0.5)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(cos(angle_max),<sp/>sin(angle_max)),<sp/>n_beams);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(cos(1.5*angle_max),<sp/>sin(1.5*angle_max)),<sp/>n_beams);</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="test__lrf_8cpp_1a807583276b868516fdf5d083ac5bc6a1" refkind="member"><highlight class="normal"><ref refid="test__lrf_8cpp_1af77c93a4f9768496bb5a01eb31dab432" kindref="member">TEST_F</ref>(<ref refid="classTestLRF" kindref="compound">TestLRF</ref>,<sp/>getAngleUpperIndexUnitCircle)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(-1.0,<sp/>0.0)-1,<sp/>8);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(-1.0,<sp/>-1.0)-1,<sp/>1);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(0.0,<sp/>-1.0)-1,<sp/>2);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(1.0,<sp/>-1.0)-1,<sp/>3);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(1.0,<sp/>0.0)-1,<sp/>4);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(1.0,<sp/>1.0)-1,<sp/>5);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(0.0,<sp/>1.0)-1,<sp/>6);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(-1.0,<sp/>1.0)-1,<sp/>7);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(lrf.getAngleUpperIndex(0.0,<sp/>0.0),<sp/>5);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="test__lrf_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__lrf_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="test/test_lrf.cpp"/>
  </compounddef>
</doxygen>
