<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classchallenge__hand__me__that_1_1identify__object_1_1IdentifyObject" kind="class" language="Python" prot="public">
    <compoundname>challenge_hand_me_that::identify_object::IdentifyObject</compoundname>
    <basecompoundref prot="public" virt="non-virtual">StateMachine</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classchallenge__hand__me__that_1_1identify__object_1_1IdentifyObject_1a84ee085db91a65c3e8a713b9219ccae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def challenge_hand_me_that.identify_object.IdentifyObject.__init__</definition>
        <argsstring>(self, robot, items, arm)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type><ref refid="namespacechallenge__hand__me__that_1_1identify__object_1a72372fb607848562d3a3c9c7141f5cc3" kindref="member">robot</ref></type>
          <defname>robot</defname>
        </param>
        <param>
          <type>items</type>
          <defname>items</defname>
        </param>
        <param>
          <type><ref refid="namespacechallenge__hand__me__that_1_1identify__object_1aaeaacae7e020963ba24d4ed6e88487dd" kindref="member">arm</ref></type>
          <defname>arm</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Has the robot points to the object that was pointed to by the operator.

This is based on the &apos;Grab&apos; state, with difference that pickup is changed, i.e., without closing gripper.

:param robot: Robot to use
:param items: Designator that resolves to the list of items to point.
:param arm: Designator that resolves to the arm to use for grabbing. Eg. UnoccupiedArmDesignator
:return:
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/challenge_hand_me_that/identify_object.py" line="158" column="1" bodyfile="src/challenge_hand_me_that/identify_object.py" bodystart="158" bodyend="231"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>challenge_hand_me_that.identify_object.IdentifyObject</label>
        <link refid="classchallenge__hand__me__that_1_1identify__object_1_1IdentifyObject"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>StateMachine</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>challenge_hand_me_that.identify_object.IdentifyObject</label>
        <link refid="classchallenge__hand__me__that_1_1identify__object_1_1IdentifyObject"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>StateMachine</label>
      </node>
    </collaborationgraph>
    <location file="src/challenge_hand_me_that/identify_object.py" line="157" column="1" bodyfile="src/challenge_hand_me_that/identify_object.py" bodystart="157" bodyend="232"/>
    <listofallmembers>
      <member refid="classchallenge__hand__me__that_1_1identify__object_1_1IdentifyObject_1a84ee085db91a65c3e8a713b9219ccae4" prot="public" virt="non-virtual"><scope>challenge_hand_me_that::identify_object::IdentifyObject</scope><name>__init__</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
