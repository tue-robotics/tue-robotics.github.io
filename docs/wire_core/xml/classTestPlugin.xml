<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classTestPlugin" kind="class" language="C++" prot="public">
    <compoundname>TestPlugin</compoundname>
    <basecompoundref refid="classmhf_1_1IStateEstimator" prot="public" virt="non-virtual">mhf::IStateEstimator</basecompoundref>
    <includes refid="test__plugin_8h" local="no">test_plugin.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classTestPlugin_1a105f4f0d38a5c072434a7a3df09d27ec" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool TestPlugin::bool_param_</definition>
        <argsstring></argsstring>
        <name>bool_param_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="141" column="10" bodyfile="test/test_plugin.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classTestPlugin_1ac41584f417cbac8e58ab912b9392457d" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double TestPlugin::double_param_</definition>
        <argsstring></argsstring>
        <name>double_param_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="142" column="12" bodyfile="test/test_plugin.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classTestPlugin_1a9525d974418d342be245a9d86010b1c4" prot="protected" static="no" mutable="no">
        <type><ref refid="classpbl_1_1PDF" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/problib/tags">pbl::PDF</ref> *</type>
        <definition>pbl::PDF* TestPlugin::pdf_</definition>
        <argsstring></argsstring>
        <name>pdf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="139" column="14" bodyfile="test/test_plugin.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classTestPlugin_1a567dd2f74351f3488186e5c3aa19534f" prot="protected" static="no" mutable="no">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string TestPlugin::string_param_</definition>
        <argsstring></argsstring>
        <name>string_param_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="143" column="17" bodyfile="test/test_plugin.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classTestPlugin_1a0c5d456ce07d9a532f6c6d9500e80d42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classTestPlugin" kindref="compound">TestPlugin</ref> *</type>
        <definition>TestPlugin * TestPlugin::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="classmhf_1_1IStateEstimator_1a10ab7cd2f9ee963ff8eb0f5182a32904">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="93" column="24" bodyfile="test/test_plugin.cpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classTestPlugin_1abbb2b784acfd309015b26cc9fee7bb4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="classpbl_1_1PDF" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/problib/tags">pbl::PDF</ref> &amp;</type>
        <definition>const pbl::PDF &amp; TestPlugin::getValue</definition>
        <argsstring>() const</argsstring>
        <name>getValue</name>
        <reimplements refid="classmhf_1_1IStateEstimator_1aadaf2529f2619c59f6ebc8915f04bb11">getValue</reimplements>
        <briefdescription>
<para>Returns the current estimated state value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current state, i.e., the current attribute value represented as probability density function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="111" column="20" bodyfile="test/test_plugin.cpp" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classTestPlugin_1ac357a470b7db7a57493bee194a8d19ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void TestPlugin::propagate</definition>
        <argsstring>(const mhf::Time &amp;time)</argsstring>
        <name>propagate</name>
        <reimplements refid="classmhf_1_1IStateEstimator_1ae93bd3b893053fb1660b12eb41c4cae6">propagate</reimplements>
        <param>
          <type>const <ref refid="namespacemhf_1ae209e58ac587543af50a25222aeda18e" kindref="member">mhf::Time</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Propagates the state, but since the state is fixed, propagate will do nothing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="104" column="18" bodyfile="test/test_plugin.cpp" bodystart="65" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classTestPlugin_1a8412db004393cc4e5519aeb88a46b6d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void TestPlugin::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <reimplements refid="classmhf_1_1IStateEstimator_1aca0803c04a17469a27334b6e6089eaeb">reset</reimplements>
        <briefdescription>
<para>Resets the state, but since the state is fixed, reset will do nothing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="109" column="18" bodyfile="test/test_plugin.cpp" bodystart="68" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classTestPlugin_1a4e28a9863b25510c3277d55e15e9a528" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool TestPlugin::setParameter</definition>
        <argsstring>(const std::string &amp;param, bool b)</argsstring>
        <name>setParameter</name>
        <reimplements refid="classmhf_1_1IStateEstimator_1a265a58f62f73731a85179ab4f465aa0a">setParameter</reimplements>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Set a boolean parameter of this state estimator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The boolean value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the parameter was known to the estimator; false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="119" column="10" bodyfile="test/test_plugin.cpp" bodystart="75" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classTestPlugin_1a99181569d50dac69d1c3e075400d04de" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool TestPlugin::setParameter</definition>
        <argsstring>(const std::string &amp;param, const std::string &amp;s)</argsstring>
        <name>setParameter</name>
        <reimplements refid="classmhf_1_1IStateEstimator_1ab2e657eef008c37181cb650b14692f4f">setParameter</reimplements>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Set a string parameter of this state estimator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The string value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the parameter was known to the estimator; false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="135" column="10" bodyfile="test/test_plugin.cpp" bodystart="93" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classTestPlugin_1ac94afe8dd23b1ef0ba0185f4c2d24621" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool TestPlugin::setParameter</definition>
        <argsstring>(const std::string &amp;param, double v)</argsstring>
        <name>setParameter</name>
        <reimplements refid="classmhf_1_1IStateEstimator_1aea2e3fa3e7ee39155e556262abb086c7">setParameter</reimplements>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>param</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Set a real-valued parameter of this state estimator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The float value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns true if the parameter was known to the estimator; false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="127" column="10" bodyfile="test/test_plugin.cpp" bodystart="84" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classTestPlugin_1a7ba0585e22aa70b5c47cb5811af287a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TestPlugin::TestPlugin</definition>
        <argsstring>()</argsstring>
        <name>TestPlugin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="85" column="5" bodyfile="test/test_plugin.cpp" bodystart="39" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classTestPlugin_1ac2f0096beeffb0d2106fb86554370bd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TestPlugin::TestPlugin</definition>
        <argsstring>(const pbl::PDF &amp;pdf)</argsstring>
        <name>TestPlugin</name>
        <param>
          <type>const <ref refid="classpbl_1_1PDF" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/problib/tags">pbl::PDF</ref> &amp;</type>
          <declname>pdf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="87" column="5" bodyfile="test/test_plugin.cpp" bodystart="42" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classTestPlugin_1afd15adbc7912f8ef2e52e96d036f8fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TestPlugin::TestPlugin</definition>
        <argsstring>(const TestPlugin &amp;orig)</argsstring>
        <name>TestPlugin</name>
        <param>
          <type>const <ref refid="classTestPlugin" kindref="compound">TestPlugin</ref> &amp;</type>
          <declname>orig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="89" column="5" bodyfile="test/test_plugin.cpp" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classTestPlugin_1a5a45d2d784e90c34d5d9d3f5c6a88063" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void TestPlugin::update</definition>
        <argsstring>(const pbl::PDF &amp;z, const mhf::Time &amp;time)</argsstring>
        <name>update</name>
        <reimplements refid="classmhf_1_1IStateEstimator_1ab649cec130ec1be64cf8c64d607ec418">update</reimplements>
        <param>
          <type>const <ref refid="classpbl_1_1PDF" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/problib/tags">pbl::PDF</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="namespacemhf_1ae209e58ac587543af50a25222aeda18e" kindref="member">mhf::Time</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Performs an update, but since the state is fixed, update will do nothing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="98" column="18" bodyfile="test/test_plugin.cpp" bodystart="62" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classTestPlugin_1a12156aac452443ae3d2a9e5e9925a6ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>TestPlugin::~TestPlugin</definition>
        <argsstring>()</argsstring>
        <name>~TestPlugin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/test_plugin.h" line="91" column="13" bodyfile="test/test_plugin.cpp" bodystart="53" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classTestPlugin" kindref="compound">TestPlugin</ref> is a simple wrapper such that probability density function can be threaded as state estimator, i.e., <ref refid="classTestPlugin" kindref="compound">TestPlugin</ref> reflects a state but update, propagation and reset do not influence the state. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>mhf::IStateEstimator</label>
        <link refid="classmhf_1_1IStateEstimator"/>
      </node>
      <node id="1">
        <label>TestPlugin</label>
        <link refid="classTestPlugin"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>mhf::IStateEstimator</label>
        <link refid="classmhf_1_1IStateEstimator"/>
      </node>
      <node id="3">
        <label>pbl::PDF</label>
        <link refid="classpbl_1_1PDF" external="/home/docker/ros/noetic/system/build/docs/problib/tags"/>
      </node>
      <node id="1">
        <label>TestPlugin</label>
        <link refid="classTestPlugin"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>pdf_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>string_param_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::string</label>
        <link refid="cpp/string/basic_string" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="test/test_plugin.h" line="47" column="45" bodyfile="test/test_plugin.h" bodystart="47" bodyend="111"/>
    <listofallmembers>
      <member refid="classTestPlugin_1a105f4f0d38a5c072434a7a3df09d27ec" prot="protected" virt="non-virtual"><scope>TestPlugin</scope><name>bool_param_</name></member>
      <member refid="classTestPlugin_1a0c5d456ce07d9a532f6c6d9500e80d42" prot="public" virt="virtual"><scope>TestPlugin</scope><name>clone</name></member>
      <member refid="classTestPlugin_1ac41584f417cbac8e58ab912b9392457d" prot="protected" virt="non-virtual"><scope>TestPlugin</scope><name>double_param_</name></member>
      <member refid="classTestPlugin_1abbb2b784acfd309015b26cc9fee7bb4b" prot="public" virt="virtual"><scope>TestPlugin</scope><name>getValue</name></member>
      <member refid="classTestPlugin_1a9525d974418d342be245a9d86010b1c4" prot="protected" virt="non-virtual"><scope>TestPlugin</scope><name>pdf_</name></member>
      <member refid="classTestPlugin_1ac357a470b7db7a57493bee194a8d19ec" prot="public" virt="virtual"><scope>TestPlugin</scope><name>propagate</name></member>
      <member refid="classTestPlugin_1a8412db004393cc4e5519aeb88a46b6d8" prot="public" virt="virtual"><scope>TestPlugin</scope><name>reset</name></member>
      <member refid="classTestPlugin_1a4e28a9863b25510c3277d55e15e9a528" prot="public" virt="virtual"><scope>TestPlugin</scope><name>setParameter</name></member>
      <member refid="classTestPlugin_1ac94afe8dd23b1ef0ba0185f4c2d24621" prot="public" virt="virtual"><scope>TestPlugin</scope><name>setParameter</name></member>
      <member refid="classTestPlugin_1a99181569d50dac69d1c3e075400d04de" prot="public" virt="virtual"><scope>TestPlugin</scope><name>setParameter</name></member>
      <member refid="classTestPlugin_1a567dd2f74351f3488186e5c3aa19534f" prot="protected" virt="non-virtual"><scope>TestPlugin</scope><name>string_param_</name></member>
      <member refid="classTestPlugin_1a7ba0585e22aa70b5c47cb5811af287a3" prot="public" virt="non-virtual"><scope>TestPlugin</scope><name>TestPlugin</name></member>
      <member refid="classTestPlugin_1ac2f0096beeffb0d2106fb86554370bd5" prot="public" virt="non-virtual"><scope>TestPlugin</scope><name>TestPlugin</name></member>
      <member refid="classTestPlugin_1afd15adbc7912f8ef2e52e96d036f8fdb" prot="public" virt="non-virtual"><scope>TestPlugin</scope><name>TestPlugin</name></member>
      <member refid="classTestPlugin_1a5a45d2d784e90c34d5d9d3f5c6a88063" prot="public" virt="virtual"><scope>TestPlugin</scope><name>update</name></member>
      <member refid="classmhf_1_1IStateEstimator_1a368b89d4307185f95a45c50d19fdb4e8" prot="public" virt="virtual"><scope>TestPlugin</scope><name>~IStateEstimator</name></member>
      <member refid="classTestPlugin_1a12156aac452443ae3d2a9e5e9925a6ad" prot="public" virt="virtual"><scope>TestPlugin</scope><name>~TestPlugin</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
