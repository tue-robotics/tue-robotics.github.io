<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmhf_1_1Property" kind="class" language="C++" prot="public">
    <compoundname>mhf::Property</compoundname>
    <includes refid="Property_8h" local="no">Property.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classmhf_1_1Property_1a0afadd68acee9ceb74302fe2f5fa5feb" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacemhf_1a94d490545a8f0a0d1669b99c8094de83" kindref="member">Attribute</ref></type>
        <definition>Attribute mhf::Property::attribute_</definition>
        <argsstring></argsstring>
        <name>attribute_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="123" column="15" bodyfile="include/wire/core/Property.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmhf_1_1Property_1ae116b71f379c03eaf0dcf0bb99a3db17" prot="protected" static="no" mutable="no">
        <type><ref refid="classmhf_1_1IStateEstimator" kindref="compound">IStateEstimator</ref> *</type>
        <definition>IStateEstimator* mhf::Property::estimator_</definition>
        <argsstring></argsstring>
        <name>estimator_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="125" column="21" bodyfile="include/wire/core/Property.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmhf_1_1Property_1a8250798e7e214f91352020695fe79403" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacemhf_1ae209e58ac587543af50a25222aeda18e" kindref="member">Time</ref></type>
        <definition>Time mhf::Property::time_</definition>
        <argsstring></argsstring>
        <name>time_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="119" column="10" bodyfile="include/wire/core/Property.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmhf_1_1Property_1a7c5a309850d0e13a7e78e5cad63d7d41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmhf_1_1Property" kindref="compound">Property</ref> *</type>
        <definition>Property * mhf::Property::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="93" column="14" bodyfile="src/core/Property.cpp" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1a2ec258e048ce02f3a2a7d4a3bebe8bc9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacemhf_1a94d490545a8f0a0d1669b99c8094de83" kindref="member">Attribute</ref> &amp;</type>
        <definition>const Attribute &amp; mhf::Property::getAttribute</definition>
        <argsstring>() const</argsstring>
        <name>getAttribute</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="97" column="21" bodyfile="src/core/Property.cpp" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1a8d2935a3a72269e9b8deb353aadcb672" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classmhf_1_1IStateEstimator" kindref="compound">IStateEstimator</ref> &amp;</type>
        <definition>const IStateEstimator &amp; mhf::Property::getEstimator</definition>
        <argsstring>() const</argsstring>
        <name>getEstimator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="99" column="27" bodyfile="src/core/Property.cpp" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1a5bddbfe4673902b9006f48af4d6b0a1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double mhf::Property::getLikelihood</definition>
        <argsstring>(const pbl::PDF &amp;pdf) const</argsstring>
        <name>getLikelihood</name>
        <param>
          <type>const <ref refid="classpbl_1_1PDF" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/problib/tags">pbl::PDF</ref> &amp;</type>
          <declname>pdf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="113" column="20" bodyfile="src/core/Property.cpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1ab6e19e6a8dbc431710de22e3e7e70acc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespacemhf_1ae3b16130b980e82d9293026741d89598" kindref="member">ObjectID</ref> &amp;</type>
        <definition>const ObjectID&amp; mhf::Property::getObjectID</definition>
        <argsstring>() const</argsstring>
        <name>getObjectID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="105" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1a772a122ae9af465ca03e09ada865da3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classpbl_1_1PDF" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/problib/tags">pbl::PDF</ref> &amp;</type>
        <definition>const pbl::PDF &amp; mhf::Property::getValue</definition>
        <argsstring>() const</argsstring>
        <name>getValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="101" column="20" bodyfile="src/core/Property.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1abb75b15890f4ed5ab6effea7c04b3e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmhf_1_1Property" kindref="compound">Property</ref> &amp;</type>
        <definition>Property &amp; mhf::Property::operator=</definition>
        <argsstring>(const Property &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmhf_1_1Property" kindref="compound">Property</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="95" column="14" bodyfile="src/core/Property.cpp" bodystart="29" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1a52e90a82d5d36bac1681555462b52ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mhf::Property::propagate</definition>
        <argsstring>(const Time &amp;time)</argsstring>
        <name>propagate</name>
        <param>
          <type>const <ref refid="namespacemhf_1ae209e58ac587543af50a25222aeda18e" kindref="member">Time</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="109" column="10" bodyfile="src/core/Property.cpp" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1a1e7fd686546e5b71f938303734f19b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mhf::Property::Property</definition>
        <argsstring>(const Attribute &amp;attribute, const IStateEstimator &amp;bm, const ObjectID &amp;object_id=-1)</argsstring>
        <name>Property</name>
        <param>
          <type>const <ref refid="namespacemhf_1a94d490545a8f0a0d1669b99c8094de83" kindref="member">Attribute</ref> &amp;</type>
          <declname>attribute</declname>
        </param>
        <param>
          <type>const <ref refid="classmhf_1_1IStateEstimator" kindref="compound">IStateEstimator</ref> &amp;</type>
          <declname>bm</declname>
        </param>
        <param>
          <type>const <ref refid="namespacemhf_1ae3b16130b980e82d9293026741d89598" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="87" column="5" bodyfile="src/core/Property.cpp" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1aafc9ee6d37de40706a40585040a33fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>mhf::Property::Property</definition>
        <argsstring>(const Property &amp;orig)</argsstring>
        <name>Property</name>
        <param>
          <type>const <ref refid="classmhf_1_1Property" kindref="compound">Property</ref> &amp;</type>
          <declname>orig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="89" column="5" bodyfile="src/core/Property.cpp" bodystart="17" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1a7eaa1fd7c1fd7802c1d53d262d85b7e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mhf::Property::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="111" column="10" bodyfile="src/core/Property.cpp" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1a255d4deda2595e4c2b2abc54781bee39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string mhf::Property::toString</definition>
        <argsstring>(const std::string &amp;prefix=&quot;&quot;) const</argsstring>
        <name>toString</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>prefix</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="115" column="17" bodyfile="src/core/Property.cpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1a936039a90cbd5f9f916f747bc59a4ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mhf::Property::update</definition>
        <argsstring>(const pbl::PDF &amp;z, const Time &amp;time)</argsstring>
        <name>update</name>
        <param>
          <type>const <ref refid="classpbl_1_1PDF" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/problib/tags">pbl::PDF</ref> &amp;</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const <ref refid="namespacemhf_1ae209e58ac587543af50a25222aeda18e" kindref="member">Time</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="107" column="10" bodyfile="src/core/Property.cpp" bodystart="52" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classmhf_1_1Property_1ac961f5a44daae375e35be24f802a52dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>mhf::Property::~Property</definition>
        <argsstring>()</argsstring>
        <name>~Property</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wire/core/Property.h" line="91" column="13" bodyfile="src/core/Property.cpp" bodystart="21" bodyend="23"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>mhf::IStateEstimator</label>
        <link refid="classmhf_1_1IStateEstimator"/>
      </node>
      <node id="1">
        <label>mhf::Property</label>
        <link refid="classmhf_1_1Property"/>
        <childnode refid="2" relation="usage">
          <edgelabel>estimator_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/wire/core/Property.h" line="83" column="15" bodyfile="include/wire/core/Property.h" bodystart="83" bodyend="127"/>
    <listofallmembers>
      <member refid="classmhf_1_1Property_1a0afadd68acee9ceb74302fe2f5fa5feb" prot="protected" virt="non-virtual"><scope>mhf::Property</scope><name>attribute_</name></member>
      <member refid="classmhf_1_1Property_1a7c5a309850d0e13a7e78e5cad63d7d41" prot="public" virt="non-virtual"><scope>mhf::Property</scope><name>clone</name></member>
      <member refid="classmhf_1_1Property_1ae116b71f379c03eaf0dcf0bb99a3db17" prot="protected" virt="non-virtual"><scope>mhf::Property</scope><name>estimator_</name></member>
      <member refid="classmhf_1_1Property_1a2ec258e048ce02f3a2a7d4a3bebe8bc9" prot="public" virt="non-virtual"><scope>mhf::Property</scope><name>getAttribute</name></member>
      <member refid="classmhf_1_1Property_1a8d2935a3a72269e9b8deb353aadcb672" prot="public" virt="non-virtual"><scope>mhf::Property</scope><name>getEstimator</name></member>
      <member refid="classmhf_1_1Property_1a5bddbfe4673902b9006f48af4d6b0a1c" prot="public" virt="virtual"><scope>mhf::Property</scope><name>getLikelihood</name></member>
      <member refid="classmhf_1_1Property_1ab6e19e6a8dbc431710de22e3e7e70acc" prot="public" virt="non-virtual"><scope>mhf::Property</scope><name>getObjectID</name></member>
      <member refid="classmhf_1_1Property_1a772a122ae9af465ca03e09ada865da3d" prot="public" virt="non-virtual"><scope>mhf::Property</scope><name>getValue</name></member>
      <member refid="classmhf_1_1Property_1abb75b15890f4ed5ab6effea7c04b3e47" prot="public" virt="non-virtual"><scope>mhf::Property</scope><name>operator=</name></member>
      <member refid="classmhf_1_1Property_1a52e90a82d5d36bac1681555462b52ec3" prot="public" virt="non-virtual"><scope>mhf::Property</scope><name>propagate</name></member>
      <member refid="classmhf_1_1Property_1a1e7fd686546e5b71f938303734f19b98" prot="public" virt="non-virtual"><scope>mhf::Property</scope><name>Property</name></member>
      <member refid="classmhf_1_1Property_1aafc9ee6d37de40706a40585040a33fe4" prot="public" virt="non-virtual"><scope>mhf::Property</scope><name>Property</name></member>
      <member refid="classmhf_1_1Property_1a7eaa1fd7c1fd7802c1d53d262d85b7e5" prot="public" virt="non-virtual"><scope>mhf::Property</scope><name>reset</name></member>
      <member refid="classmhf_1_1Property_1a8250798e7e214f91352020695fe79403" prot="protected" virt="non-virtual"><scope>mhf::Property</scope><name>time_</name></member>
      <member refid="classmhf_1_1Property_1a255d4deda2595e4c2b2abc54781bee39" prot="public" virt="non-virtual"><scope>mhf::Property</scope><name>toString</name></member>
      <member refid="classmhf_1_1Property_1a936039a90cbd5f9f916f747bc59a4ee9" prot="public" virt="non-virtual"><scope>mhf::Property</scope><name>update</name></member>
      <member refid="classmhf_1_1Property_1ac961f5a44daae375e35be24f802a52dc" prot="public" virt="virtual"><scope>mhf::Property</scope><name>~Property</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
