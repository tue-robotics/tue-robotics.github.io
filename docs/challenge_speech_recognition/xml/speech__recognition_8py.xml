<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="speech__recognition_8py" kind="file" language="Python">
    <compoundname>speech_recognition.py</compoundname>
    <innernamespace refid="namespacespeech__recognition">speech_recognition</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacespeech__recognition" refkind="compound"><highlight class="comment">#!/usr/bin/python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>rospy</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>smach</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>robot_smach_states<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>states</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>robot_smach_states.util.designators<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>analyse_designators</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>direct_speech_recognition</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>indirect_speech_recognition</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="namespacespeech__recognition_1a2db73bca10c88e2d112e11e92f6f880b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacespeech__recognition_1ae11e2cec9b5bb0b3b4ad7d4400e72f5c" kindref="member">setup_statemachine</ref>(robot):</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>sm<sp/>=<sp/>smach.StateMachine(outcomes=[</highlight><highlight class="stringliteral">&apos;Done&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;Aborted&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">with</highlight><highlight class="normal"><sp/>sm:</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Start<sp/>challenge<sp/>via<sp/>StartChallengeRobust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(<sp/></highlight><highlight class="stringliteral">&quot;START_CHALLENGE_ROBUST&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>states.Initialize(robot),</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transitions={<sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;initialized&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;SAY_INTRO&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;abort&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Aborted&quot;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;SAY_INTRO&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>come<sp/>a<sp/>little<sp/>bit<sp/>closer<sp/>to<sp/>me,<sp/>talk<sp/>loudly<sp/>and,<sp/>very<sp/>important,<sp/>wait<sp/>for<sp/>the<sp/>ping!&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;SAY_1&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;SAY_1&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>ask<sp/>me<sp/>question<sp/>one&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;QUESTION_1&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;QUESTION_1&apos;</highlight><highlight class="normal">,<sp/><ref refid="classdirect__speech__recognition_1_1HearQuestion" kindref="compound">direct_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;SAY_2&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;SAY_2&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>ask<sp/>me<sp/>question<sp/>two&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;QUESTION_2&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;QUESTION_2&apos;</highlight><highlight class="normal">,<sp/><ref refid="classdirect__speech__recognition_1_1HearQuestion" kindref="compound">direct_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;SAY_3&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;SAY_3&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>ask<sp/>me<sp/>question<sp/>three&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;QUESTION_3&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;QUESTION_3&apos;</highlight><highlight class="normal">,<sp/><ref refid="classdirect__speech__recognition_1_1HearQuestion" kindref="compound">direct_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;SAY_4&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;SAY_4&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>ask<sp/>me<sp/>question<sp/>four&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;QUESTION_4&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;QUESTION_4&apos;</highlight><highlight class="normal">,<sp/><ref refid="classdirect__speech__recognition_1_1HearQuestion" kindref="compound">direct_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;SAY_5&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;SAY_5&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>ask<sp/>me<sp/>question<sp/>five&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;QUESTION_5&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;QUESTION_5&apos;</highlight><highlight class="normal">,<sp/><ref refid="classdirect__speech__recognition_1_1HearQuestion" kindref="compound">direct_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;TRANSITION&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;TRANSITION&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Let&apos;s<sp/>proceed<sp/>to<sp/>round<sp/>two!<sp/>yeah!&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2SAY_1&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2SAY_1&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>ask<sp/>me<sp/>question<sp/>one&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2QUESTION_1&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2QUESTION_1&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1HearQuestion" kindref="compound">indirect_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2TURN_1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not_answered&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;2SAY_2&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2TURN_1&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1Turn" kindref="compound">indirect_speech_recognition.Turn</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;turned&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2SAY_2&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2SAY_1A&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>repeat<sp/>your<sp/>question&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2QUESTION_1A&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2QUESTION_1A&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1HearQuestion" kindref="compound">indirect_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2SAY_2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not_answered&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;2SAY_2&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2SAY_2&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>ask<sp/>me<sp/>question<sp/>two&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2QUESTION_2&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2QUESTION_2&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1HearQuestion" kindref="compound">indirect_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2TURN_2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not_answered&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;2SAY_3&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2TURN_2&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1Turn" kindref="compound">indirect_speech_recognition.Turn</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;turned&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2SAY_3&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2SAY_2A&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>repeat<sp/>your<sp/>question&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2QUESTION_2A&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2QUESTION_2A&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1HearQuestion" kindref="compound">indirect_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2SAY_3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not_answered&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;2SAY_3&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2SAY_3&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>ask<sp/>me<sp/>question<sp/>three&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2QUESTION_3&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2QUESTION_3&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1HearQuestion" kindref="compound">indirect_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2TURN_3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not_answered&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;2SAY_4&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2TURN_3&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1Turn" kindref="compound">indirect_speech_recognition.Turn</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;turned&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2SAY_4&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2SAY_3A&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>repeat<sp/>your<sp/>question&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2QUESTION_3A&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2QUESTION_3A&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1HearQuestion" kindref="compound">indirect_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2SAY_4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not_answered&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;2SAY_4&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2SAY_4&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>ask<sp/>me<sp/>question<sp/>four&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2QUESTION_4&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2QUESTION_4&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1HearQuestion" kindref="compound">indirect_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2TURN_4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not_answered&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;2SAY_5&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2TURN_4&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1Turn" kindref="compound">indirect_speech_recognition.Turn</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;turned&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2SAY_5&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2SAY_4A&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>repeat<sp/>your<sp/>question&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2QUESTION_4A&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2QUESTION_4A&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1HearQuestion" kindref="compound">indirect_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2SAY_5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not_answered&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;2SAY_5&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2SAY_5&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>ask<sp/>me<sp/>question<sp/>five&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2QUESTION_5&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2QUESTION_5&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1HearQuestion" kindref="compound">indirect_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2TURN_5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not_answered&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;AT_END&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2TURN_5&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1Turn" kindref="compound">indirect_speech_recognition.Turn</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;turned&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;AT_END&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2SAY_5A&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>repeat<sp/>your<sp/>question&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;2QUESTION_5A&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;2QUESTION_5A&apos;</highlight><highlight class="normal">,<sp/><ref refid="classindirect__speech__recognition_1_1HearQuestion" kindref="compound">indirect_speech_recognition.HearQuestion</ref>(robot),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;answered&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;AT_END&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;not_answered&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;AT_END&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>smach.StateMachine.add(</highlight><highlight class="stringliteral">&apos;AT_END&apos;</highlight><highlight class="normal">,<sp/>states.Say(robot,<sp/></highlight><highlight class="stringliteral">&quot;That<sp/>was<sp/>all<sp/>folks!&quot;</highlight><highlight class="normal">),<sp/>transitions={<sp/></highlight><highlight class="stringliteral">&apos;spoken&apos;</highlight><highlight class="normal"><sp/>:</highlight><highlight class="stringliteral">&apos;Done&apos;</highlight><highlight class="normal">})</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>analyse_designators(sm,<sp/></highlight><highlight class="stringliteral">&quot;speech_recognition&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sm</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>rospy.init_node(</highlight><highlight class="stringliteral">&apos;challenge_speech_recognition_exec&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="namespacespeech__recognition_1ae11e2cec9b5bb0b3b4ad7d4400e72f5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>states.util.startup(setup_statemachine,<sp/>challenge_name=</highlight><highlight class="stringliteral">&quot;speech_recognition&quot;</highlight><highlight class="normal">)</highlight></codeline>
    </programlisting>
    <location file="src/speech_recognition.py"/>
  </compounddef>
</doxygen>
