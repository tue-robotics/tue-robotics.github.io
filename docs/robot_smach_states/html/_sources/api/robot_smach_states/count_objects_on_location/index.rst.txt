robot_smach_states.count_objects_on_location
============================================

.. py:module:: robot_smach_states.count_objects_on_location


Classes
-------

.. autoapisummary::

   robot_smach_states.count_objects_on_location.CountObjectsOnLocation
   robot_smach_states.count_objects_on_location.InspectAndCount


Module Contents
---------------

.. py:class:: CountObjectsOnLocation(robot, location, segmented_objects_designator, num_objects_designator, segmentation_area='on_top_of', object_type='', threshold=0.0)

   Bases: :py:obj:`smach.State`


   
   Constructor

   :param robot: robot object
   :param location: Where to look for objects?
   :param segmented_objects_designator: a VariableDesignator (resolve_type=ClassificationResult) that stores the
       classification of an object
   :param num_objects_designator: a VariableDesignator(resolve_type=int).writeable() that will store the number
       of objects
   :param segmentation_area: string defining where the objects are w.r.t. the entity, default = on_top_of
   :param threshold: float for classification score. Entities whose classification score is lower are ignored
       (i.e. are not added to the segmented_entity_ids_designator)


   .. py:attribute:: robot


   .. py:attribute:: location


   .. py:attribute:: segmentation_area
      :value: 'on_top_of'



   .. py:attribute:: threshold
      :value: 0.0



   .. py:attribute:: object_type
      :value: ''



   .. py:attribute:: num_objects_designator


   .. py:attribute:: segmented_objects_designator


   .. py:method:: execute(userdata=None)


.. py:class:: InspectAndCount(robot, where_to_count_designator, type_to_count_designator, count_designator)

   Bases: :py:obj:`smach.StateMachine`


   
   :param robot: robot object
   :param where_to_count_designator: Where to look for objects?
   :param type_to_count_designator: a VariableDesignator (resolve_type=string) that stores the type of the objects
       that should be counted
   :param count_designator:  VariableDesignator(resolve_type=int).writeable() that will store the number
       of objects


