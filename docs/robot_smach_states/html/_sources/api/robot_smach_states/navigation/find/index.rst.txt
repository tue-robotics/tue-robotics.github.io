robot_smach_states.navigation.find
==================================

.. py:module:: robot_smach_states.navigation.find


Attributes
----------

.. autoapisummary::

   robot_smach_states.navigation.find.__author__


Classes
-------

.. autoapisummary::

   robot_smach_states.navigation.find.CheckIfDescribedEntityAvailable
   robot_smach_states.navigation.find.Find


Functions
---------

.. autoapisummary::

   robot_smach_states.navigation.find.entities_from_description


Module Contents
---------------

.. py:data:: __author__
   :value: 'rokus'


.. py:function:: entities_from_description(robot, knowledge, entity_description, list_of_entity_ids=None)

   Query entities and return those that satisfy the given description

   @param robot: The robot object
   @param knowledge: Knowledge object
   @param entity_description: A dict that contains a 'type' field
   @param list_of_entity_ids: A list of entity ids to choose from (for example a result of a segment)

   @return: entities
       entities  - list of entities that fulfill the description
                   (each element has type Entity)


.. py:class:: CheckIfDescribedEntityAvailable(robot, knowledge, description_designator, found_entity_designator, candidate_entities_designator=None)

   Bases: :py:obj:`smach.State`


   Check if a described entity is in the world model


   .. py:attribute:: _robot


   .. py:attribute:: _knowledge


   .. py:attribute:: _description_designator


   .. py:attribute:: _found_entity_designator


   .. py:attribute:: _candidate_entities_designator
      :value: None



   .. py:method:: execute(userdata=None)


.. py:class:: Find(robot, knowledge, source_entity_designator, description_designator, found_entity_designator, area_name='on_top_of', navigation_area=None)

   Bases: :py:obj:`smach.StateMachine`


   Find an entity based on a description. The description designator should
   have resolve type dict and it should contain at least a 'type' field

   :param robot: Robot object
   :param knowledge: Robocup knowledge object. Used to find an object by its properties
   :param source_entity_designator: Designator resolving to EdEntity to inspect
   :param description_designator: dict which contains at least a 'type' field
   :param found_entity_designator: Designator the found entity can be written to
   :param area_name: str or str Designator describing the area of the source entity to inspect
   :param navigation_area: str or str Designator describing the area to drive to for the inspect.
                           None=NavigateToObserve


