robot_smach_states.navigation.control_to_pose
=============================================

.. py:module:: robot_smach_states.navigation.control_to_pose


Classes
-------

.. autoapisummary::

   robot_smach_states.navigation.control_to_pose.ControlParameters
   robot_smach_states.navigation.control_to_pose.ControlToPose


Functions
---------

.. autoapisummary::

   robot_smach_states.navigation.control_to_pose._clamp
   robot_smach_states.navigation.control_to_pose._get_yaw_from_quaternion_msg


Module Contents
---------------

.. py:function:: _clamp(abs_value, value)

.. py:function:: _get_yaw_from_quaternion_msg(msg)

   Returns the yaw angle from a rotation in quaternion representation (msg)

   :param msg: The quaternion msg
   :return: (float) Yaw angle in rad


.. py:class:: ControlParameters

   Bases: :py:obj:`namedtuple`\ (\ :py:obj:`'ControlParameters'`\ , [\ :py:obj:`'position_gain'`\ , :py:obj:`'rotation_gain'`\ , :py:obj:`'abs_vx'`\ , :py:obj:`'abs_vy'`\ , :py:obj:`'abs_vyaw'`\ , :py:obj:`'goal_position_tolerance'`\ , :py:obj:`'goal_rotation_tolerance'`\ ]\ )


   position_gain: (float) Tunable parameter to increase or decrease the change in position per time
   rotation_gain: (float) Tunable parameter to increase or decrease the change in yaw per time
   abs_vx: (float) Absolute velocity in x [m/s]
   abs_vy: (float) Absolute velocity in y [m/s]
   abs_vyaw: (float) Absolute velocity in yaw [rad/s]
   goal_position_tolerance: (float) Tolerance in position [m]
   goal_rotation_tolerance: (float) Tolerance in yaw [rad]

   Initialize self.  See help(type(self)) for accurate signature.


.. py:class:: ControlToPose(robot, goal_pose, control_parameters, rate=10)

   Bases: :py:obj:`smach.State`


   
   State that allows the tuning of robot navigation to a specific goal through custom speeds, gains and tolerances

   :param robot: (Robot) api object
   :param goal_pose: (PoseStamped or Designator to PoseStamped) Position the robot needs to go to
   :param control_parameters: (namedtuple, ControlParameters) Parameters that specify how the robot should reach
   :param rate: (float, int) Control rate [Hz]


   .. py:attribute:: robot


   .. py:attribute:: goal_pose


   .. py:attribute:: params


   .. py:attribute:: _rate
      :value: 10



   .. py:method:: execute(userdata=None)


   .. py:method:: _get_target_delta_in_robot_frame(goal_pose)

      Transfers the goal pose to robot frame

      :param goal_pose: (PoseStamped) Position the robot needs to go to
      :return: (float) x position of goal in robot frame,
               (float) y position of goal in robot frame,
               (float) yaw of goal in robot frame



   .. py:method:: _goal_reached(dx, dy, dyaw)

      Checks if the goal pose is reached

      :param dx: (float)[m] Margin between goal_pose and robot in x
      :param dy: (float)[m] Margin between goal_pose and robot in y
      :param dyaw: (float)[rad] Margin between goal_pose and robot in yaw
      :return: (bool) Boolean indicating whether the margins are reached



