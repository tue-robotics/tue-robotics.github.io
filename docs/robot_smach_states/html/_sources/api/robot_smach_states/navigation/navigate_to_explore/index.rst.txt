robot_smach_states.navigation.navigate_to_explore
=================================================

.. py:module:: robot_smach_states.navigation.navigate_to_explore


Classes
-------

.. autoapisummary::

   robot_smach_states.navigation.navigate_to_explore.NavigateToExplore


Module Contents
---------------

.. py:class:: NavigateToExplore(robot, constraint_designator, breakout_designator, radius=0.7, exclude_radius=0.3, reset_head=True, speak=True, reset_pose=True)

   Bases: :py:obj:`robot_smach_states.navigation.navigation.NavigateTo`


   Move the robot to a specified location.

   :param robot: Robot object
   :param constraint_function: function resolving to a tuple(PositionConstraint, OrientationConstraint)
       telling the robot where to drive to.
   :param reset_head: Whether or not the head should be used for obstacle avoidance during navigation.
   :param speak: Whether or not the robot should speak during navigation
   :param reset_pose: Whether or not the robot is allowed to change its pose for navigation.

   :param constraint_designator a Designator that resolves to the entity to explore
   :param breakout_designator when this Designator successfully resolves, the state signals it is done.
   For example, it could resolve to an item of a class you are looking for
   :param reset_head: Whether or not the head should be used for obstacle avoidance during navigation.
   :param speak: Whether or not the robot should speak during navigation
   :param reset_pose: Whether or not the robot is allowed to change its pose for navigation.


   .. py:attribute:: robot


   .. py:attribute:: constraint_designator


   .. py:attribute:: breakout_designator


   .. py:attribute:: radius
      :value: 0.7



   .. py:attribute:: exclude_radius
      :value: 0.3



   .. py:attribute:: visited_list
      :value: []



   .. py:method:: generateConstraint()


   .. py:method:: breakOut()

      Default breakout function: makes sure things go to 'succeeded' if robot arrives at goal
      DO NOT OVERLOAD THIS IF NOT NECESSARY

      Possible outcomes (when overloading)
      - 'breakout': when a condition has been met and navigation should stop because the goal has succeeded
      - 'checking': the condition has not been met. Upon arrival at a goal, the statemachine will return to 'GetPlan' to get the next goal_not_defined
      - 'passed'  : checking a condition is not necessary. Upon arrival at the current goal, the state machine will return 'succeeded'



