robot_smach_states.navigation.follow_operator2_0
================================================

.. py:module:: robot_smach_states.navigation.follow_operator2_0


Attributes
----------

.. autoapisummary::

   robot_smach_states.navigation.follow_operator2_0.robot


Classes
-------

.. autoapisummary::

   robot_smach_states.navigation.follow_operator2_0.CrumbWaypoint
   robot_smach_states.navigation.follow_operator2_0.Track
   robot_smach_states.navigation.follow_operator2_0.FollowBread
   robot_smach_states.navigation.follow_operator2_0.Recovery
   robot_smach_states.navigation.follow_operator2_0.FollowOperator2


Module Contents
---------------

.. py:class:: CrumbWaypoint(crumb)

   .. py:attribute:: crumb


   .. py:attribute:: waypoint
      :value: None



   .. py:method:: __repr__()


.. py:class:: Track(robot, _buffer)

   Bases: :py:obj:`smach.State`


   
   Constructor

   :param robot: robot object (amigo, sergio)
   :param _buffer:


   .. py:attribute:: counter
      :value: 0



   .. py:attribute:: _period
      :value: 0.3



   .. py:attribute:: _operator_pub


   .. py:attribute:: _robot


   .. py:attribute:: _breadcrumb_distance
      :value: 0.1



   .. py:attribute:: _operator
      :value: None



   .. py:attribute:: _buffer


   .. py:method:: execute(userdata)

      A concurrent state in which the breadcrumbs, that are made in the other concurrent state, are followed.


      :return: track if the operator is followed flawlessly
               no track if the operator is lost



.. py:class:: FollowBread(robot, _buffer, operator_radius=1, lookat_radius=0.5)

   Bases: :py:obj:`smach.State`


   
   :param robot: robot object (amigo, sergio)
   :param _buffer: the buffer deque that is made in the track state
   :param operator_radius: the assumed radius of the operator for position constraint
   :param lookat_radius: all breadcrumbs within the lookat_radius are deleted


   .. py:attribute:: _robot


   .. py:attribute:: _operator_radius
      :value: 1



   .. py:attribute:: _lookat_radius
      :value: 0.5



   .. py:attribute:: _breadcrumb_distance
      :value: 0.1



   .. py:attribute:: _breadcrumb_pub


   .. py:attribute:: _operator
      :value: None



   .. py:attribute:: _current_operator


   .. py:attribute:: _buffer


   .. py:attribute:: _breadcrumb
      :value: []



   .. py:attribute:: _resolution
      :value: 0.05



   .. py:attribute:: _timeout_count
      :value: 0



   .. py:method:: execute(userdata=None)

      A concurrent state machine which follows and afterwards deletes breadcrumbs from the buffer variable

      :return: follow_bread if the list of breadcrumbs is not empty
               no_follow_bread_ask_finalize if the single remaining breadcrumb is the operator
               no_follow_bread_recovery if buffer is completely empty



.. py:class:: Recovery(robot, lost_timeout=60, lost_distance=0.8)

   Bases: :py:obj:`smach.State`


   
   :param robot: robot object (amigo, sergio)
   :param lost_timeout: time allowed to take to find the operator
   :param lost_distance: radius in which to find the laser entity of the operator based on the converted location
                         from the RGBD image


   .. py:attribute:: _robot


   .. py:attribute:: _operator_name
      :value: 'operator'



   .. py:attribute:: _lost_timeout
      :value: 60



   .. py:attribute:: _lost_distance
      :value: 0.8



   .. py:attribute:: _face_pos_pub


   .. py:method:: execute(userdata)

      :return: Failed: when taking too long, can't transform RGBD image to point or when preempt requested
               follow: When successfully recovered operator



.. py:class:: FollowOperator2(robot)

   Bases: :py:obj:`smach.StateMachine`


   
   :param robot: robot object (amigo, sergio)


   .. py:attribute:: robot


.. py:data:: robot

