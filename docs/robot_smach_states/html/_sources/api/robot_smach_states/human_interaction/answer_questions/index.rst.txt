robot_smach_states.human_interaction.answer_questions
=====================================================

.. py:module:: robot_smach_states.human_interaction.answer_questions


Classes
-------

.. autoapisummary::

   robot_smach_states.human_interaction.answer_questions.HearAndAnswerQuestions


Functions
---------

.. autoapisummary::

   robot_smach_states.human_interaction.answer_questions.answer
   robot_smach_states.human_interaction.answer_questions.answer_random_gender
   robot_smach_states.human_interaction.answer_questions.answer_predefined_questions
   robot_smach_states.human_interaction.answer_questions.answer_count_people
   robot_smach_states.human_interaction.answer_questions.answer_placement_location
   robot_smach_states.human_interaction.answer_questions.answer_count_placement
   robot_smach_states.human_interaction.answer_questions.answer_find_objects
   robot_smach_states.human_interaction.answer_questions.answer_find_category
   robot_smach_states.human_interaction.answer_questions.answer_object_category
   robot_smach_states.human_interaction.answer_questions.answer_object_color
   robot_smach_states.human_interaction.answer_questions.answer_compare_objects_sizes
   robot_smach_states.human_interaction.answer_questions.answer_compare_objects_weight
   robot_smach_states.human_interaction.answer_questions.answer_compare_objects_categories
   robot_smach_states.human_interaction.answer_questions.answer_count_objects_in_category


Module Contents
---------------

.. py:function:: answer(robot, knowledge, res, crowd_data)

   Robot answers the heard question

   :param robot: robot api object
   :param knowledge: common knowledge data struct
   :param res: HMIResult what has been understood
   :param crowd_data: data about the crowd

   :return: if successfully answered the question, else False


.. py:function:: answer_random_gender(_, __)

.. py:function:: answer_predefined_questions(action, _)

.. py:function:: answer_count_people(action, _, crowd_data)

.. py:function:: answer_placement_location(action, common_knowledge)

.. py:function:: answer_count_placement(action, common_knowledge)

.. py:function:: answer_find_objects(action, common_knowledge)

.. py:function:: answer_find_category(action, common_knowledge)

.. py:function:: answer_object_category(action, common_knowledge)

.. py:function:: answer_object_color(action, common_knowledge)

.. py:function:: answer_compare_objects_sizes(action, common_knowledge)

.. py:function:: answer_compare_objects_weight(action, common_knowledge)

.. py:function:: answer_compare_objects_categories(action, common_knowledge)

.. py:function:: answer_count_objects_in_category(action, common_knowledge)

.. py:class:: HearAndAnswerQuestions(robot, grammar, knowledge, num_questions = 1, hear_time = 20.0)

   Bases: :py:obj:`smach.State`


   
   Robot hears and answers questions.

   :param robot: robot api object
   :param grammar: grammar for speech to text
   :param knowledge: knowledge data struct
   :param num_questions: number of questions to be heard and answered
   :param hear_time: timeout for speech to text
   :return: "done"


   .. py:attribute:: robot


   .. py:attribute:: num_questions
      :value: 1



   .. py:attribute:: hear_time
      :value: 20.0



   .. py:attribute:: grammar


   .. py:attribute:: knowledge


   .. py:method:: execute(userdata)


