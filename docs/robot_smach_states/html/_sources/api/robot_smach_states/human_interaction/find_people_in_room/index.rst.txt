robot_smach_states.human_interaction.find_people_in_room
========================================================

.. py:module:: robot_smach_states.human_interaction.find_people_in_room


Classes
-------

.. autoapisummary::

   robot_smach_states.human_interaction.find_people_in_room.FindPeople
   robot_smach_states.human_interaction.find_people_in_room.FindFirstPerson
   robot_smach_states.human_interaction.find_people_in_room.SetPoseFirstFoundPersonToEntity
   robot_smach_states.human_interaction.find_people_in_room._DecideNavigateState
   robot_smach_states.human_interaction.find_people_in_room.FindPeopleInRoom


Module Contents
---------------

.. py:class:: FindPeople(robot, properties=None, query_entity_designator=None, found_people_designator=None, look_distance=10.0, speak=False, strict=True, reverse=False, nearest=False, attempts=1, search_timeout=60, look_range=(-np.pi / 2, np.pi / 2), look_steps=8)

   Bases: :py:obj:`smach.State`


   Smach state to find a person. The robot looks around and tries to find
   people in its view.

   >>> from robot_skills.mockbot import Mockbot
   >>> with redirect_stdout(None): robot = Mockbot()
   >>> # Designator to store the result
   >>> des = ds.VariableDesignator(resolve_type=[Entity])
   >>>
   >>> sm = FindPeople(robot=robot, properties={'id': 'NAME'}, found_people_designator=des.writeable)
   >>> # sm.execute()
   >>> # des.resolve()

   Entity(uuid=something, )


   Initialization method

   :param robot: robot api object
   :param properties: (dict) (default: None) keyvalue pair of the properties a person must
       possess. None as a value for a property would search for all possible
       values of the property.
   :param query_entity_designator: (default: None) An entity designator to match all found
       people to
   :param found_people_designator: (default: None) A designator to write the search result to.
       The designator always has a list of found people written to it.
   :param look_distance: (float) (default: 10.0) The distance (radius) which the robot must look at
   :param speak: (bool) (default: False) If True, the robot will speak while trying to find
       a named person
   :param strict: (bool) (default: True)  Only used if properties is not None AND the {key:value} pair of a
       property has non None values. Disabled when setting `reverse` to True.
       If set to True then only people with all specified
       properties are returned, else all people with at least one true property.
       Example:
           properties = {'tags': ['LWaving', 'RWaving', 'LHolding', 'RHolding']}
           strict = True
               This will return a list of people who have the tags:
                   'LWaving' AND 'RWaving' AND 'LHolding' AND 'RHolding'

           strict = False
               This will return a list of people who have the tags:
                   'LWaving' OR 'RWaving' OR 'LHolding' OR 'RHolding'

   :param reverse: (bool) (default: False) Want all the people that don't match ANY property. So enabling `reverse`
       will make the property matching a `not (x1 OR x2 OR ...)`.
   :param nearest: (bool) (default: False) If True, selects the people nearest to the robot who match the
       requirements posed using the properties, query_entity_designator, look distance and strict arguments
   :param attempts: (int) (default: 1) Max number of search attempts
   :param search_timeout: (float) (default: 60) maximum time the robot is allowed to search
   :param look_range: (tuple of size 2) (default: (-np.pi/2, np.pi/2)) from what to what head angle should the
       robot search
   :param look_steps: (int) (default: 8) How many steps does it take in that range


   .. py:attribute:: _robot


   .. py:attribute:: _properties
      :value: None



   .. py:attribute:: _look_distance
      :value: 10.0



   .. py:attribute:: _speak
      :value: False



   .. py:attribute:: _strict
      :value: True



   .. py:attribute:: _reverse
      :value: False



   .. py:attribute:: _nearest
      :value: False



   .. py:attribute:: _attempts
      :value: 1



   .. py:attribute:: _search_timeout
      :value: 60



   .. py:attribute:: _look_angles


   .. py:attribute:: _found_people_designator
      :value: None



   .. py:attribute:: _query_entity_designator
      :value: None



   .. py:method:: execute(userdata=None)


   .. py:method:: _check_person_property(person, prop_name, prop_value)


.. py:class:: FindFirstPerson(robot, found_person_designator, properties=None, query_entity_designator=None, look_distance=10.0, speak=False, strict=True, reverse=False, nearest=False, attempts=1, search_timeout=60, look_range=(-np.pi / 2, np.pi / 2), look_steps=8)

   Bases: :py:obj:`smach.StateMachine`


   Wrapper around FindPeople to get the first person that matches the search criteria

   Initialization method

   :param robot: robot api object
   :param found_person_designator: A designator to write the search result to.
   :param properties: (dict) (default: None) keyvalue pair of the properties a person must
       possess. None as a value for a property would search for all possible
       values of the property.
   :param query_entity_designator: (default: None) An entity designator to match all found
       people to
   :param look_distance: (float) (default: 10.0) The distance (radius) which the robot must look at
   :param speak: (bool) (default: False) If True, the robot will speak while trying to find
       a named person
   :param strict: (bool) (default: True)  Only used if properties is not None AND the {key:value} pair of a
       property has non None values.
       If set to True then only people with all specified
       properties are returned, else all people with at least one true property.
       Example:
           properties = {'tags': ['LWaving', 'RWaving', 'LHolding', 'RHolding']}
           strict = True
               This will return a list of people who have the tags:
                   'LWaving' AND 'RWaving' AND 'LHolding' AND 'RHolding'

           strict = False
               This will return a list of people who have the tags:
                   'LWaving' OR 'RWaving' OR 'LHolding' OR 'RHolding'

   :param nearest: (bool) (default: False) If True, selects the people nearest to the robot who match the
       requirements posed using the properties, query_entity_designator, look distance and strict arguments
   :param attempts: (int) (default: 1) Max number of search attempts
   :param search_timeout: (float) (default: 60) maximum time the robot is allowed to search
   :param look_range: (tuple of size 2) (default: (-np.pi/2, np.pi/2)) from what to what head angle should the
       robot search
   :param look_steps: (int) (default: 8) How many steps does it take in that range


.. py:class:: SetPoseFirstFoundPersonToEntity(robot, dst_entity_designator, dst_entity_type='waypoint', found_person_designator=None, properties=None, query_entity_designator=None, look_distance=10.0, speak=False, strict=True, reverse=False, nearest=False, attempts=1, search_timeout=60, look_range=(-np.pi / 2, np.pi / 2), look_steps=8)

   Bases: :py:obj:`smach.StateMachine`


   Wrapper around FirstFoundPerson and addition of UpdateDestEntityPoseWithSrcEntity of top of it

   Initialization method

   :param robot: robot api object
   :param dst_entity_designator: A designator of an Entity whose pose must be updated.
   :param dst_entity_type: (str) (default: waypoint) Type of the destination entity
   :param found_person_designator: (default: None) A designator to write the search result to.
   :param properties: (dict) (default: None) keyvalue pair of the properties a person must
       possess. None as a value for a property would search for all possible
       values of the property.
   :param query_entity_designator: (default: None) An entity designator to match all found
       people to
   :param look_distance: (float) (default: 10.0) The distance (radius) which the robot must look at
   :param speak: (bool) (default: False) If True, the robot will speak while trying to find
       a named person
   :param strict: (bool) (default: True)  Only used if properties is not None AND the {key:value} pair of a
       property has non None values.
       If set to True then only people with all specified
       properties are returned, else all people with at least one true property.
       Example:
           properties = {'tags': ['LWaving', 'RWaving', 'LHolding', 'RHolding']}
           strict = True
               This will return a list of people who have the tags:
                   'LWaving' AND 'RWaving' AND 'LHolding' AND 'RHolding'

           strict = False
               This will return a list of people who have the tags:
                   'LWaving' OR 'RWaving' OR 'LHolding' OR 'RHolding'

   :param nearest: (bool) (default: False) If True, selects the people nearest to the robot who match the
       requirements posed using the properties, query_entity_designator, look distance and strict arguments
   :param attempts: (int) (default: 1) Max number of search attempts
   :param search_timeout: (float) (default: 60) maximum time the robot is allowed to search
   :param look_range: (tuple of size 2) (default: (-np.pi/2, np.pi/2)) from what to what head angle should the
       robot search
   :param look_steps: (int) (default: 8) How many steps does it take in that range


.. py:class:: _DecideNavigateState(robot, waypoint_designator, room_designator)

   Bases: :py:obj:`smach.State`


   Helper state to decide whether to use a NavigateToWaypoint or a NavigateToRoom state


   Initialize method

   :param robot: Robot API object
   :param waypoint_designator: EdEntityDesignator that should resolve to a waypoint
   :param room_designator: EdEntityDesignator that should resolve to the room in which the waypoint is located


   .. py:attribute:: _robot


   .. py:attribute:: _waypoint_designator


   .. py:attribute:: _room_designator


   .. py:method:: execute(ud)


.. py:class:: FindPeopleInRoom(robot, room, found_people_designator, look_range=(-np.pi / 2, np.pi / 2), look_steps=8)

   Bases: :py:obj:`smach.StateMachine`


   Uses NavigateToWaypoint or NavigateToRoom and subsequently tries to find people in that room
   in that room.

   Constructor

   :param robot: robot object
   :param area: (str) if a waypoint "<area>_waypoint" is present in the world model, the robot will navigate
       to this waypoint. Else, it will navigate to the room called "<area>"
   :param name: (str) Name of the person to look for
   :param discard_other_labels: (bool) Whether or not to discard faces based on label
   :param found_person_designator: (Designator) A designator that will resolve to the found object


