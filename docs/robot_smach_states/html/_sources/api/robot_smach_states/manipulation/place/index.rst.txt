robot_smach_states.manipulation.place
=====================================

.. py:module:: robot_smach_states.manipulation.place


Attributes
----------

.. autoapisummary::

   robot_smach_states.manipulation.place.robot


Classes
-------

.. autoapisummary::

   robot_smach_states.manipulation.place.Put
   robot_smach_states.manipulation.place.Place


Module Contents
---------------

.. py:class:: Put(robot, item_to_place, placement_pose, arm)

   Bases: :py:obj:`smach.State`


   
   Drive the robot back a little and move the designated arm to place the designated item at the designated pose

   :param robot: Robot to execute state with
   :param item_to_place: Designator that resolves to the entity to place. e.g EntityByIdDesignator
   :param placement_pose: Designator that resolves to the pose to place at. E.g. an EmptySpotDesignator
   :param locked arm: Locked arm designator -> arm to place with, so Arm that holds entity_to_place, e.g. via
       ArmHoldingEntityDesignator


   .. py:attribute:: REQUIRED_ARM_PROPERTIES


   .. py:attribute:: _robot


   .. py:attribute:: _item_to_place_designator


   .. py:attribute:: _placement_pose_designator


   .. py:attribute:: _arm_designator


   .. py:attribute:: _center_height
      :value: 0.1



   .. py:attribute:: _preplace_offset
      :value: 0.05



   .. py:method:: execute(userdata=None)


.. py:class:: Place(robot, item_to_place, place_pose, arm, place_volume = None)

   Bases: :py:obj:`smach.StateMachine`


   
   Drive the robot to be close to the designated place_pose and move the designated arm to place the designated
   item there

   :param robot: Robot to execute state with
   :param item_to_place: Designator that resolves to the entity to place. e.g EntityByIdDesignator
   :param place_pose: The place pose can be one of three things:
       1: Designator that resolves to the pose to place at. E.g. an EmptySpotDesignator
       2: EdEntityDesignator resolving to an object on which the robot should place something
       3: A string identifying an object on which the robot should place something
   :param arm: Designator -> arm to place with, so Arm that holds entity_to_place, e.g. via
       ArmHoldingEntityDesignator
   :param place_volume: (optional) string identifying the volume where to place the object, e.g., 'on_top_of',
       'shelf3'


.. py:data:: robot

