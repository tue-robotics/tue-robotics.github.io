<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classFitter" kind="class" language="C++" prot="public">
    <compoundname>Fitter</compoundname>
    <includes refid="fitter_8h" local="no">fitter.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classFitter_1afed8610d9dfda5529c16d9573915b1ed" prot="private" static="no" mutable="no">
        <type><ref refid="classBeamModel" kindref="compound">BeamModel</ref></type>
        <definition>BeamModel Fitter::beam_model_</definition>
        <argsstring></argsstring>
        <name>beam_model_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="255" column="15" bodyfile="include/ed/kinect/fitter.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classFitter_1a65065d42b6e060c7ac2e287ed4ee524f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Fitter::configured_</definition>
        <argsstring></argsstring>
        <name>configured_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="264" column="10" bodyfile="include/ed/kinect/fitter.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classFitter_1a8a46f221f5b20a6b2a2a44cbe46c938b" prot="private" static="no" mutable="yes">
        <type><ref refid="cpp/container/map" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::map</ref>&lt; <ref refid="classed_1_1UUID" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::UUID</ref>, <ref refid="structEntityRepresentation2D" kindref="compound">EntityRepresentation2D</ref> &gt;</type>
        <definition>std::map&lt;ed::UUID, EntityRepresentation2D&gt; Fitter::entity_shapes_</definition>
        <argsstring></argsstring>
        <name>entity_shapes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="258" column="22" bodyfile="include/ed/kinect/fitter.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classFitter_1a109c58459f22239b805d9f8f2e952f70" prot="private" static="no" mutable="no">
        <type><ref refid="classed_1_1models_1_1ModelLoader" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::models::ModelLoader</ref></type>
        <definition>ed::models::ModelLoader Fitter::model_loader_</definition>
        <argsstring></argsstring>
        <name>model_loader_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="261" column="29" bodyfile="include/ed/kinect/fitter.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classFitter_1a2c288eea72aba4a9ae58ec2541e443ef" prot="private" static="no" mutable="no">
        <type>uint</type>
        <definition>uint Fitter::nr_data_points_</definition>
        <argsstring></argsstring>
        <name>nr_data_points_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="263" column="10" bodyfile="include/ed/kinect/fitter.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classFitter_1ad82d546290a8d0fa8ba2091a7139325e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Fitter::configureBeamModel</definition>
        <argsstring>(const image_geometry::PinholeCameraModel &amp;cammodel)</argsstring>
        <name>configureBeamModel</name>
        <param>
          <type>const image_geometry::PinholeCameraModel &amp;</type>
          <declname>cammodel</declname>
        </param>
        <briefdescription>
<para>configure the beam model (nr of data points and focal length) according to the camera you are using. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cammodel</parametername>
</parameternamelist>
<parameterdescription>
<para>camera model </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="171" column="10" bodyfile="src/kinect/fitter.cpp" bodystart="475" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1a3cbcf2ef11c711eb5bc3cb01e00f9d9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Fitter::estimateEntityPose</definition>
        <argsstring>(const FitterData &amp;data, const ed::WorldModel &amp;world, const ed::UUID &amp;id, const geo::Pose3D &amp;expected_pose, geo::Pose3D &amp;fitted_pose, double max_yaw_change=M_PI) const</argsstring>
        <name>estimateEntityPose</name>
        <param>
          <type>const <ref refid="structFitterData" kindref="compound">FitterData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classed_1_1WorldModel" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::WorldModel</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type>const <ref refid="classed_1_1UUID" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::UUID</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &amp;</type>
          <declname>expected_pose</declname>
        </param>
        <param>
          <type><ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &amp;</type>
          <declname>fitted_pose</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_yaw_change</declname>
          <defval>M_PI</defval>
        </param>
        <briefdescription>
<para>estimateEntityPose performs the entity pose estimation. Basically, tries to call estimateEntityPoseImp and return the results, catches any FitterErrors and returns false </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pre-processed sensor data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>world model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the entity we&apos;re trying to fit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>pose where the entity is expected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fitted_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>the fitted pose is stored here </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_yaw_change</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum allowed yaw rotation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="147" column="10" bodyfile="src/kinect/fitter.cpp" bodystart="258" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1acb857b873cba9ba6507d81a6464c9bca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/memory/unique_ptr" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::unique_ptr</ref>&lt; <ref refid="classOptimalFit" kindref="compound">OptimalFit</ref> &gt;</type>
        <definition>std::unique_ptr&lt; OptimalFit &gt; Fitter::findOptimum</definition>
        <argsstring>(const EstimationInputData &amp;input_data, const YawRange &amp;yaw_range) const</argsstring>
        <name>findOptimum</name>
        <param>
          <type>const <ref refid="structEstimationInputData" kindref="compound">EstimationInputData</ref> &amp;</type>
          <declname>input_data</declname>
        </param>
        <param>
          <type>const <ref refid="structYawRange" kindref="compound">YawRange</ref> &amp;</type>
          <declname>yaw_range</declname>
        </param>
        <briefdescription>
<para>findOptimum finds the &apos;optimal&apos; fit by evaluating candidates over all beams and over the entire yaw range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_data</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structEstimationInputData" kindref="compound">EstimationInputData</ref>: everything that&apos;s required </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yaw_range</parametername>
</parameternamelist>
<parameterdescription>
<para>min and max yaw range to sample over </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the optimum </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="157" column="21" bodyfile="src/kinect/fitter.cpp" bodystart="347" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1a1e2708d2341a9841aed9695efc0383a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Fitter::Fitter</definition>
        <argsstring>()</argsstring>
        <name>Fitter</name>
        <briefdescription>
<para><ref refid="classFitter" kindref="compound">Fitter</ref> default constructor, must be configured later. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="108" column="5" bodyfile="src/kinect/fitter.cpp" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1ab851ff6a1c222fcd4053d77a65bd714a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Fitter::Fitter</definition>
        <argsstring>(const image_geometry::PinholeCameraModel &amp;cammodel)</argsstring>
        <name>Fitter</name>
        <param>
          <type>const image_geometry::PinholeCameraModel &amp;</type>
          <declname>cammodel</declname>
        </param>
        <briefdescription>
<para><ref refid="classFitter" kindref="compound">Fitter</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cammodel</parametername>
</parameternamelist>
<parameterdescription>
<para>Cameramodel used to configure the fitter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="121" column="5" bodyfile="include/ed/kinect/fitter.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1ab1e3399b738a39f2eba9dc9f0cd42237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Fitter::Fitter</definition>
        <argsstring>(unsigned int nr_data_points, float fx)</argsstring>
        <name>Fitter</name>
        <param>
          <type>unsigned int</type>
          <declname>nr_data_points</declname>
        </param>
        <param>
          <type>float</type>
          <declname>fx</declname>
        </param>
        <briefdescription>
<para><ref refid="classFitter" kindref="compound">Fitter</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nr_data_points</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of data points for the beam model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fx</parametername>
</parameternamelist>
<parameterdescription>
<para>focal length for the beam model </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="115" column="5" bodyfile="src/kinect/fitter.cpp" bodystart="242" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1a5e9587019b45ed8caaf1a308fe7dee3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structEntityRepresentation2D" kindref="compound">EntityRepresentation2D</ref></type>
        <definition>EntityRepresentation2D Fitter::GetOrCreateEntity2D</definition>
        <argsstring>(const ed::EntityConstPtr &amp;e) const</argsstring>
        <name>GetOrCreateEntity2D</name>
        <param>
          <type>const <ref refid="namespaceed_1ac65887f1813a584fb493e0a93b80d277" kindref="member" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::EntityConstPtr</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>GetOrCreateEntity2D returns the downprojected shape of the entity. If it&apos;s already in the cache, it&apos;s returned directly. If not, it&apos;s obtained from the entity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>input entity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>2D entity representation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="165" column="28" bodyfile="src/kinect/fitter.cpp" bodystart="528" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1ae8768e4805b73d86dcc476dec4504d01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Fitter::isConfigured</definition>
        <argsstring>()</argsstring>
        <name>isConfigured</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="125" column="17" bodyfile="include/ed/kinect/fitter.h" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1a8dd85e00f88582fbb5fea699840b88a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Fitter::processSensorData</definition>
        <argsstring>(const rgbd::Image &amp;image, const geo::Pose3D &amp;sensor_pose, FitterData &amp;data) const</argsstring>
        <name>processSensorData</name>
        <param>
          <type>const <ref refid="classrgbd_1_1Image" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/rgbd/tags">rgbd::Image</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &amp;</type>
          <declname>sensor_pose</declname>
        </param>
        <param>
          <type><ref refid="structFitterData" kindref="compound">FitterData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>processSensorData pre-processes sensor data, i.e., performs a downprojection of the input depth image based on the provided sensor pose and stores the result in the <ref refid="structFitterData" kindref="compound">FitterData</ref> struct </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">image</parametername>
</parameternamelist>
<parameterdescription>
<para>input (depth) image </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensor_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>pose of the sensor in the world while taking the image </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>processed data is stored here </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="134" column="10" bodyfile="src/kinect/fitter.cpp" bodystart="486" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1a79f2b09e42fd66fa7f3a8322184f4af2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Fitter::~Fitter</definition>
        <argsstring>()</argsstring>
        <name>~Fitter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="123" column="5" bodyfile="src/kinect/fitter.cpp" bodystart="252" bodyend="254"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classFitter_1afa6d4aaf9d75dc661f516f988fd81430" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Fitter::checkExpectedBeamThroughEntity</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;model_ranges, ed::EntityConstPtr entity, const geo::Pose3D &amp;sensor_pose_xya, const int expected_center_beam) const</argsstring>
        <name>checkExpectedBeamThroughEntity</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; double &gt; &amp;</type>
          <declname>model_ranges</declname>
        </param>
        <param>
          <type><ref refid="namespaceed_1ac65887f1813a584fb493e0a93b80d277" kindref="member" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::EntityConstPtr</ref></type>
          <declname>entity</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &amp;</type>
          <declname>sensor_pose_xya</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>expected_center_beam</declname>
        </param>
        <briefdescription>
<para>checkExpectedBeamThroughEntity checks if the expected center beam passes through the entity. If not: throw a fitter error </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model_ranges</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entity</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensor_pose_xya</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected_center_beam</parametername>
</parameternamelist>
<parameterdescription>
<para>expected index of the beam through the center of the object. range: any int. indices outside bounds will also throw an error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="242" column="10" bodyfile="src/kinect/fitter.cpp" bodystart="458" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1a1e087fff26440ceef6dc0f53575dc6e5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Fitter::estimateEntityPoseImp</definition>
        <argsstring>(const FitterData &amp;data, const ed::WorldModel &amp;world, const ed::UUID &amp;id, const geo::Pose3D &amp;expected_pose, geo::Pose3D &amp;fitted_pose, double max_yaw_change) const</argsstring>
        <name>estimateEntityPoseImp</name>
        <param>
          <type>const <ref refid="structFitterData" kindref="compound">FitterData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="classed_1_1WorldModel" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::WorldModel</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type>const <ref refid="classed_1_1UUID" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::UUID</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &amp;</type>
          <declname>expected_pose</declname>
        </param>
        <param>
          <type><ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &amp;</type>
          <declname>fitted_pose</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_yaw_change</declname>
        </param>
        <briefdescription>
<para>estimateEntityPoseImp actual implementation of the entity pose estimation. Preprocess input data iterates over all beams and the yaw range to compuate the best fit. Finally, a correction of the sensor pose is computed and the result is transformed back to 3D </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pre-processed sensor data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>world model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the entity we&apos;re trying to fit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>pose where the entity is expected </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fitted_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>the fitted pose is stored here </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_yaw_change</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum allowed yaw rotation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success or failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="200" column="10" bodyfile="src/kinect/fitter.cpp" bodystart="274" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1a9a11923d654ca91b8e7bb45b40f0172e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Fitter::evaluateCandidate</definition>
        <argsstring>(const EstimationInputData &amp;static_data, Candidate &amp;candidate) const</argsstring>
        <name>evaluateCandidate</name>
        <param>
          <type>const <ref refid="structEstimationInputData" kindref="compound">EstimationInputData</ref> &amp;</type>
          <declname>static_data</declname>
        </param>
        <param>
          <type><ref refid="classCandidate" kindref="compound">Candidate</ref> &amp;</type>
          <declname>candidate</declname>
        </param>
        <briefdescription>
<para>evaluateCandidate renders the model, transform the model along the beam direction to get this distance right and render once again </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>static_data</parametername>
</parameternamelist>
<parameterdescription>
<para>&apos;static&apos; input data that was the result from the pre-processing </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>candidate</parametername>
</parameternamelist>
<parameterdescription>
<para>contains the &apos;candidate&apos; beam index and yaw that is evaluated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="252" column="10" bodyfile="src/kinect/fitter.cpp" bodystart="388" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1af2adce958a648f34b06e2ddc816e7ead" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="fitter_8h_1a896ceca009294b6c6ed9af103a3edee7" kindref="member">Shape2D</ref></type>
        <definition>Shape2D Fitter::get2DShape</definition>
        <argsstring>(ed::EntityConstPtr entity_ptr) const</argsstring>
        <name>get2DShape</name>
        <param>
          <type><ref refid="namespaceed_1ac65887f1813a584fb493e0a93b80d277" kindref="member" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::EntityConstPtr</ref></type>
          <declname>entity_ptr</declname>
        </param>
        <briefdescription>
<para>get2DShape gets the downprojected, 2D shape from an entity </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>entity_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>points to the entity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the computed shape </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="220" column="13" bodyfile="src/kinect/fitter.cpp" bodystart="417" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1a4cbf48062d3af6d55fde3a0c01aaea65" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structEstimationInputData" kindref="compound">EstimationInputData</ref></type>
        <definition>EstimationInputData Fitter::preProcessInputData</definition>
        <argsstring>(const ed::WorldModel &amp;world, const ed::UUID &amp;id, const geo::Pose3D &amp;expected_pose, const FitterData &amp;data) const</argsstring>
        <name>preProcessInputData</name>
        <param>
          <type>const <ref refid="classed_1_1WorldModel" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::WorldModel</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type>const <ref refid="classed_1_1UUID" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::UUID</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &amp;</type>
          <declname>expected_pose</declname>
        </param>
        <param>
          <type>const <ref refid="structFitterData" kindref="compound">FitterData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>preProcessInputData pre-processes the inputs for the fitting algorithm, i.e., gets the shape of the entity, compute its center, transform the shape to (0, 0), and compute the expected center beam. Everything is stored in a struct that can be used (const) throughout the rest of the algorithm </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>world model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of the entity to fit </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expected_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>expected pose of the entity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>input sensor data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structEstimationInputData" kindref="compound">EstimationInputData</ref> used throughout the rest of the algorithm </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="213" column="25" bodyfile="src/kinect/fitter.cpp" bodystart="307" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1a3befefdb0da539edf71f53c97feef82b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Fitter::renderEntity</definition>
        <argsstring>(const ed::EntityConstPtr &amp;e, const geo::Pose3D &amp;sensor_pose_xya, int identifier, std::vector&lt; double &gt; &amp;model_ranges, std::vector&lt; int &gt; &amp;identifiers) const</argsstring>
        <name>renderEntity</name>
        <param>
          <type>const <ref refid="namespaceed_1ac65887f1813a584fb493e0a93b80d277" kindref="member" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::EntityConstPtr</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &amp;</type>
          <declname>sensor_pose_xya</declname>
        </param>
        <param>
          <type>int</type>
          <declname>identifier</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; double &gt; &amp;</type>
          <declname>model_ranges</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; int &gt; &amp;</type>
          <declname>identifiers</declname>
        </param>
        <briefdescription>
<para>renderEntity renders the entity in 2D using the beam model with the provided (2D) sensor pose. The ranges of the simulated measurement are stored in &apos;model ranges&apos; and the &apos;identifier&apos; is stored in the &apos;identifiers&apos; vector in order to be able to distinguish multiple entity shapes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>entity to render </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensor_pose_xya</parametername>
</parameternamelist>
<parameterdescription>
<para>2D sensor pose (i.e., only x, y and yaw are used) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifier</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_ranges</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifiers</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="185" column="10" bodyfile="src/kinect/fitter.cpp" bodystart="548" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classFitter_1a039c4fc049ed0431886fb643b4cf0918" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Fitter::renderWorldModel2D</definition>
        <argsstring>(const ed::WorldModel &amp;world, const geo::Pose3D &amp;sensor_pose_xya, const ed::UUID &amp;skip_id, std::vector&lt; double &gt; &amp;model_ranges, std::vector&lt; int &gt; &amp;identifiers) const</argsstring>
        <name>renderWorldModel2D</name>
        <param>
          <type>const <ref refid="classed_1_1WorldModel" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::WorldModel</ref> &amp;</type>
          <declname>world</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegeo_1a6c851aec5e98801c86d46d508de5c05d" kindref="member" external="/home/docker/ros/noetic/system/build/docs/geolib2/tags">geo::Pose3D</ref> &amp;</type>
          <declname>sensor_pose_xya</declname>
        </param>
        <param>
          <type>const <ref refid="classed_1_1UUID" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/ed/tags">ed::UUID</ref> &amp;</type>
          <declname>skip_id</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; double &gt; &amp;</type>
          <declname>model_ranges</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; int &gt; &amp;</type>
          <declname>identifiers</declname>
        </param>
        <briefdescription>
<para>renderWorldModel2D renders all world model entities </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>world</parametername>
</parameternamelist>
<parameterdescription>
<para>world model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensor_pose_xya</parametername>
</parameternamelist>
<parameterdescription>
<para>sensor pose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skip_id</parametername>
</parameternamelist>
<parameterdescription>
<para>id to skip (so we don&apos;t render the entity we&apos;re fitting </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_ranges</parametername>
</parameternamelist>
<parameterdescription>
<para>data is stored here </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>identifiers</parametername>
</parameternamelist>
<parameterdescription>
<para>to distinguish which &apos;range&apos; belongs to which entity. In this case, -1 will be used as an identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ed/kinect/fitter.h" line="231" column="10" bodyfile="src/kinect/fitter.cpp" bodystart="431" bodyend="454"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classFitter" kindref="compound">Fitter</ref> class contains the algorithm to do the 2D fit of an entity. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>std::map&lt; std::string, std::pair &gt;</label>
        <link refid="cpp/container/map" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="8">
        <label>std::map&lt; ed::UUID, EntityRepresentation2D &gt;</label>
        <link refid="cpp/container/map" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="7">
        <label>std::vector&lt; geo::Vec2T &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="6">
        <label>BeamModel</label>
        <link refid="classBeamModel"/>
        <childnode refid="7" relation="usage">
          <edgelabel>rays_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>ed::models::ModelLoader</label>
        <link refid="classed_1_1models_1_1ModelLoader" external="/home/docker/ros/noetic/system/build/docs/ed/tags"/>
        <childnode refid="3" relation="usage">
          <edgelabel>shape_cache_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>model_cache_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>model_paths_</edgelabel>
          <edgelabel>file_paths_</edgelabel>
          <edgelabel>ed_model_paths_</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>Fitter</label>
        <link refid="classFitter"/>
        <childnode refid="2" relation="usage">
          <edgelabel>model_loader_</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>beam_model_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>entity_shapes_</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::vector&lt; std::string &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="3">
        <label>std::map&lt; std::string, std::shared_ptr &gt;</label>
        <link refid="cpp/container/map" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="include/ed/kinect/fitter.h" line="101" column="1" bodyfile="include/ed/kinect/fitter.h" bodystart="100" bodyend="266"/>
    <listofallmembers>
      <member refid="classFitter_1afed8610d9dfda5529c16d9573915b1ed" prot="private" virt="non-virtual"><scope>Fitter</scope><name>beam_model_</name></member>
      <member refid="classFitter_1afa6d4aaf9d75dc661f516f988fd81430" prot="private" virt="non-virtual"><scope>Fitter</scope><name>checkExpectedBeamThroughEntity</name></member>
      <member refid="classFitter_1ad82d546290a8d0fa8ba2091a7139325e" prot="public" virt="non-virtual"><scope>Fitter</scope><name>configureBeamModel</name></member>
      <member refid="classFitter_1a65065d42b6e060c7ac2e287ed4ee524f" prot="private" virt="non-virtual"><scope>Fitter</scope><name>configured_</name></member>
      <member refid="classFitter_1a8a46f221f5b20a6b2a2a44cbe46c938b" prot="private" virt="non-virtual"><scope>Fitter</scope><name>entity_shapes_</name></member>
      <member refid="classFitter_1a3cbcf2ef11c711eb5bc3cb01e00f9d9b" prot="public" virt="non-virtual"><scope>Fitter</scope><name>estimateEntityPose</name></member>
      <member refid="classFitter_1a1e087fff26440ceef6dc0f53575dc6e5" prot="private" virt="non-virtual"><scope>Fitter</scope><name>estimateEntityPoseImp</name></member>
      <member refid="classFitter_1a9a11923d654ca91b8e7bb45b40f0172e" prot="private" virt="non-virtual"><scope>Fitter</scope><name>evaluateCandidate</name></member>
      <member refid="classFitter_1acb857b873cba9ba6507d81a6464c9bca" prot="public" virt="non-virtual"><scope>Fitter</scope><name>findOptimum</name></member>
      <member refid="classFitter_1a1e2708d2341a9841aed9695efc0383a8" prot="public" virt="non-virtual"><scope>Fitter</scope><name>Fitter</name></member>
      <member refid="classFitter_1ab1e3399b738a39f2eba9dc9f0cd42237" prot="public" virt="non-virtual"><scope>Fitter</scope><name>Fitter</name></member>
      <member refid="classFitter_1ab851ff6a1c222fcd4053d77a65bd714a" prot="public" virt="non-virtual"><scope>Fitter</scope><name>Fitter</name></member>
      <member refid="classFitter_1af2adce958a648f34b06e2ddc816e7ead" prot="private" virt="non-virtual"><scope>Fitter</scope><name>get2DShape</name></member>
      <member refid="classFitter_1a5e9587019b45ed8caaf1a308fe7dee3d" prot="public" virt="non-virtual"><scope>Fitter</scope><name>GetOrCreateEntity2D</name></member>
      <member refid="classFitter_1ae8768e4805b73d86dcc476dec4504d01" prot="public" virt="non-virtual"><scope>Fitter</scope><name>isConfigured</name></member>
      <member refid="classFitter_1a109c58459f22239b805d9f8f2e952f70" prot="private" virt="non-virtual"><scope>Fitter</scope><name>model_loader_</name></member>
      <member refid="classFitter_1a2c288eea72aba4a9ae58ec2541e443ef" prot="private" virt="non-virtual"><scope>Fitter</scope><name>nr_data_points_</name></member>
      <member refid="classFitter_1a4cbf48062d3af6d55fde3a0c01aaea65" prot="private" virt="non-virtual"><scope>Fitter</scope><name>preProcessInputData</name></member>
      <member refid="classFitter_1a8dd85e00f88582fbb5fea699840b88a3" prot="public" virt="non-virtual"><scope>Fitter</scope><name>processSensorData</name></member>
      <member refid="classFitter_1a3befefdb0da539edf71f53c97feef82b" prot="private" virt="non-virtual"><scope>Fitter</scope><name>renderEntity</name></member>
      <member refid="classFitter_1a039c4fc049ed0431886fb643b4cf0918" prot="private" virt="non-virtual"><scope>Fitter</scope><name>renderWorldModel2D</name></member>
      <member refid="classFitter_1a79f2b09e42fd66fa7f3a8322184f4af2" prot="public" virt="non-virtual"><scope>Fitter</scope><name>~Fitter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
