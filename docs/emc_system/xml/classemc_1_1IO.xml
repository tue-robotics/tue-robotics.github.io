<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classemc_1_1IO" kind="class" language="C++" prot="public">
    <compoundname>emc::IO</compoundname>
    <includes refid="io_8h" local="no">io.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classemc_1_1IO_1a7a743c585d307b81a8036801a7c071b4" prot="private" static="no" mutable="no">
        <type><ref refid="classemc_1_1Communication" kindref="compound">Communication</ref> *</type>
        <definition>Communication* emc::IO::comm_</definition>
        <argsstring></argsstring>
        <name>comm_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="177" column="19" bodyfile="include/emc/io.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemc_1_1IO_1a0d84f1567b2bacebd805f848ec9eaaf6" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool emc::IO::odom_set_</definition>
        <argsstring></argsstring>
        <name>odom_set_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="175" column="10" bodyfile="include/emc/io.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemc_1_1IO_1a9da100cc52ee54133c03a5d35fd0374f" prot="private" static="no" mutable="no">
        <type><ref refid="structemc_1_1OdometryData" kindref="compound">OdometryData</ref></type>
        <definition>OdometryData emc::IO::prev_odom_</definition>
        <argsstring></argsstring>
        <name>prev_odom_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="174" column="18" bodyfile="include/emc/io.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classemc_1_1IO_1af7f31d3c3574d4dfd3a264178e42dde4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>emc::IO::IO</definition>
        <argsstring>(Communication *comm=nullptr)</argsstring>
        <name>IO</name>
        <param>
          <type><ref refid="classemc_1_1Communication" kindref="compound">Communication</ref> *</type>
          <declname>comm</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="23" column="5" bodyfile="src/io.cpp" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1a95d923d77fd06a3bf916b24b95d0acd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>emc::IO::IO</definition>
        <argsstring>(std::string robot_name)</argsstring>
        <name>IO</name>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
          <declname>robot_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="24" column="5" bodyfile="src/io.cpp" bodystart="24" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1aa984651bf6fa0026fe82214f66ac8e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void emc::IO::localization_viz_send_laser_scan</definition>
        <argsstring>(double angle_min, double angle_max, double angle_inc, int subsample, std::vector&lt; float &gt; prediction)</argsstring>
        <name>localization_viz_send_laser_scan</name>
        <param>
          <type>double</type>
          <declname>angle_min</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle_max</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle_inc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>subsample</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; float &gt;</type>
          <declname>prediction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="142" column="10" bodyfile="src/io.cpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1a1bcbcbb3b232603a49dd06f311ec1aea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void emc::IO::localization_viz_send_particles</definition>
        <argsstring>(int N, std::vector&lt; std::vector&lt; double &gt;&gt; particle_poses, double mapOrientation)</argsstring>
        <name>localization_viz_send_particles</name>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; double &gt;&gt;</type>
          <declname>particle_poses</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mapOrientation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="143" column="10" bodyfile="src/io.cpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1a1d37679d738b34f7aea0d5e3490d2d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void emc::IO::localization_viz_send_pose</definition>
        <argsstring>(std::vector&lt; double &gt; pose, double mapOrientation)</argsstring>
        <name>localization_viz_send_pose</name>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; double &gt;</type>
          <declname>pose</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mapOrientation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="144" column="10" bodyfile="src/io.cpp" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1a623ec7fcc006e85bbd1fd853faf9086a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool emc::IO::ok</definition>
        <argsstring>()</argsstring>
        <name>ok</name>
        <briefdescription>
<para>Check connection to the robot. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true Connected to the robot </para>
</simplesect>
<simplesect kind="return"><para>false Connection to the robot lost </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="102" column="10" bodyfile="src/io.cpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1abb7630d934f4056259d40be03522c45d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void emc::IO::play</definition>
        <argsstring>(const std::string &amp;file)</argsstring>
        <name>play</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Play a sound file out loud. The file must be placed in the ~/MRC_audio folder and must be of .mp3 or .wav format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>filename, including extension </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="116" column="10" bodyfile="src/io.cpp" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1a386ee97e11199de14803a3f98ed2804f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool emc::IO::readBackBumperData</definition>
        <argsstring>(BumperData &amp;bumper)</argsstring>
        <name>readBackBumperData</name>
        <param>
          <type><ref refid="structemc_1_1BumperData" kindref="compound">BumperData</ref> &amp;</type>
          <declname>bumper</declname>
        </param>
        <briefdescription>
<para>Receive new <ref refid="structemc_1_1BumperData" kindref="compound">BumperData</ref> from the rear bumper. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bumper</parametername>
</parameternamelist>
<parameterdescription>
<para>Bumberdata object to write the new data to, untouched if no data is available </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if new data was available </para>
</simplesect>
<simplesect kind="return"><para>false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="79" column="10" bodyfile="src/io.cpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1a26cfd39c68762159adc96f94cf112129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool emc::IO::readFrontBumperData</definition>
        <argsstring>(BumperData &amp;bumper)</argsstring>
        <name>readFrontBumperData</name>
        <param>
          <type><ref refid="structemc_1_1BumperData" kindref="compound">BumperData</ref> &amp;</type>
          <declname>bumper</declname>
        </param>
        <briefdescription>
<para>Receive new <ref refid="structemc_1_1BumperData" kindref="compound">BumperData</ref> from the front bumper. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bumper</parametername>
</parameternamelist>
<parameterdescription>
<para>Bumberdata object to write the new data to, untouched if no data is available </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if new data was available </para>
</simplesect>
<simplesect kind="return"><para>false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="70" column="10" bodyfile="src/io.cpp" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1a2f414cefc0eb0a5ec4732395b6e86b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool emc::IO::readLaserData</definition>
        <argsstring>(LaserData &amp;scan)</argsstring>
        <name>readLaserData</name>
        <param>
          <type><ref refid="structemc_1_1LaserData" kindref="compound">LaserData</ref> &amp;</type>
          <declname>scan</declname>
        </param>
        <briefdescription>
<para>Receive new laser data if available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scan</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to a <ref refid="structemc_1_1LaserData" kindref="compound">LaserData</ref> object to write the new data to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if new laser data was available </para>
</simplesect>
<simplesect kind="return"><para>false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="35" column="10" bodyfile="src/io.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1aae7fcad67545cb7c81119229b49e3a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool emc::IO::readOdometryData</definition>
        <argsstring>(OdometryData &amp;odom)</argsstring>
        <name>readOdometryData</name>
        <param>
          <type><ref refid="structemc_1_1OdometryData" kindref="compound">OdometryData</ref> &amp;</type>
          <declname>odom</declname>
        </param>
        <briefdescription>
<para>Receive new odometrydata if available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">odom</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to an <ref refid="structemc_1_1OdometryData" kindref="compound">OdometryData</ref> object to write the new data to. provides displacement since last time this function or <ref refid="classemc_1_1IO_1ac85e7fa95fe85f7b0bbf146e1b493481" kindref="member">resetOdometry()</ref> was called. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if new data was available </para>
</simplesect>
<simplesect kind="return"><para>false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="54" column="10" bodyfile="src/io.cpp" bodystart="44" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1ad05369504f688bca0d4b5fdc76a7434e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool emc::IO::readPoseData</definition>
        <argsstring>(PoseData &amp;pose)</argsstring>
        <name>readPoseData</name>
        <param>
          <type><ref refid="structemc_1_1PoseData" kindref="compound">PoseData</ref> &amp;</type>
          <declname>pose</declname>
        </param>
        <briefdescription>
<para>Receive new pose data if available. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pose</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to a <ref refid="structemc_1_1PoseData" kindref="compound">PoseData</ref> object to write the new data to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if new pose data was available </para>
</simplesect>
<simplesect kind="return"><para>false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="44" column="10" bodyfile="src/io.cpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1ac85e7fa95fe85f7b0bbf146e1b493481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool emc::IO::resetOdometry</definition>
        <argsstring>()</argsstring>
        <name>resetOdometry</name>
        <briefdescription>
<para>Set the current position as (0,0,0) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if new data was available to reset, false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="61" column="10" bodyfile="src/io.cpp" bodystart="69" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1ae1e38c072d453374c0b361bf2a2f4479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void emc::IO::sendBaseReference</definition>
        <argsstring>(double vx, double vy, double va)</argsstring>
        <name>sendBaseReference</name>
        <param>
          <type>double</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>va</declname>
        </param>
        <briefdescription>
<para>Send a command velocity to the robot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vx</parametername>
</parameternamelist>
<parameterdescription>
<para>[m/s] Desired velocity in x direction (forward) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vy</parametername>
</parameternamelist>
<parameterdescription>
<para>[m/s] Desired velocity in y direction (left) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>va</parametername>
</parameternamelist>
<parameterdescription>
<para>[rad/s] Desired rotational velocity. Turning to the left is positive </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="88" column="10" bodyfile="src/io.cpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1a6e7e00099b9058b98044a6004180164c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void emc::IO::sendOpendoorRequest</definition>
        <argsstring>()</argsstring>
        <name>sendOpendoorRequest</name>
        <briefdescription>
<para>Broadcast a request to open nearby doors. Works in simulator only. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="94" column="10" bodyfile="src/io.cpp" bodystart="94" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1ab83a59d3167632dbb71aa59573ba2e5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool emc::IO::sendPath</definition>
        <argsstring>(std::vector&lt; std::vector&lt; double &gt;&gt; path, std::array&lt; double, 3 &gt; color={0.0, 0.0, 0.0}, double width=0.02, int id=0)</argsstring>
        <name>sendPath</name>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; double &gt;&gt;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/array" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::array</ref>&lt; double, 3 &gt;</type>
          <declname>color</declname>
          <defval>{0.0, 0.0, 0.0}</defval>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
          <defval>0.02</defval>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Send a path to be drawn in rviz. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The sequence of points, between which the path will be drawn. The sequence must be provided as a vector of points, where each point is formatted as {x,y,z} or {x,y}. Coordinates are relative to the centre of the map (same as simulator coordinates). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The color in which the path will be drawn. Format is {r,g,b}, with each value between 0.0 and 1.0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>[m] Line width. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of this path. When drawing multiple paths, each sequence must have a unique id. Sending a new path with the same id will overwrite the previous path.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Path is sent to rviz. </para>
</simplesect>
<simplesect kind="return"><para>false Path does not have enough valid points. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="129" column="10" bodyfile="src/io.cpp" bodystart="124" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1aa2a965f14eb373bd5cd879d553847b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool emc::IO::sendPoseEstimate</definition>
        <argsstring>(double x, double y, double yaw)</argsstring>
        <name>sendPoseEstimate</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yaw</declname>
        </param>
        <briefdescription>
<para>Send an estimate of the current robot pose to be shown in rviz, relative to the centre of the map (same as simulator coordinates). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yaw</parametername>
</parameternamelist>
<parameterdescription>
<para>The yaw rotation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="139" column="10" bodyfile="src/io.cpp" bodystart="191" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1aa2641df2b1a306758936beaaf98b23f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void emc::IO::speak</definition>
        <argsstring>(const std::string &amp;text)</argsstring>
        <name>speak</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Make the robot speak the input text. This function is non-blocking. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Sentence to be spoken by the robot. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="109" column="10" bodyfile="src/io.cpp" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1a401b529083e458e7b9a187b8903ec461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>emc::IO::~IO</definition>
        <argsstring>()</argsstring>
        <name>~IO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="26" column="5" bodyfile="src/io.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classemc_1_1IO_1a04151b1538856b94dbdf0ed70d01d054" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool emc::IO::sendPoseEstimate</definition>
        <argsstring>(double px, double py, double pz, double rr, double rp, double ry)</argsstring>
        <name>sendPoseEstimate</name>
        <param>
          <type>double</type>
          <declname>px</declname>
        </param>
        <param>
          <type>double</type>
          <declname>py</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pz</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ry</declname>
        </param>
        <briefdescription>
<para>Send an estimate of the current robot pose to be shown in rviz. Rotation is provided as roll pitch and yaw. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>px</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>py</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pz</parametername>
</parameternamelist>
<parameterdescription>
<para>The z coordinate of the position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rr</parametername>
</parameternamelist>
<parameterdescription>
<para>The roll component of the rotation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rp</parametername>
</parameternamelist>
<parameterdescription>
<para>The pitch component of the rotation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ry</parametername>
</parameternamelist>
<parameterdescription>
<para>The yaw component of the rotation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="171" column="10" bodyfile="src/io.cpp" bodystart="183" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1IO_1ab024fdb5f0ac42aba4d396bbdfc90049" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool emc::IO::sendPoseEstimate</definition>
        <argsstring>(double px, double py, double pz, double rx, double ry, double rz, double rw)</argsstring>
        <name>sendPoseEstimate</name>
        <param>
          <type>double</type>
          <declname>px</declname>
        </param>
        <param>
          <type>double</type>
          <declname>py</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pz</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ry</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rz</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rw</declname>
        </param>
        <briefdescription>
<para>Send an estimate of the current robot pose to be shown in rviz. Rotation is provided as a quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>px</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>py</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pz</parametername>
</parameternamelist>
<parameterdescription>
<para>The z coordinate of the position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx</parametername>
</parameternamelist>
<parameterdescription>
<para>The x component of the rotation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ry</parametername>
</parameternamelist>
<parameterdescription>
<para>The y component of the rotation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rz</parametername>
</parameternamelist>
<parameterdescription>
<para>The z component of the rotation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rw</parametername>
</parameternamelist>
<parameterdescription>
<para>The w component of the rotation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/io.h" line="159" column="10" bodyfile="src/io.cpp" bodystart="172" bodyend="181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="5">
        <label>emc::OdometryData</label>
        <link refid="structemc_1_1OdometryData"/>
      </node>
      <node id="3">
        <label>std::unique_ptr&lt; tf2_ros::TransformBroadcaster &gt;</label>
        <link refid="cpp/memory/unique_ptr" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="1">
        <label>emc::IO</label>
        <link refid="classemc_1_1IO"/>
        <childnode refid="2" relation="usage">
          <edgelabel>comm_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>prev_odom_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>emc::Communication</label>
        <link refid="classemc_1_1Communication"/>
        <childnode refid="3" relation="usage">
          <edgelabel>pub_tf2</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>robot_frame_name</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::string</label>
        <link refid="cpp/string/basic_string" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="include/emc/io.h" line="19" column="1" bodyfile="include/emc/io.h" bodystart="18" bodyend="179"/>
    <listofallmembers>
      <member refid="classemc_1_1IO_1a7a743c585d307b81a8036801a7c071b4" prot="private" virt="non-virtual"><scope>emc::IO</scope><name>comm_</name></member>
      <member refid="classemc_1_1IO_1af7f31d3c3574d4dfd3a264178e42dde4" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>IO</name></member>
      <member refid="classemc_1_1IO_1a95d923d77fd06a3bf916b24b95d0acd8" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>IO</name></member>
      <member refid="classemc_1_1IO_1aa984651bf6fa0026fe82214f66ac8e48" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>localization_viz_send_laser_scan</name></member>
      <member refid="classemc_1_1IO_1a1bcbcbb3b232603a49dd06f311ec1aea" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>localization_viz_send_particles</name></member>
      <member refid="classemc_1_1IO_1a1d37679d738b34f7aea0d5e3490d2d3a" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>localization_viz_send_pose</name></member>
      <member refid="classemc_1_1IO_1a0d84f1567b2bacebd805f848ec9eaaf6" prot="private" virt="non-virtual"><scope>emc::IO</scope><name>odom_set_</name></member>
      <member refid="classemc_1_1IO_1a623ec7fcc006e85bbd1fd853faf9086a" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>ok</name></member>
      <member refid="classemc_1_1IO_1abb7630d934f4056259d40be03522c45d" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>play</name></member>
      <member refid="classemc_1_1IO_1a9da100cc52ee54133c03a5d35fd0374f" prot="private" virt="non-virtual"><scope>emc::IO</scope><name>prev_odom_</name></member>
      <member refid="classemc_1_1IO_1a386ee97e11199de14803a3f98ed2804f" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>readBackBumperData</name></member>
      <member refid="classemc_1_1IO_1a26cfd39c68762159adc96f94cf112129" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>readFrontBumperData</name></member>
      <member refid="classemc_1_1IO_1a2f414cefc0eb0a5ec4732395b6e86b67" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>readLaserData</name></member>
      <member refid="classemc_1_1IO_1aae7fcad67545cb7c81119229b49e3a4f" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>readOdometryData</name></member>
      <member refid="classemc_1_1IO_1ad05369504f688bca0d4b5fdc76a7434e" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>readPoseData</name></member>
      <member refid="classemc_1_1IO_1ac85e7fa95fe85f7b0bbf146e1b493481" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>resetOdometry</name></member>
      <member refid="classemc_1_1IO_1ae1e38c072d453374c0b361bf2a2f4479" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>sendBaseReference</name></member>
      <member refid="classemc_1_1IO_1a6e7e00099b9058b98044a6004180164c" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>sendOpendoorRequest</name></member>
      <member refid="classemc_1_1IO_1ab83a59d3167632dbb71aa59573ba2e5e" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>sendPath</name></member>
      <member refid="classemc_1_1IO_1aa2a965f14eb373bd5cd879d553847b4d" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>sendPoseEstimate</name></member>
      <member refid="classemc_1_1IO_1ab024fdb5f0ac42aba4d396bbdfc90049" prot="private" virt="non-virtual"><scope>emc::IO</scope><name>sendPoseEstimate</name></member>
      <member refid="classemc_1_1IO_1a04151b1538856b94dbdf0ed70d01d054" prot="private" virt="non-virtual"><scope>emc::IO</scope><name>sendPoseEstimate</name></member>
      <member refid="classemc_1_1IO_1aa2641df2b1a306758936beaaf98b23f1" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>speak</name></member>
      <member refid="classemc_1_1IO_1a401b529083e458e7b9a187b8903ec461" prot="public" virt="non-virtual"><scope>emc::IO</scope><name>~IO</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
