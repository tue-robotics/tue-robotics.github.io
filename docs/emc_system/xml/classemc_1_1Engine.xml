<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classemc_1_1Engine" kind="class" language="C++" prot="public">
    <compoundname>emc::Engine</compoundname>
    <includes refid="engine_8h" local="no">engine.h</includes>
    <innerclass refid="structemc_1_1Engine_1_1StateDetail" prot="private">emc::Engine::StateDetail</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classemc_1_1Engine_1af54be7f8c4cacfd77e0e1bbf22136b5f" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/map" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::map</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref>, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; emc::Engine::event_to_int</definition>
        <argsstring></argsstring>
        <name>event_to_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="92" column="14" bodyfile="include/emc/engine.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemc_1_1Engine_1a96c1db3e1d55e9dc2415be5ef81064ec" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &gt;</type>
        <definition>std::vector&lt;std::string&gt; emc::Engine::events</definition>
        <argsstring></argsstring>
        <name>events</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="96" column="17" bodyfile="include/emc/engine.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemc_1_1Engine_1a4a22fdef468c2d8f809682c83ee157c1" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool emc::Engine::has_error_</definition>
        <argsstring></argsstring>
        <name>has_error_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="164" column="10" bodyfile="include/emc/engine.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemc_1_1Engine_1a22e6dce6dbcd07c4a6bd0cdafcf46f6a" prot="private" static="no" mutable="no">
        <type><ref refid="classemc_1_1IO" kindref="compound">IO</ref> *</type>
        <definition>IO* emc::Engine::io_</definition>
        <argsstring></argsstring>
        <name>io_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="79" column="8" bodyfile="include/emc/engine.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemc_1_1Engine_1a32b4f5ae914b5fce75e56b2bdfbd6f50" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double emc::Engine::loop_freq_</definition>
        <argsstring></argsstring>
        <name>loop_freq_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="102" column="12" bodyfile="include/emc/engine.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemc_1_1Engine_1a4a24da7f8f40ff7f618a84b6da9a461b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int emc::Engine::state_</definition>
        <argsstring></argsstring>
        <name>state_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="81" column="9" bodyfile="include/emc/engine.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemc_1_1Engine_1aeffc5af8e0f5947464938bd9b10c7563" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="structemc_1_1Engine_1_1StateDetail" kindref="compound">StateDetail</ref> &gt;</type>
        <definition>std::vector&lt;StateDetail&gt; emc::Engine::state_details</definition>
        <argsstring></argsstring>
        <name>state_details</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="98" column="17" bodyfile="include/emc/engine.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemc_1_1Engine_1a4675ed4a81c251262d2ac0ea2a156671" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/map" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::map</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref>, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; emc::Engine::state_to_int</definition>
        <argsstring></argsstring>
        <name>state_to_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="94" column="14" bodyfile="include/emc/engine.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classemc_1_1Engine_1ad7ca3d6dbcad88d659d9e27037d471f4" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* emc::Engine::user_data_</definition>
        <argsstring></argsstring>
        <name>user_data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="100" column="10" bodyfile="include/emc/engine.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classemc_1_1Engine_1aa00246d92f5974eb949b91c48472e5b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>emc::Engine::Engine</definition>
        <argsstring>()</argsstring>
        <name>Engine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="26" column="5" bodyfile="src/engine.cpp" bodystart="12" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1a1aa3534669d705a096bea8622437d89f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void emc::Engine::registerState</definition>
        <argsstring>(const char *state, state_function func)</argsstring>
        <name>registerState</name>
        <param>
          <type>const char *</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="namespaceemc_1ab25f6ccc893f42e9026d8c58f43ea57b" kindref="member">state_function</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="37" column="10" bodyfile="include/emc/engine.h" bodystart="37" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1a2839a767481bce475fda90547d579cbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void emc::Engine::registerTransition</definition>
        <argsstring>(const char *state1, const char *event, const char *state2)</argsstring>
        <name>registerTransition</name>
        <param>
          <type>const char *</type>
          <declname>state1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>state2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="47" column="10" bodyfile="include/emc/engine.h" bodystart="47" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1a012db60dc3250b69b996fa729122ca58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void emc::Engine::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="71" column="10" bodyfile="src/engine.cpp" bodystart="29" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1aa594e5cefa0b96089d96d5d5bee5b609" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void emc::Engine::setInitialState</definition>
        <argsstring>(const char *state)</argsstring>
        <name>setInitialState</name>
        <param>
          <type>const char *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="30" column="10" bodyfile="include/emc/engine.h" bodystart="30" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1af567a0b451675b9b3679cd4020c7e9f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void emc::Engine::setLoopFrequency</definition>
        <argsstring>(double freq)</argsstring>
        <name>setLoopFrequency</name>
        <param>
          <type>double</type>
          <declname>freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="73" column="10" bodyfile="include/emc/engine.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1ac3a1a2902f1ec9bd1bd3465f086951a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void emc::Engine::setUserData</definition>
        <argsstring>(void *user_data)</argsstring>
        <name>setUserData</name>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="75" column="10" bodyfile="include/emc/engine.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1a3fad971dd094bf5ffc8f50d57e259a0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>emc::Engine::~Engine</definition>
        <argsstring>()</argsstring>
        <name>~Engine</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="28" column="5" bodyfile="src/engine.cpp" bodystart="21" bodyend="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classemc_1_1Engine_1a99ef52b0d08a8c3affc92098a733aa69" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void emc::Engine::addError</definition>
        <argsstring>(const std::string &amp;err)</argsstring>
        <name>addError</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="166" column="10" bodyfile="include/emc/engine.h" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1aeeb2de65ce18c8c30f952eb8fee33453" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int emc::Engine::addState</definition>
        <argsstring>(const char *state)</argsstring>
        <name>addState</name>
        <param>
          <type>const char *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="104" column="9" bodyfile="include/emc/engine.h" bodystart="104" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1adf994b246747cc7cc01f56ccecb84d93" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
        <definition>const std::string&amp; emc::Engine::eventToString</definition>
        <argsstring>(int event_id)</argsstring>
        <name>eventToString</name>
        <param>
          <type>int</type>
          <declname>event_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="159" column="23" bodyfile="include/emc/engine.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1a99b02f1fe980b6841a998b07172e6502" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int emc::Engine::getEvent</definition>
        <argsstring>(const char *event)</argsstring>
        <name>getEvent</name>
        <param>
          <type>const char *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="134" column="9" bodyfile="include/emc/engine.h" bodystart="134" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1a02740624249d92d5cc9cad54cebf4b87" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int emc::Engine::getOrAddEvent</definition>
        <argsstring>(const char *event)</argsstring>
        <name>getOrAddEvent</name>
        <param>
          <type>const char *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="142" column="9" bodyfile="include/emc/engine.h" bodystart="142" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1a0500ac827e94a4cfe24d64435d45ca3d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int emc::Engine::getState</definition>
        <argsstring>(const char *state)</argsstring>
        <name>getState</name>
        <param>
          <type>const char *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="121" column="9" bodyfile="include/emc/engine.h" bodystart="121" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classemc_1_1Engine_1a6eaeadc39208bbaf3f00d9f2abd22b20" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
        <definition>const std::string&amp; emc::Engine::stateToString</definition>
        <argsstring>(int state_id)</argsstring>
        <name>stateToString</name>
        <param>
          <type>int</type>
          <declname>state_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/emc/engine.h" line="129" column="23" bodyfile="include/emc/engine.h" bodystart="129" bodyend="132"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="8">
        <label>std::vector&lt; emc::Engine::StateDetail &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="1">
        <label>emc::Engine</label>
        <link refid="classemc_1_1Engine"/>
        <childnode refid="2" relation="usage">
          <edgelabel>event_to_int</edgelabel>
          <edgelabel>state_to_int</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>io_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>state_details</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>events</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>emc::OdometryData</label>
        <link refid="structemc_1_1OdometryData"/>
      </node>
      <node id="5">
        <label>std::unique_ptr&lt; tf2_ros::TransformBroadcaster &gt;</label>
        <link refid="cpp/memory/unique_ptr" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="9">
        <label>std::vector&lt; std::string &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="3">
        <label>emc::IO</label>
        <link refid="classemc_1_1IO"/>
        <childnode refid="4" relation="usage">
          <edgelabel>comm_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>prev_odom_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>emc::Communication</label>
        <link refid="classemc_1_1Communication"/>
        <childnode refid="5" relation="usage">
          <edgelabel>pub_tf2</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>robot_frame_name</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::map&lt; std::string, int &gt;</label>
        <link refid="cpp/container/map" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="6">
        <label>std::string</label>
        <link refid="cpp/string/basic_string" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="include/emc/engine.h" line="22" column="1" bodyfile="include/emc/engine.h" bodystart="21" bodyend="172"/>
    <listofallmembers>
      <member refid="classemc_1_1Engine_1a99ef52b0d08a8c3affc92098a733aa69" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>addError</name></member>
      <member refid="classemc_1_1Engine_1aeeb2de65ce18c8c30f952eb8fee33453" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>addState</name></member>
      <member refid="classemc_1_1Engine_1aa00246d92f5974eb949b91c48472e5b5" prot="public" virt="non-virtual"><scope>emc::Engine</scope><name>Engine</name></member>
      <member refid="classemc_1_1Engine_1af54be7f8c4cacfd77e0e1bbf22136b5f" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>event_to_int</name></member>
      <member refid="classemc_1_1Engine_1a96c1db3e1d55e9dc2415be5ef81064ec" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>events</name></member>
      <member refid="classemc_1_1Engine_1adf994b246747cc7cc01f56ccecb84d93" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>eventToString</name></member>
      <member refid="classemc_1_1Engine_1a99b02f1fe980b6841a998b07172e6502" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>getEvent</name></member>
      <member refid="classemc_1_1Engine_1a02740624249d92d5cc9cad54cebf4b87" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>getOrAddEvent</name></member>
      <member refid="classemc_1_1Engine_1a0500ac827e94a4cfe24d64435d45ca3d" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>getState</name></member>
      <member refid="classemc_1_1Engine_1a4a22fdef468c2d8f809682c83ee157c1" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>has_error_</name></member>
      <member refid="classemc_1_1Engine_1a22e6dce6dbcd07c4a6bd0cdafcf46f6a" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>io_</name></member>
      <member refid="classemc_1_1Engine_1a32b4f5ae914b5fce75e56b2bdfbd6f50" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>loop_freq_</name></member>
      <member refid="classemc_1_1Engine_1a1aa3534669d705a096bea8622437d89f" prot="public" virt="non-virtual"><scope>emc::Engine</scope><name>registerState</name></member>
      <member refid="classemc_1_1Engine_1a2839a767481bce475fda90547d579cbe" prot="public" virt="non-virtual"><scope>emc::Engine</scope><name>registerTransition</name></member>
      <member refid="classemc_1_1Engine_1a012db60dc3250b69b996fa729122ca58" prot="public" virt="non-virtual"><scope>emc::Engine</scope><name>run</name></member>
      <member refid="classemc_1_1Engine_1aa594e5cefa0b96089d96d5d5bee5b609" prot="public" virt="non-virtual"><scope>emc::Engine</scope><name>setInitialState</name></member>
      <member refid="classemc_1_1Engine_1af567a0b451675b9b3679cd4020c7e9f4" prot="public" virt="non-virtual"><scope>emc::Engine</scope><name>setLoopFrequency</name></member>
      <member refid="classemc_1_1Engine_1ac3a1a2902f1ec9bd1bd3465f086951a8" prot="public" virt="non-virtual"><scope>emc::Engine</scope><name>setUserData</name></member>
      <member refid="classemc_1_1Engine_1a4a24da7f8f40ff7f618a84b6da9a461b" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>state_</name></member>
      <member refid="classemc_1_1Engine_1aeffc5af8e0f5947464938bd9b10c7563" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>state_details</name></member>
      <member refid="classemc_1_1Engine_1a4675ed4a81c251262d2ac0ea2a156671" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>state_to_int</name></member>
      <member refid="classemc_1_1Engine_1a6eaeadc39208bbaf3f00d9f2abd22b20" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>stateToString</name></member>
      <member refid="classemc_1_1Engine_1ad7ca3d6dbcad88d659d9e27037d471f4" prot="private" virt="non-virtual"><scope>emc::Engine</scope><name>user_data_</name></member>
      <member refid="classemc_1_1Engine_1a3fad971dd094bf5ffc8f50d57e259a0f" prot="public" virt="non-virtual"><scope>emc::Engine</scope><name>~Engine</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
