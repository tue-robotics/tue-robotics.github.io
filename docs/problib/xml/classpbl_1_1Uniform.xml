<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpbl_1_1Uniform" kind="class" language="C++" prot="public">
    <compoundname>pbl::Uniform</compoundname>
    <basecompoundref refid="classpbl_1_1PDF" prot="public" virt="non-virtual">pbl::PDF</basecompoundref>
    <includes refid="Uniform_8h" local="no">Uniform.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classpbl_1_1Uniform_1a7d6c5f8c4cc7fb8c006a495bb8508ec0" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacepbl_1ad482b8fd5913dda4f195b54fb1451d4e" kindref="member">pbl::Vector</ref></type>
        <definition>pbl::Vector pbl::Uniform::mean_</definition>
        <argsstring></argsstring>
        <name>mean_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="215" column="17" bodyfile="include/problib/pdfs/Uniform.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpbl_1_1Uniform_1a087f431532c213c024d4a5fc0e2281ed" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacepbl_1ad482b8fd5913dda4f195b54fb1451d4e" kindref="member">pbl::Vector</ref></type>
        <definition>pbl::Vector pbl::Uniform::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="217" column="17" bodyfile="include/problib/pdfs/Uniform.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpbl_1_1Uniform_1a1e013ddab488e11693df30de0aa99f0f" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool pbl::Uniform::size_is_set_</definition>
        <argsstring></argsstring>
        <name>size_is_set_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="221" column="10" bodyfile="include/problib/pdfs/Uniform.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classpbl_1_1Uniform_1af58304b2e29cd779026f88943a03f9d0" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double pbl::Uniform::uniform_probability_</definition>
        <argsstring></argsstring>
        <name>uniform_probability_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="219" column="12" bodyfile="include/problib/pdfs/Uniform.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpbl_1_1Uniform_1a0839664e2e1c71c0f82359d77db410a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classpbl_1_1Uniform" kindref="compound">Uniform</ref> *</type>
        <definition>Uniform * Uniform::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="classpbl_1_1PDF_1affbb74c36b26a28e9efd99397e14799c">clone</reimplements>
        <briefdescription>
<para>Creates a clone of the object. The clone method is cheap since it only copies a pointer. A deep clone will only be created if the original object is modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="169" column="13" bodyfile="src/pdfs/Uniform.cpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1ac571176969bf2e7d0659d53c672e2f45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Uniform::getDensity</definition>
        <argsstring>(const arma::vec &amp;vec) const</argsstring>
        <name>getDensity</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Calculates the density of the distribution at point v. Will always return the same density if v is inside the volume, and 0 otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to calculate the density for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The density of the distribution at point v </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="186" column="12" bodyfile="src/pdfs/Uniform.cpp" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1a6529e7656b3d59990403c6a8b0b75af2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Uniform::getLikelihood</definition>
        <argsstring>(const PDF &amp;pdf) const</argsstring>
        <name>getLikelihood</name>
        <reimplements refid="classpbl_1_1PDF_1a75063befbf3b4dcbbba049729e871f33">getLikelihood</reimplements>
        <param>
          <type>const <ref refid="classpbl_1_1PDF" kindref="compound">PDF</ref> &amp;</type>
          <declname>pdf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="171" column="12" bodyfile="src/pdfs/Uniform.cpp" bodystart="74" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1a91c89fb5307ee6c08f1644014d11ac28" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Uniform::getMaxDensity</definition>
        <argsstring>() const</argsstring>
        <name>getMaxDensity</name>
        <reimplements refid="classpbl_1_1PDF_1a6596464547ef85956a059afbf4ec2d42">getMaxDensity</reimplements>
        <briefdescription>
<para>Returns the maximum density of this distribution, which always equals 1 / volume. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The maximum density of this distribution </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="192" column="12" bodyfile="src/pdfs/Uniform.cpp" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1ab99a98f946bcf01224cc96bc196d3ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpbl_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
        <definition>Uniform &amp; Uniform::operator=</definition>
        <argsstring>(const Uniform &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classpbl_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment operator. The operation is cheap since it only copies a pointer. A deep clone will only be created if the original object is modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="162" column="13" bodyfile="src/pdfs/Uniform.cpp" bodystart="59" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1a6b64500f1d2baf34c8d979f8098d7160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Uniform::setDensity</definition>
        <argsstring>(const double &amp;density)</argsstring>
        <name>setDensity</name>
        <param>
          <type>const double &amp;</type>
          <declname>density</declname>
        </param>
        <briefdescription>
<para>Sets the density of the uniform distribution. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Only makes sense if the size of the volume is not set </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>density</parametername>
</parameternamelist>
<parameterdescription>
<para>The uniform density of the distribution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="178" column="10" bodyfile="src/pdfs/Uniform.cpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1ac87874934e850020c1d6b403f063da82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Uniform::setMean</definition>
        <argsstring>(const pbl::Vector mean)</argsstring>
        <name>setMean</name>
        <param>
          <type>const <ref refid="namespacepbl_1ad482b8fd5913dda4f195b54fb1451d4e" kindref="member">pbl::Vector</ref></type>
          <declname>mean</declname>
        </param>
        <briefdescription>
<para>Set the mean of the volume representing this uniform distribution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mean</parametername>
</parameternamelist>
<parameterdescription>
<para>The mean of the volumne </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="198" column="10" bodyfile="src/pdfs/Uniform.cpp" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1a5513b72fcca54349abad50599ae7713f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Uniform::setSize</definition>
        <argsstring>(const pbl::Vector size)</argsstring>
        <name>setSize</name>
        <param>
          <type>const <ref refid="namespacepbl_1ad482b8fd5913dda4f195b54fb1451d4e" kindref="member">pbl::Vector</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set the size of the volume representing this uniform distribution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the volumne </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="204" column="10" bodyfile="src/pdfs/Uniform.cpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1aaa62b03c5586f8a7ae14ec9c0d01fae2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string Uniform::toString</definition>
        <argsstring>(const std::string &amp;indent=&quot;&quot;) const</argsstring>
        <name>toString</name>
        <reimplements refid="classpbl_1_1PDF_1aeb3576ce189b6d68ad98c83e85dc18a8">toString</reimplements>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>indent</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Represents the uniform distribution as a string for easier console output. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Should be changed into stream operator &lt;&lt; </para>
</simplesect>
<simplesect kind="return"><para>The <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> as string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="211" column="18" bodyfile="src/pdfs/Uniform.cpp" bodystart="154" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1a294775e87c7288c3d3691a16db35d1d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Uniform::Uniform</definition>
        <argsstring>(const Uniform &amp;pdf)</argsstring>
        <name>Uniform</name>
        <param>
          <type>const <ref refid="classpbl_1_1Uniform" kindref="compound">Uniform</ref> &amp;</type>
          <declname>pdf</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="150" column="5" bodyfile="src/pdfs/Uniform.cpp" bodystart="52" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1a04e2270ed7bb48b9d156bef84c83f734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Uniform::Uniform</definition>
        <argsstring>(int dim)</argsstring>
        <name>Uniform</name>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>Constructs a uniform distribution with known dimensionality but unknown size and density. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensionality of the uniform distribution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="128" column="5" bodyfile="src/pdfs/Uniform.cpp" bodystart="42" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1afe5c3f22f7e75f2b4ccff38b37269a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Uniform::Uniform</definition>
        <argsstring>(int dim, double density)</argsstring>
        <name>Uniform</name>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>double</type>
          <declname>density</declname>
        </param>
        <briefdescription>
<para>Constructs a uniform distribution with known dimensionality and density, but unknown shape. Will become obsolete in the future. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensionality of the uniform distribution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>density</parametername>
</parameternamelist>
<parameterdescription>
<para>The density of the uniform distribution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="136" column="5" bodyfile="src/pdfs/Uniform.cpp" bodystart="45" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1a5c76d7bdeab1e97ab7431c2987117a63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Uniform::Uniform</definition>
        <argsstring>(pbl::Vector mean, pbl::Vector size)</argsstring>
        <name>Uniform</name>
        <param>
          <type><ref refid="namespacepbl_1ad482b8fd5913dda4f195b54fb1451d4e" kindref="member">pbl::Vector</ref></type>
          <declname>mean</declname>
        </param>
        <param>
          <type><ref refid="namespacepbl_1ad482b8fd5913dda4f195b54fb1451d4e" kindref="member">pbl::Vector</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Constructs a uniform distribution with given mean value and size. The density of the distribution equals 1 / Volume, with the volume being determined by the size vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mean</parametername>
</parameternamelist>
<parameterdescription>
<para>The mean of the uniform distribution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the uniform distribution </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="145" column="5" bodyfile="src/pdfs/Uniform.cpp" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Uniform_1ac4aa361311eb7ec87c7d30c1c023b42a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Uniform::~Uniform</definition>
        <argsstring>()</argsstring>
        <name>~Uniform</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="155" column="13" bodyfile="src/pdfs/Uniform.cpp" bodystart="56" bodyend="57"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classpbl_1_1Uniform_1aaf8351ace84ed8034524d7829bb92cfa" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Uniform::calculateUniformDensity</definition>
        <argsstring>()</argsstring>
        <name>calculateUniformDensity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Uniform.h" line="223" column="10" bodyfile="src/pdfs/Uniform.cpp" bodystart="145" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class represents a hyper-cube shaped uniform distribution. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Sjoerd van den Dries </para>
</simplesect>
<simplesect kind="date"><para>December, 2012 </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>pbl::PDF</label>
        <link refid="classpbl_1_1PDF"/>
      </node>
      <node id="1">
        <label>pbl::Uniform</label>
        <link refid="classpbl_1_1Uniform"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>pbl::PDF</label>
        <link refid="classpbl_1_1PDF"/>
      </node>
      <node id="1">
        <label>pbl::Uniform</label>
        <link refid="classpbl_1_1Uniform"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/problib/pdfs/Uniform.h" line="85" column="25" bodyfile="include/problib/pdfs/Uniform.h" bodystart="85" bodyend="191"/>
    <listofallmembers>
      <member refid="classpbl_1_1Uniform_1aaf8351ace84ed8034524d7829bb92cfa" prot="protected" virt="non-virtual"><scope>pbl::Uniform</scope><name>calculateUniformDensity</name></member>
      <member refid="classpbl_1_1Uniform_1a0839664e2e1c71c0f82359d77db410a1" prot="public" virt="virtual"><scope>pbl::Uniform</scope><name>clone</name></member>
      <member refid="classpbl_1_1PDF_1ac9ff7596aef72e859b72cd10cc97856e" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>dimensions</name></member>
      <member refid="classpbl_1_1PDF_1a6f8608b083c0c9b728d758cc8abfd080" prot="protected" virt="non-virtual"><scope>pbl::Uniform</scope><name>dimensions_</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379aaf7cb21250734802ba35de4fba678fa7" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>DISCRETE</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379afac7bff316c2644b18bdfdb275930c80" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>EXACT</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a3c5de1fefb7fa1587270306a0d8dadda" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>GAUSSIAN</name></member>
      <member refid="classpbl_1_1Uniform_1ac571176969bf2e7d0659d53c672e2f45" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>getDensity</name></member>
      <member refid="classpbl_1_1PDF_1a78062884ae11faccad1fb9dca7d0adf4" prot="public" virt="virtual"><scope>pbl::Uniform</scope><name>getExpectedValue</name></member>
      <member refid="classpbl_1_1PDF_1aa7a2f5f2fb44600508e42a981fdb05a8" prot="public" virt="virtual"><scope>pbl::Uniform</scope><name>getExpectedValue</name></member>
      <member refid="classpbl_1_1Uniform_1a6529e7656b3d59990403c6a8b0b75af2" prot="public" virt="virtual"><scope>pbl::Uniform</scope><name>getLikelihood</name></member>
      <member refid="classpbl_1_1Uniform_1a91c89fb5307ee6c08f1644014d11ac28" prot="public" virt="virtual"><scope>pbl::Uniform</scope><name>getMaxDensity</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379aef5fcfac5caf3b865209f169af931fd7" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>HYBRID</name></member>
      <member refid="classpbl_1_1Uniform_1a7d6c5f8c4cc7fb8c006a495bb8508ec0" prot="protected" virt="non-virtual"><scope>pbl::Uniform</scope><name>mean_</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a73961eab1e18e0293800c9f9f8c9dec7" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>MIXTURE</name></member>
      <member refid="classpbl_1_1Uniform_1ab99a98f946bcf01224cc96bc196d3ea5" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>operator=</name></member>
      <member refid="classpbl_1_1PDF_1aa4c1979ee9c12af4821c79dbdf8c6c13" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>PDF</name></member>
      <member refid="classpbl_1_1PDF_1abc0396d3659e9ae7cd62c6756a378bfc" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>PDF</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>PDFType</name></member>
      <member refid="classpbl_1_1Uniform_1a6b64500f1d2baf34c8d979f8098d7160" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>setDensity</name></member>
      <member refid="classpbl_1_1Uniform_1ac87874934e850020c1d6b403f063da82" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>setMean</name></member>
      <member refid="classpbl_1_1Uniform_1a5513b72fcca54349abad50599ae7713f" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>setSize</name></member>
      <member refid="classpbl_1_1Uniform_1a087f431532c213c024d4a5fc0e2281ed" prot="protected" virt="non-virtual"><scope>pbl::Uniform</scope><name>size_</name></member>
      <member refid="classpbl_1_1Uniform_1a1e013ddab488e11693df30de0aa99f0f" prot="protected" virt="non-virtual"><scope>pbl::Uniform</scope><name>size_is_set_</name></member>
      <member refid="classpbl_1_1Uniform_1aaa62b03c5586f8a7ae14ec9c0d01fae2" prot="public" virt="virtual"><scope>pbl::Uniform</scope><name>toString</name></member>
      <member refid="classpbl_1_1PDF_1a011b1bd8e470e856b50090de57119407" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>type</name></member>
      <member refid="classpbl_1_1PDF_1ab657f4b62a973636061527b6024d8b37" prot="protected" virt="non-virtual"><scope>pbl::Uniform</scope><name>type_</name></member>
      <member refid="classpbl_1_1Uniform_1a04e2270ed7bb48b9d156bef84c83f734" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>Uniform</name></member>
      <member refid="classpbl_1_1Uniform_1afe5c3f22f7e75f2b4ccff38b37269a01" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>Uniform</name></member>
      <member refid="classpbl_1_1Uniform_1a5c76d7bdeab1e97ab7431c2987117a63" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>Uniform</name></member>
      <member refid="classpbl_1_1Uniform_1a294775e87c7288c3d3691a16db35d1d4" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>Uniform</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a85b72521cd38638448dc050b94962966" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>UNIFORM</name></member>
      <member refid="classpbl_1_1Uniform_1af58304b2e29cd779026f88943a03f9d0" prot="protected" virt="non-virtual"><scope>pbl::Uniform</scope><name>uniform_probability_</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a05cfd8463ae608606245f072df74c107" prot="public" virt="non-virtual"><scope>pbl::Uniform</scope><name>UNKNOWN</name></member>
      <member refid="classpbl_1_1PDF_1a19c7b2e7fca423dc98204aecdaec88bd" prot="public" virt="virtual"><scope>pbl::Uniform</scope><name>~PDF</name></member>
      <member refid="classpbl_1_1Uniform_1ac4aa361311eb7ec87c7d30c1c023b42a" prot="public" virt="virtual"><scope>pbl::Uniform</scope><name>~Uniform</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
