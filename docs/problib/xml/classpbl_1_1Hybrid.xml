<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpbl_1_1Hybrid" kind="class" language="C++" prot="public">
    <compoundname>pbl::Hybrid</compoundname>
    <basecompoundref refid="classpbl_1_1PDF" prot="public" virt="non-virtual">pbl::PDF</basecompoundref>
    <includes refid="Hybrid_8h" local="no">Hybrid.h</includes>
    <innerclass refid="structpbl_1_1Hybrid_1_1HybridStruct" prot="protected">pbl::Hybrid::HybridStruct</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classpbl_1_1Hybrid_1a21877da8c4cbd8cc1713a7ed56a8f847" prot="protected" static="no" mutable="no">
        <type><ref refid="structpbl_1_1Hybrid_1_1HybridStruct" kindref="compound">HybridStruct</ref> *</type>
        <definition>HybridStruct* pbl::Hybrid::ptr_</definition>
        <argsstring></argsstring>
        <name>ptr_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="65" column="18" bodyfile="include/problib/pdfs/Hybrid.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpbl_1_1Hybrid_1a89c938d3896deec972fb1a795fa6e256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hybrid::addPDF</definition>
        <argsstring>(const PDF &amp;pdf, double priority)</argsstring>
        <name>addPDF</name>
        <param>
          <type>const <ref refid="classpbl_1_1PDF" kindref="compound">PDF</ref> &amp;</type>
          <declname>pdf</declname>
        </param>
        <param>
          <type>double</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="35" column="10" bodyfile="src/pdfs/Hybrid.cpp" bodystart="107" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Hybrid_1a9f5c6c67a9369a0e592e6309c9d9126d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hybrid::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="31" column="6" bodyfile="src/pdfs/Hybrid.cpp" bodystart="92" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Hybrid_1a69538349729a421f173d783be7cf9780" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classpbl_1_1Hybrid" kindref="compound">Hybrid</ref> *</type>
        <definition>Hybrid * Hybrid::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="classpbl_1_1PDF_1affbb74c36b26a28e9efd99397e14799c">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="27" column="12" bodyfile="src/pdfs/Hybrid.cpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Hybrid_1a53d6afe374921b2b4c4802c89231651a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Hybrid::getLikelihood</definition>
        <argsstring>(const PDF &amp;pdf) const</argsstring>
        <name>getLikelihood</name>
        <reimplements refid="classpbl_1_1PDF_1a75063befbf3b4dcbbba049729e871f33">getLikelihood</reimplements>
        <param>
          <type>const <ref refid="classpbl_1_1PDF" kindref="compound">PDF</ref> &amp;</type>
          <declname>pdf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="29" column="20" bodyfile="src/pdfs/Hybrid.cpp" bodystart="87" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Hybrid_1a2cbfe371924239c1f1d79f78d6254e09" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Hybrid::getMaxDensity</definition>
        <argsstring>() const</argsstring>
        <name>getMaxDensity</name>
        <reimplements refid="classpbl_1_1PDF_1a6596464547ef85956a059afbf4ec2d42">getMaxDensity</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="33" column="8" bodyfile="src/pdfs/Hybrid.cpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Hybrid_1a49b6afbe992799f4a5b90dc030ae03e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="classpbl_1_1PDF" kindref="compound">PDF</ref> * &gt; &amp;</type>
        <definition>const std::vector&lt; PDF * &gt; &amp; Hybrid::getPDFS</definition>
        <argsstring>() const</argsstring>
        <name>getPDFS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="37" column="23" bodyfile="src/pdfs/Hybrid.cpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Hybrid_1a8eff9f863eb0c4185d0d05cb4febab86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hybrid::Hybrid</definition>
        <argsstring>()</argsstring>
        <name>Hybrid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="19" column="5" bodyfile="src/pdfs/Hybrid.cpp" bodystart="41" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Hybrid_1abe74e71cfd5cf4c198255543f1900667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hybrid::Hybrid</definition>
        <argsstring>(const Hybrid &amp;orig)</argsstring>
        <name>Hybrid</name>
        <param>
          <type>const <ref refid="classpbl_1_1Hybrid" kindref="compound">Hybrid</ref> &amp;</type>
          <declname>orig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="21" column="5" bodyfile="src/pdfs/Hybrid.cpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Hybrid_1a591b4f465591c4779b65223727b59486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpbl_1_1Hybrid" kindref="compound">Hybrid</ref> &amp;</type>
        <definition>Hybrid &amp; Hybrid::operator=</definition>
        <argsstring>(const Hybrid &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classpbl_1_1Hybrid" kindref="compound">Hybrid</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="25" column="12" bodyfile="src/pdfs/Hybrid.cpp" bodystart="60" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Hybrid_1ade04715771e8abee545f9e90e1dcf2a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string Hybrid::toString</definition>
        <argsstring>(const std::string &amp;indent=&quot;&quot;) const</argsstring>
        <name>toString</name>
        <reimplements refid="classpbl_1_1PDF_1aeb3576ce189b6d68ad98c83e85dc18a8">toString</reimplements>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>indent</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="39" column="13" bodyfile="src/pdfs/Hybrid.cpp" bodystart="128" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Hybrid_1a6fa7ddfe35c6a82cb504e2ab1332b541" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Hybrid::~Hybrid</definition>
        <argsstring>()</argsstring>
        <name>~Hybrid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="23" column="13" bodyfile="src/pdfs/Hybrid.cpp" bodystart="50" bodyend="58"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classpbl_1_1Hybrid_1a7508af1b8d78a6bbc5135f25789088ac" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hybrid::cloneStruct</definition>
        <argsstring>()</argsstring>
        <name>cloneStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Hybrid.h" line="67" column="6" bodyfile="src/pdfs/Hybrid.cpp" bodystart="80" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>pbl::PDF</label>
        <link refid="classpbl_1_1PDF"/>
      </node>
      <node id="1">
        <label>pbl::Hybrid</label>
        <link refid="classpbl_1_1Hybrid"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>pbl::PDF</label>
        <link refid="classpbl_1_1PDF"/>
      </node>
      <node id="1">
        <label>pbl::Hybrid</label>
        <link refid="classpbl_1_1Hybrid"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>ptr_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; pbl::PDF * &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="3">
        <label>pbl::Hybrid::HybridStruct</label>
        <link refid="structpbl_1_1Hybrid_1_1HybridStruct"/>
        <childnode refid="4" relation="usage">
          <edgelabel>pdfs_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/problib/pdfs/Hybrid.h" line="15" column="24" bodyfile="include/problib/pdfs/Hybrid.h" bodystart="15" bodyend="69"/>
    <listofallmembers>
      <member refid="classpbl_1_1Hybrid_1a89c938d3896deec972fb1a795fa6e256" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>addPDF</name></member>
      <member refid="classpbl_1_1Hybrid_1a9f5c6c67a9369a0e592e6309c9d9126d" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>clear</name></member>
      <member refid="classpbl_1_1Hybrid_1a69538349729a421f173d783be7cf9780" prot="public" virt="virtual"><scope>pbl::Hybrid</scope><name>clone</name></member>
      <member refid="classpbl_1_1Hybrid_1a7508af1b8d78a6bbc5135f25789088ac" prot="protected" virt="non-virtual"><scope>pbl::Hybrid</scope><name>cloneStruct</name></member>
      <member refid="classpbl_1_1PDF_1ac9ff7596aef72e859b72cd10cc97856e" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>dimensions</name></member>
      <member refid="classpbl_1_1PDF_1a6f8608b083c0c9b728d758cc8abfd080" prot="protected" virt="non-virtual"><scope>pbl::Hybrid</scope><name>dimensions_</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379aaf7cb21250734802ba35de4fba678fa7" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>DISCRETE</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379afac7bff316c2644b18bdfdb275930c80" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>EXACT</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a3c5de1fefb7fa1587270306a0d8dadda" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>GAUSSIAN</name></member>
      <member refid="classpbl_1_1PDF_1a78062884ae11faccad1fb9dca7d0adf4" prot="public" virt="virtual"><scope>pbl::Hybrid</scope><name>getExpectedValue</name></member>
      <member refid="classpbl_1_1PDF_1aa7a2f5f2fb44600508e42a981fdb05a8" prot="public" virt="virtual"><scope>pbl::Hybrid</scope><name>getExpectedValue</name></member>
      <member refid="classpbl_1_1Hybrid_1a53d6afe374921b2b4c4802c89231651a" prot="public" virt="virtual"><scope>pbl::Hybrid</scope><name>getLikelihood</name></member>
      <member refid="classpbl_1_1Hybrid_1a2cbfe371924239c1f1d79f78d6254e09" prot="public" virt="virtual"><scope>pbl::Hybrid</scope><name>getMaxDensity</name></member>
      <member refid="classpbl_1_1Hybrid_1a49b6afbe992799f4a5b90dc030ae03e5" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>getPDFS</name></member>
      <member refid="classpbl_1_1Hybrid_1a8eff9f863eb0c4185d0d05cb4febab86" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>Hybrid</name></member>
      <member refid="classpbl_1_1Hybrid_1abe74e71cfd5cf4c198255543f1900667" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>Hybrid</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379aef5fcfac5caf3b865209f169af931fd7" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>HYBRID</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a73961eab1e18e0293800c9f9f8c9dec7" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>MIXTURE</name></member>
      <member refid="classpbl_1_1Hybrid_1a591b4f465591c4779b65223727b59486" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>operator=</name></member>
      <member refid="classpbl_1_1PDF_1aa4c1979ee9c12af4821c79dbdf8c6c13" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>PDF</name></member>
      <member refid="classpbl_1_1PDF_1abc0396d3659e9ae7cd62c6756a378bfc" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>PDF</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>PDFType</name></member>
      <member refid="classpbl_1_1Hybrid_1a21877da8c4cbd8cc1713a7ed56a8f847" prot="protected" virt="non-virtual"><scope>pbl::Hybrid</scope><name>ptr_</name></member>
      <member refid="classpbl_1_1Hybrid_1ade04715771e8abee545f9e90e1dcf2a9" prot="public" virt="virtual"><scope>pbl::Hybrid</scope><name>toString</name></member>
      <member refid="classpbl_1_1PDF_1a011b1bd8e470e856b50090de57119407" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>type</name></member>
      <member refid="classpbl_1_1PDF_1ab657f4b62a973636061527b6024d8b37" prot="protected" virt="non-virtual"><scope>pbl::Hybrid</scope><name>type_</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a85b72521cd38638448dc050b94962966" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>UNIFORM</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a05cfd8463ae608606245f072df74c107" prot="public" virt="non-virtual"><scope>pbl::Hybrid</scope><name>UNKNOWN</name></member>
      <member refid="classpbl_1_1Hybrid_1a6fa7ddfe35c6a82cb504e2ab1332b541" prot="public" virt="virtual"><scope>pbl::Hybrid</scope><name>~Hybrid</name></member>
      <member refid="classpbl_1_1PDF_1a19c7b2e7fca423dc98204aecdaec88bd" prot="public" virt="virtual"><scope>pbl::Hybrid</scope><name>~PDF</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
