<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpbl_1_1Gaussian" kind="class" language="C++" prot="public">
    <compoundname>pbl::Gaussian</compoundname>
    <basecompoundref refid="classpbl_1_1PDF" prot="public" virt="non-virtual">pbl::PDF</basecompoundref>
    <includes refid="Gaussian_8h" local="no">Gaussian.h</includes>
    <innerclass refid="structpbl_1_1Gaussian_1_1GaussianStruct" prot="protected">pbl::Gaussian::GaussianStruct</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classpbl_1_1Gaussian_1a3acd8274e6c5d73b60962d8443d0dba2" prot="protected" static="no" mutable="no">
        <type><ref refid="structpbl_1_1Gaussian_1_1GaussianStruct" kindref="compound">GaussianStruct</ref> *</type>
        <definition>GaussianStruct* pbl::Gaussian::ptr_</definition>
        <argsstring></argsstring>
        <name>ptr_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="235" column="16" bodyfile="include/problib/pdfs/Gaussian.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a6a1c6bc7cf0f649572caa2435f38bbaf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> *</type>
        <definition>Gaussian * Gaussian::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="classpbl_1_1PDF_1affbb74c36b26a28e9efd99397e14799c">clone</reimplements>
        <briefdescription>
<para>Creates a clone of the object. The clone method is cheap since it only copies a pointer. A deep clone will only be created if the original object is modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="160" column="10" bodyfile="src/pdfs/Gaussian.cpp" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a94b4e3461dcfe6aa08b19989f9793d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gaussian::Gaussian</definition>
        <argsstring>(const arma::vec &amp;mean, const arma::mat &amp;cov)</argsstring>
        <name>Gaussian</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>cov</declname>
        </param>
        <briefdescription>
<para>Constructs a (multi-variate) <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> with specified mean and covariance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mean</parametername>
</parameternamelist>
<parameterdescription>
<para>The mean vector of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cov</parametername>
</parameternamelist>
<parameterdescription>
<para>The covariance matrix of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="136" column="1" bodyfile="src/pdfs/Gaussian.cpp" bodystart="45" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a1e4d423b7ca4cd4258b6caee8a1826f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gaussian::Gaussian</definition>
        <argsstring>(const Gaussian &amp;orig)</argsstring>
        <name>Gaussian</name>
        <param>
          <type>const <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> &amp;</type>
          <declname>orig</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="141" column="1" bodyfile="src/pdfs/Gaussian.cpp" bodystart="48" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a2e88831a51a0a2cd3dd9a6bc176e85b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gaussian::Gaussian</definition>
        <argsstring>(int dim)</argsstring>
        <name>Gaussian</name>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>Constructs a (multi-variate) <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> with specific dimensionality but leaves mean and covariance unspecified. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dim</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensionality of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="128" column="1" bodyfile="src/pdfs/Gaussian.cpp" bodystart="42" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a7ea75ec90ec7e9026bb3265bd916ed93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const arma::mat &amp;</type>
        <definition>const arma::mat &amp; Gaussian::getCovariance</definition>
        <argsstring>() const</argsstring>
        <name>getCovariance</name>
        <briefdescription>
<para>Returns the covariance matrix of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The covariance matrix of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="211" column="17" bodyfile="src/pdfs/Gaussian.cpp" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a115948deccdfc1883a95303d89fa0728" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gaussian::getDensity</definition>
        <argsstring>(const arma::vec &amp;v, double max_mah_dist=0) const</argsstring>
        <name>getDensity</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_mah_dist</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Calculates the density of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> at point v. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to calculate the density for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_mah_dist</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The density of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> at point v. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="170" column="8" bodyfile="src/pdfs/Gaussian.cpp" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a58527e9747558fd00871395e798f3f79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gaussian::getDensity</definition>
        <argsstring>(const Gaussian &amp;npdf, double max_mah_dist=0) const</argsstring>
        <name>getDensity</name>
        <param>
          <type>const <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> &amp;</type>
          <declname>npdf</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_mah_dist</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="172" column="8" bodyfile="src/pdfs/Gaussian.cpp" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a8be79b3b13db6b2909acfc860fa5049a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Gaussian::getExpectedValue</definition>
        <argsstring>(arma::vec &amp;v) const</argsstring>
        <name>getExpectedValue</name>
        <reimplements refid="classpbl_1_1PDF_1aa7a2f5f2fb44600508e42a981fdb05a8">getExpectedValue</reimplements>
        <param>
          <type>arma::vec &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns the expected value E[x] of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref>, which corresponds to its mean. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The returned expected value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Always true </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="187" column="6" bodyfile="src/pdfs/Gaussian.cpp" bodystart="122" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1aaae44c001c9fade7d4b8cdb654974934" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Gaussian::getLikelihood</definition>
        <argsstring>(const PDF &amp;pdf) const</argsstring>
        <name>getLikelihood</name>
        <reimplements refid="classpbl_1_1PDF_1a75063befbf3b4dcbbba049729e871f33">getLikelihood</reimplements>
        <param>
          <type>const <ref refid="classpbl_1_1PDF" kindref="compound">PDF</ref> &amp;</type>
          <declname>pdf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="162" column="8" bodyfile="src/pdfs/Gaussian.cpp" bodystart="91" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1ab2cab275180f8c35ba21c8fac23ddabf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double Gaussian::getMaxDensity</definition>
        <argsstring>() const</argsstring>
        <name>getMaxDensity</name>
        <reimplements refid="classpbl_1_1PDF_1a6596464547ef85956a059afbf4ec2d42">getMaxDensity</reimplements>
        <briefdescription>
<para>Calculates the maximum density of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref>, i.e., the density at the mean. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The maximum density of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="179" column="8" bodyfile="src/pdfs/Gaussian.cpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a2f26a0259dee3c92d0e0a1833e5f51f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const arma::vec &amp;</type>
        <definition>const arma::vec &amp; Gaussian::getMean</definition>
        <argsstring>() const</argsstring>
        <name>getMean</name>
        <briefdescription>
<para>Returns the mean of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The mean of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="205" column="17" bodyfile="src/pdfs/Gaussian.cpp" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a5397a4bfa1031d763797867dfe924404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> &amp;</type>
        <definition>Gaussian &amp; Gaussian::operator=</definition>
        <argsstring>(const Gaussian &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment operator. The operation is cheap since it only copies a pointer. A deep clone will only be created if the original object is modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="153" column="10" bodyfile="src/pdfs/Gaussian.cpp" bodystart="64" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a0af83268e87c8813bc096c7056c1df91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gaussian::setCovariance</definition>
        <argsstring>(const arma::mat &amp;cov)</argsstring>
        <name>setCovariance</name>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>cov</declname>
        </param>
        <briefdescription>
<para>Sets the covariance of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cov</parametername>
</parameternamelist>
<parameterdescription>
<para>The covariance matrix of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="199" column="6" bodyfile="src/pdfs/Gaussian.cpp" bodystart="171" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a74f75fcd57464749974d556f1d8e59fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gaussian::setMean</definition>
        <argsstring>(const arma::vec &amp;mu)</argsstring>
        <name>setMean</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>mu</declname>
        </param>
        <briefdescription>
<para>Sets the mean of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mu</parametername>
</parameternamelist>
<parameterdescription>
<para>The mean of the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="193" column="6" bodyfile="src/pdfs/Gaussian.cpp" bodystart="161" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a72acf5b1a7a2b704b278ad6ff04c55ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string Gaussian::toString</definition>
        <argsstring>(const std::string &amp;indent=&quot;&quot;) const</argsstring>
        <name>toString</name>
        <reimplements refid="classpbl_1_1PDF_1aeb3576ce189b6d68ad98c83e85dc18a8">toString</reimplements>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>indent</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Represents the <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> as a string for easier console output. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Should be changed into stream operator &lt;&lt; </para>
</simplesect>
<simplesect kind="return"><para>The <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> as string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="218" column="13" bodyfile="src/pdfs/Gaussian.cpp" bodystart="191" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1acf8cb96837ea65021e973a735260be5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>Gaussian::~Gaussian</definition>
        <argsstring>()</argsstring>
        <name>~Gaussian</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="146" column="9" bodyfile="src/pdfs/Gaussian.cpp" bodystart="54" bodyend="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a7258cc466ea2a5913eee799ff5366875" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Gaussian::cloneStruct</definition>
        <argsstring>()</argsstring>
        <name>cloneStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="237" column="6" bodyfile="src/pdfs/Gaussian.cpp" bodystart="84" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1Gaussian_1a7d119d6396806b93a91671c398fb7acd" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Gaussian::getDensity</definition>
        <argsstring>(const arma::vec &amp;v1, const arma::vec &amp;v2, const arma::mat &amp;S, double max_mah_dist=0) const</argsstring>
        <name>getDensity</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const arma::mat &amp;</type>
          <declname>S</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_mah_dist</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/Gaussian.h" line="239" column="8" bodyfile="src/pdfs/Gaussian.cpp" bodystart="128" bodyend="159"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class represents a multi-variate <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> (Normal) distribution. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Sjoerd van den Dries </para>
</simplesect>
<simplesect kind="date"><para>December, 2012 </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>pbl::PDF</label>
        <link refid="classpbl_1_1PDF"/>
      </node>
      <node id="1">
        <label>pbl::Gaussian</label>
        <link refid="classpbl_1_1Gaussian"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>pbl::PDF</label>
        <link refid="classpbl_1_1PDF"/>
      </node>
      <node id="3">
        <label>pbl::Gaussian::GaussianStruct</label>
        <link refid="structpbl_1_1Gaussian_1_1GaussianStruct"/>
      </node>
      <node id="1">
        <label>pbl::Gaussian</label>
        <link refid="classpbl_1_1Gaussian"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>ptr_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/problib/pdfs/Gaussian.h" line="85" column="26" bodyfile="include/problib/pdfs/Gaussian.h" bodystart="85" bodyend="209"/>
    <listofallmembers>
      <member refid="classpbl_1_1Gaussian_1a6a1c6bc7cf0f649572caa2435f38bbaf" prot="public" virt="virtual"><scope>pbl::Gaussian</scope><name>clone</name></member>
      <member refid="classpbl_1_1Gaussian_1a7258cc466ea2a5913eee799ff5366875" prot="protected" virt="non-virtual"><scope>pbl::Gaussian</scope><name>cloneStruct</name></member>
      <member refid="classpbl_1_1PDF_1ac9ff7596aef72e859b72cd10cc97856e" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>dimensions</name></member>
      <member refid="classpbl_1_1PDF_1a6f8608b083c0c9b728d758cc8abfd080" prot="protected" virt="non-virtual"><scope>pbl::Gaussian</scope><name>dimensions_</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379aaf7cb21250734802ba35de4fba678fa7" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>DISCRETE</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379afac7bff316c2644b18bdfdb275930c80" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>EXACT</name></member>
      <member refid="classpbl_1_1Gaussian_1a2e88831a51a0a2cd3dd9a6bc176e85b4" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>Gaussian</name></member>
      <member refid="classpbl_1_1Gaussian_1a94b4e3461dcfe6aa08b19989f9793d47" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>Gaussian</name></member>
      <member refid="classpbl_1_1Gaussian_1a1e4d423b7ca4cd4258b6caee8a1826f6" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>Gaussian</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a3c5de1fefb7fa1587270306a0d8dadda" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>GAUSSIAN</name></member>
      <member refid="classpbl_1_1Gaussian_1a7ea75ec90ec7e9026bb3265bd916ed93" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>getCovariance</name></member>
      <member refid="classpbl_1_1Gaussian_1a115948deccdfc1883a95303d89fa0728" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>getDensity</name></member>
      <member refid="classpbl_1_1Gaussian_1a58527e9747558fd00871395e798f3f79" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>getDensity</name></member>
      <member refid="classpbl_1_1Gaussian_1a7d119d6396806b93a91671c398fb7acd" prot="protected" virt="non-virtual"><scope>pbl::Gaussian</scope><name>getDensity</name></member>
      <member refid="classpbl_1_1Gaussian_1a8be79b3b13db6b2909acfc860fa5049a" prot="public" virt="virtual"><scope>pbl::Gaussian</scope><name>getExpectedValue</name></member>
      <member refid="classpbl_1_1PDF_1a78062884ae11faccad1fb9dca7d0adf4" prot="public" virt="virtual" ambiguityscope="pbl::PDF::"><scope>pbl::Gaussian</scope><name>getExpectedValue</name></member>
      <member refid="classpbl_1_1Gaussian_1aaae44c001c9fade7d4b8cdb654974934" prot="public" virt="virtual"><scope>pbl::Gaussian</scope><name>getLikelihood</name></member>
      <member refid="classpbl_1_1Gaussian_1ab2cab275180f8c35ba21c8fac23ddabf" prot="public" virt="virtual"><scope>pbl::Gaussian</scope><name>getMaxDensity</name></member>
      <member refid="classpbl_1_1Gaussian_1a2f26a0259dee3c92d0e0a1833e5f51f6" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>getMean</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379aef5fcfac5caf3b865209f169af931fd7" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>HYBRID</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a73961eab1e18e0293800c9f9f8c9dec7" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>MIXTURE</name></member>
      <member refid="classpbl_1_1Gaussian_1a5397a4bfa1031d763797867dfe924404" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>operator=</name></member>
      <member refid="classpbl_1_1PDF_1aa4c1979ee9c12af4821c79dbdf8c6c13" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>PDF</name></member>
      <member refid="classpbl_1_1PDF_1abc0396d3659e9ae7cd62c6756a378bfc" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>PDF</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>PDFType</name></member>
      <member refid="classpbl_1_1Gaussian_1a3acd8274e6c5d73b60962d8443d0dba2" prot="protected" virt="non-virtual"><scope>pbl::Gaussian</scope><name>ptr_</name></member>
      <member refid="classpbl_1_1Gaussian_1a0af83268e87c8813bc096c7056c1df91" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>setCovariance</name></member>
      <member refid="classpbl_1_1Gaussian_1a74f75fcd57464749974d556f1d8e59fb" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>setMean</name></member>
      <member refid="classpbl_1_1Gaussian_1a72acf5b1a7a2b704b278ad6ff04c55ea" prot="public" virt="virtual"><scope>pbl::Gaussian</scope><name>toString</name></member>
      <member refid="classpbl_1_1PDF_1a011b1bd8e470e856b50090de57119407" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>type</name></member>
      <member refid="classpbl_1_1PDF_1ab657f4b62a973636061527b6024d8b37" prot="protected" virt="non-virtual"><scope>pbl::Gaussian</scope><name>type_</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a85b72521cd38638448dc050b94962966" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>UNIFORM</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a05cfd8463ae608606245f072df74c107" prot="public" virt="non-virtual"><scope>pbl::Gaussian</scope><name>UNKNOWN</name></member>
      <member refid="classpbl_1_1Gaussian_1acf8cb96837ea65021e973a735260be5f" prot="public" virt="virtual"><scope>pbl::Gaussian</scope><name>~Gaussian</name></member>
      <member refid="classpbl_1_1PDF_1a19c7b2e7fca423dc98204aecdaec88bd" prot="public" virt="virtual"><scope>pbl::Gaussian</scope><name>~PDF</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
