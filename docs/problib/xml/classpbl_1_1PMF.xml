<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpbl_1_1PMF" kind="class" language="C++" prot="public">
    <compoundname>pbl::PMF</compoundname>
    <basecompoundref refid="classpbl_1_1PDF" prot="public" virt="non-virtual">pbl::PDF</basecompoundref>
    <includes refid="PMF_8h" local="no">PMF.h</includes>
    <innerclass refid="structpbl_1_1PMF_1_1PMFStruct" prot="protected">pbl::PMF::PMFStruct</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classpbl_1_1PMF_1aa056db096e0b5dac563d8dfef81aa913" prot="protected" static="no" mutable="no">
        <type><ref refid="structpbl_1_1PMF_1_1PMFStruct" kindref="compound">PMFStruct</ref> *</type>
        <definition>PMFStruct* pbl::PMF::ptr_</definition>
        <argsstring></argsstring>
        <name>ptr_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="254" column="11" bodyfile="include/problib/pdfs/PMF.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpbl_1_1PMF_1a20ea91400eb26390ea7c37d691f68295" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classpbl_1_1PMF" kindref="compound">PMF</ref> *</type>
        <definition>PMF * PMF::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <reimplements refid="classpbl_1_1PDF_1affbb74c36b26a28e9efd99397e14799c">clone</reimplements>
        <briefdescription>
<para>Creates a clone of the object. The clone method is cheap since it only copies a pointer. A deep clone will only be created if the original object is modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="155" column="5" bodyfile="src/pdfs/PMF.cpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a5319a44f52864a672b736c449cbabc7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PMF::getDensity</definition>
        <argsstring>(const arma::vec &amp;v) const</argsstring>
        <name>getDensity</name>
        <param>
          <type>const arma::vec &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="224" column="8" bodyfile="src/pdfs/PMF.cpp" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a8a8247838230b27c0f711723b18b2e3a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PMF::getDomainSize</definition>
        <argsstring>() const</argsstring>
        <name>getDomainSize</name>
        <briefdescription>
<para>Returns the domain size of this distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="213" column="5" bodyfile="src/pdfs/PMF.cpp" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1ad62ee1f0155d5fb0c317f1c8838498e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool PMF::getExpectedValue</definition>
        <argsstring>(std::string &amp;v) const</argsstring>
        <name>getExpectedValue</name>
        <reimplements refid="classpbl_1_1PDF_1a78062884ae11faccad1fb9dca7d0adf4">getExpectedValue</reimplements>
        <param>
          <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Returns in parameter v the expected value for this distribution, i.e., the value with the highest probability. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether an expected value was found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="201" column="6" bodyfile="src/pdfs/PMF.cpp" bodystart="136" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1afa5684aeaa94bca52b84720b35840467" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double PMF::getLikelihood</definition>
        <argsstring>(const PDF &amp;pdf) const</argsstring>
        <name>getLikelihood</name>
        <reimplements refid="classpbl_1_1PDF_1a75063befbf3b4dcbbba049729e871f33">getLikelihood</reimplements>
        <param>
          <type>const <ref refid="classpbl_1_1PDF" kindref="compound">PDF</ref> &amp;</type>
          <declname>pdf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="192" column="8" bodyfile="src/pdfs/PMF.cpp" bodystart="153" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1aad18c717c1dacfad3e52519fc8f163f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PMF::getLikelihood</definition>
        <argsstring>(const PMF &amp;pmf) const</argsstring>
        <name>getLikelihood</name>
        <param>
          <type>const <ref refid="classpbl_1_1PMF" kindref="compound">PMF</ref> &amp;</type>
          <declname>pmf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="194" column="8" bodyfile="src/pdfs/PMF.cpp" bodystart="160" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a70b74d8f4d5af89ad9de2582e2328ea2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double PMF::getMaxDensity</definition>
        <argsstring>() const</argsstring>
        <name>getMaxDensity</name>
        <reimplements refid="classpbl_1_1PDF_1a6596464547ef85956a059afbf4ec2d42">getMaxDensity</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="226" column="8" bodyfile="src/pdfs/PMF.cpp" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1af1b1790c28cae43d5eb69b5ae4cd11a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string PMF::getMostProbableValue</definition>
        <argsstring>() const</argsstring>
        <name>getMostProbableValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="234" column="13" bodyfile="src/pdfs/PMF.cpp" bodystart="311" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a5b7ec442c0c4262eae8b6b41eb4e58ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMF::getProbabilities</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;probabilities) const</argsstring>
        <name>getProbabilities</name>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; double &gt; &amp;</type>
          <declname>probabilities</declname>
        </param>
        <briefdescription>
<para>Returns all probabilities of the known values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="190" column="6" bodyfile="src/pdfs/PMF.cpp" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a17ee2dd79085cb35f4ddcdfcece8e0a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PMF::getProbability</definition>
        <argsstring>(const std::string &amp;value) const</argsstring>
        <name>getProbability</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns the probability of the given value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The probability of the given value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="161" column="8" bodyfile="src/pdfs/PMF.cpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a45eff5735b79a115732a704fb856bf25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PMF::getProbability</definition>
        <argsstring>(const std::string &amp;value, int domain_size) const</argsstring>
        <name>getProbability</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>domain_size</declname>
        </param>
        <briefdescription>
<para>Returns the probability of the given value, for a given domain_size. The domain size determines the probability if the value is unknown, in which case a uniform distribution over all unknown values is assumed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The probability of the given value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="169" column="8" bodyfile="src/pdfs/PMF.cpp" bodystart="90" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a6a24d28c1e6b9391da2bd7d359dc6d80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PMF::getProbabilityUnknown</definition>
        <argsstring>() const</argsstring>
        <name>getProbabilityUnknown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="228" column="8" bodyfile="src/pdfs/PMF.cpp" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1aa176572916fced010b17c2405822162f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PMF::getProbabilityUnknown</definition>
        <argsstring>(int domain_size) const</argsstring>
        <name>getProbabilityUnknown</name>
        <param>
          <type>int</type>
          <declname>domain_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="230" column="8" bodyfile="src/pdfs/PMF.cpp" bodystart="260" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1aca191ceb84ad368a898aad4c98fcacb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMF::getValues</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;values) const</argsstring>
        <name>getValues</name>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Returns a vector of values for which a probability is specified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="185" column="6" bodyfile="src/pdfs/PMF.cpp" bodystart="124" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a9e8c615a735e54d1cdb094c502cd37ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMF::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="215" column="6" bodyfile="src/pdfs/PMF.cpp" bodystart="267" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1af88c45dbad0ac36c4035d115c4962246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpbl_1_1PMF" kindref="compound">PMF</ref> &amp;</type>
        <definition>PMF &amp; PMF::operator=</definition>
        <argsstring>(const PMF &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classpbl_1_1PMF" kindref="compound">PMF</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Assignment operator. The operation is cheap since it only copies a pointer. A deep clone will only be created if the original object is modified. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="148" column="5" bodyfile="src/pdfs/PMF.cpp" bodystart="58" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a3cba5a2cd806e07219130bb3ac893937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PMF::PMF</definition>
        <argsstring>(const PMF &amp;pmf)</argsstring>
        <name>PMF</name>
        <param>
          <type>const <ref refid="classpbl_1_1PMF" kindref="compound">PMF</ref> &amp;</type>
          <declname>pmf</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="136" column="1" bodyfile="src/pdfs/PMF.cpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a838f27b73503a833c43aec1f6bb08307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PMF::PMF</definition>
        <argsstring>(int domain_size=-1)</argsstring>
        <name>PMF</name>
        <param>
          <type>int</type>
          <declname>domain_size</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Constructs a discrete probability distribution. The optional parameter domain size states the number of possible values of the random variable underlying this distribution, and determines the probability of unknown values if the probabilities of all unknown values do not sum up to one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of values the random variable of this pmf can take </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="131" column="1" bodyfile="src/pdfs/PMF.cpp" bodystart="41" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a6b85c707edd95abc9aa0cd00f54684f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMF::setDomainSize</definition>
        <argsstring>(int domain_size)</argsstring>
        <name>setDomainSize</name>
        <param>
          <type>int</type>
          <declname>domain_size</declname>
        </param>
        <briefdescription>
<para>Sets the domain size of this discrete distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="208" column="6" bodyfile="src/pdfs/PMF.cpp" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a892662e026965349ad812c8ad79f7acb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMF::setExact</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>setExact</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the probability of the given value to 1. All other values are given a probability of 0. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="180" column="6" bodyfile="src/pdfs/PMF.cpp" bodystart="113" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1ac201a689345d7ce1e9eeee509c30c9a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMF::setProbability</definition>
        <argsstring>(const std::string &amp;value, double p)</argsstring>
        <name>setProbability</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Set the probability of a given value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="174" column="6" bodyfile="src/pdfs/PMF.cpp" bodystart="100" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1af22f3fbc1db768c4d15e6f83ee29d076" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref></type>
        <definition>std::string PMF::toString</definition>
        <argsstring>(const std::string &amp;indent=&quot;&quot;) const</argsstring>
        <name>toString</name>
        <reimplements refid="classpbl_1_1PDF_1aeb3576ce189b6d68ad98c83e85dc18a8">toString</reimplements>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>indent</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Represents the <ref refid="classpbl_1_1PMF" kindref="compound">PMF</ref> as a string for easier console output. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Should be changed into stream operator &lt;&lt; </para>
</simplesect>
<simplesect kind="return"><para>The <ref refid="classpbl_1_1Gaussian" kindref="compound">Gaussian</ref> as string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="222" column="13" bodyfile="src/pdfs/PMF.cpp" bodystart="293" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a665bde2fd01bc35bda231bab8075d2ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMF::update</definition>
        <argsstring>(const pbl::PMF &amp;pmf)</argsstring>
        <name>update</name>
        <param>
          <type>const <ref refid="classpbl_1_1PMF" kindref="compound">pbl::PMF</ref> &amp;</type>
          <declname>pmf</declname>
          <defname>other</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>: make this implementation more efficient (no need for O(log n) look-ups) </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="203" column="6" bodyfile="src/pdfs/PMF.cpp" bodystart="214" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classpbl_1_1PMF_1a79b65b7d60893138be3fa34cf825df90" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>PMF::~PMF</definition>
        <argsstring>()</argsstring>
        <name>~PMF</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="141" column="9" bodyfile="src/pdfs/PMF.cpp" bodystart="50" bodyend="56"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classpbl_1_1PMF_1a45cc297d994f687d8dda19f45d406193" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PMF::cloneStruct</definition>
        <argsstring>()</argsstring>
        <name>cloneStruct</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/problib/pdfs/PMF.h" line="256" column="6" bodyfile="src/pdfs/PMF.cpp" bodystart="79" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class represents a discrete probability distribution (or probability mass function). Currently, this <ref refid="classpbl_1_1PMF" kindref="compound">PMF</ref> can only take strings as values. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Sjoerd van den Dries </para>
</simplesect>
<simplesect kind="date"><para>December, 2012 </para>
</simplesect>
<simplesect kind="version"><para>1.0 </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>pbl::PDF</label>
        <link refid="classpbl_1_1PDF"/>
      </node>
      <node id="1">
        <label>pbl::PMF</label>
        <link refid="classpbl_1_1PMF"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>pbl::PDF</label>
        <link refid="classpbl_1_1PDF"/>
      </node>
      <node id="1">
        <label>pbl::PMF</label>
        <link refid="classpbl_1_1PMF"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>ptr_</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>pbl::PMF::PMFStruct</label>
        <link refid="structpbl_1_1PMF_1_1PMFStruct"/>
        <childnode refid="4" relation="usage">
          <edgelabel>pmf_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::map&lt; std::string, double &gt;</label>
        <link refid="cpp/container/map" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
    </collaborationgraph>
    <location file="include/problib/pdfs/PMF.h" line="86" column="21" bodyfile="include/problib/pdfs/PMF.h" bodystart="86" bodyend="224"/>
    <listofallmembers>
      <member refid="classpbl_1_1PMF_1a20ea91400eb26390ea7c37d691f68295" prot="public" virt="virtual"><scope>pbl::PMF</scope><name>clone</name></member>
      <member refid="classpbl_1_1PMF_1a45cc297d994f687d8dda19f45d406193" prot="protected" virt="non-virtual"><scope>pbl::PMF</scope><name>cloneStruct</name></member>
      <member refid="classpbl_1_1PDF_1ac9ff7596aef72e859b72cd10cc97856e" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>dimensions</name></member>
      <member refid="classpbl_1_1PDF_1a6f8608b083c0c9b728d758cc8abfd080" prot="protected" virt="non-virtual"><scope>pbl::PMF</scope><name>dimensions_</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379aaf7cb21250734802ba35de4fba678fa7" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>DISCRETE</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379afac7bff316c2644b18bdfdb275930c80" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>EXACT</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a3c5de1fefb7fa1587270306a0d8dadda" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>GAUSSIAN</name></member>
      <member refid="classpbl_1_1PMF_1a5319a44f52864a672b736c449cbabc7e" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>getDensity</name></member>
      <member refid="classpbl_1_1PMF_1a8a8247838230b27c0f711723b18b2e3a" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>getDomainSize</name></member>
      <member refid="classpbl_1_1PMF_1ad62ee1f0155d5fb0c317f1c8838498e8" prot="public" virt="virtual"><scope>pbl::PMF</scope><name>getExpectedValue</name></member>
      <member refid="classpbl_1_1PDF_1aa7a2f5f2fb44600508e42a981fdb05a8" prot="public" virt="virtual" ambiguityscope="pbl::PDF::"><scope>pbl::PMF</scope><name>getExpectedValue</name></member>
      <member refid="classpbl_1_1PMF_1afa5684aeaa94bca52b84720b35840467" prot="public" virt="virtual"><scope>pbl::PMF</scope><name>getLikelihood</name></member>
      <member refid="classpbl_1_1PMF_1aad18c717c1dacfad3e52519fc8f163f6" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>getLikelihood</name></member>
      <member refid="classpbl_1_1PMF_1a70b74d8f4d5af89ad9de2582e2328ea2" prot="public" virt="virtual"><scope>pbl::PMF</scope><name>getMaxDensity</name></member>
      <member refid="classpbl_1_1PMF_1af1b1790c28cae43d5eb69b5ae4cd11a7" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>getMostProbableValue</name></member>
      <member refid="classpbl_1_1PMF_1a5b7ec442c0c4262eae8b6b41eb4e58ae" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>getProbabilities</name></member>
      <member refid="classpbl_1_1PMF_1a17ee2dd79085cb35f4ddcdfcece8e0a6" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>getProbability</name></member>
      <member refid="classpbl_1_1PMF_1a45eff5735b79a115732a704fb856bf25" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>getProbability</name></member>
      <member refid="classpbl_1_1PMF_1a6a24d28c1e6b9391da2bd7d359dc6d80" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>getProbabilityUnknown</name></member>
      <member refid="classpbl_1_1PMF_1aa176572916fced010b17c2405822162f" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>getProbabilityUnknown</name></member>
      <member refid="classpbl_1_1PMF_1aca191ceb84ad368a898aad4c98fcacb2" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>getValues</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379aef5fcfac5caf3b865209f169af931fd7" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>HYBRID</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a73961eab1e18e0293800c9f9f8c9dec7" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>MIXTURE</name></member>
      <member refid="classpbl_1_1PMF_1a9e8c615a735e54d1cdb094c502cd37ba" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>normalize</name></member>
      <member refid="classpbl_1_1PMF_1af88c45dbad0ac36c4035d115c4962246" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>operator=</name></member>
      <member refid="classpbl_1_1PDF_1aa4c1979ee9c12af4821c79dbdf8c6c13" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>PDF</name></member>
      <member refid="classpbl_1_1PDF_1abc0396d3659e9ae7cd62c6756a378bfc" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>PDF</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>PDFType</name></member>
      <member refid="classpbl_1_1PMF_1a838f27b73503a833c43aec1f6bb08307" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>PMF</name></member>
      <member refid="classpbl_1_1PMF_1a3cba5a2cd806e07219130bb3ac893937" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>PMF</name></member>
      <member refid="classpbl_1_1PMF_1aa056db096e0b5dac563d8dfef81aa913" prot="protected" virt="non-virtual"><scope>pbl::PMF</scope><name>ptr_</name></member>
      <member refid="classpbl_1_1PMF_1a6b85c707edd95abc9aa0cd00f54684f6" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>setDomainSize</name></member>
      <member refid="classpbl_1_1PMF_1a892662e026965349ad812c8ad79f7acb" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>setExact</name></member>
      <member refid="classpbl_1_1PMF_1ac201a689345d7ce1e9eeee509c30c9a7" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>setProbability</name></member>
      <member refid="classpbl_1_1PMF_1af22f3fbc1db768c4d15e6f83ee29d076" prot="public" virt="virtual"><scope>pbl::PMF</scope><name>toString</name></member>
      <member refid="classpbl_1_1PDF_1a011b1bd8e470e856b50090de57119407" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>type</name></member>
      <member refid="classpbl_1_1PDF_1ab657f4b62a973636061527b6024d8b37" prot="protected" virt="non-virtual"><scope>pbl::PMF</scope><name>type_</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a85b72521cd38638448dc050b94962966" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>UNIFORM</name></member>
      <member refid="classpbl_1_1PDF_1aba652e46f5290da9745994cac0e78379a05cfd8463ae608606245f072df74c107" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>UNKNOWN</name></member>
      <member refid="classpbl_1_1PMF_1a665bde2fd01bc35bda231bab8075d2ff" prot="public" virt="non-virtual"><scope>pbl::PMF</scope><name>update</name></member>
      <member refid="classpbl_1_1PDF_1a19c7b2e7fca423dc98204aecdaec88bd" prot="public" virt="virtual"><scope>pbl::PMF</scope><name>~PDF</name></member>
      <member refid="classpbl_1_1PMF_1a79b65b7d60893138be3fa34cf825df90" prot="public" virt="virtual"><scope>pbl::PMF</scope><name>~PMF</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
