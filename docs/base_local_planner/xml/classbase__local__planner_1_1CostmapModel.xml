<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classbase__local__planner_1_1CostmapModel" kind="class" language="C++" prot="public">
    <compoundname>base_local_planner::CostmapModel</compoundname>
    <basecompoundref refid="classbase__local__planner_1_1WorldModel" prot="public" virt="non-virtual">base_local_planner::WorldModel</basecompoundref>
    <includes refid="costmap__model_8h" local="no">costmap_model.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classbase__local__planner_1_1CostmapModel_1aed9c90777aa55143075132648dee3b03" prot="private" static="no" mutable="no">
        <type>const <ref refid="classcostmap__2d_1_1Costmap2D" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/costmap_2d/tags">costmap_2d::Costmap2D</ref> &amp;</type>
        <definition>const costmap_2d::Costmap2D&amp; base_local_planner::CostmapModel::costmap_</definition>
        <argsstring></argsstring>
        <name>costmap_</name>
        <briefdescription>
<para>Allows access of costmap obstacle information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/costmap_model.h" line="133" column="35" bodyfile="include/base_local_planner/costmap_model.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbase__local__planner_1_1CostmapModel_1a7f785fd68a7d341c41a5c2397e7b8a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::CostmapModel::CostmapModel</definition>
        <argsstring>(const costmap_2d::Costmap2D &amp;costmap)</argsstring>
        <name>CostmapModel</name>
        <param>
          <type>const <ref refid="classcostmap__2d_1_1Costmap2D" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/costmap_2d/tags">costmap_2d::Costmap2D</ref> &amp;</type>
          <declname>costmap</declname>
        </param>
        <briefdescription>
<para>Constructor for the <ref refid="classbase__local__planner_1_1CostmapModel" kindref="compound">CostmapModel</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>costmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The costmap that should be used </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/costmap_model.h" line="92" column="7" bodyfile="src/costmap_model.cpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1CostmapModel_1a80d896d06af4f1c0bd5b61cd758743af" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double base_local_planner::CostmapModel::footprintCost</definition>
        <argsstring>(const geometry_msgs::Point &amp;position, const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint, double inscribed_radius, double circumscribed_radius)</argsstring>
        <name>footprintCost</name>
        <reimplements refid="classbase__local__planner_1_1WorldModel_1a36d4c808bc441e2b87b0ac038099993a">footprintCost</reimplements>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inscribed_radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>circumscribed_radius</declname>
        </param>
        <briefdescription>
<para>Checks if any obstacles in the costmap lie inside a convex footprint that is rasterized into the grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footprint</parametername>
</parameternamelist>
<parameterdescription>
<para>The specification of the footprint of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the inscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>circumscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circumscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Positive if all the points lie outside the footprint, negative otherwise: -1 if footprint covers at least a lethal obstacle cell, or -2 if footprint covers at least a no-information cell, or -3 if footprint is [partially] outside of the map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/costmap_model.h" line="111" column="22" bodyfile="src/costmap_model.cpp" bodystart="47" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1CostmapModel_1a36d4c808bc441e2b87b0ac038099993a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>virtual double base_local_planner::WorldModel::footprintCost</definition>
        <argsstring>(const geometry_msgs::Point &amp;position, const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint, double inscribed_radius, double circumscribed_radius)=0</argsstring>
        <name>footprintCost</name>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inscribed_radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>circumscribed_radius</declname>
        </param>
        <briefdescription>
<para>Subclass will implement this method to check a footprint at a given position and orientation for legality in the world. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footprint</parametername>
</parameternamelist>
<parameterdescription>
<para>The specification of the footprint of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the inscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>circumscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circumscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Positive if all the points lie outside the footprint, negative otherwise: -1 if footprint covers at least a lethal obstacle cell, or -2 if footprint covers at least a no-information cell, or -3 if footprint is partially or totally outside of the map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/costmap_model.h" line="98" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1CostmapModel_1a358fe0d75fefe46dda134ee6e3305f71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::WorldModel::footprintCost</definition>
        <argsstring>(const geometry_msgs::Point &amp;position, const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint, double inscribed_radius, double circumscribed_radius, double extra)</argsstring>
        <name>footprintCost</name>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inscribed_radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>circumscribed_radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>extra</declname>
        </param>
        <briefdescription>
<para>Checks if any obstacles in the costmap lie inside a convex footprint that is rasterized into the grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footprint</parametername>
</parameternamelist>
<parameterdescription>
<para>The specification of the footprint of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the inscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>circumscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circumscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Positive if all the points lie outside the footprint, negative otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/costmap_model.h" line="98" column="7" bodyfile="include/base_local_planner/world_model.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1CostmapModel_1ac7e8dc9c77a2dd2fa77f5a27d812fd43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::WorldModel::footprintCost</definition>
        <argsstring>(double x, double y, double theta, const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint_spec, double inscribed_radius=0.0, double circumscribed_radius=0.0)</argsstring>
        <name>footprintCost</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint_spec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inscribed_radius</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>circumscribed_radius</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/costmap_model.h" line="98" column="7" bodyfile="include/base_local_planner/world_model.h" bodystart="103" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1CostmapModel_1a8c65ee26aa8032afb635c3cb544e57cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::CostmapModel::lineCost</definition>
        <argsstring>(int x0, int x1, int y0, int y1) const</argsstring>
        <name>lineCost</name>
        <param>
          <type>int</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Rasterizes a line in the costmap grid and checks for collisions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>The x position of the first cell in grid coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The y position of the first cell in grid coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>The x position of the second cell in grid coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The y position of the second cell in grid coordinates </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A positive cost for a legal line... negative otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/costmap_model.h" line="122" column="14" bodyfile="src/costmap_model.cpp" bodystart="116" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1CostmapModel_1abfd021e995f9493ddeb64184a0bd3cf8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::CostmapModel::pointCost</definition>
        <argsstring>(int x, int y) const</argsstring>
        <name>pointCost</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Checks the cost of a point in the costmap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x position of the point in cell coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y position of the point in cell coordinates </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A positive cost for a legal point... negative otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/costmap_model.h" line="130" column="14" bodyfile="src/costmap_model.cpp" bodystart="134" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1CostmapModel_1a0ec575505589c1816559a563b34cd682" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual base_local_planner::CostmapModel::~CostmapModel</definition>
        <argsstring>()</argsstring>
        <name>~CostmapModel</name>
        <briefdescription>
<para>Destructor for the world model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/costmap_model.h" line="97" column="15" bodyfile="include/base_local_planner/costmap_model.h" bodystart="97" bodyend="97"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class that implements the <ref refid="classbase__local__planner_1_1WorldModel" kindref="compound">WorldModel</ref> interface to provide grid based collision checks for the trajectory controller using the costmap. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>base_local_planner::CostmapModel</label>
        <link refid="classbase__local__planner_1_1CostmapModel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>base_local_planner::WorldModel</label>
        <link refid="classbase__local__planner_1_1WorldModel"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>costmap_2d::Costmap2D</label>
        <link refid="classcostmap__2d_1_1Costmap2D" external="/home/docker/ros/noetic/system/build/docs/costmap_2d/tags"/>
      </node>
      <node id="1">
        <label>base_local_planner::CostmapModel</label>
        <link refid="classbase__local__planner_1_1CostmapModel"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>costmap_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>base_local_planner::WorldModel</label>
        <link refid="classbase__local__planner_1_1WorldModel"/>
      </node>
    </collaborationgraph>
    <location file="include/base_local_planner/costmap_model.h" line="85" column="39" bodyfile="include/base_local_planner/costmap_model.h" bodystart="85" bodyend="135"/>
    <listofallmembers>
      <member refid="classbase__local__planner_1_1CostmapModel_1aed9c90777aa55143075132648dee3b03" prot="private" virt="non-virtual"><scope>base_local_planner::CostmapModel</scope><name>costmap_</name></member>
      <member refid="classbase__local__planner_1_1CostmapModel_1a7f785fd68a7d341c41a5c2397e7b8a06" prot="public" virt="non-virtual"><scope>base_local_planner::CostmapModel</scope><name>CostmapModel</name></member>
      <member refid="classbase__local__planner_1_1CostmapModel_1a80d896d06af4f1c0bd5b61cd758743af" prot="public" virt="virtual"><scope>base_local_planner::CostmapModel</scope><name>footprintCost</name></member>
      <member refid="classbase__local__planner_1_1CostmapModel_1a36d4c808bc441e2b87b0ac038099993a" prot="public" virt="non-virtual"><scope>base_local_planner::CostmapModel</scope><name>footprintCost</name></member>
      <member refid="classbase__local__planner_1_1CostmapModel_1ac7e8dc9c77a2dd2fa77f5a27d812fd43" prot="public" virt="non-virtual"><scope>base_local_planner::CostmapModel</scope><name>footprintCost</name></member>
      <member refid="classbase__local__planner_1_1CostmapModel_1a358fe0d75fefe46dda134ee6e3305f71" prot="public" virt="non-virtual"><scope>base_local_planner::CostmapModel</scope><name>footprintCost</name></member>
      <member refid="classbase__local__planner_1_1WorldModel_1ac7e8dc9c77a2dd2fa77f5a27d812fd43" prot="public" virt="non-virtual" ambiguityscope="base_local_planner::WorldModel::"><scope>base_local_planner::CostmapModel</scope><name>footprintCost</name></member>
      <member refid="classbase__local__planner_1_1WorldModel_1a358fe0d75fefe46dda134ee6e3305f71" prot="public" virt="non-virtual" ambiguityscope="base_local_planner::WorldModel::"><scope>base_local_planner::CostmapModel</scope><name>footprintCost</name></member>
      <member refid="classbase__local__planner_1_1CostmapModel_1a8c65ee26aa8032afb635c3cb544e57cf" prot="public" virt="non-virtual"><scope>base_local_planner::CostmapModel</scope><name>lineCost</name></member>
      <member refid="classbase__local__planner_1_1CostmapModel_1abfd021e995f9493ddeb64184a0bd3cf8" prot="public" virt="non-virtual"><scope>base_local_planner::CostmapModel</scope><name>pointCost</name></member>
      <member refid="classbase__local__planner_1_1WorldModel_1a577351de9f26b9fc6f702e1cceed84e4" prot="protected" virt="non-virtual"><scope>base_local_planner::CostmapModel</scope><name>WorldModel</name></member>
      <member refid="classbase__local__planner_1_1CostmapModel_1a0ec575505589c1816559a563b34cd682" prot="public" virt="virtual"><scope>base_local_planner::CostmapModel</scope><name>~CostmapModel</name></member>
      <member refid="classbase__local__planner_1_1WorldModel_1a87c45611143fde55c4a2efb4d078471d" prot="public" virt="virtual"><scope>base_local_planner::CostmapModel</scope><name>~WorldModel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
