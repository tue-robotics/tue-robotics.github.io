<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacebase__local__planner" kind="namespace" language="C++">
    <compoundname>base_local_planner</compoundname>
    <innerclass refid="classbase__local__planner_1_1AlignmentCostFunction" prot="public">base_local_planner::AlignmentCostFunction</innerclass>
    <innerclass refid="classbase__local__planner_1_1CmdVelCostFunction" prot="public">base_local_planner::CmdVelCostFunction</innerclass>
    <innerclass refid="classbase__local__planner_1_1CostmapModel" prot="public">base_local_planner::CostmapModel</innerclass>
    <innerclass refid="classbase__local__planner_1_1FootprintHelper" prot="public">base_local_planner::FootprintHelper</innerclass>
    <innerclass refid="classbase__local__planner_1_1FootprintHelperTest" prot="public">base_local_planner::FootprintHelperTest</innerclass>
    <innerclass refid="classbase__local__planner_1_1LatchedStopRotateController" prot="public">base_local_planner::LatchedStopRotateController</innerclass>
    <innerclass refid="classbase__local__planner_1_1LineIterator" prot="public">base_local_planner::LineIterator</innerclass>
    <innerclass refid="classbase__local__planner_1_1LocalPlannerLimits" prot="public">base_local_planner::LocalPlannerLimits</innerclass>
    <innerclass refid="classbase__local__planner_1_1LocalPlannerUtil" prot="public">base_local_planner::LocalPlannerUtil</innerclass>
    <innerclass refid="classbase__local__planner_1_1MapCell" prot="public">base_local_planner::MapCell</innerclass>
    <innerclass refid="classbase__local__planner_1_1MapGrid" prot="public">base_local_planner::MapGrid</innerclass>
    <innerclass refid="classbase__local__planner_1_1MapGridCostFunction" prot="public">base_local_planner::MapGridCostFunction</innerclass>
    <innerclass refid="classbase__local__planner_1_1MapGridVisualizer" prot="public">base_local_planner::MapGridVisualizer</innerclass>
    <innerclass refid="classbase__local__planner_1_1ObstacleCostFunction" prot="public">base_local_planner::ObstacleCostFunction</innerclass>
    <innerclass refid="classbase__local__planner_1_1OccupancyVelocityCostFunction" prot="public">base_local_planner::OccupancyVelocityCostFunction</innerclass>
    <innerclass refid="classbase__local__planner_1_1OdometryHelperRos" prot="public">base_local_planner::OdometryHelperRos</innerclass>
    <innerclass refid="classbase__local__planner_1_1OscillationCostFunction" prot="public">base_local_planner::OscillationCostFunction</innerclass>
    <innerclass refid="classbase__local__planner_1_1PlanarLaserScan" prot="public">base_local_planner::PlanarLaserScan</innerclass>
    <innerclass refid="classbase__local__planner_1_1PointGrid" prot="public">base_local_planner::PointGrid</innerclass>
    <innerclass refid="classbase__local__planner_1_1PreferForwardCostFunction" prot="public">base_local_planner::PreferForwardCostFunction</innerclass>
    <innerclass refid="classbase__local__planner_1_1SimpleScoredSamplingPlanner" prot="public">base_local_planner::SimpleScoredSamplingPlanner</innerclass>
    <innerclass refid="classbase__local__planner_1_1SimpleTrajectoryGenerator" prot="public">base_local_planner::SimpleTrajectoryGenerator</innerclass>
    <innerclass refid="classbase__local__planner_1_1Trajectory" prot="public">base_local_planner::Trajectory</innerclass>
    <innerclass refid="classbase__local__planner_1_1TrajectoryCostFunction" prot="public">base_local_planner::TrajectoryCostFunction</innerclass>
    <innerclass refid="classbase__local__planner_1_1TrajectoryGeneratorTest" prot="public">base_local_planner::TrajectoryGeneratorTest</innerclass>
    <innerclass refid="classbase__local__planner_1_1TrajectoryPlanner" prot="public">base_local_planner::TrajectoryPlanner</innerclass>
    <innerclass refid="classbase__local__planner_1_1TrajectoryPlannerROS" prot="public">base_local_planner::TrajectoryPlannerROS</innerclass>
    <innerclass refid="classbase__local__planner_1_1TrajectoryPlannerTest" prot="public">base_local_planner::TrajectoryPlannerTest</innerclass>
    <innerclass refid="classbase__local__planner_1_1TrajectorySampleGenerator" prot="public">base_local_planner::TrajectorySampleGenerator</innerclass>
    <innerclass refid="classbase__local__planner_1_1TrajectorySearch" prot="public">base_local_planner::TrajectorySearch</innerclass>
    <innerclass refid="classbase__local__planner_1_1TwirlingCostFunction" prot="public">base_local_planner::TwirlingCostFunction</innerclass>
    <innerclass refid="classbase__local__planner_1_1VelocityIterator" prot="public">base_local_planner::VelocityIterator</innerclass>
    <innerclass refid="classbase__local__planner_1_1VoxelGridModel" prot="public">base_local_planner::VoxelGridModel</innerclass>
    <innerclass refid="classbase__local__planner_1_1WavefrontMapAccessor" prot="public">base_local_planner::WavefrontMapAccessor</innerclass>
    <innerclass refid="classbase__local__planner_1_1WorldModel" prot="public">base_local_planner::WorldModel</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacebase__local__planner_1a5b9cbdd645f780317faf39a970c3824c" prot="public" static="no" strong="no">
        <type></type>
        <name>CostAggregationType</name>
        <enumvalue id="namespacebase__local__planner_1a5b9cbdd645f780317faf39a970c3824ca10a1a85cd52631b78010d22d9e0876c6" prot="public">
          <name>Last</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebase__local__planner_1a5b9cbdd645f780317faf39a970c3824ca84db60edcca5d364af84d7fab6d8e404" prot="public">
          <name>Sum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebase__local__planner_1a5b9cbdd645f780317faf39a970c3824ca30dbe37fb900f8746f1c03a5a4ba12b2" prot="public">
          <name>Product</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when scoring a trajectory according to the values in mapgrid, we can take return the value of the last point (if no of the earlier points were in return collision), the sum for all points, or the product of all (non-zero) points </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/map_grid_cost_function.h" line="88" column="25" bodyfile="include/base_local_planner/map_grid_cost_function.h" bodystart="88" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacebase__local__planner_1a8b4360490756f8efe60d4feacedcf9c5" prot="public" static="no" mutable="no">
        <type><ref refid="classbase__local__planner_1_1TrajectoryPlannerTest" kindref="compound">TrajectoryPlannerTest</ref> *</type>
        <definition>TrajectoryPlannerTest* base_local_planner::tct</definition>
        <argsstring></argsstring>
        <name>tct</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/utest.cpp" line="169" column="23" bodyfile="test/utest.cpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacebase__local__planner_1ac3058c2cea31b23c378465a5e9374219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::getGoalOrientationAngleDifference</definition>
        <argsstring>(const geometry_msgs::PoseStamped &amp;global_pose, double goal_th)</argsstring>
        <name>getGoalOrientationAngleDifference</name>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>global_pose</declname>
        </param>
        <param>
          <type>double</type>
          <declname>goal_th</declname>
        </param>
        <briefdescription>
<para>return angle difference to goal to check if the goal orientation has been achieved </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>The pose of the robot in the global frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goal_x</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired x value for the goal </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goal_y</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired y value for the goal </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>angular difference </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/goal_functions.cpp" line="53" column="10" bodyfile="src/goal_functions.cpp" bodystart="53" bodyend="56" declfile="include/base_local_planner/goal_functions.h" declline="107" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a550c4981442b28ca179446972791839b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::getGoalPose</definition>
        <argsstring>(const tf2_ros::Buffer &amp;tf, const std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;global_plan, const std::string &amp;global_frame, geometry_msgs::PoseStamped &amp;goal_pose)</argsstring>
        <name>getGoalPose</name>
        <param>
          <type>const tf2_ros::Buffer &amp;</type>
          <declname>tf</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::PoseStamped &gt; &amp;</type>
          <declname>global_plan</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>global_frame</declname>
        </param>
        <param>
          <type>geometry_msgs::PoseStamped &amp;</type>
          <declname>goal_pose</declname>
        </param>
        <briefdescription>
<para>Returns last pose in plan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tf</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a transform listener </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>global_plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan being followed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>global_frame</parametername>
</parameternamelist>
<parameterdescription>
<para>The global frame of the local planner </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goal_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>the pose to copy into </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if achieved, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/goal_functions.cpp" line="199" column="8" bodyfile="src/goal_functions.cpp" bodystart="199" bodyend="232" declfile="include/base_local_planner/goal_functions.h" declline="158" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1ac7ecc277a40eb4e997a94149fbec1fbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::getGoalPositionDistance</definition>
        <argsstring>(const geometry_msgs::PoseStamped &amp;global_pose, double goal_x, double goal_y)</argsstring>
        <name>getGoalPositionDistance</name>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>global_pose</declname>
        </param>
        <param>
          <type>double</type>
          <declname>goal_x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>goal_y</declname>
        </param>
        <briefdescription>
<para>return squared distance to check if the goal position has been achieved </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>The pose of the robot in the global frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goal_x</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired x value for the goal </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goal_y</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired y value for the goal </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>distance to goal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/goal_functions.cpp" line="49" column="10" bodyfile="src/goal_functions.cpp" bodystart="49" bodyend="51" declfile="include/base_local_planner/goal_functions.h" declline="98" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a86c3d7ade14ac60afeb361f1db0cf90c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::isGoalReached</definition>
        <argsstring>(const tf2_ros::Buffer &amp;tf, const std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;global_plan, const costmap_2d::Costmap2D &amp;costmap GOAL_ATTRIBUTE_UNUSED, const std::string &amp;global_frame, geometry_msgs::PoseStamped &amp;global_pose, const nav_msgs::Odometry &amp;base_odom, double rot_stopped_vel, double trans_stopped_vel, double xy_goal_tolerance, double yaw_goal_tolerance)</argsstring>
        <name>isGoalReached</name>
        <param>
          <type>const tf2_ros::Buffer &amp;</type>
          <declname>tf</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::PoseStamped &gt; &amp;</type>
          <declname>global_plan</declname>
        </param>
        <param>
          <type>const <ref refid="classcostmap__2d_1_1Costmap2D" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/costmap_2d/tags">costmap_2d::Costmap2D</ref> &amp;costmap</type>
          <declname>GOAL_ATTRIBUTE_UNUSED</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>global_frame</declname>
        </param>
        <param>
          <type>geometry_msgs::PoseStamped &amp;</type>
          <declname>global_pose</declname>
        </param>
        <param>
          <type>const nav_msgs::Odometry &amp;</type>
          <declname>base_odom</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rot_stopped_vel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>trans_stopped_vel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xy_goal_tolerance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yaw_goal_tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/goal_functions.cpp" line="234" column="8" bodyfile="src/goal_functions.cpp" bodystart="234" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1ae1d3626020dd20a3060890d5d184b5e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::isGoalReached</definition>
        <argsstring>(const tf2_ros::Buffer &amp;tf, const std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;global_plan, const costmap_2d::Costmap2D &amp;costmap, const std::string &amp;global_frame, geometry_msgs::PoseStamped &amp;global_pose, const nav_msgs::Odometry &amp;base_odom, double rot_stopped_vel, double trans_stopped_vel, double xy_goal_tolerance, double yaw_goal_tolerance)</argsstring>
        <name>isGoalReached</name>
        <param>
          <type>const tf2_ros::Buffer &amp;</type>
          <declname>tf</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::PoseStamped &gt; &amp;</type>
          <declname>global_plan</declname>
        </param>
        <param>
          <type>const <ref refid="classcostmap__2d_1_1Costmap2D" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/costmap_2d/tags">costmap_2d::Costmap2D</ref> &amp;</type>
          <declname>costmap</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>global_frame</declname>
        </param>
        <param>
          <type>geometry_msgs::PoseStamped &amp;</type>
          <declname>global_pose</declname>
        </param>
        <param>
          <type>const nav_msgs::Odometry &amp;</type>
          <declname>base_odom</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rot_stopped_vel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>trans_stopped_vel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xy_goal_tolerance</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yaw_goal_tolerance</declname>
        </param>
        <briefdescription>
<para>Check if the goal pose has been achieved. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tf</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a transform listener </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>global_plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan being followed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>costmap_ros</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the costmap object being used by the planner </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>global_frame</parametername>
</parameternamelist>
<parameterdescription>
<para>The global frame of the local planner </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base_odom</parametername>
</parameternamelist>
<parameterdescription>
<para>The current odometry information for the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rot_stopped_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>The rotational velocity below which the robot is considered stopped </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trans_stopped_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>The translational velocity below which the robot is considered stopped </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xy_goal_tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>The translational tolerance on reaching the goal </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yaw_goal_tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>The rotational tolerance on reaching the goal </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if achieved, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/goal_functions.h" line="176" column="8" declfile="include/base_local_planner/goal_functions.h" declline="176" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1adabb9b9dc91154a8484d78808e798820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::planFromLookahead</definition>
        <argsstring>(const std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;plan, double lookahead, std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;new_plan)</argsstring>
        <name>planFromLookahead</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::PoseStamped &gt; &amp;</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lookahead</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::PoseStamped &gt; &amp;</type>
          <declname>new_plan</declname>
        </param>
        <briefdescription>
<para>Filters the plan from the lookahead distance up to the end. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan to be filtered up until lookahead </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lookahead</parametername>
</parameternamelist>
<parameterdescription>
<para>The lookahead distance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The new or pruned plan </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/goal_functions.cpp" line="103" column="8" bodyfile="src/goal_functions.cpp" bodystart="103" bodyend="119" declfile="include/base_local_planner/goal_functions.h" declline="131" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1ac8ecc12b4595fc60fdbe4b936ce1a274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::prunePlan</definition>
        <argsstring>(const geometry_msgs::PoseStamped &amp;global_pose, std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;plan, std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;global_plan)</argsstring>
        <name>prunePlan</name>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>global_pose</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::PoseStamped &gt; &amp;</type>
          <declname>plan</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::PoseStamped &gt; &amp;</type>
          <declname>global_plan</declname>
        </param>
        <briefdescription>
<para>Trim off parts of the global plan that are far enough behind the robot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>The pose of the robot in the global frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan to be pruned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>global_plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan to be pruned in the frame of the planner </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Prune the plan</para>
<para>Prune the plan</para>
        </inbodydescription>
        <location file="src/goal_functions.cpp" line="77" column="8" bodyfile="src/goal_functions.cpp" bodystart="77" bodyend="101" declfile="include/base_local_planner/goal_functions.h" declline="123" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1ae89b923286d9fd62be7807372dc50834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::publishPlan</definition>
        <argsstring>(const std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;path, const ros::Publisher &amp;pub)</argsstring>
        <name>publishPlan</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::PoseStamped &gt; &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const ros::Publisher &amp;</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Publish a plan for visualization purposes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan to publish </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>The published to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
<parametername>g</parametername>
<parametername>b</parametername>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The color and alpha value to use when publishing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/goal_functions.cpp" line="58" column="8" bodyfile="src/goal_functions.cpp" bodystart="58" bodyend="75" declfile="include/base_local_planner/goal_functions.h" declline="115" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a36836029a495e1e1880edc09e837f482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbase__local__planner_1_1TrajectoryPlannerTest" kindref="compound">TrajectoryPlannerTest</ref> *</type>
        <definition>TrajectoryPlannerTest* base_local_planner::setup_testclass_singleton</definition>
        <argsstring>()</argsstring>
        <name>setup_testclass_singleton</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/utest.cpp" line="171" column="23" bodyfile="test/utest.cpp" bodystart="171" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a80e24b114d16886990cc72ea97574862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::stopped</definition>
        <argsstring>(const geometry_msgs::PoseStamped &amp;robot_vel, const double &amp;rot_stopped_velocity, const double &amp;trans_stopped_velocity)</argsstring>
        <name>stopped</name>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>robot_vel</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>rot_stopped_velocity</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>trans_stopped_velocity</declname>
        </param>
        <briefdescription>
<para>Check whether the robot is stopped or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>robot_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>The current velocity information of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rot_stopped_velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The rotational velocity below which the robot is considered stopped </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trans_stopped_velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The translational velocity below which the robot is considered stopped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the robot is stopped, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/goal_functions.cpp" line="271" column="8" bodyfile="src/goal_functions.cpp" bodystart="271" bodyend="277" declfile="include/base_local_planner/goal_functions.h" declline="203" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a80ea2934aded9d99c3e082dd934ae89c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::stopped</definition>
        <argsstring>(const nav_msgs::Odometry &amp;base_odom, const double &amp;rot_stopped_velocity, const double &amp;trans_stopped_velocity)</argsstring>
        <name>stopped</name>
        <param>
          <type>const nav_msgs::Odometry &amp;</type>
          <declname>base_odom</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>rot_stopped_velocity</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>trans_stopped_velocity</declname>
        </param>
        <briefdescription>
<para>Check whether the robot is stopped or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base_odom</parametername>
</parameternamelist>
<parameterdescription>
<para>The current odometry information for the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rot_stopped_velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The rotational velocity below which the robot is considered stopped </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trans_stopped_velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The translational velocity below which the robot is considered stopped </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the robot is stopped, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/goal_functions.cpp" line="264" column="8" bodyfile="src/goal_functions.cpp" bodystart="264" bodyend="269" declfile="include/base_local_planner/goal_functions.h" declline="192" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1afcc7fb32ff7cc690cec456bbe8ae4dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(FootprintHelperTest, correctFootprint)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="classbase__local__planner_1_1FootprintHelperTest" kindref="compound">FootprintHelperTest</ref></type>
        </param>
        <param>
          <type>correctFootprint</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/footprint_helper_test.cpp" line="135" column="1" bodyfile="test/footprint_helper_test.cpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a3cb14419fe50829c71236956d25d61b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(FootprintHelperTest, correctLineCells)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="classbase__local__planner_1_1FootprintHelperTest" kindref="compound">FootprintHelperTest</ref></type>
        </param>
        <param>
          <type>correctLineCells</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/footprint_helper_test.cpp" line="140" column="1" bodyfile="test/footprint_helper_test.cpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a01086e4d273070471802129907d9ceb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(MapGridTest, adjustPlan)</argsstring>
        <name>TEST</name>
        <param>
          <type>MapGridTest</type>
        </param>
        <param>
          <type>adjustPlan</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/map_grid_test.cpp" line="113" column="1" bodyfile="test/map_grid_test.cpp" bodystart="113" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1abf808a0ed94538b91a5d8403055606c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(MapGridTest, adjustPlan2)</argsstring>
        <name>TEST</name>
        <param>
          <type>MapGridTest</type>
        </param>
        <param>
          <type>adjustPlan2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/map_grid_test.cpp" line="142" column="1" bodyfile="test/map_grid_test.cpp" bodystart="142" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1ab74190adf8665074e8369cafc1802e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(MapGridTest, adjustPlanEmpty)</argsstring>
        <name>TEST</name>
        <param>
          <type>MapGridTest</type>
        </param>
        <param>
          <type>adjustPlanEmpty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/map_grid_test.cpp" line="104" column="1" bodyfile="test/map_grid_test.cpp" bodystart="104" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a99e3687159537c761170b51512104c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(MapGridTest, copyConstructor)</argsstring>
        <name>TEST</name>
        <param>
          <type>MapGridTest</type>
        </param>
        <param>
          <type>copyConstructor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/map_grid_test.cpp" line="30" column="1" bodyfile="test/map_grid_test.cpp" bodystart="30" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a8fb58f0ae9c9c417df5321e2ef3bd60c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(MapGridTest, distancePropagation)</argsstring>
        <name>TEST</name>
        <param>
          <type>MapGridTest</type>
        </param>
        <param>
          <type>distancePropagation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/map_grid_test.cpp" line="181" column="1" bodyfile="test/map_grid_test.cpp" bodystart="181" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a20d60d586e40c99bd35548561a200726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(MapGridTest, getIndex)</argsstring>
        <name>TEST</name>
        <param>
          <type>MapGridTest</type>
        </param>
        <param>
          <type>getIndex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/map_grid_test.cpp" line="38" column="1" bodyfile="test/map_grid_test.cpp" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a7b2110ac5ad6da79cbd0d741e4eb177f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(MapGridTest, initNull)</argsstring>
        <name>TEST</name>
        <param>
          <type>MapGridTest</type>
        </param>
        <param>
          <type>initNull</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/map_grid_test.cpp" line="18" column="1" bodyfile="test/map_grid_test.cpp" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1aabb9dc6669565b8edb8b51fadff6748a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(MapGridTest, operatorBrackets)</argsstring>
        <name>TEST</name>
        <param>
          <type>MapGridTest</type>
        </param>
        <param>
          <type>operatorBrackets</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/map_grid_test.cpp" line="24" column="1" bodyfile="test/map_grid_test.cpp" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a3a14769f8f72c7d50984f22154b811e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(MapGridTest, properGridConstruction)</argsstring>
        <name>TEST</name>
        <param>
          <type>MapGridTest</type>
        </param>
        <param>
          <type>properGridConstruction</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/map_grid_test.cpp" line="78" column="1" bodyfile="test/map_grid_test.cpp" bodystart="78" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a2b6e0b9c86c15e1c5655e64517b0c785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(MapGridTest, reset)</argsstring>
        <name>TEST</name>
        <param>
          <type>MapGridTest</type>
        </param>
        <param>
          <type>reset</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/map_grid_test.cpp" line="43" column="1" bodyfile="test/map_grid_test.cpp" bodystart="43" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1ad816bba67d8b1da92ea312fafb34cb57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(MapGridTest, sizeCheck)</argsstring>
        <name>TEST</name>
        <param>
          <type>MapGridTest</type>
        </param>
        <param>
          <type>sizeCheck</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/map_grid_test.cpp" line="90" column="1" bodyfile="test/map_grid_test.cpp" bodystart="90" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a49432455b0122a8b75bef05fd84eb810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(TrajectoryPlannerTest, checkGoalDistance)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="classbase__local__planner_1_1TrajectoryPlannerTest" kindref="compound">TrajectoryPlannerTest</ref></type>
        </param>
        <param>
          <type>checkGoalDistance</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/utest.cpp" line="204" column="1" bodyfile="test/utest.cpp" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a9c71ef4d2653527ff043e64226f98364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(TrajectoryPlannerTest, checkPathDistance)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="classbase__local__planner_1_1TrajectoryPlannerTest" kindref="compound">TrajectoryPlannerTest</ref></type>
        </param>
        <param>
          <type>checkPathDistance</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/utest.cpp" line="210" column="1" bodyfile="test/utest.cpp" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a2ecfd39db1caed1dfc893a87ded32a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(TrajectoryPlannerTest, footprintObstacles)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="classbase__local__planner_1_1TrajectoryPlannerTest" kindref="compound">TrajectoryPlannerTest</ref></type>
        </param>
        <param>
          <type>footprintObstacles</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/utest.cpp" line="198" column="1" bodyfile="test/utest.cpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1ab7088dd8f85a9a10ecddaa90676cd2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(VelocityIteratorTest, test1)</argsstring>
        <name>TEST</name>
        <param>
          <type>VelocityIteratorTest</type>
        </param>
        <param>
          <type>test1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/velocity_iterator_test.cpp" line="110" column="1" bodyfile="test/velocity_iterator_test.cpp" bodystart="110" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1af7a8fc342d4ba1b57159e5e61acedd9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(VelocityIteratorTest, test1_neg)</argsstring>
        <name>TEST</name>
        <param>
          <type>VelocityIteratorTest</type>
        </param>
        <param>
          <type>test1_neg</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/velocity_iterator_test.cpp" line="138" column="1" bodyfile="test/velocity_iterator_test.cpp" bodystart="138" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1aa6f28aa3eb1ed8ea7d32930cac17c167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(VelocityIteratorTest, test1_pos)</argsstring>
        <name>TEST</name>
        <param>
          <type>VelocityIteratorTest</type>
        </param>
        <param>
          <type>test1_pos</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/velocity_iterator_test.cpp" line="124" column="1" bodyfile="test/velocity_iterator_test.cpp" bodystart="124" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a1abd4add7b3239475f0a15814d301716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(VelocityIteratorTest, test3)</argsstring>
        <name>TEST</name>
        <param>
          <type>VelocityIteratorTest</type>
        </param>
        <param>
          <type>test3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/velocity_iterator_test.cpp" line="152" column="1" bodyfile="test/velocity_iterator_test.cpp" bodystart="152" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a7f334c616398156aadddb254141b3f2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(VelocityIteratorTest, test4)</argsstring>
        <name>TEST</name>
        <param>
          <type>VelocityIteratorTest</type>
        </param>
        <param>
          <type>test4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/velocity_iterator_test.cpp" line="166" column="1" bodyfile="test/velocity_iterator_test.cpp" bodystart="166" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a1ee3871e18ef5a708e4790455535fdeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(VelocityIteratorTest, test_cranky)</argsstring>
        <name>TEST</name>
        <param>
          <type>VelocityIteratorTest</type>
        </param>
        <param>
          <type>test_cranky</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/velocity_iterator_test.cpp" line="195" column="1" bodyfile="test/velocity_iterator_test.cpp" bodystart="195" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a72ebaccfd35db7b1fdb2f0a94139b758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(VelocityIteratorTest, test_shifted)</argsstring>
        <name>TEST</name>
        <param>
          <type>VelocityIteratorTest</type>
        </param>
        <param>
          <type>test_shifted</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/velocity_iterator_test.cpp" line="180" column="1" bodyfile="test/velocity_iterator_test.cpp" bodystart="180" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1ae3f9c95f5bf8b692b9ebd44acfd3263f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(VelocityIteratorTest, testsingle)</argsstring>
        <name>TEST</name>
        <param>
          <type>VelocityIteratorTest</type>
        </param>
        <param>
          <type>testsingle</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/velocity_iterator_test.cpp" line="77" column="1" bodyfile="test/velocity_iterator_test.cpp" bodystart="77" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a7c8d7f5bc4b977cd4c35d87b35c7b237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(VelocityIteratorTest, testsingle_neg)</argsstring>
        <name>TEST</name>
        <param>
          <type>VelocityIteratorTest</type>
        </param>
        <param>
          <type>testsingle_neg</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/velocity_iterator_test.cpp" line="99" column="1" bodyfile="test/velocity_iterator_test.cpp" bodystart="99" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a43f65fe0ce1ea4925f05638b1b02f817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::TEST</definition>
        <argsstring>(VelocityIteratorTest, testsingle_pos)</argsstring>
        <name>TEST</name>
        <param>
          <type>VelocityIteratorTest</type>
        </param>
        <param>
          <type>testsingle_pos</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/velocity_iterator_test.cpp" line="88" column="1" bodyfile="test/velocity_iterator_test.cpp" bodystart="88" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacebase__local__planner_1a962893e66167d44e22bd284e83e4383e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::transformGlobalPlan</definition>
        <argsstring>(const tf2_ros::Buffer &amp;tf, const std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;global_plan, const geometry_msgs::PoseStamped &amp;global_robot_pose, const costmap_2d::Costmap2D &amp;costmap, const std::string &amp;global_frame, std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;transformed_plan)</argsstring>
        <name>transformGlobalPlan</name>
        <param>
          <type>const tf2_ros::Buffer &amp;</type>
          <declname>tf</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::PoseStamped &gt; &amp;</type>
          <declname>global_plan</declname>
        </param>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>global_robot_pose</declname>
        </param>
        <param>
          <type>const <ref refid="classcostmap__2d_1_1Costmap2D" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/costmap_2d/tags">costmap_2d::Costmap2D</ref> &amp;</type>
          <declname>costmap</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>global_frame</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::PoseStamped &gt; &amp;</type>
          <declname>transformed_plan</declname>
        </param>
        <briefdescription>
<para>Transforms the global plan of the robot from the planner frame to the frame of the costmap, selects only the (first) part of the plan that is within the costmap area. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tf</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a transform listener </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>global_plan</parametername>
</parameternamelist>
<parameterdescription>
<para>The plan to be transformed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>robot_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>The pose of the robot in the global frame (same as costmap) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>costmap</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the costmap being used so the window size for transforming can be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>global_frame</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame to transform the plan to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transformed_plan</parametername>
</parameternamelist>
<parameterdescription>
<para>Populated with the transformed plan </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/goal_functions.cpp" line="121" column="8" bodyfile="src/goal_functions.cpp" bodystart="121" bodyend="197" declfile="include/base_local_planner/goal_functions.h" declline="143" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/base_local_planner/alignment_cost_function.h" line="8" column="1"/>
  </compounddef>
</doxygen>
