<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classbase__local__planner_1_1AlignmentCostFunction" kind="class" language="C++" prot="public">
    <compoundname>base_local_planner::AlignmentCostFunction</compoundname>
    <basecompoundref refid="classbase__local__planner_1_1TrajectoryCostFunction" prot="public" virt="non-virtual">base_local_planner::TrajectoryCostFunction</basecompoundref>
    <includes refid="alignment__cost__function_8h" local="no">alignment_cost_function.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classbase__local__planner_1_1AlignmentCostFunction_1ad39632cce5823317d213a8bfbe8b3c15" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double base_local_planner::AlignmentCostFunction::theta_desired_</definition>
        <argsstring></argsstring>
        <name>theta_desired_</name>
        <briefdescription>
<para>Desired orientation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/alignment_cost_function.h" line="28" column="10" bodyfile="include/base_local_planner/alignment_cost_function.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbase__local__planner_1_1AlignmentCostFunction_1aa3f3d6cbfbab5f09fafcaf31a63ada94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::AlignmentCostFunction::AlignmentCostFunction</definition>
        <argsstring>()</argsstring>
        <name>AlignmentCostFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/alignment_cost_function.h" line="15" column="3" bodyfile="src/alignment_cost_function.cpp" bodystart="7" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1AlignmentCostFunction_1a493e5c17bdf28de44334576438093884" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::AlignmentCostFunction::getDesiredOrientation</definition>
        <argsstring>()</argsstring>
        <name>getDesiredOrientation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/alignment_cost_function.h" line="23" column="10" bodyfile="include/base_local_planner/alignment_cost_function.h" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1AlignmentCostFunction_1af806ca21ecf2306a48f787d7d4b19c76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool base_local_planner::AlignmentCostFunction::prepare</definition>
        <argsstring>()</argsstring>
        <name>prepare</name>
        <reimplements refid="classbase__local__planner_1_1TrajectoryCostFunction_1a351dddca226f210a09bd10c151e2975f">prepare</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>General updating of context values if required. Subclasses may overwrite. Return false in case there is any error. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/alignment_cost_function.h" line="20" column="8" bodyfile="include/base_local_planner/alignment_cost_function.h" bodystart="20" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1AlignmentCostFunction_1a3594e7aa99aadf0b3eee17f3f5717db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double base_local_planner::AlignmentCostFunction::scoreTrajectory</definition>
        <argsstring>(Trajectory &amp;traj)</argsstring>
        <name>scoreTrajectory</name>
        <reimplements refid="classbase__local__planner_1_1TrajectoryCostFunction_1a6908a8071270b455fc25b48db76e2d3c">scoreTrajectory</reimplements>
        <param>
          <type><ref refid="classbase__local__planner_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>traj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return a score for trajectory traj </para>
        </detaileddescription>
        <inbodydescription>
<para>Check trajectory length</para>
<para>Keep error between -pi and pi</para>
        </inbodydescription>
        <location file="include/base_local_planner/alignment_cost_function.h" line="18" column="10" bodyfile="src/alignment_cost_function.cpp" bodystart="18" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1AlignmentCostFunction_1a59bf4ad532d165c255fa0163ba09ace4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::AlignmentCostFunction::setDesiredOrientation</definition>
        <argsstring>(double theta)</argsstring>
        <name>setDesiredOrientation</name>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/alignment_cost_function.h" line="22" column="8" bodyfile="include/base_local_planner/alignment_cost_function.h" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1AlignmentCostFunction_1a6c42027ffd19926337708c893105d15e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>base_local_planner::AlignmentCostFunction::~AlignmentCostFunction</definition>
        <argsstring>()</argsstring>
        <name>~AlignmentCostFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/alignment_cost_function.h" line="16" column="11" bodyfile="src/alignment_cost_function.cpp" bodystart="13" bodyend="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>base_local_planner::TrajectoryCostFunction</label>
        <link refid="classbase__local__planner_1_1TrajectoryCostFunction"/>
      </node>
      <node id="1">
        <label>base_local_planner::AlignmentCostFunction</label>
        <link refid="classbase__local__planner_1_1AlignmentCostFunction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>base_local_planner::TrajectoryCostFunction</label>
        <link refid="classbase__local__planner_1_1TrajectoryCostFunction"/>
      </node>
      <node id="1">
        <label>base_local_planner::AlignmentCostFunction</label>
        <link refid="classbase__local__planner_1_1AlignmentCostFunction"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/base_local_planner/alignment_cost_function.h" line="11" column="1" bodyfile="include/base_local_planner/alignment_cost_function.h" bodystart="10" bodyend="30"/>
    <listofallmembers>
      <member refid="classbase__local__planner_1_1AlignmentCostFunction_1aa3f3d6cbfbab5f09fafcaf31a63ada94" prot="public" virt="non-virtual"><scope>base_local_planner::AlignmentCostFunction</scope><name>AlignmentCostFunction</name></member>
      <member refid="classbase__local__planner_1_1AlignmentCostFunction_1a493e5c17bdf28de44334576438093884" prot="public" virt="non-virtual"><scope>base_local_planner::AlignmentCostFunction</scope><name>getDesiredOrientation</name></member>
      <member refid="classbase__local__planner_1_1TrajectoryCostFunction_1abaae8d899bd41d8baf02bf7aa175ded9" prot="public" virt="non-virtual"><scope>base_local_planner::AlignmentCostFunction</scope><name>getScale</name></member>
      <member refid="classbase__local__planner_1_1AlignmentCostFunction_1af806ca21ecf2306a48f787d7d4b19c76" prot="public" virt="virtual"><scope>base_local_planner::AlignmentCostFunction</scope><name>prepare</name></member>
      <member refid="classbase__local__planner_1_1TrajectoryCostFunction_1a8773ccf955aaca24cb37c4855ca4d582" prot="private" virt="non-virtual"><scope>base_local_planner::AlignmentCostFunction</scope><name>scale_</name></member>
      <member refid="classbase__local__planner_1_1AlignmentCostFunction_1a3594e7aa99aadf0b3eee17f3f5717db9" prot="public" virt="virtual"><scope>base_local_planner::AlignmentCostFunction</scope><name>scoreTrajectory</name></member>
      <member refid="classbase__local__planner_1_1AlignmentCostFunction_1a59bf4ad532d165c255fa0163ba09ace4" prot="public" virt="non-virtual"><scope>base_local_planner::AlignmentCostFunction</scope><name>setDesiredOrientation</name></member>
      <member refid="classbase__local__planner_1_1TrajectoryCostFunction_1a816da4ed3c9be419fc00abb271d5a8b5" prot="public" virt="non-virtual"><scope>base_local_planner::AlignmentCostFunction</scope><name>setScale</name></member>
      <member refid="classbase__local__planner_1_1AlignmentCostFunction_1ad39632cce5823317d213a8bfbe8b3c15" prot="private" virt="non-virtual"><scope>base_local_planner::AlignmentCostFunction</scope><name>theta_desired_</name></member>
      <member refid="classbase__local__planner_1_1TrajectoryCostFunction_1a5a80d6bb3fade55e28d8cb234936c43a" prot="protected" virt="non-virtual"><scope>base_local_planner::AlignmentCostFunction</scope><name>TrajectoryCostFunction</name></member>
      <member refid="classbase__local__planner_1_1AlignmentCostFunction_1a6c42027ffd19926337708c893105d15e" prot="public" virt="virtual"><scope>base_local_planner::AlignmentCostFunction</scope><name>~AlignmentCostFunction</name></member>
      <member refid="classbase__local__planner_1_1TrajectoryCostFunction_1ac606d6ffc0a09f96d04cbb671c903d68" prot="public" virt="virtual"><scope>base_local_planner::AlignmentCostFunction</scope><name>~TrajectoryCostFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
