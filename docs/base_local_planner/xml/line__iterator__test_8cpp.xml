<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="line__iterator__test_8cpp" kind="file" language="C++">
    <compoundname>line_iterator_test.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="line__iterator_8h" local="yes">base_local_planner/line_iterator.h</includes>
    <incdepgraph>
      <node id="3">
        <label>base_local_planner/line_iterator.h</label>
        <link refid="line__iterator_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>line_iterator_test.cpp</label>
        <link refid="line__iterator__test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="line__iterator__test_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/line_iterator_test.cpp" line="78" column="5" bodyfile="test/line_iterator_test.cpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="line__iterator__test_8cpp_1a4a145114f485e713bb98b1bfa37c6f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LineIterator, north_north_west)</argsstring>
        <name>TEST</name>
        <param>
          <type>LineIterator</type>
        </param>
        <param>
          <type>north_north_west</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/line_iterator_test.cpp" line="52" column="1" bodyfile="test/line_iterator_test.cpp" bodystart="52" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="line__iterator__test_8cpp_1a063fd5c1eea3a6858a1addd0d81e046e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(LineIterator, south)</argsstring>
        <name>TEST</name>
        <param>
          <type>LineIterator</type>
        </param>
        <param>
          <type>south</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test/line_iterator_test.cpp" line="34" column="1" bodyfile="test/line_iterator_test.cpp" bodystart="34" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2012,<sp/>Willow<sp/>Garage,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Willow<sp/>Garage,<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="line__iterator_8h" kindref="compound">base_local_planner/line_iterator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="line__iterator__test_8cpp_1a063fd5c1eea3a6858a1addd0d81e046e" refkind="member"><highlight class="normal"><ref refid="line__iterator__test_8cpp_1a063fd5c1eea3a6858a1addd0d81e046e" kindref="member">TEST</ref>(<sp/>LineIterator,<sp/>south<sp/>)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="classbase__local__planner_1_1LineIterator" kindref="compound">base_local_planner::LineIterator</ref><sp/>line(<sp/>1,<sp/>2,<sp/>1,<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a603d638882063ab678c2a75911591080" kindref="member">isValid</ref>()<sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>1,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a28c1d5cf80224634d4b8adca5ec6f441" kindref="member">getX</ref>()<sp/>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>2,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a59ca9e3b8bdfb50250a9bf93d1fb304b" kindref="member">getY</ref>()<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a8ed9b1960bf22eb83e62177cede42f6e" kindref="member">advance</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a603d638882063ab678c2a75911591080" kindref="member">isValid</ref>()<sp/>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>1,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a28c1d5cf80224634d4b8adca5ec6f441" kindref="member">getX</ref>()<sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>3,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a59ca9e3b8bdfb50250a9bf93d1fb304b" kindref="member">getY</ref>()<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a8ed9b1960bf22eb83e62177cede42f6e" kindref="member">advance</ref>();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a603d638882063ab678c2a75911591080" kindref="member">isValid</ref>()<sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>1,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a28c1d5cf80224634d4b8adca5ec6f441" kindref="member">getX</ref>()<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>4,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a59ca9e3b8bdfb50250a9bf93d1fb304b" kindref="member">getY</ref>()<sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a8ed9b1960bf22eb83e62177cede42f6e" kindref="member">advance</ref>();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a603d638882063ab678c2a75911591080" kindref="member">isValid</ref>()<sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="line__iterator__test_8cpp_1a4a145114f485e713bb98b1bfa37c6f23" refkind="member"><highlight class="normal"><ref refid="line__iterator__test_8cpp_1a063fd5c1eea3a6858a1addd0d81e046e" kindref="member">TEST</ref>(<sp/>LineIterator,<sp/>north_north_west<sp/>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><ref refid="classbase__local__planner_1_1LineIterator" kindref="compound">base_local_planner::LineIterator</ref><sp/>line(<sp/>0,<sp/>0,<sp/>-2,<sp/>-4<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a603d638882063ab678c2a75911591080" kindref="member">isValid</ref>()<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>0,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a28c1d5cf80224634d4b8adca5ec6f441" kindref="member">getX</ref>()<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>0,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a59ca9e3b8bdfb50250a9bf93d1fb304b" kindref="member">getY</ref>()<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a8ed9b1960bf22eb83e62177cede42f6e" kindref="member">advance</ref>();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a603d638882063ab678c2a75911591080" kindref="member">isValid</ref>()<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>-1,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a28c1d5cf80224634d4b8adca5ec6f441" kindref="member">getX</ref>()<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>-1,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a59ca9e3b8bdfb50250a9bf93d1fb304b" kindref="member">getY</ref>()<sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a8ed9b1960bf22eb83e62177cede42f6e" kindref="member">advance</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a603d638882063ab678c2a75911591080" kindref="member">isValid</ref>()<sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>-1,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a28c1d5cf80224634d4b8adca5ec6f441" kindref="member">getX</ref>()<sp/>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>-2,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a59ca9e3b8bdfb50250a9bf93d1fb304b" kindref="member">getY</ref>()<sp/>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a8ed9b1960bf22eb83e62177cede42f6e" kindref="member">advance</ref>();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a603d638882063ab678c2a75911591080" kindref="member">isValid</ref>()<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>-2,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a28c1d5cf80224634d4b8adca5ec6f441" kindref="member">getX</ref>()<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>-3,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a59ca9e3b8bdfb50250a9bf93d1fb304b" kindref="member">getY</ref>()<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a8ed9b1960bf22eb83e62177cede42f6e" kindref="member">advance</ref>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a603d638882063ab678c2a75911591080" kindref="member">isValid</ref>()<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>-2,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a28c1d5cf80224634d4b8adca5ec6f441" kindref="member">getX</ref>()<sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>EXPECT_EQ(<sp/>-4,<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a59ca9e3b8bdfb50250a9bf93d1fb304b" kindref="member">getY</ref>()<sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a8ed9b1960bf22eb83e62177cede42f6e" kindref="member">advance</ref>();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(<sp/>line.<ref refid="classbase__local__planner_1_1LineIterator_1a603d638882063ab678c2a75911591080" kindref="member">isValid</ref>()<sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="line__iterator__test_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="line__iterator__test_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(<sp/>&amp;argc,<sp/>argv<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="test/line_iterator_test.cpp"/>
  </compounddef>
</doxygen>
