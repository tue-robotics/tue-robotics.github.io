<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classbase__local__planner_1_1SimpleTrajectoryGenerator" kind="class" language="C++" prot="public">
    <compoundname>base_local_planner::SimpleTrajectoryGenerator</compoundname>
    <basecompoundref refid="classbase__local__planner_1_1TrajectorySampleGenerator" prot="public" virt="non-virtual">base_local_planner::TrajectorySampleGenerator</basecompoundref>
    <includes refid="simple__trajectory__generator_8h" local="no">simple_trajectory_generator.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1abe5c2bf96effe4753a884f5947044fb9" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double base_local_planner::SimpleTrajectoryGenerator::angular_sim_granularity_</definition>
        <argsstring></argsstring>
        <name>angular_sim_granularity_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="224" column="37" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1aa811b5385f768045ec76638d431c4289" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool base_local_planner::SimpleTrajectoryGenerator::continued_acceleration_</definition>
        <argsstring></argsstring>
        <name>continued_acceleration_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="221" column="8" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a719ba193671c3057ac1dace84aa01526" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool base_local_planner::SimpleTrajectoryGenerator::discretize_by_time_</definition>
        <argsstring></argsstring>
        <name>discretize_by_time_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="222" column="8" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a0586ccaf8b6372830bd715d476889bb9" prot="protected" static="no" mutable="no">
        <type><ref refid="classbase__local__planner_1_1LocalPlannerLimits" kindref="compound">base_local_planner::LocalPlannerLimits</ref> *</type>
        <definition>base_local_planner::LocalPlannerLimits* base_local_planner::SimpleTrajectoryGenerator::limits_</definition>
        <argsstring></argsstring>
        <name>limits_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="216" column="42" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1acc42f25461d9894845955e5d464e4a58" prot="protected" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int base_local_planner::SimpleTrajectoryGenerator::next_sample_index_</definition>
        <argsstring></argsstring>
        <name>next_sample_index_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="213" column="16" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a1e308de90ce96375e50889bb75398830" prot="protected" static="no" mutable="no">
        <type>Eigen::Vector3f</type>
        <definition>Eigen::Vector3f base_local_planner::SimpleTrajectoryGenerator::pos_</definition>
        <argsstring></argsstring>
        <name>pos_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="217" column="19" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a6084045fc45c79ded7ef6b75f60320e7" prot="protected" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; Eigen::Vector3f &gt;</type>
        <definition>std::vector&lt;Eigen::Vector3f&gt; base_local_planner::SimpleTrajectoryGenerator::sample_params_</definition>
        <argsstring></argsstring>
        <name>sample_params_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="215" column="15" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1ac8e05c3fe4516c7343621649722b1bae" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double base_local_planner::SimpleTrajectoryGenerator::sim_granularity_</definition>
        <argsstring></argsstring>
        <name>sim_granularity_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="224" column="20" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a5447b0d5c0fb3f642db474c86d0e33d8" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double base_local_planner::SimpleTrajectoryGenerator::sim_period_</definition>
        <argsstring></argsstring>
        <name>sim_period_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="226" column="10" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a6e59c0e68ed11342bcad2d80db5f967d" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double base_local_planner::SimpleTrajectoryGenerator::sim_time_</definition>
        <argsstring></argsstring>
        <name>sim_time_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="224" column="10" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1ad388680d803d492b2565c7f3f4a508e6" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool base_local_planner::SimpleTrajectoryGenerator::use_dwa_</definition>
        <argsstring></argsstring>
        <name>use_dwa_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="225" column="8" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a6d5012705423167541f096bedaa5152f" prot="protected" static="no" mutable="no">
        <type>Eigen::Vector3f</type>
        <definition>Eigen::Vector3f base_local_planner::SimpleTrajectoryGenerator::vel_</definition>
        <argsstring></argsstring>
        <name>vel_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="218" column="19" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a09675e3d736eaf9ff3b8c8bc3587b768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::SimpleTrajectoryGenerator::generateTrajectory</definition>
        <argsstring>(Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f sample_target_vel, base_local_planner::Trajectory &amp;traj)</argsstring>
        <name>generateTrajectory</name>
        <param>
          <type>Eigen::Vector3f</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Eigen::Vector3f</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Eigen::Vector3f</type>
          <declname>sample_target_vel</declname>
        </param>
        <param>
          <type><ref refid="classbase__local__planner_1_1Trajectory" kindref="compound">base_local_planner::Trajectory</ref> &amp;</type>
          <declname>traj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>current position of robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vel</parametername>
</parameternamelist>
<parameterdescription>
<para>desired velocity for sampling </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="205" column="8" bodyfile="src/simple_trajectory_generator.cpp" bodystart="215" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1ab2e9ca5e1468974af51acc17e5c7aec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool base_local_planner::SimpleTrajectoryGenerator::hasMoreTrajectories</definition>
        <argsstring>()</argsstring>
        <name>hasMoreTrajectories</name>
        <reimplements refid="classbase__local__planner_1_1TrajectorySampleGenerator_1a053d4cfcef3b7c84bc86eb4c87211e3b">hasMoreTrajectories</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this generator can create more trajectories </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="191" column="8" bodyfile="src/simple_trajectory_generator.cpp" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a56881a7d1e6cf7027eb2243a764dc0fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::SimpleTrajectoryGenerator::initialise</definition>
        <argsstring>(const Eigen::Vector3f &amp;pos, const Eigen::Vector3f &amp;vel, const Eigen::Vector3f &amp;goal, base_local_planner::LocalPlannerLimits *limits, const Eigen::Vector3f &amp;vsamples, bool discretize_by_time=false)</argsstring>
        <name>initialise</name>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>goal</declname>
        </param>
        <param>
          <type><ref refid="classbase__local__planner_1_1LocalPlannerLimits" kindref="compound">base_local_planner::LocalPlannerLimits</ref> *</type>
          <declname>limits</declname>
        </param>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>vsamples</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>discretize_by_time</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>current robot position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vel</parametername>
</parameternamelist>
<parameterdescription>
<para>current robot velocity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limits</parametername>
</parameternamelist>
<parameterdescription>
<para>Current velocity limits </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vsamples</parametername>
</parameternamelist>
<parameterdescription>
<para>in how many samples to divide the given dimension </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_acceleration_limits</parametername>
</parameternamelist>
<parameterdescription>
<para>if true use physical model, else idealized robot model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>discretize_by_time</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the trajectory is split according in chunks of the same duration, else of same length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="166" column="8" bodyfile="src/simple_trajectory_generator.cpp" bodystart="95" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a0810ac35a39d3d7ccc1c19a862e97fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::SimpleTrajectoryGenerator::initialise</definition>
        <argsstring>(const Eigen::Vector3f &amp;pos, const Eigen::Vector3f &amp;vel, const Eigen::Vector3f &amp;goal, base_local_planner::LocalPlannerLimits *limits, const Eigen::Vector3f &amp;vsamples, std::vector&lt; Eigen::Vector3f &gt; additional_samples, bool discretize_by_time=false)</argsstring>
        <name>initialise</name>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>goal</declname>
        </param>
        <param>
          <type><ref refid="classbase__local__planner_1_1LocalPlannerLimits" kindref="compound">base_local_planner::LocalPlannerLimits</ref> *</type>
          <declname>limits</declname>
        </param>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>vsamples</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; Eigen::Vector3f &gt;</type>
          <declname>additional_samples</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>discretize_by_time</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>current robot position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vel</parametername>
</parameternamelist>
<parameterdescription>
<para>current robot velocity </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limits</parametername>
</parameternamelist>
<parameterdescription>
<para>Current velocity limits </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vsamples</parametername>
</parameternamelist>
<parameterdescription>
<para>in how many samples to divide the given dimension </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_acceleration_limits</parametername>
</parameternamelist>
<parameterdescription>
<para>if true use physical model, else idealized robot model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>additional_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>(deprecated): Additional velocity samples to generate individual trajectories from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>discretize_by_time</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the trajectory is split according in chunks of the same duration, else of same length </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="149" column="8" bodyfile="src/simple_trajectory_generator.cpp" bodystart="81" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1adb064b57ea297fc3810e185861e444e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool base_local_planner::SimpleTrajectoryGenerator::nextTrajectory</definition>
        <argsstring>(Trajectory &amp;traj)</argsstring>
        <name>nextTrajectory</name>
        <reimplements refid="classbase__local__planner_1_1TrajectorySampleGenerator_1a810dd5771cf6cd1645fabf5c9bc25d94">nextTrajectory</reimplements>
        <param>
          <type><ref refid="classbase__local__planner_1_1Trajectory" kindref="compound">Trajectory</ref> &amp;</type>
          <declname>traj</declname>
          <defname>comp_traj</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whether this generator can create more trajectories</para>
<para>Create and return the next sample trajectory </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="196" column="8" bodyfile="src/simple_trajectory_generator.cpp" bodystart="196" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a9ce8e2d22eafe3f2a2d2daf236e1ce83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::SimpleTrajectoryGenerator::setParameters</definition>
        <argsstring>(double sim_time, double sim_granularity, double angular_sim_granularity, bool use_dwa=false, double sim_period=0.0)</argsstring>
        <name>setParameters</name>
        <param>
          <type>double</type>
          <declname>sim_time</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sim_granularity</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angular_sim_granularity</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dwa</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double</type>
          <declname>sim_period</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is to be called only when parameters change</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sim_granularity</parametername>
</parameternamelist>
<parameterdescription>
<para>granularity of collision detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angular_sim_granularity</parametername>
</parameternamelist>
<parameterdescription>
<para>angular granularity of collision detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_dwa</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to use DWA or trajectory rollout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sim_period</parametername>
</parameternamelist>
<parameterdescription>
<para>distance between points in one trajectory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="182" column="8" bodyfile="src/simple_trajectory_generator.cpp" bodystart="172" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a83cdc24bc40a5ed55ec7d089c67d8018" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::SimpleTrajectoryGenerator::SimpleTrajectoryGenerator</definition>
        <argsstring>()</argsstring>
        <name>SimpleTrajectoryGenerator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="134" column="3" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="134" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1aea15c7d1fe8977c75334caff43b12925" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::SimpleTrajectoryGenerator::~SimpleTrajectoryGenerator</definition>
        <argsstring>()</argsstring>
        <name>~SimpleTrajectoryGenerator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="138" column="3" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="138" bodyend="138"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a4762e662d557328a98abad8155501626" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3f</type>
        <definition>Eigen::Vector3f base_local_planner::SimpleTrajectoryGenerator::computeNewPositions</definition>
        <argsstring>(const Eigen::Vector3f &amp;pos, const Eigen::Vector3f &amp;vel, double dt)</argsstring>
        <name>computeNewPositions</name>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="199" column="26" bodyfile="src/simple_trajectory_generator.cpp" bodystart="292" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1SimpleTrajectoryGenerator_1abeea221947f5062cdb481c9888c33075" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector3f</type>
        <definition>Eigen::Vector3f base_local_planner::SimpleTrajectoryGenerator::computeNewVelocities</definition>
        <argsstring>(const Eigen::Vector3f &amp;sample_target_vel, const Eigen::Vector3f &amp;vel, Eigen::Vector3f acclimits, double dt)</argsstring>
        <name>computeNewVelocities</name>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>sample_target_vel</declname>
        </param>
        <param>
          <type>const Eigen::Vector3f &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Eigen::Vector3f</type>
          <declname>acclimits</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>change vel using acceleration limits to converge towards sample_target-vel </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/simple_trajectory_generator.h" line="202" column="26" bodyfile="src/simple_trajectory_generator.cpp" bodystart="304" bodyend="315"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>generates trajectories based on equi-distant discretisation of the degrees of freedom. This is supposed to be a simple and robust implementation of the <ref refid="classbase__local__planner_1_1TrajectorySampleGenerator" kindref="compound">TrajectorySampleGenerator</ref> interface, more efficient implementations are thinkable.</para>
<para>This can be used for both dwa and trajectory rollout approaches. As an example, assuming these values: sim_time = 1s, sim_period=200ms, dt = 200ms, vsamples_x=5, acc_limit_x = 1m/s^2, vel_x=0 (robot at rest, values just for easy calculations) dwa_planner will sample max-x-velocities from 0m/s to 0.2m/s. trajectory rollout approach will sample max-x-velocities 0m/s up to 1m/s trajectory rollout approach does so respecting the acceleration limit, so it gradually increases velocity </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>base_local_planner::TrajectorySampleGenerator</label>
        <link refid="classbase__local__planner_1_1TrajectorySampleGenerator"/>
      </node>
      <node id="1">
        <label>base_local_planner::SimpleTrajectoryGenerator</label>
        <link refid="classbase__local__planner_1_1SimpleTrajectoryGenerator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>base_local_planner::LocalPlannerLimits</label>
        <link refid="classbase__local__planner_1_1LocalPlannerLimits"/>
      </node>
      <node id="2">
        <label>base_local_planner::TrajectorySampleGenerator</label>
        <link refid="classbase__local__planner_1_1TrajectorySampleGenerator"/>
      </node>
      <node id="3">
        <label>std::vector&lt; Eigen::Vector3f &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="1">
        <label>base_local_planner::SimpleTrajectoryGenerator</label>
        <link refid="classbase__local__planner_1_1SimpleTrajectoryGenerator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>sample_params_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>limits_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="include/base_local_planner/simple_trajectory_generator.h" line="96" column="85" bodyfile="include/base_local_planner/simple_trajectory_generator.h" bodystart="96" bodyend="192"/>
    <listofallmembers>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1abe5c2bf96effe4753a884f5947044fb9" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>angular_sim_granularity_</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a4762e662d557328a98abad8155501626" prot="public" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>computeNewPositions</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1abeea221947f5062cdb481c9888c33075" prot="public" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>computeNewVelocities</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1aa811b5385f768045ec76638d431c4289" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>continued_acceleration_</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a719ba193671c3057ac1dace84aa01526" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>discretize_by_time_</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a09675e3d736eaf9ff3b8c8bc3587b768" prot="public" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>generateTrajectory</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1ab2e9ca5e1468974af51acc17e5c7aec2" prot="public" virt="virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>hasMoreTrajectories</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a0810ac35a39d3d7ccc1c19a862e97fbf" prot="public" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>initialise</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a56881a7d1e6cf7027eb2243a764dc0fa" prot="public" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>initialise</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a0586ccaf8b6372830bd715d476889bb9" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>limits_</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1acc42f25461d9894845955e5d464e4a58" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>next_sample_index_</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1adb064b57ea297fc3810e185861e444e8" prot="public" virt="virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>nextTrajectory</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a1e308de90ce96375e50889bb75398830" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>pos_</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a6084045fc45c79ded7ef6b75f60320e7" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>sample_params_</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a9ce8e2d22eafe3f2a2d2daf236e1ce83" prot="public" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>setParameters</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1ac8e05c3fe4516c7343621649722b1bae" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>sim_granularity_</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a5447b0d5c0fb3f642db474c86d0e33d8" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>sim_period_</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a6e59c0e68ed11342bcad2d80db5f967d" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>sim_time_</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a83cdc24bc40a5ed55ec7d089c67d8018" prot="public" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>SimpleTrajectoryGenerator</name></member>
      <member refid="classbase__local__planner_1_1TrajectorySampleGenerator_1a015033aef2d21abd86f73e95318cf52c" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>TrajectorySampleGenerator</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1ad388680d803d492b2565c7f3f4a508e6" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>use_dwa_</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1a6d5012705423167541f096bedaa5152f" prot="protected" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>vel_</name></member>
      <member refid="classbase__local__planner_1_1SimpleTrajectoryGenerator_1aea15c7d1fe8977c75334caff43b12925" prot="public" virt="non-virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>~SimpleTrajectoryGenerator</name></member>
      <member refid="classbase__local__planner_1_1TrajectorySampleGenerator_1a409735b0c1e854fe288d61dcef810175" prot="public" virt="virtual"><scope>base_local_planner::SimpleTrajectoryGenerator</scope><name>~TrajectorySampleGenerator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
