<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="latched__stop__rotate__controller_8cpp" kind="file" language="C++">
    <compoundname>latched_stop_rotate_controller.cpp</compoundname>
    <includes refid="latched__stop__rotate__controller_8h" local="no">base_local_planner/latched_stop_rotate_controller.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">angles/angles.h</includes>
    <includes local="no">nav_msgs/Odometry.h</includes>
    <includes refid="goal__functions_8h" local="no">base_local_planner/goal_functions.h</includes>
    <includes refid="local__planner__limits_8h" local="no">base_local_planner/local_planner_limits.h</includes>
    <includes local="no">tf2/utils.h</includes>
    <incdepgraph>
      <node id="17">
        <label>base_local_planner/goal_functions.h</label>
        <link refid="goal__functions_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>latched_stop_rotate_controller.cpp</label>
        <link refid="latched__stop__rotate__controller_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>nav_msgs/Odometry.h</label>
      </node>
      <node id="4">
        <label>Eigen/Core</label>
      </node>
      <node id="6">
        <label>nav_core/base_local_planner.h</label>
      </node>
      <node id="20">
        <label>geometry_msgs/Point.h</label>
      </node>
      <node id="7">
        <label>boost/thread.hpp</label>
      </node>
      <node id="21">
        <label>tf2/utils.h</label>
      </node>
      <node id="16">
        <label>angles/angles.h</label>
      </node>
      <node id="14">
        <label>geometry_msgs/PoseStamped.h</label>
      </node>
      <node id="19">
        <label>geometry_msgs/Twist.h</label>
      </node>
      <node id="18">
        <label>nav_msgs/Path.h</label>
      </node>
      <node id="13">
        <label>ros/ros.h</label>
      </node>
      <node id="2">
        <label>base_local_planner/latched_stop_rotate_controller.h</label>
        <link refid="latched__stop__rotate__controller_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>string</label>
        <link refid="cpp/header/string" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="11">
        <label>base_local_planner/odometry_helper_ros.h</label>
        <link refid="odometry__helper__ros_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>base_local_planner/local_planner_util.h</label>
        <link refid="local__planner__util_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>costmap_2d/costmap_2d.h</label>
        <link refid="costmap__2d_8h.html" external="/home/docker/ros/noetic/system/build/docs/costmap_2d/tags"/>
      </node>
      <node id="9">
        <label>tf2_ros/buffer.h</label>
      </node>
      <node id="15">
        <label>cmath</label>
        <link refid="cpp/header/cmath" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="10">
        <label>base_local_planner/local_planner_limits.h</label>
        <link refid="local__planner__limits_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacebase__local__planner">base_local_planner</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>latched_stop_rotate_controller.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Apr<sp/>16,<sp/>2012</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>tkruse</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="latched__stop__rotate__controller_8h" kindref="compound">base_local_planner/latched_stop_rotate_controller.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="cpp/header/cmath" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">cmath</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;angles/angles.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nav_msgs/Odometry.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="goal__functions_8h" kindref="compound">base_local_planner/goal_functions.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="local__planner__limits_8h" kindref="compound">base_local_planner/local_planner_limits.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tf2/utils.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacebase__local__planner" kindref="compound">base_local_planner</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classbase__local__planner_1_1LatchedStopRotateController_1a217e37ce23f57c28f157d2287d9ad02a" refkind="member"><highlight class="normal"><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a217e37ce23f57c28f157d2287d9ad02a" kindref="member">LatchedStopRotateController::LatchedStopRotateController</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref>&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>ros::NodeHandle<sp/>private_nh(</highlight><highlight class="stringliteral">&quot;~/&quot;</highlight><highlight class="normal"><sp/>+<sp/>name);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>private_nh.param(</highlight><highlight class="stringliteral">&quot;latch_xy_goal_tolerance&quot;</highlight><highlight class="normal">,<sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1adfd4e505101739501cf59d1a7129ced4" kindref="member">latch_xy_goal_tolerance_</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1afb20eb5fc414868654de760ad6666412" kindref="member">rotating_to_goal_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classbase__local__planner_1_1LatchedStopRotateController_1a11a816ca2255215d346a5ea56e91edad" refkind="member"><highlight class="normal"><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a11a816ca2255215d346a5ea56e91edad" kindref="member">LatchedStopRotateController::~LatchedStopRotateController</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classbase__local__planner_1_1LatchedStopRotateController_1a22892ae258fb69ab1cbb78b3e076fba3" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a22892ae258fb69ab1cbb78b3e076fba3" kindref="member">LatchedStopRotateController::isPositionReached</ref>(<ref refid="classbase__local__planner_1_1LocalPlannerUtil" kindref="compound">LocalPlannerUtil</ref>*<sp/>planner_util,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::PoseStamped&amp;<sp/>global_pose)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xy_goal_tolerance<sp/>=<sp/>planner_util-&gt;<ref refid="classbase__local__planner_1_1LocalPlannerUtil_1ab872bb31110cc8cf9d1fa7f5b339c6fd" kindref="member">getCurrentLimits</ref>().<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1acf6eecfd9fb865c904a331b26e9ab43b" kindref="member">xy_goal_tolerance</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>assume<sp/>the<sp/>global<sp/>goal<sp/>is<sp/>the<sp/>last<sp/>point<sp/>in<sp/>the<sp/>global<sp/>plan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>geometry_msgs::PoseStamped<sp/>goal_pose;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>planner_util-&gt;<ref refid="classbase__local__planner_1_1LocalPlannerUtil_1a40a75811cc424cb2f4e205a0ec18cb41" kindref="member">getGoal</ref>(goal_pose))<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>goal_x<sp/>=<sp/>goal_pose.pose.position.x;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>goal_y<sp/>=<sp/>goal_pose.pose.position.y;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//check<sp/>to<sp/>see<sp/>if<sp/>we&apos;ve<sp/>reached<sp/>the<sp/>goal<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="classbase__local__planner_1_1LatchedStopRotateController_1adfd4e505101739501cf59d1a7129ced4" kindref="member">latch_xy_goal_tolerance_</ref><sp/>&amp;&amp;<sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a7a965f0ef85f1103ad80b6bbfc0f2b1b" kindref="member">xy_tolerance_latch_</ref>)<sp/>||</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacebase__local__planner_1ac7ecc277a40eb4e997a94149fbec1fbe" kindref="member">base_local_planner::getGoalPositionDistance</ref>(global_pose,<sp/>goal_x,<sp/>goal_y)<sp/>&lt;=<sp/>xy_goal_tolerance)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a7a965f0ef85f1103ad80b6bbfc0f2b1b" kindref="member">xy_tolerance_latch_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classbase__local__planner_1_1LatchedStopRotateController_1a296b387b74afe1c430f0dc6efb2f2ae8" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a296b387b74afe1c430f0dc6efb2f2ae8" kindref="member">LatchedStopRotateController::isGoalReached</ref>(<ref refid="classbase__local__planner_1_1LocalPlannerUtil" kindref="compound">LocalPlannerUtil</ref>*<sp/>planner_util,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__local__planner_1_1OdometryHelperRos" kindref="compound">OdometryHelperRos</ref>&amp;<sp/>odom_helper,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::PoseStamped&amp;<sp/>global_pose)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xy_goal_tolerance<sp/>=<sp/>planner_util-&gt;<ref refid="classbase__local__planner_1_1LocalPlannerUtil_1ab872bb31110cc8cf9d1fa7f5b339c6fd" kindref="member">getCurrentLimits</ref>().<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1acf6eecfd9fb865c904a331b26e9ab43b" kindref="member">xy_goal_tolerance</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta_stopped_vel<sp/>=<sp/>planner_util-&gt;<ref refid="classbase__local__planner_1_1LocalPlannerUtil_1ab872bb31110cc8cf9d1fa7f5b339c6fd" kindref="member">getCurrentLimits</ref>().<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1a8232d72db9ee490be3b13abed606bf73" kindref="member">theta_stopped_vel</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trans_stopped_vel<sp/>=<sp/>planner_util-&gt;<ref refid="classbase__local__planner_1_1LocalPlannerUtil_1ab872bb31110cc8cf9d1fa7f5b339c6fd" kindref="member">getCurrentLimits</ref>().<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1ab3f35628f5d93eaeab83eaf3fc1e1f55" kindref="member">trans_stopped_vel</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//copy<sp/>over<sp/>the<sp/>odometry<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>nav_msgs::Odometry<sp/>base_odom;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>odom_helper.<ref refid="classbase__local__planner_1_1OdometryHelperRos_1ada88271c5b81d4a97b81eb51de64f67c" kindref="member">getOdom</ref>(base_odom);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>assume<sp/>the<sp/>global<sp/>goal<sp/>is<sp/>the<sp/>last<sp/>point<sp/>in<sp/>the<sp/>global<sp/>plan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>geometry_msgs::PoseStamped<sp/>goal_pose;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>planner_util-&gt;<ref refid="classbase__local__planner_1_1LocalPlannerUtil_1a40a75811cc424cb2f4e205a0ec18cb41" kindref="member">getGoal</ref>(goal_pose))<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>goal_x<sp/>=<sp/>goal_pose.pose.position.x;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>goal_y<sp/>=<sp/>goal_pose.pose.position.y;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><ref refid="classbase__local__planner_1_1LocalPlannerLimits" kindref="compound">base_local_planner::LocalPlannerLimits</ref><sp/>limits<sp/>=<sp/>planner_util-&gt;<ref refid="classbase__local__planner_1_1LocalPlannerUtil_1ab872bb31110cc8cf9d1fa7f5b339c6fd" kindref="member">getCurrentLimits</ref>();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//check<sp/>to<sp/>see<sp/>if<sp/>we&apos;ve<sp/>reached<sp/>the<sp/>goal<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="classbase__local__planner_1_1LatchedStopRotateController_1adfd4e505101739501cf59d1a7129ced4" kindref="member">latch_xy_goal_tolerance_</ref><sp/>&amp;&amp;<sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a7a965f0ef85f1103ad80b6bbfc0f2b1b" kindref="member">xy_tolerance_latch_</ref>)<sp/>||</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacebase__local__planner_1ac7ecc277a40eb4e997a94149fbec1fbe" kindref="member">base_local_planner::getGoalPositionDistance</ref>(global_pose,<sp/>goal_x,<sp/>goal_y)<sp/>&lt;=<sp/>xy_goal_tolerance)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>user<sp/>wants<sp/>to<sp/>latch<sp/>goal<sp/>tolerance,<sp/>if<sp/>we<sp/>ever<sp/>reach<sp/>the<sp/>goal<sp/>location,<sp/>we&apos;ll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//just<sp/>rotate<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbase__local__planner_1_1LatchedStopRotateController_1adfd4e505101739501cf59d1a7129ced4" kindref="member">latch_xy_goal_tolerance_</ref><sp/>&amp;&amp;<sp/>!<sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a7a965f0ef85f1103ad80b6bbfc0f2b1b" kindref="member">xy_tolerance_latch_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;Goal<sp/>position<sp/>reached<sp/>(check),<sp/>stopping<sp/>and<sp/>turning<sp/>in<sp/>place&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a7a965f0ef85f1103ad80b6bbfc0f2b1b" kindref="member">xy_tolerance_latch_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>goal_th<sp/>=<sp/>tf2::getYaw(goal_pose.pose.orientation);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/><ref refid="namespacebase__local__planner_1ac3058c2cea31b23c378465a5e9374219" kindref="member">base_local_planner::getGoalOrientationAngleDifference</ref>(global_pose,<sp/>goal_th);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>goal<sp/>orientation<sp/>has<sp/>been<sp/>reached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(angle)<sp/>&lt;=<sp/>limits.<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1a40de24a1e600606343f3521b2a95c82f" kindref="member">yaw_goal_tolerance</ref>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>sure<sp/>that<sp/>we&apos;re<sp/>actually<sp/>stopped<sp/>before<sp/>returning<sp/>success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacebase__local__planner_1a80ea2934aded9d99c3e082dd934ae89c" kindref="member">base_local_planner::stopped</ref>(base_odom,<sp/>theta_stopped_vel,<sp/>trans_stopped_vel))<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="classbase__local__planner_1_1LatchedStopRotateController_1ae204da0df3c727a7f655e7c12a7dae75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1ae204da0df3c727a7f655e7c12a7dae75" kindref="member">LatchedStopRotateController::stopWithAccLimits</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::PoseStamped&amp;<sp/>global_pose,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::PoseStamped&amp;<sp/>robot_vel,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::Twist&amp;<sp/>cmd_vel,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3f<sp/>acc_lim,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sim_period,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(Eigen::Vector3f<sp/>pos,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3f<sp/>vel,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3f<sp/>vel_samples)&gt;<sp/>obstacle_check)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//slow<sp/>down<sp/>with<sp/>the<sp/>maximum<sp/>possible<sp/>acceleration...<sp/>we<sp/>should<sp/>really<sp/>use<sp/>the<sp/>frequency<sp/>that<sp/>we&apos;re<sp/>running<sp/>at<sp/>to<sp/>determine<sp/>what<sp/>is<sp/>feasible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//but<sp/>we&apos;ll<sp/>use<sp/>a<sp/>tenth<sp/>of<sp/>a<sp/>second<sp/>to<sp/>be<sp/>consistent<sp/>with<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>local<sp/>planner.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx<sp/>=<sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a8648f8df161c70441a60ec202a137b18" kindref="member">sign</ref>(robot_vel.pose.position.x)<sp/>*<sp/><ref refid="cpp/algorithm/max" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::max</ref>(0.0,<sp/>(fabs(robot_vel.pose.position.x)<sp/>-<sp/>acc_lim[0]<sp/>*<sp/>sim_period));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vy<sp/>=<sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a8648f8df161c70441a60ec202a137b18" kindref="member">sign</ref>(robot_vel.pose.position.y)<sp/>*<sp/><ref refid="cpp/algorithm/max" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::max</ref>(0.0,<sp/>(fabs(robot_vel.pose.position.y)<sp/>-<sp/>acc_lim[1]<sp/>*<sp/>sim_period));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel_yaw<sp/>=<sp/>tf2::getYaw(robot_vel.pose.orientation);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vth<sp/>=<sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a8648f8df161c70441a60ec202a137b18" kindref="member">sign</ref>(vel_yaw)<sp/>*<sp/><ref refid="cpp/algorithm/max" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::max</ref>(0.0,<sp/>(fabs(vel_yaw)<sp/>-<sp/>acc_lim[2]<sp/>*<sp/>sim_period));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>do<sp/>want<sp/>to<sp/>check<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>command<sp/>is<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw<sp/>=<sp/>tf2::getYaw(global_pose.pose.orientation);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid_cmd<sp/>=<sp/>obstacle_check(Eigen::Vector3f(global_pose.pose.position.x,<sp/>global_pose.pose.position.y,<sp/>yaw),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3f(robot_vel.pose.position.x,<sp/>robot_vel.pose.position.y,<sp/>vel_yaw),</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3f(vx,<sp/>vy,<sp/>vth));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>we<sp/>have<sp/>a<sp/>valid<sp/>command,<sp/>we&apos;ll<sp/>pass<sp/>it<sp/>on,<sp/>otherwise<sp/>we&apos;ll<sp/>command<sp/>all<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(valid_cmd){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_DEBUG_NAMED(</highlight><highlight class="stringliteral">&quot;latched_stop_rotate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Slowing<sp/>down...<sp/>using<sp/>vx,<sp/>vy,<sp/>vth:<sp/>%.2f,<sp/>%.2f,<sp/>%.2f&quot;</highlight><highlight class="normal">,<sp/>vx,<sp/>vy,<sp/>vth);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd_vel.linear.x<sp/>=<sp/>vx;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd_vel.linear.y<sp/>=<sp/>vy;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd_vel.angular.z<sp/>=<sp/>vth;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Stopping<sp/>cmd<sp/>in<sp/>collision&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>cmd_vel.linear.x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>cmd_vel.linear.y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>cmd_vel.angular.z<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classbase__local__planner_1_1LatchedStopRotateController_1a3f1784c0f8eb383822d41d0905cb6bda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a3f1784c0f8eb383822d41d0905cb6bda" kindref="member">LatchedStopRotateController::rotateToGoal</ref>(</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::PoseStamped&amp;<sp/>global_pose,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::PoseStamped&amp;<sp/>robot_vel,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>goal_th,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::Twist&amp;<sp/>cmd_vel,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3f<sp/>acc_lim,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sim_period,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__local__planner_1_1LocalPlannerLimits" kindref="compound">base_local_planner::LocalPlannerLimits</ref>&amp;<sp/>limits,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(Eigen::Vector3f<sp/>pos,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3f<sp/>vel,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3f<sp/>vel_samples)&gt;<sp/>obstacle_check)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw<sp/>=<sp/>tf2::getYaw(global_pose.pose.orientation);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel_yaw<sp/>=<sp/>tf2::getYaw(robot_vel.pose.orientation);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>cmd_vel.linear.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>cmd_vel.linear.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ang_diff<sp/>=<sp/>angles::shortest_angular_distance(yaw,<sp/>goal_th);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v_theta_samp<sp/>=<sp/><ref refid="cpp/algorithm/min" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::min</ref>(limits.<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1a673f702c2bdae2fbbd2d982ee7da4ecc" kindref="member">max_vel_theta</ref>,<sp/><ref refid="cpp/algorithm/max" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::max</ref>(limits.<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1a2ef2f58644811656adef6692720881b2" kindref="member">min_vel_theta</ref>,<sp/>fabs(ang_diff)));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//take<sp/>the<sp/>acceleration<sp/>limits<sp/>of<sp/>the<sp/>robot<sp/>into<sp/>account</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_acc_vel<sp/>=<sp/>fabs(vel_yaw)<sp/>+<sp/>acc_lim[2]<sp/>*<sp/>sim_period;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_acc_vel<sp/>=<sp/>fabs(vel_yaw)<sp/>-<sp/>acc_lim[2]<sp/>*<sp/>sim_period;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>v_theta_samp<sp/>=<sp/><ref refid="cpp/algorithm/min" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::min</ref>(<ref refid="cpp/algorithm/max" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::max</ref>(fabs(v_theta_samp),<sp/>min_acc_vel),<sp/>max_acc_vel);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>also<sp/>want<sp/>to<sp/>make<sp/>sure<sp/>to<sp/>send<sp/>a<sp/>velocity<sp/>that<sp/>allows<sp/>us<sp/>to<sp/>stop<sp/>when<sp/>we<sp/>reach<sp/>the<sp/>goal<sp/>given<sp/>our<sp/>acceleration<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_speed_to_stop<sp/>=<sp/>sqrt(2<sp/>*<sp/>acc_lim[2]<sp/>*<sp/>fabs(ang_diff));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>v_theta_samp<sp/>=<sp/><ref refid="cpp/algorithm/min" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::min</ref>(max_speed_to_stop,<sp/>fabs(v_theta_samp));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>v_theta_samp<sp/>=<sp/><ref refid="cpp/algorithm/min" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::min</ref>(limits.<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1a673f702c2bdae2fbbd2d982ee7da4ecc" kindref="member">max_vel_theta</ref>,<sp/><ref refid="cpp/algorithm/max" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::max</ref>(limits.<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1a2ef2f58644811656adef6692720881b2" kindref="member">min_vel_theta</ref>,<sp/>v_theta_samp));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ang_diff<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>v_theta_samp<sp/>=<sp/>-<sp/>v_theta_samp;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>still<sp/>want<sp/>to<sp/>lay<sp/>down<sp/>the<sp/>footprint<sp/>of<sp/>the<sp/>robot<sp/>and<sp/>check<sp/>if<sp/>the<sp/>action<sp/>is<sp/>legal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid_cmd<sp/>=<sp/>obstacle_check(Eigen::Vector3f(global_pose.pose.position.x,<sp/>global_pose.pose.position.y,<sp/>yaw),</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3f(robot_vel.pose.position.x,<sp/>robot_vel.pose.position.y,<sp/>vel_yaw),</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3f(<sp/>0.0,<sp/>0.0,<sp/>v_theta_samp));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_cmd)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_DEBUG_NAMED(</highlight><highlight class="stringliteral">&quot;dwa_local_planner&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Moving<sp/>to<sp/>desired<sp/>goal<sp/>orientation,<sp/>th<sp/>cmd:<sp/>%.2f,<sp/>valid_cmd:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>v_theta_samp,<sp/>valid_cmd);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd_vel.angular.z<sp/>=<sp/>v_theta_samp;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>ROS_WARN(</highlight><highlight class="stringliteral">&quot;Rotation<sp/>cmd<sp/>in<sp/>collision&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>cmd_vel.angular.z<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="classbase__local__planner_1_1LatchedStopRotateController_1a5bd9394ca5cabf2a35526dcb193e36be" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a5bd9394ca5cabf2a35526dcb193e36be" kindref="member">LatchedStopRotateController::computeVelocityCommandsStopRotate</ref>(geometry_msgs::Twist&amp;<sp/>cmd_vel,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3f<sp/>acc_lim,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sim_period,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__local__planner_1_1LocalPlannerUtil" kindref="compound">LocalPlannerUtil</ref>*<sp/>planner_util,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__local__planner_1_1OdometryHelperRos" kindref="compound">OdometryHelperRos</ref>&amp;<sp/>odom_helper_,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::PoseStamped&amp;<sp/>global_pose,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>(Eigen::Vector3f<sp/>pos,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3f<sp/>vel,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3f<sp/>vel_samples)&gt;<sp/>obstacle_check)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>assume<sp/>the<sp/>global<sp/>goal<sp/>is<sp/>the<sp/>last<sp/>point<sp/>in<sp/>the<sp/>global<sp/>plan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>geometry_msgs::PoseStamped<sp/>goal_pose;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>planner_util-&gt;<ref refid="classbase__local__planner_1_1LocalPlannerUtil_1a40a75811cc424cb2f4e205a0ec18cb41" kindref="member">getGoal</ref>(goal_pose))<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_ERROR(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>goal<sp/>pose&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><ref refid="classbase__local__planner_1_1LocalPlannerLimits" kindref="compound">base_local_planner::LocalPlannerLimits</ref><sp/>limits<sp/>=<sp/>planner_util-&gt;<ref refid="classbase__local__planner_1_1LocalPlannerUtil_1ab872bb31110cc8cf9d1fa7f5b339c6fd" kindref="member">getCurrentLimits</ref>();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>user<sp/>wants<sp/>to<sp/>latch<sp/>goal<sp/>tolerance,<sp/>if<sp/>we<sp/>ever<sp/>reach<sp/>the<sp/>goal<sp/>location,<sp/>we&apos;ll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//just<sp/>rotate<sp/>in<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbase__local__planner_1_1LatchedStopRotateController_1adfd4e505101739501cf59d1a7129ced4" kindref="member">latch_xy_goal_tolerance_</ref><sp/>&amp;&amp;<sp/>!<sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a7a965f0ef85f1103ad80b6bbfc0f2b1b" kindref="member">xy_tolerance_latch_</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Goal<sp/>position<sp/>reached,<sp/>stopping<sp/>and<sp/>turning<sp/>in<sp/>place&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a7a965f0ef85f1103ad80b6bbfc0f2b1b" kindref="member">xy_tolerance_latch_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>goal<sp/>orientation<sp/>has<sp/>been<sp/>reached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>goal_th<sp/>=<sp/>tf2::getYaw(goal_pose.pose.orientation);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle<sp/>=<sp/><ref refid="namespacebase__local__planner_1ac3058c2cea31b23c378465a5e9374219" kindref="member">base_local_planner::getGoalOrientationAngleDifference</ref>(global_pose,<sp/>goal_th);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(angle)<sp/>&lt;=<sp/>limits.<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1a40de24a1e600606343f3521b2a95c82f" kindref="member">yaw_goal_tolerance</ref>)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>velocity<sp/>command<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd_vel.linear.x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd_vel.linear.y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd_vel.angular.z<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1afb20eb5fc414868654de760ad6666412" kindref="member">rotating_to_goal_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;Angle:<sp/>%f<sp/>Tolerance:<sp/>%f&quot;</highlight><highlight class="normal">,<sp/>angle,<sp/>limits.<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1a40de24a1e600606343f3521b2a95c82f" kindref="member">yaw_goal_tolerance</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::PoseStamped<sp/>robot_vel;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>odom_helper_.<ref refid="classbase__local__planner_1_1OdometryHelperRos_1ab70a70a7a3f3d8e6788e6e1f0503a717" kindref="member">getRobotVel</ref>(robot_vel);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>nav_msgs::Odometry<sp/>base_odom;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>odom_helper_.<ref refid="classbase__local__planner_1_1OdometryHelperRos_1ada88271c5b81d4a97b81eb51de64f67c" kindref="member">getOdom</ref>(base_odom);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>we&apos;re<sp/>not<sp/>stopped<sp/>yet...<sp/>we<sp/>want<sp/>to<sp/>stop...<sp/>taking<sp/>into<sp/>account<sp/>the<sp/>acceleration<sp/>limits<sp/>of<sp/>the<sp/>robot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1afb20eb5fc414868654de760ad6666412" kindref="member">rotating_to_goal_</ref><sp/>&amp;&amp;<sp/>!<ref refid="namespacebase__local__planner_1a80ea2934aded9d99c3e082dd934ae89c" kindref="member">base_local_planner::stopped</ref>(base_odom,<sp/>limits.<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1a8232d72db9ee490be3b13abed606bf73" kindref="member">theta_stopped_vel</ref>,<sp/>limits.<ref refid="classbase__local__planner_1_1LocalPlannerLimits_1ab3f35628f5d93eaeab83eaf3fc1e1f55" kindref="member">trans_stopped_vel</ref>))<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1ae204da0df3c727a7f655e7c12a7dae75" kindref="member">stopWithAccLimits</ref>(</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_pose,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>robot_vel,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_vel,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_lim,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim_period,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obstacle_check))<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Error<sp/>when<sp/>stopping.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;Stopping...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>we&apos;re<sp/>stopped...<sp/>then<sp/>we<sp/>want<sp/>to<sp/>rotate<sp/>to<sp/>goal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>this<sp/>so<sp/>that<sp/>we<sp/>know<sp/>its<sp/>OK<sp/>to<sp/>be<sp/>moving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1afb20eb5fc414868654de760ad6666412" kindref="member">rotating_to_goal_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/><ref refid="classbase__local__planner_1_1LatchedStopRotateController_1a3f1784c0f8eb383822d41d0905cb6bda" kindref="member">rotateToGoal</ref>(</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_pose,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>robot_vel,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goal_th,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd_vel,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_lim,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sim_period,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limits,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obstacle_check))<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ROS_INFO(</highlight><highlight class="stringliteral">&quot;Error<sp/>when<sp/>rotating.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_DEBUG(</highlight><highlight class="stringliteral">&quot;Rotating...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>base_local_planner<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/latched_stop_rotate_controller.cpp"/>
  </compounddef>
</doxygen>
