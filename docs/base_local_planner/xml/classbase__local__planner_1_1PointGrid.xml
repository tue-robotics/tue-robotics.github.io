<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classbase__local__planner_1_1PointGrid" kind="class" language="C++" prot="public">
    <compoundname>base_local_planner::PointGrid</compoundname>
    <basecompoundref refid="classbase__local__planner_1_1WorldModel" prot="public" virt="non-virtual">base_local_planner::WorldModel</basecompoundref>
    <includes refid="point__grid_8h" local="no">point_grid.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classbase__local__planner_1_1PointGrid_1a231b46dbba3e029edf94d5cc122147e9" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/container/list" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::list</ref>&lt; geometry_msgs::Point32 &gt; &gt;</type>
        <definition>std::vector&lt; std::list&lt;geometry_msgs::Point32&gt; &gt; base_local_planner::PointGrid::cells_</definition>
        <argsstring></argsstring>
        <name>cells_</name>
        <briefdescription>
<para>Storage for the cells in the grid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="354" column="19" bodyfile="include/base_local_planner/point_grid.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1PointGrid_1a1c02ee4d4ef45459067a91f2288911a6" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int base_local_planner::PointGrid::height_</definition>
        <argsstring></argsstring>
        <name>height_</name>
        <briefdescription>
<para>The height of the grid in cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="353" column="20" bodyfile="include/base_local_planner/point_grid.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1PointGrid_1a2036620b9d1149e833273c43c5a727eb" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double base_local_planner::PointGrid::max_z_</definition>
        <argsstring></argsstring>
        <name>max_z_</name>
        <briefdescription>
<para>The height cutoff for adding points as obstacles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="355" column="14" bodyfile="include/base_local_planner/point_grid.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1PointGrid_1a49056e465b626fd351301147a697b6aa" prot="private" static="no" mutable="no">
        <type>geometry_msgs::Point</type>
        <definition>geometry_msgs::Point base_local_planner::PointGrid::origin_</definition>
        <argsstring></argsstring>
        <name>origin_</name>
        <briefdescription>
<para>The origin point of the grid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="351" column="28" bodyfile="include/base_local_planner/point_grid.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1PointGrid_1a2fc679229c93a4507d4b50144f7b6d32" prot="private" static="no" mutable="no">
        <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/container/list" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::list</ref>&lt; geometry_msgs::Point32 &gt; * &gt;</type>
        <definition>std::vector&lt; std::list&lt;geometry_msgs::Point32&gt;* &gt; base_local_planner::PointGrid::points_</definition>
        <argsstring></argsstring>
        <name>points_</name>
        <briefdescription>
<para>The lists of points returned by a range search, made a member to save on memory allocation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="358" column="19" bodyfile="include/base_local_planner/point_grid.h" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1PointGrid_1a2232220cabac42c77df3651ef8706c5b" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double base_local_planner::PointGrid::resolution_</definition>
        <argsstring></argsstring>
        <name>resolution_</name>
        <briefdescription>
<para>The resolution of the grid in meters/cell. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="350" column="14" bodyfile="include/base_local_planner/point_grid.h" bodystart="350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1PointGrid_1a3688e671583e2ff4ff50308226477111" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double base_local_planner::PointGrid::sq_min_separation_</definition>
        <argsstring></argsstring>
        <name>sq_min_separation_</name>
        <briefdescription>
<para>The minimum square distance required between points in the grid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="357" column="14" bodyfile="include/base_local_planner/point_grid.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1PointGrid_1a753727a1119075f27b7a840bc6f1be0a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double base_local_planner::PointGrid::sq_obstacle_range_</definition>
        <argsstring></argsstring>
        <name>sq_obstacle_range_</name>
        <briefdescription>
<para>The square distance at which we no longer add obstacles to the grid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="356" column="14" bodyfile="include/base_local_planner/point_grid.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1PointGrid_1ae8cfcc3891fd32ab51f0a10bcc7edd62" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int base_local_planner::PointGrid::width_</definition>
        <argsstring></argsstring>
        <name>width_</name>
        <briefdescription>
<para>The width of the grid in cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="352" column="20" bodyfile="include/base_local_planner/point_grid.h" bodystart="352" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1ae9398ded210128450fbdb86f231cf588" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double base_local_planner::PointGrid::footprintCost</definition>
        <argsstring>(const geometry_msgs::Point &amp;position, const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint, double inscribed_radius, double circumscribed_radius)</argsstring>
        <name>footprintCost</name>
        <reimplements refid="classbase__local__planner_1_1WorldModel_1a36d4c808bc441e2b87b0ac038099993a">footprintCost</reimplements>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inscribed_radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>circumscribed_radius</declname>
        </param>
        <briefdescription>
<para>Checks if any points in the grid lie inside a convex footprint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footprint</parametername>
</parameternamelist>
<parameterdescription>
<para>The specification of the footprint of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the inscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>circumscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circumscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Positive if all the points lie outside the footprint, negative otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="128" column="22" bodyfile="src/point_grid.cpp" bodystart="61" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a36d4c808bc441e2b87b0ac038099993a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>virtual double base_local_planner::WorldModel::footprintCost</definition>
        <argsstring>(const geometry_msgs::Point &amp;position, const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint, double inscribed_radius, double circumscribed_radius)=0</argsstring>
        <name>footprintCost</name>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inscribed_radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>circumscribed_radius</declname>
        </param>
        <briefdescription>
<para>Subclass will implement this method to check a footprint at a given position and orientation for legality in the world. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footprint</parametername>
</parameternamelist>
<parameterdescription>
<para>The specification of the footprint of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the inscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>circumscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circumscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Positive if all the points lie outside the footprint, negative otherwise: -1 if footprint covers at least a lethal obstacle cell, or -2 if footprint covers at least a no-information cell, or -3 if footprint is partially or totally outside of the map </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="131" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a358fe0d75fefe46dda134ee6e3305f71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::WorldModel::footprintCost</definition>
        <argsstring>(const geometry_msgs::Point &amp;position, const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint, double inscribed_radius, double circumscribed_radius, double extra)</argsstring>
        <name>footprintCost</name>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inscribed_radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>circumscribed_radius</declname>
        </param>
        <param>
          <type>double</type>
          <declname>extra</declname>
        </param>
        <briefdescription>
<para>Checks if any obstacles in the costmap lie inside a convex footprint that is rasterized into the grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footprint</parametername>
</parameternamelist>
<parameterdescription>
<para>The specification of the footprint of the robot in world coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the inscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>circumscribed_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circumscribed circle of the robot </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Positive if all the points lie outside the footprint, negative otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="131" column="7" bodyfile="include/base_local_planner/world_model.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1ac7e8dc9c77a2dd2fa77f5a27d812fd43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::WorldModel::footprintCost</definition>
        <argsstring>(double x, double y, double theta, const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint_spec, double inscribed_radius=0.0, double circumscribed_radius=0.0)</argsstring>
        <name>footprintCost</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint_spec</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inscribed_radius</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>circumscribed_radius</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="131" column="7" bodyfile="include/base_local_planner/world_model.h" bodystart="103" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1aa98a155058a5045be350a89eb3858f41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::PointGrid::getCellBounds</definition>
        <argsstring>(unsigned int gx, unsigned int gy, geometry_msgs::Point &amp;lower_left, geometry_msgs::Point &amp;upper_right) const</argsstring>
        <name>getCellBounds</name>
        <param>
          <type>unsigned int</type>
          <declname>gx</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>gy</declname>
        </param>
        <param>
          <type>geometry_msgs::Point &amp;</type>
          <declname>lower_left</declname>
        </param>
        <param>
          <type>geometry_msgs::Point &amp;</type>
          <declname>upper_right</declname>
        </param>
        <briefdescription>
<para>Get the bounds in world coordinates of a cell in the point grid, assumes a legal cell when called. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gx</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the grid cell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gy</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the grid cell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lower_left</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower left bounds of the cell in world coordinates to be filled in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper_right</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper right bounds of the cell in world coordinates to be filled in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="174" column="19" bodyfile="include/base_local_planner/point_grid.h" bodystart="174" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1aace5884f03d444ee13dffd0dbe866678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::PointGrid::getNearestInCell</definition>
        <argsstring>(const geometry_msgs::Point32 &amp;pt, unsigned int gx, unsigned int gy)</argsstring>
        <name>getNearestInCell</name>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>gx</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>gy</declname>
        </param>
        <briefdescription>
<para>Find the distance between a point and its nearest neighbor in a cell. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point used for comparison </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gx</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the cell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gy</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the cell </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The distance between the point passed in and its nearest neighbor in the cell </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="321" column="14" bodyfile="src/point_grid.cpp" bodystart="231" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a60a0ccb34b0468c2249c32ebad03623c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::PointGrid::getPoints</definition>
        <argsstring>(sensor_msgs::PointCloud2 &amp;cloud)</argsstring>
        <name>getPoints</name>
        <param>
          <type>sensor_msgs::PointCloud2 &amp;</type>
          <declname>cloud</declname>
        </param>
        <briefdescription>
<para>Get the points in the point grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cloud</parametername>
</parameternamelist>
<parameterdescription>
<para>The point cloud to insert the points into </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="347" column="12" bodyfile="src/point_grid.cpp" bodystart="465" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1af222229f74f1bc4e14536548c316e755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::PointGrid::getPointsInRange</definition>
        <argsstring>(const geometry_msgs::Point &amp;lower_left, const geometry_msgs::Point &amp;upper_right, std::vector&lt; std::list&lt; geometry_msgs::Point32 &gt; * &gt; &amp;points)</argsstring>
        <name>getPointsInRange</name>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>lower_left</declname>
        </param>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>upper_right</declname>
        </param>
        <param>
          <type><ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="cpp/container/list" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::list</ref>&lt; geometry_msgs::Point32 &gt; * &gt; &amp;</type>
          <declname>points</declname>
        </param>
        <briefdescription>
<para>Returns the points that lie within the cells contained in the specified range. Some of these points may be outside the range itself. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lower_left</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower left corner of the range search </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper_right</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper right corner of the range search </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of pointers to lists of the relevant points </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="118" column="12" bodyfile="src/point_grid.cpp" bodystart="154" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a35f097e6894731b7d9963e46b16d0d6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::PointGrid::gridCoords</definition>
        <argsstring>(const geometry_msgs::Point32 &amp;pt, unsigned int &amp;gx, unsigned int &amp;gy) const</argsstring>
        <name>gridCoords</name>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>gx</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>gy</declname>
        </param>
        <briefdescription>
<para>Convert from world coordinates to grid coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>A point in world space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gx</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the corresponding grid cell to be set by the function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gy</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the corresponding grid cell to be set by the function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the conversion was successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="200" column="19" bodyfile="include/base_local_planner/point_grid.h" bodystart="200" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a85f9826c14353e9a75696be52d438554" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::PointGrid::gridCoords</definition>
        <argsstring>(geometry_msgs::Point pt, unsigned int &amp;gx, unsigned int &amp;gy) const</argsstring>
        <name>gridCoords</name>
        <param>
          <type>geometry_msgs::Point</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>gx</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>gy</declname>
        </param>
        <briefdescription>
<para>Convert from world coordinates to grid coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>A point in world space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gx</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the corresponding grid cell to be set by the function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gy</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the corresponding grid cell to be set by the function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the conversion was successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="149" column="19" bodyfile="include/base_local_planner/point_grid.h" bodystart="149" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a107ea768298e5560e962498692674d5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int base_local_planner::PointGrid::gridIndex</definition>
        <argsstring>(unsigned int gx, unsigned int gy) const</argsstring>
        <name>gridIndex</name>
        <param>
          <type>unsigned int</type>
          <declname>gx</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>gy</declname>
        </param>
        <briefdescription>
<para>Converts cell coordinates to an index value that can be used to look up the correct grid cell. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gx</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the cell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gy</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the cell </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the cell in the stored cell list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="224" column="27" bodyfile="include/base_local_planner/point_grid.h" bodystart="224" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a5276643487b1ab03a4a9602b3f338ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::PointGrid::insert</definition>
        <argsstring>(const geometry_msgs::Point32 &amp;pt)</argsstring>
        <name>insert</name>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Insert a point into the point grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to be inserted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="305" column="12" bodyfile="src/point_grid.cpp" bodystart="211" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a42d9b62516e5e401669b618e790979ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::PointGrid::intersectionPoint</definition>
        <argsstring>(const geometry_msgs::Point &amp;v1, const geometry_msgs::Point &amp;v2, const geometry_msgs::Point &amp;u1, const geometry_msgs::Point &amp;u2, geometry_msgs::Point &amp;result)</argsstring>
        <name>intersectionPoint</name>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>u1</declname>
        </param>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>u2</declname>
        </param>
        <param>
          <type>geometry_msgs::Point &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Find the intersection point of two lines. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the first segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the first segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the second segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the second segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to be filled in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="289" column="12" bodyfile="src/point_grid.cpp" bodystart="534" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1aebd6e4378342589f07e5700aac825550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::PointGrid::nearestNeighborDistance</definition>
        <argsstring>(const geometry_msgs::Point32 &amp;pt)</argsstring>
        <name>nearestNeighborDistance</name>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Find the distance between a point and its nearest neighbor in the grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point used for comparison </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The distance between the point passed in and its nearest neighbor in the point grid </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="312" column="14" bodyfile="src/point_grid.cpp" bodystart="242" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1ab3604c15e0eebb45dcaf4ae5403c5f7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::PointGrid::orient</definition>
        <argsstring>(const geometry_msgs::Point &amp;a, const geometry_msgs::Point &amp;b, const geometry_msgs::Point32 &amp;c)</argsstring>
        <name>orient</name>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const geometry_msgs::Point &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Check the orientation of a pt c with respect to the vector a-&gt;b. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The start point of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The end point of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to compute orientation for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>orient(a, b, c) &lt; 0 -<mdash/>&gt; Right, orient(a, b, c) &gt; 0 -<mdash/>&gt; Left </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="244" column="21" bodyfile="include/base_local_planner/point_grid.h" bodystart="244" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a8558a1d185f1299007cb4a92726f8541" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double base_local_planner::PointGrid::orient</definition>
        <argsstring>(const T &amp;a, const T &amp;b, const T &amp;c)</argsstring>
        <name>orient</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Check the orientation of a pt c with respect to the vector a-&gt;b. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The start point of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The end point of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to compute orientation for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>orient(a, b, c) &lt; 0 -<mdash/>&gt; Right, orient(a, b, c) &gt; 0 -<mdash/>&gt; Left </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="260" column="21" bodyfile="include/base_local_planner/point_grid.h" bodystart="260" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1adaccd0818cd5b3334f1410f6cfca93dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::PointGrid::PointGrid</definition>
        <argsstring>(double width, double height, double resolution, geometry_msgs::Point origin, double max_z, double obstacle_range, double min_separation)</argsstring>
        <name>PointGrid</name>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <param>
          <type>double</type>
          <declname>resolution</declname>
        </param>
        <param>
          <type>geometry_msgs::Point</type>
          <declname>origin</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>obstacle_range</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_separation</declname>
        </param>
        <briefdescription>
<para>Constuctor for a grid that stores points in the plane. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width in meters of the grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height in meters of the gird </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>The resolution of the grid in meters/cell </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>origin</parametername>
</parameternamelist>
<parameterdescription>
<para>The origin of the bottom left corner of the grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_z</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum height for an obstacle to be added to the grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obstacle_range</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum distance for obstacles to be added to the grid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_separation</parametername>
</parameternamelist>
<parameterdescription>
<para>The minimum distance between points in the grid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="104" column="7" bodyfile="src/point_grid.cpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a7d813f2a10631747b458377fdd4a2a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::PointGrid::ptInPolygon</definition>
        <argsstring>(const geometry_msgs::Point32 &amp;pt, const std::vector&lt; geometry_msgs::Point &gt; &amp;poly)</argsstring>
        <name>ptInPolygon</name>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>poly</declname>
        </param>
        <briefdescription>
<para>Check if a point is in a polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to be checked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>poly</parametername>
</parameternamelist>
<parameterdescription>
<para>The polygon to check against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the point is in the polygon, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="299" column="12" bodyfile="src/point_grid.cpp" bodystart="118" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a763e1d4207cc1ecbc670936074211155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::PointGrid::ptInScan</definition>
        <argsstring>(const geometry_msgs::Point32 &amp;pt, const PlanarLaserScan &amp;laser_scan)</argsstring>
        <name>ptInScan</name>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>const <ref refid="classbase__local__planner_1_1PlanarLaserScan" kindref="compound">PlanarLaserScan</ref> &amp;</type>
          <declname>laser_scan</declname>
        </param>
        <briefdescription>
<para>Checks to see if a point is within a laser scan specification. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The point to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>laser_scan</parametername>
</parameternamelist>
<parameterdescription>
<para>The specification of the scan to check against </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the point is contained within the scan, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="341" column="12" bodyfile="src/point_grid.cpp" bodystart="421" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1afb743eed27facd44c2ed0e59e9f04449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::PointGrid::removePointsInPolygon</definition>
        <argsstring>(const std::vector&lt; geometry_msgs::Point &gt; poly)</argsstring>
        <name>removePointsInPolygon</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt;</type>
          <declname>poly</declname>
        </param>
        <briefdescription>
<para>Removes points from the grid that lie within the polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>poly</parametername>
</parameternamelist>
<parameterdescription>
<para>A specification of the polygon to clear from the grid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="327" column="12" bodyfile="src/point_grid.cpp" bodystart="490" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a693cf4b2962ea0ffb4e74daf44a317a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::PointGrid::removePointsInScanBoundry</definition>
        <argsstring>(const PlanarLaserScan &amp;laser_scan)</argsstring>
        <name>removePointsInScanBoundry</name>
        <param>
          <type>const <ref refid="classbase__local__planner_1_1PlanarLaserScan" kindref="compound">PlanarLaserScan</ref> &amp;</type>
          <declname>laser_scan</declname>
        </param>
        <briefdescription>
<para>Removes points from the grid that lie within a laser scan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>laser_scan</parametername>
</parameternamelist>
<parameterdescription>
<para>A specification of the laser scan to use for clearing </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="333" column="12" bodyfile="src/point_grid.cpp" bodystart="378" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1af11952049cf710f3e49d27181a7c09e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::PointGrid::segIntersect</definition>
        <argsstring>(const geometry_msgs::Point32 &amp;v1, const geometry_msgs::Point32 &amp;v2, const geometry_msgs::Point32 &amp;u1, const geometry_msgs::Point32 &amp;u2)</argsstring>
        <name>segIntersect</name>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>u1</declname>
        </param>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>u2</declname>
        </param>
        <briefdescription>
<para>Check if two line segmenst intersect. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the first segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the first segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point of the second segment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point of the second segment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the segments intersect, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="276" column="19" bodyfile="include/base_local_planner/point_grid.h" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1a70991650fe65105f90f31acdab32a830" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::PointGrid::sq_distance</definition>
        <argsstring>(const geometry_msgs::Point32 &amp;pt1, const geometry_msgs::Point32 &amp;pt2)</argsstring>
        <name>sq_distance</name>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>const geometry_msgs::Point32 &amp;</type>
          <declname>pt2</declname>
        </param>
        <briefdescription>
<para>Compute the squared distance between two points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The squared distance between the two points </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="189" column="21" bodyfile="include/base_local_planner/point_grid.h" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1adb8a9a0665445fe274510a86dd0e8277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::PointGrid::updateWorld</definition>
        <argsstring>(const std::vector&lt; geometry_msgs::Point &gt; &amp;footprint, const std::vector&lt; costmap_2d::Observation &gt; &amp;observations, const std::vector&lt; PlanarLaserScan &gt; &amp;laser_scans)</argsstring>
        <name>updateWorld</name>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; geometry_msgs::Point &gt; &amp;</type>
          <declname>footprint</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="classcostmap__2d_1_1Observation" kindref="compound" external="/home/docker/ros/noetic/system/build/docs/costmap_2d/tags">costmap_2d::Observation</ref> &gt; &amp;</type>
          <declname>observations</declname>
        </param>
        <param>
          <type>const <ref refid="cpp/container/vector" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::vector</ref>&lt; <ref refid="classbase__local__planner_1_1PlanarLaserScan" kindref="compound">PlanarLaserScan</ref> &gt; &amp;</type>
          <declname>laser_scans</declname>
        </param>
        <briefdescription>
<para>Inserts observations from sensors into the point grid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>footprint</parametername>
</parameternamelist>
<parameterdescription>
<para>The footprint of the robot in its current location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>observations</parametername>
</parameternamelist>
<parameterdescription>
<para>The observations from various sensors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>laser_scans</parametername>
</parameternamelist>
<parameterdescription>
<para>The laser scans used to clear freespace (the point grid only uses the first scan which is assumed to be the base laser) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="139" column="12" bodyfile="src/point_grid.cpp" bodystart="335" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1PointGrid_1adcf3cf7ebf7d52a909fb2744560bf1e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual base_local_planner::PointGrid::~PointGrid</definition>
        <argsstring>()</argsstring>
        <name>~PointGrid</name>
        <briefdescription>
<para>Destructor for a point grid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/point_grid.h" line="110" column="15" bodyfile="include/base_local_planner/point_grid.h" bodystart="110" bodyend="110"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class that implements the <ref refid="classbase__local__planner_1_1WorldModel" kindref="compound">WorldModel</ref> interface to provide free-space collision checks for the trajectory controller. This class stores points binned into a grid and performs point-in-polygon checks when necessary to determine the legality of a footprint at a given position/orientation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>base_local_planner::PointGrid</label>
        <link refid="classbase__local__planner_1_1PointGrid"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>base_local_planner::WorldModel</label>
        <link refid="classbase__local__planner_1_1WorldModel"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>std::vector&lt; std::list&lt; geometry_msgs::Point32 &gt; * &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="4">
        <label>std::vector&lt; std::list&lt; geometry_msgs::Point32 &gt; &gt;</label>
        <link refid="cpp/container/vector" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml"/>
      </node>
      <node id="1">
        <label>base_local_planner::PointGrid</label>
        <link refid="classbase__local__planner_1_1PointGrid"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>points_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>cells_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>base_local_planner::WorldModel</label>
        <link refid="classbase__local__planner_1_1WorldModel"/>
      </node>
    </collaborationgraph>
    <location file="include/base_local_planner/point_grid.h" line="92" column="36" bodyfile="include/base_local_planner/point_grid.h" bodystart="92" bodyend="359"/>
    <listofallmembers>
      <member refid="classbase__local__planner_1_1PointGrid_1a231b46dbba3e029edf94d5cc122147e9" prot="private" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>cells_</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1ae9398ded210128450fbdb86f231cf588" prot="public" virt="virtual"><scope>base_local_planner::PointGrid</scope><name>footprintCost</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a36d4c808bc441e2b87b0ac038099993a" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>footprintCost</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1ac7e8dc9c77a2dd2fa77f5a27d812fd43" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>footprintCost</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a358fe0d75fefe46dda134ee6e3305f71" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>footprintCost</name></member>
      <member refid="classbase__local__planner_1_1WorldModel_1ac7e8dc9c77a2dd2fa77f5a27d812fd43" prot="public" virt="non-virtual" ambiguityscope="base_local_planner::WorldModel::"><scope>base_local_planner::PointGrid</scope><name>footprintCost</name></member>
      <member refid="classbase__local__planner_1_1WorldModel_1a358fe0d75fefe46dda134ee6e3305f71" prot="public" virt="non-virtual" ambiguityscope="base_local_planner::WorldModel::"><scope>base_local_planner::PointGrid</scope><name>footprintCost</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1aa98a155058a5045be350a89eb3858f41" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>getCellBounds</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1aace5884f03d444ee13dffd0dbe866678" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>getNearestInCell</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a60a0ccb34b0468c2249c32ebad03623c" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>getPoints</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1af222229f74f1bc4e14536548c316e755" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>getPointsInRange</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a85f9826c14353e9a75696be52d438554" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>gridCoords</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a35f097e6894731b7d9963e46b16d0d6f" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>gridCoords</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a107ea768298e5560e962498692674d5a" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>gridIndex</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a1c02ee4d4ef45459067a91f2288911a6" prot="private" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>height_</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a5276643487b1ab03a4a9602b3f338ba8" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>insert</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a42d9b62516e5e401669b618e790979ad" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>intersectionPoint</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a2036620b9d1149e833273c43c5a727eb" prot="private" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>max_z_</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1aebd6e4378342589f07e5700aac825550" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>nearestNeighborDistance</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1ab3604c15e0eebb45dcaf4ae5403c5f7e" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>orient</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a8558a1d185f1299007cb4a92726f8541" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>orient</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a49056e465b626fd351301147a697b6aa" prot="private" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>origin_</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1adaccd0818cd5b3334f1410f6cfca93dc" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>PointGrid</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a2fc679229c93a4507d4b50144f7b6d32" prot="private" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>points_</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a7d813f2a10631747b458377fdd4a2a4f" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>ptInPolygon</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a763e1d4207cc1ecbc670936074211155" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>ptInScan</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1afb743eed27facd44c2ed0e59e9f04449" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>removePointsInPolygon</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a693cf4b2962ea0ffb4e74daf44a317a4" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>removePointsInScanBoundry</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a2232220cabac42c77df3651ef8706c5b" prot="private" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>resolution_</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1af11952049cf710f3e49d27181a7c09e9" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>segIntersect</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a70991650fe65105f90f31acdab32a830" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>sq_distance</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a3688e671583e2ff4ff50308226477111" prot="private" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>sq_min_separation_</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1a753727a1119075f27b7a840bc6f1be0a" prot="private" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>sq_obstacle_range_</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1adb8a9a0665445fe274510a86dd0e8277" prot="public" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>updateWorld</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1ae8cfcc3891fd32ab51f0a10bcc7edd62" prot="private" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>width_</name></member>
      <member refid="classbase__local__planner_1_1WorldModel_1a577351de9f26b9fc6f702e1cceed84e4" prot="protected" virt="non-virtual"><scope>base_local_planner::PointGrid</scope><name>WorldModel</name></member>
      <member refid="classbase__local__planner_1_1PointGrid_1adcf3cf7ebf7d52a909fb2744560bf1e4" prot="public" virt="virtual"><scope>base_local_planner::PointGrid</scope><name>~PointGrid</name></member>
      <member refid="classbase__local__planner_1_1WorldModel_1a87c45611143fde55c4a2efb4d078471d" prot="public" virt="virtual"><scope>base_local_planner::PointGrid</scope><name>~WorldModel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
