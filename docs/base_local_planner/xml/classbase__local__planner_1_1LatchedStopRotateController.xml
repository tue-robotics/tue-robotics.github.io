<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classbase__local__planner_1_1LatchedStopRotateController" kind="class" language="C++" prot="public">
    <compoundname>base_local_planner::LatchedStopRotateController</compoundname>
    <includes refid="latched__stop__rotate__controller_8h" local="no">latched_stop_rotate_controller.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classbase__local__planner_1_1LatchedStopRotateController_1adfd4e505101739501cf59d1a7129ced4" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool base_local_planner::LatchedStopRotateController::latch_xy_goal_tolerance_</definition>
        <argsstring></argsstring>
        <name>latch_xy_goal_tolerance_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="88" column="8" bodyfile="include/base_local_planner/latched_stop_rotate_controller.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1LatchedStopRotateController_1afb20eb5fc414868654de760ad6666412" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool base_local_planner::LatchedStopRotateController::rotating_to_goal_</definition>
        <argsstring></argsstring>
        <name>rotating_to_goal_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="89" column="8" bodyfile="include/base_local_planner/latched_stop_rotate_controller.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbase__local__planner_1_1LatchedStopRotateController_1a7a965f0ef85f1103ad80b6bbfc0f2b1b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool base_local_planner::LatchedStopRotateController::xy_tolerance_latch_</definition>
        <argsstring></argsstring>
        <name>xy_tolerance_latch_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="88" column="33" bodyfile="include/base_local_planner/latched_stop_rotate_controller.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbase__local__planner_1_1LatchedStopRotateController_1a5bd9394ca5cabf2a35526dcb193e36be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::LatchedStopRotateController::computeVelocityCommandsStopRotate</definition>
        <argsstring>(geometry_msgs::Twist &amp;cmd_vel, Eigen::Vector3f acc_lim, double sim_period, LocalPlannerUtil *planner_util, OdometryHelperRos &amp;odom_helper, const geometry_msgs::PoseStamped &amp;global_pose, boost::function&lt; bool(Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f vel_samples)&gt; obstacle_check)</argsstring>
        <name>computeVelocityCommandsStopRotate</name>
        <param>
          <type>geometry_msgs::Twist &amp;</type>
          <declname>cmd_vel</declname>
        </param>
        <param>
          <type>Eigen::Vector3f</type>
          <declname>acc_lim</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sim_period</declname>
        </param>
        <param>
          <type><ref refid="classbase__local__planner_1_1LocalPlannerUtil" kindref="compound">LocalPlannerUtil</ref> *</type>
          <declname>planner_util</declname>
        </param>
        <param>
          <type><ref refid="classbase__local__planner_1_1OdometryHelperRos" kindref="compound">OdometryHelperRos</ref> &amp;</type>
          <declname>odom_helper</declname>
        </param>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>global_pose</declname>
        </param>
        <param>
          <type>boost::function&lt; bool(Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f vel_samples)&gt;</type>
          <declname>obstacle_check</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="71" column="8" bodyfile="src/latched_stop_rotate_controller.cpp" bodystart="199" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1LatchedStopRotateController_1a296b387b74afe1c430f0dc6efb2f2ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::LatchedStopRotateController::isGoalReached</definition>
        <argsstring>(LocalPlannerUtil *planner_util, OdometryHelperRos &amp;odom_helper, const geometry_msgs::PoseStamped &amp;global_pose)</argsstring>
        <name>isGoalReached</name>
        <param>
          <type><ref refid="classbase__local__planner_1_1LocalPlannerUtil" kindref="compound">LocalPlannerUtil</ref> *</type>
          <declname>planner_util</declname>
        </param>
        <param>
          <type><ref refid="classbase__local__planner_1_1OdometryHelperRos" kindref="compound">OdometryHelperRos</ref> &amp;</type>
          <declname>odom_helper</declname>
        </param>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>global_pose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns true if we have passed the goal position and have reached goal orientation. Meaning we might have overshot on the position beyond tolerance, yet still return true. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="28" column="8" bodyfile="src/latched_stop_rotate_controller.cpp" bodystart="66" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1LatchedStopRotateController_1a22892ae258fb69ab1cbb78b3e076fba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::LatchedStopRotateController::isPositionReached</definition>
        <argsstring>(LocalPlannerUtil *planner_util, const geometry_msgs::PoseStamped &amp;global_pose)</argsstring>
        <name>isPositionReached</name>
        <param>
          <type><ref refid="classbase__local__planner_1_1LocalPlannerUtil" kindref="compound">LocalPlannerUtil</ref> *</type>
          <declname>planner_util</declname>
        </param>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>global_pose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns true if we have passed the goal position. Meaning we might have overshot on the position beyond tolerance, yet still return true. Also goal orientation might not yet be true </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="25" column="8" bodyfile="src/latched_stop_rotate_controller.cpp" bodystart="39" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1LatchedStopRotateController_1a217e37ce23f57c28f157d2287d9ad02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>base_local_planner::LatchedStopRotateController::LatchedStopRotateController</definition>
        <argsstring>(const std::string &amp;name=&quot;&quot;)</argsstring>
        <name>LatchedStopRotateController</name>
        <param>
          <type>const <ref refid="cpp/string/basic_string" kindref="compound" external="/home/docker/.local/lib/python3.8/site-packages/catkin_tools_document/external/cppreference-doxygen-web.tag.xml">std::string</ref> &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="22" column="3" bodyfile="src/latched_stop_rotate_controller.cpp" bodystart="24" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1LatchedStopRotateController_1af3b08514bca9dfc212b770a071f85b3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void base_local_planner::LatchedStopRotateController::resetLatching</definition>
        <argsstring>()</argsstring>
        <name>resetLatching</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="32" column="8" bodyfile="include/base_local_planner/latched_stop_rotate_controller.h" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1LatchedStopRotateController_1a3f1784c0f8eb383822d41d0905cb6bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::LatchedStopRotateController::rotateToGoal</definition>
        <argsstring>(const geometry_msgs::PoseStamped &amp;global_pose, const geometry_msgs::PoseStamped &amp;robot_vel, double goal_th, geometry_msgs::Twist &amp;cmd_vel, Eigen::Vector3f acc_lim, double sim_period, base_local_planner::LocalPlannerLimits &amp;limits, boost::function&lt; bool(Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f vel_samples)&gt; obstacle_check)</argsstring>
        <name>rotateToGoal</name>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>global_pose</declname>
        </param>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>robot_vel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>goal_th</declname>
        </param>
        <param>
          <type>geometry_msgs::Twist &amp;</type>
          <declname>cmd_vel</declname>
        </param>
        <param>
          <type>Eigen::Vector3f</type>
          <declname>acc_lim</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sim_period</declname>
        </param>
        <param>
          <type><ref refid="classbase__local__planner_1_1LocalPlannerLimits" kindref="compound">base_local_planner::LocalPlannerLimits</ref> &amp;</type>
          <declname>limits</declname>
        </param>
        <param>
          <type>boost::function&lt; bool(Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f vel_samples)&gt;</type>
          <declname>obstacle_check</declname>
        </param>
        <briefdescription>
<para>Once a goal position is reached... rotate to the goal orientation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>The pose of the robot in the global frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>robot_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>The velocity of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>goal_th</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired th value for the goal </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>The velocity commands to be filled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if a valid trajectory was found, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="60" column="8" bodyfile="src/latched_stop_rotate_controller.cpp" bodystart="148" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1LatchedStopRotateController_1ae204da0df3c727a7f655e7c12a7dae75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool base_local_planner::LatchedStopRotateController::stopWithAccLimits</definition>
        <argsstring>(const geometry_msgs::PoseStamped &amp;global_pose, const geometry_msgs::PoseStamped &amp;robot_vel, geometry_msgs::Twist &amp;cmd_vel, Eigen::Vector3f acc_lim, double sim_period, boost::function&lt; bool(Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f vel_samples)&gt; obstacle_check)</argsstring>
        <name>stopWithAccLimits</name>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>global_pose</declname>
        </param>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>robot_vel</declname>
        </param>
        <param>
          <type>geometry_msgs::Twist &amp;</type>
          <declname>cmd_vel</declname>
        </param>
        <param>
          <type>Eigen::Vector3f</type>
          <declname>acc_lim</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sim_period</declname>
        </param>
        <param>
          <type>boost::function&lt; bool(Eigen::Vector3f pos, Eigen::Vector3f vel, Eigen::Vector3f vel_samples)&gt;</type>
          <declname>obstacle_check</declname>
        </param>
        <briefdescription>
<para>Stop the robot taking into account acceleration limits. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_pose</parametername>
</parameternamelist>
<parameterdescription>
<para>The pose of the robot in the global frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>robot_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>The velocity of the robot </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd_vel</parametername>
</parameternamelist>
<parameterdescription>
<para>The velocity commands to be filled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if a valid trajectory was found, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="43" column="8" bodyfile="src/latched_stop_rotate_controller.cpp" bodystart="110" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classbase__local__planner_1_1LatchedStopRotateController_1a11a816ca2255215d346a5ea56e91edad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>base_local_planner::LatchedStopRotateController::~LatchedStopRotateController</definition>
        <argsstring>()</argsstring>
        <name>~LatchedStopRotateController</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="23" column="11" bodyfile="src/latched_stop_rotate_controller.cpp" bodystart="31" bodyend="31"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classbase__local__planner_1_1LatchedStopRotateController_1a8648f8df161c70441a60ec202a137b18" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double base_local_planner::LatchedStopRotateController::sign</definition>
        <argsstring>(double x)</argsstring>
        <name>sign</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="82" column="17" bodyfile="include/base_local_planner/latched_stop_rotate_controller.h" bodystart="82" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/base_local_planner/latched_stop_rotate_controller.h" line="20" column="34" bodyfile="include/base_local_planner/latched_stop_rotate_controller.h" bodystart="20" bodyend="90"/>
    <listofallmembers>
      <member refid="classbase__local__planner_1_1LatchedStopRotateController_1a5bd9394ca5cabf2a35526dcb193e36be" prot="public" virt="non-virtual"><scope>base_local_planner::LatchedStopRotateController</scope><name>computeVelocityCommandsStopRotate</name></member>
      <member refid="classbase__local__planner_1_1LatchedStopRotateController_1a296b387b74afe1c430f0dc6efb2f2ae8" prot="public" virt="non-virtual"><scope>base_local_planner::LatchedStopRotateController</scope><name>isGoalReached</name></member>
      <member refid="classbase__local__planner_1_1LatchedStopRotateController_1a22892ae258fb69ab1cbb78b3e076fba3" prot="public" virt="non-virtual"><scope>base_local_planner::LatchedStopRotateController</scope><name>isPositionReached</name></member>
      <member refid="classbase__local__planner_1_1LatchedStopRotateController_1adfd4e505101739501cf59d1a7129ced4" prot="private" virt="non-virtual"><scope>base_local_planner::LatchedStopRotateController</scope><name>latch_xy_goal_tolerance_</name></member>
      <member refid="classbase__local__planner_1_1LatchedStopRotateController_1a217e37ce23f57c28f157d2287d9ad02a" prot="public" virt="non-virtual"><scope>base_local_planner::LatchedStopRotateController</scope><name>LatchedStopRotateController</name></member>
      <member refid="classbase__local__planner_1_1LatchedStopRotateController_1af3b08514bca9dfc212b770a071f85b3b" prot="public" virt="non-virtual"><scope>base_local_planner::LatchedStopRotateController</scope><name>resetLatching</name></member>
      <member refid="classbase__local__planner_1_1LatchedStopRotateController_1a3f1784c0f8eb383822d41d0905cb6bda" prot="public" virt="non-virtual"><scope>base_local_planner::LatchedStopRotateController</scope><name>rotateToGoal</name></member>
      <member refid="classbase__local__planner_1_1LatchedStopRotateController_1afb20eb5fc414868654de760ad6666412" prot="private" virt="non-virtual"><scope>base_local_planner::LatchedStopRotateController</scope><name>rotating_to_goal_</name></member>
      <member refid="classbase__local__planner_1_1LatchedStopRotateController_1a8648f8df161c70441a60ec202a137b18" prot="private" virt="non-virtual"><scope>base_local_planner::LatchedStopRotateController</scope><name>sign</name></member>
      <member refid="classbase__local__planner_1_1LatchedStopRotateController_1ae204da0df3c727a7f655e7c12a7dae75" prot="public" virt="non-virtual"><scope>base_local_planner::LatchedStopRotateController</scope><name>stopWithAccLimits</name></member>
      <member refid="classbase__local__planner_1_1LatchedStopRotateController_1a7a965f0ef85f1103ad80b6bbfc0f2b1b" prot="private" virt="non-virtual"><scope>base_local_planner::LatchedStopRotateController</scope><name>xy_tolerance_latch_</name></member>
      <member refid="classbase__local__planner_1_1LatchedStopRotateController_1a11a816ca2255215d346a5ea56e91edad" prot="public" virt="virtual"><scope>base_local_planner::LatchedStopRotateController</scope><name>~LatchedStopRotateController</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
